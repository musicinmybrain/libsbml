#
# @file    TestXMLToken.py
# @brief   XMLToken unit tests
#
# @author  Akiya Jouraku (Python conversion)
# @author  Michael Hucka <mhucka@caltech.edu> 
# 
# ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
#
# DO NOT EDIT THIS FILE.
#
# This file was generated automatically by converting the file located at
# src/sbml/test/TestXMLToken.c
# using the conversion program dev/utilities/translateTests/translateTests.pl.
# Any changes made here will be lost the next time the file is regenerated.
#
# -----------------------------------------------------------------------------
# This file is part of libSBML.  Please visit http://sbml.org for more
# information about SBML, and the latest version of libSBML.
#
# Copyright 2005-2010 California Institute of Technology.
# Copyright 2002-2005 California Institute of Technology and
#                     Japan Science and Technology Corporation.
# 
# This library is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation.  A copy of the license agreement is provided
# in the file named "LICENSE.txt" included with this software distribution
# and also available online as http://sbml.org/software/libsbml/license.html
# -----------------------------------------------------------------------------

import sys
import unittest
import libsbml


class TestXMLToken(unittest.TestCase):


  def test_XMLToken_accessWithNULL(self):
    self.assertTrue( None.addAttr(None,None) == libsbml.LIBSBML_INVALID_OBJECT )
    self.assertTrue( None.addAttr(None,None,None,None) == libsbml.LIBSBML_INVALID_OBJECT )
    self.assertTrue( None.addAttr(None,None) == libsbml.LIBSBML_INVALID_OBJECT )
    self.assertTrue( None.addNamespace(None,None) == libsbml.LIBSBML_INVALID_OBJECT )
    self.assertTrue( None.append(None) == libsbml.LIBSBML_OPERATION_FAILED )
    self.assertTrue( None.clearAttributes() == libsbml.LIBSBML_INVALID_OBJECT )
    self.assertTrue( None.clearNamespaces() == libsbml.LIBSBML_INVALID_OBJECT )
    self.assertTrue( None.clone() == None )
    self.assertTrue( libsbml.XMLToken(None) == None )
    self.assertTrue( libsbml.XMLToken(None,None) == None )
    self.assertTrue( libsbml.XMLToken(None,None,None) == None )
    _dummyList = [ None ]; _dummyList[:] = []; del _dummyList
    self.assertTrue( None.getAttributes() == None )
    self.assertTrue( None.getAttributesLength() == 0 )
    self.assertTrue( None.getAttrIndex(None,None) == -1 )
    self.assertTrue( None.getAttrIndex(None) == -1 )
    self.assertTrue( None.getAttrName(0) == None )
    self.assertTrue( None.getAttrPrefix(0) == "" )
    self.assertTrue( None.getAttrPrefixedName(0) == "" )
    self.assertTrue( None.getAttrURI(0) == "" )
    self.assertTrue( None.getAttrValue(0) == "" )
    self.assertTrue( None.getAttrValue(None) == "" )
    self.assertTrue( None.getAttrValue(None,None) == "" )
    self.assertTrue( None.getAttrValue(None) == "" )
    self.assertTrue( None.getCharacters() == None )
    self.assertTrue( None.getColumn() == 0 )
    self.assertTrue( None.getLine() == 0 )
    self.assertTrue( None.getName() == "" )
    self.assertTrue( None.getNamespaceIndex(None) == -1 )
    self.assertTrue( None.getNamespaceIndexByPrefix(None) == -1 )
    self.assertTrue( None.getNamespacePrefix(0) == "" )
    self.assertTrue( None.getNamespacePrefix(None) == "" )
    self.assertTrue( None.getNamespaces() == None )
    self.assertTrue( None.getNamespacesLength() == 0 )
    self.assertTrue( None.getNamespaceURI(0) == "" )
    self.assertTrue( None.getNamespaceURI(None) == "" )
    self.assertTrue( None.getPrefix() == "" )
    self.assertTrue( None.getURI() == "" )
    self.assertTrue( None.hasAttr(0) == False )
    self.assertTrue( None.hasAttr(None) == False )
    self.assertTrue( None.hasAttr(None,None) == False )
    self.assertTrue( None.hasAttr(None) == False )
    self.assertTrue( None.hasNamespaceNS(None,None) == False )
    self.assertTrue( None.hasNamespacePrefix(None) == False )
    self.assertTrue( None.hasNamespaceURI(None) == False )
    self.assertTrue( None.isAttributesEmpty() == False )
    self.assertTrue( None.isElement() == False )
    self.assertTrue( None.isEnd() == False )
    self.assertTrue( None.isEndFor(None) == False )
    self.assertTrue( None.isEOF() == False )
    self.assertTrue( None.isNamespacesEmpty() == False )
    self.assertTrue( None.isStart() == False )
    self.assertTrue( None.isText() == False )
    self.assertTrue( None.removeAttr(0) == libsbml.LIBSBML_INVALID_OBJECT )
    self.assertTrue( None.removeAttr(None) == libsbml.LIBSBML_INVALID_OBJECT )
    self.assertTrue( None.removeAttr(None,None) == libsbml.LIBSBML_INVALID_OBJECT )
    self.assertTrue( None.removeAttr(None) == libsbml.LIBSBML_INVALID_OBJECT )
    self.assertTrue( None.removeNamespace(0) == libsbml.LIBSBML_INVALID_OBJECT )
    self.assertTrue( None.removeNamespace(None) == libsbml.LIBSBML_INVALID_OBJECT )
    self.assertTrue( None.setAttributes(None) == libsbml.LIBSBML_INVALID_OBJECT )
    self.assertTrue( None.setEnd() == libsbml.LIBSBML_INVALID_OBJECT )
    self.assertTrue( None.setEOF() == libsbml.LIBSBML_INVALID_OBJECT )
    self.assertTrue( None.setNamespaces(None) == libsbml.LIBSBML_INVALID_OBJECT )
    self.assertTrue( None.setTriple(None) == libsbml.LIBSBML_INVALID_OBJECT )
    self.assertTrue( None.unsetEnd() == libsbml.LIBSBML_INVALID_OBJECT )
    pass  

  def test_XMLToken_attribute_add_remove(self):
    triple = libsbml.XMLTriple("test","","")
    attr = libsbml.XMLAttributes()
    token = libsbml.XMLToken(triple,attr)
    xt1 = libsbml.XMLTriple("name1", "http://name1.org/", "p1")
    xt2 = libsbml.XMLTriple("name2", "http://name2.org/", "p2")
    xt3 = libsbml.XMLTriple("name3", "http://name3.org/", "p3")
    xt1a = libsbml.XMLTriple("name1", "http://name1a.org/", "p1a")
    xt2a = libsbml.XMLTriple("name2", "http://name2a.org/", "p2a")
    token.addAttr( "name1", "val1", "http://name1.org/", "p1")
    token.addAttr(xt2, "val2")
    self.assertTrue( token.getAttributesLength() == 2 )
    self.assertTrue( token.isAttributesEmpty() == False )
    test = token.getAttrName(0)
    self.assertTrue( (  "name1" != test ) == False )
    test = None
    test = token.getAttrValue(0)
    self.assertTrue( (  "val1"  != test ) == False )
    test = None
    test = token.getAttrURI(0)
    self.assertTrue( (  "http://name1.org/" != test ) == False )
    test = None
    test = token.getAttrPrefix(0)
    self.assertTrue( (  "p1"    != test ) == False )
    test = None
    test = token.getAttrName(1)
    self.assertTrue( (  "name2" != test ) == False )
    test = None
    test = token.getAttrValue(1)
    self.assertTrue( (  "val2"  != test ) == False )
    test = None
    test = token.getAttrURI(1)
    self.assertTrue( (  "http://name2.org/" != test ) == False )
    test = None
    test = token.getAttrPrefix(1)
    self.assertTrue( (  "p2"    != test ) == False )
    test = None
    self.assertTrue( token.getAttrValue( "name1") == "" )
    self.assertTrue( token.getAttrValue( "name2") == "" )
    test = token.getAttrValue( "name1", "http://name1.org/")
    self.assertTrue( (  "val1"  != test ) == False )
    test = None
    test = token.getAttrValue( "name2", "http://name2.org/")
    self.assertTrue( (  "val2"  != test ) == False )
    test = None
    test = token.getAttrValue(xt1)
    self.assertTrue( (  "val1"  != test ) == False )
    test = None
    test = token.getAttrValue(xt2)
    self.assertTrue( (  "val2"  != test ) == False )
    test = None
    self.assertTrue( token.hasAttr(-1) == False )
    self.assertTrue( token.hasAttr(2) == False )
    self.assertTrue( token.hasAttr(0) == True )
    self.assertTrue( token.hasAttr( "name1", "http://name1.org/") == True )
    self.assertTrue( token.hasAttr( "name2", "http://name2.org/") == True )
    self.assertTrue( token.hasAttr( "name3", "http://name3.org/") == False )
    self.assertTrue( token.hasAttr(xt1) == True )
    self.assertTrue( token.hasAttr(xt2) == True )
    self.assertTrue( token.hasAttr(xt3) == False )
    token.addAttr( "noprefix", "val3")
    self.assertTrue( token.getAttributesLength() == 3 )
    self.assertTrue( token.isAttributesEmpty() == False )
    test = token.getAttrName(2)
    self.assertTrue( (  "noprefix" != test ) == False )
    test = None
    test = token.getAttrValue(2)
    self.assertTrue( (  "val3"     != test ) == False )
    test = None
    self.assertTrue( token.getAttrURI(2) == "" )
    self.assertTrue( token.getAttrPrefix(2) == "" )
    test = token.getAttrValue( "noprefix")
    self.assertTrue( (      "val3"  != test ) == False )
    test = None
    test = token.getAttrValue( "noprefix", "")
    self.assertTrue( (  "val3"  != test ) == False )
    test = None
    self.assertTrue( token.hasAttr( "noprefix"    ) == True )
    self.assertTrue( token.hasAttr( "noprefix", "") == True )
    token.addAttr(xt1, "mval1")
    token.addAttr( "name2", "mval2", "http://name2.org/", "p2")
    self.assertTrue( token.getAttributesLength() == 3 )
    self.assertTrue( token.isAttributesEmpty() == False )
    test = token.getAttrName(0)
    self.assertTrue( (  "name1" != test ) == False )
    test = None
    test = token.getAttrValue(0)
    self.assertTrue( (  "mval1" != test ) == False )
    test = None
    test = token.getAttrURI(0)
    self.assertTrue( (  "http://name1.org/" != test ) == False )
    test = None
    test = token.getAttrPrefix(0)
    self.assertTrue( (  "p1"    != test ) == False )
    test = None
    test = token.getAttrName(1)
    self.assertTrue( (  "name2" != test ) == False )
    test = None
    test = token.getAttrValue(1)
    self.assertTrue( (  "mval2" != test ) == False )
    test = None
    test = token.getAttrURI(1)
    self.assertTrue( (  "http://name2.org/" != test ) == False )
    test = None
    test = token.getAttrPrefix(1)
    self.assertTrue( (  "p2"    != test ) == False )
    test = None
    self.assertTrue( token.hasAttr(xt1) == True )
    self.assertTrue( token.hasAttr( "name1", "http://name1.org/") == True )
    token.addAttr( "noprefix", "mval3")
    self.assertTrue( token.getAttributesLength() == 3 )
    self.assertTrue( token.isAttributesEmpty() == False )
    test = token.getAttrName(2)
    self.assertTrue( (  "noprefix" != test ) == False )
    test = None
    test = token.getAttrValue(2)
    self.assertTrue( (  "mval3"    != test ) == False )
    test = None
    self.assertTrue( token.getAttrURI(2) == "" )
    self.assertTrue( token.getAttrPrefix(2) == "" )
    self.assertTrue( token.hasAttr( "noprefix") == True )
    self.assertTrue( token.hasAttr( "noprefix", "") == True )
    token.addAttr(xt1a, "val1a")
    token.addAttr(xt2a, "val2a")
    self.assertTrue( token.getAttributesLength() == 5 )
    test = token.getAttrName(3)
    self.assertTrue( (  "name1" != test ) == False )
    test = None
    test = token.getAttrValue(3)
    self.assertTrue( (  "val1a" != test ) == False )
    test = None
    test = token.getAttrURI(3)
    self.assertTrue( (  "http://name1a.org/" != test ) == False )
    test = None
    test = token.getAttrPrefix(3)
    self.assertTrue( (  "p1a" != test ) == False )
    test = None
    test = token.getAttrName(4)
    self.assertTrue( (  "name2" != test ) == False )
    test = None
    test = token.getAttrValue(4)
    self.assertTrue( (  "val2a" != test ) == False )
    test = None
    test = token.getAttrURI(4)
    self.assertTrue( (  "http://name2a.org/" != test ) == False )
    test = None
    test = token.getAttrPrefix(4)
    self.assertTrue( (  "p2a" != test ) == False )
    test = None
    test = token.getAttrValue( "name1", "http://name1a.org/")
    self.assertTrue( (  "val1a"  != test ) == False )
    test = None
    test = token.getAttrValue( "name2", "http://name2a.org/")
    self.assertTrue( (  "val2a"  != test ) == False )
    test = None
    test = token.getAttrValue(xt1a)
    self.assertTrue( (  "val1a"  != test ) == False )
    test = None
    test = token.getAttrValue(xt2a)
    self.assertTrue( (  "val2a"  != test ) == False )
    test = None
    token.removeAttr(xt1a)
    token.removeAttr(xt2a)
    self.assertTrue( token.getAttributesLength() == 3 )
    token.removeAttr( "name1", "http://name1.org/")
    self.assertTrue( token.getAttributesLength() == 2 )
    self.assertTrue( token.isAttributesEmpty() == False )
    test = token.getAttrName(0)
    self.assertTrue( (  "name2" != test ) == False )
    test = None
    test = token.getAttrValue(0)
    self.assertTrue( (  "mval2" != test ) == False )
    test = None
    test = token.getAttrURI(0)
    self.assertTrue( (  "http://name2.org/" != test ) == False )
    test = None
    test = token.getAttrPrefix(0)
    self.assertTrue( (  "p2" != test ) == False )
    test = None
    test = token.getAttrName(1)
    self.assertTrue( (  "noprefix" != test ) == False )
    test = None
    test = token.getAttrValue(1)
    self.assertTrue( (  "mval3" != test ) == False )
    test = None
    self.assertTrue( token.getAttrURI(1) == "" )
    self.assertTrue( token.getAttrPrefix(1) == "" )
    self.assertTrue( token.hasAttr( "name1", "http://name1.org/") == False )
    token.removeAttr(xt2)
    self.assertTrue( token.getAttributesLength() == 1 )
    self.assertTrue( token.isAttributesEmpty() == False )
    test = token.getAttrName(0)
    self.assertTrue( (  "noprefix" != test ) == False )
    test = None
    test = token.getAttrValue(0)
    self.assertTrue( (  "mval3" != test ) == False )
    test = None
    self.assertTrue( token.getAttrURI(0) == "" )
    self.assertTrue( token.getAttrPrefix(0) == "" )
    self.assertTrue( token.hasAttr(xt2) == False )
    self.assertTrue( token.hasAttr( "name2", "http://name2.org/") == False )
    token.removeAttr( "noprefix")
    self.assertTrue( token.getAttributesLength() == 0 )
    self.assertTrue( token.isAttributesEmpty() == True )
    self.assertTrue( token.hasAttr( "noprefix"    ) == False )
    self.assertTrue( token.hasAttr( "noprefix", "") == False )
    _dummyList = [ token ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ xt1 ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ xt2 ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ xt3 ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ xt1a ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ xt2a ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ attr ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_XMLToken_attribute_set_clear(self):
    triple = libsbml.XMLTriple("test","","")
    attr = libsbml.XMLAttributes()
    token = libsbml.XMLToken(triple,attr)
    nattr = libsbml.XMLAttributes()
    xt1 = libsbml.XMLTriple("name1", "http://name1.org/", "p1")
    xt2 = libsbml.XMLTriple("name2", "http://name2.org/", "p2")
    xt3 = libsbml.XMLTriple("name3", "http://name3.org/", "p3")
    xt4 = libsbml.XMLTriple("name4", "http://name4.org/", "p4")
    xt5 = libsbml.XMLTriple("name5", "http://name5.org/", "p5")
    nattr.add(xt1, "val1")
    nattr.add(xt2, "val2")
    nattr.add(xt3, "val3")
    nattr.add(xt4, "val4")
    nattr.add(xt5, "val5")
    token.setAttributes(nattr)
    self.assertTrue( token.getAttributesLength() == 5 )
    self.assertTrue( token.isAttributesEmpty() == False )
    test = token.getAttrName(0)
    self.assertTrue( (  "name1" != test ) == False )
    test = token.getAttrValue(0)
    self.assertTrue( (  "val1"  != test ) == False )
    test = token.getAttrURI(0)
    self.assertTrue( (  "http://name1.org/" != test ) == False )
    test = token.getAttrPrefix(0)
    self.assertTrue( (  "p1"    != test ) == False )
    test = token.getAttrName(1)
    self.assertTrue( (  "name2" != test ) == False )
    test = token.getAttrValue(1)
    self.assertTrue( (  "val2"  != test ) == False )
    test = token.getAttrURI(1)
    self.assertTrue( (  "http://name2.org/" != test ) == False )
    test = token.getAttrPrefix(1)
    self.assertTrue( (  "p2"    != test ) == False )
    test = token.getAttrName(2)
    self.assertTrue( (  "name3" != test ) == False )
    test = token.getAttrValue(2)
    self.assertTrue( (  "val3"  != test ) == False )
    test = token.getAttrURI(2)
    self.assertTrue( (  "http://name3.org/" != test ) == False )
    test = token.getAttrPrefix(2)
    self.assertTrue( (  "p3"    != test ) == False )
    test = token.getAttrName(3)
    self.assertTrue( (  "name4" != test ) == False )
    test = token.getAttrValue(3)
    self.assertTrue( (  "val4"  != test ) == False )
    test = token.getAttrURI(3)
    self.assertTrue( (  "http://name4.org/" != test ) == False )
    test = token.getAttrPrefix(3)
    self.assertTrue( (  "p4"    != test ) == False )
    test = token.getAttrName(4)
    self.assertTrue( (  "name5" != test ) == False )
    test = token.getAttrValue(4)
    self.assertTrue( (  "val5"  != test ) == False )
    test = token.getAttrURI(4)
    self.assertTrue( (  "http://name5.org/" != test ) == False )
    test = token.getAttrPrefix(4)
    self.assertTrue( (  "p5"    != test ) == False )
    ntriple = libsbml.XMLTriple("test2","http://test2.org/","p2")
    token.setTriple(ntriple)
    test1 = token.getName()
    self.assertTrue( (    "test2" != test1 ) == False )
    test1 = token.getURI()
    self.assertTrue( (     "http://test2.org/" != test1 ) == False )
    test1 = token.getPrefix()
    self.assertTrue( (  "p2" != test1 ) == False )
    token.clearAttributes()
    self.assertTrue( token.getAttributesLength() == 0 )
    self.assertTrue( token.isAttributesEmpty() != False )
    _dummyList = [ nattr ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ ntriple ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ attr ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ token ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ xt1 ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ xt2 ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ xt3 ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ xt4 ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ xt5 ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_XMLToken_chars(self):
    token = libsbml.XMLToken("This is text")
    self.assertTrue( token.isElement() == False )
    self.assertTrue( token.isEnd() == False )
    self.assertTrue( token.isStart() == False )
    self.assertTrue( token.isText() == True )
    self.assertTrue( token.isEOF() == False )
    self.assertTrue( (  "This is text" != token.getCharacters() ) == False )
    self.assertTrue( token.append( " and more text") == 0 )
    self.assertTrue( (  "This is text and more text" != token.getCharacters() ) == False )
    self.assertTrue( token.setCharacters( "This is text too.") == 0 )
    self.assertTrue( (  "This is text too." != token.getCharacters() ) == False )
    _dummyList = [ token ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_XMLToken_create(self):
    token = libsbml.XMLToken()
    self.assertTrue( token != None )
    _dummyList = [ token ]; _dummyList[:] = []; del _dummyList
    triple = libsbml.XMLTriple("attr", "uri", "prefix")
    token = libsbml.XMLToken(triple)
    self.assertTrue( token != None )
    self.assertTrue( (  "attr" != token.getName() ) == False )
    self.assertTrue( (  "prefix" != token.getPrefix() ) == False )
    self.assertTrue( (  "uri" != token.getURI() ) == False )
    _dummyList = [ token ]; _dummyList[:] = []; del _dummyList
    attr = libsbml.XMLAttributes()
    self.assertTrue( attr != None )
    attr.add( "attr2", "value")
    token = libsbml.XMLToken(triple,attr)
    self.assertTrue( token != None )
    returnattr = token.getAttributes()
    name = returnattr.getName(0)
    self.assertTrue( (  "attr2" != name ) == False )
    name = None
    _dummyList = [ token ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ attr ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_XMLToken_fields(self):
    triple = libsbml.XMLTriple("attr", "uri", "prefix")
    token = libsbml.XMLToken(triple)
    self.assertTrue( token.isElement() == True )
    self.assertTrue( token.isEnd() == True )
    self.assertTrue( token.isStart() == False )
    self.assertTrue( token.isText() == False )
    self.assertTrue( token.isEOF() == False )
    self.assertTrue( (  "attr" != token.getName() ) == False )
    self.assertTrue( (  "uri" != token.getURI() ) == False )
    self.assertTrue( (  "prefix" != token.getPrefix() ) == False )
    _dummyList = [ token ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_XMLToken_namespace_add(self):
    triple = libsbml.XMLTriple("test","","")
    attr = libsbml.XMLAttributes()
    token = libsbml.XMLToken(triple,attr)
    self.assertTrue( token.getNamespacesLength() == 0 )
    self.assertTrue( token.isNamespacesEmpty() == True )
    token.addNamespace( "http://test1.org/", "test1")
    self.assertTrue( token.getNamespacesLength() == 1 )
    self.assertTrue( token.isNamespacesEmpty() == False )
    token.addNamespace( "http://test2.org/", "test2")
    self.assertTrue( token.getNamespacesLength() == 2 )
    self.assertTrue( token.isNamespacesEmpty() == False )
    token.addNamespace( "http://test1.org/", "test1a")
    self.assertTrue( token.getNamespacesLength() == 3 )
    self.assertTrue( token.isNamespacesEmpty() == False )
    token.addNamespace( "http://test1.org/", "test1a")
    self.assertTrue( token.getNamespacesLength() == 3 )
    self.assertTrue( token.isNamespacesEmpty() == False )
    self.assertFalse(token.getNamespaceIndex( "http://test1.org/") == -1)
    _dummyList = [ token ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ attr ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_XMLToken_namespace_get(self):
    triple = libsbml.XMLTriple("test","","")
    attr = libsbml.XMLAttributes()
    token = libsbml.XMLToken(triple,attr)
    token.addNamespace( "http://test1.org/", "test1")
    token.addNamespace( "http://test2.org/", "test2")
    token.addNamespace( "http://test3.org/", "test3")
    token.addNamespace( "http://test4.org/", "test4")
    token.addNamespace( "http://test5.org/", "test5")
    token.addNamespace( "http://test6.org/", "test6")
    token.addNamespace( "http://test7.org/", "test7")
    token.addNamespace( "http://test8.org/", "test8")
    token.addNamespace( "http://test9.org/", "test9")
    self.assertTrue( token.getNamespacesLength() == 9 )
    self.assertTrue( token.getNamespaceIndex( "http://test1.org/") == 0 )
    test = token.getNamespacePrefix(1)
    self.assertTrue( (  "test2" != test ) == False )
    test = None
    test = token.getNamespacePrefix( "http://test1.org/")
    self.assertTrue( (  "test1" != test ) == False )
    test = None
    test = token.getNamespaceURI(1)
    self.assertTrue( (  "http://test2.org/" != test ) == False )
    test = None
    test = token.getNamespaceURI( "test2")
    self.assertTrue( (  "http://test2.org/" != test ) == False )
    test = None
    self.assertTrue( token.getNamespaceIndex( "http://test1.org/") == 0 )
    self.assertTrue( token.getNamespaceIndex( "http://test2.org/") == 1 )
    self.assertTrue( token.getNamespaceIndex( "http://test5.org/") == 4 )
    self.assertTrue( token.getNamespaceIndex( "http://test9.org/") == 8 )
    self.assertTrue( token.getNamespaceIndex( "http://testX.org/") == -1 )
    self.assertTrue( token.hasNamespaceURI( "http://test1.org/") != False )
    self.assertTrue( token.hasNamespaceURI( "http://test2.org/") != False )
    self.assertTrue( token.hasNamespaceURI( "http://test5.org/") != False )
    self.assertTrue( token.hasNamespaceURI( "http://test9.org/") != False )
    self.assertTrue( token.hasNamespaceURI( "http://testX.org/") == False )
    self.assertTrue( token.getNamespaceIndexByPrefix( "test1") == 0 )
    self.assertTrue( token.getNamespaceIndexByPrefix( "test5") == 4 )
    self.assertTrue( token.getNamespaceIndexByPrefix( "test9") == 8 )
    self.assertTrue( token.getNamespaceIndexByPrefix( "testX") == -1 )
    self.assertTrue( token.hasNamespacePrefix( "test1") != False )
    self.assertTrue( token.hasNamespacePrefix( "test5") != False )
    self.assertTrue( token.hasNamespacePrefix( "test9") != False )
    self.assertTrue( token.hasNamespacePrefix( "testX") == False )
    self.assertTrue( token.hasNamespaceNS( "http://test1.org/", "test1") != False )
    self.assertTrue( token.hasNamespaceNS( "http://test5.org/", "test5") != False )
    self.assertTrue( token.hasNamespaceNS( "http://test9.org/", "test9") != False )
    self.assertTrue( token.hasNamespaceNS( "http://testX.org/", "testX") == False )
    _dummyList = [ token ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ attr ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_XMLToken_namespace_remove(self):
    triple = libsbml.XMLTriple("test","","")
    attr = libsbml.XMLAttributes()
    token = libsbml.XMLToken(triple,attr)
    token.addNamespace( "http://test1.org/", "test1")
    token.addNamespace( "http://test2.org/", "test2")
    token.addNamespace( "http://test3.org/", "test3")
    token.addNamespace( "http://test4.org/", "test4")
    token.addNamespace( "http://test5.org/", "test5")
    self.assertTrue( token.getNamespacesLength() == 5 )
    token.removeNamespace(4)
    self.assertTrue( token.getNamespacesLength() == 4 )
    token.removeNamespace(3)
    self.assertTrue( token.getNamespacesLength() == 3 )
    token.removeNamespace(2)
    self.assertTrue( token.getNamespacesLength() == 2 )
    token.removeNamespace(1)
    self.assertTrue( token.getNamespacesLength() == 1 )
    token.removeNamespace(0)
    self.assertTrue( token.getNamespacesLength() == 0 )
    token.addNamespace( "http://test1.org/", "test1")
    token.addNamespace( "http://test2.org/", "test2")
    token.addNamespace( "http://test3.org/", "test3")
    token.addNamespace( "http://test4.org/", "test4")
    token.addNamespace( "http://test5.org/", "test5")
    self.assertTrue( token.getNamespacesLength() == 5 )
    token.removeNamespace(0)
    self.assertTrue( token.getNamespacesLength() == 4 )
    token.removeNamespace(0)
    self.assertTrue( token.getNamespacesLength() == 3 )
    token.removeNamespace(0)
    self.assertTrue( token.getNamespacesLength() == 2 )
    token.removeNamespace(0)
    self.assertTrue( token.getNamespacesLength() == 1 )
    token.removeNamespace(0)
    self.assertTrue( token.getNamespacesLength() == 0 )
    _dummyList = [ token ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ attr ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_XMLToken_namespace_remove_by_prefix(self):
    triple = libsbml.XMLTriple("test","","")
    attr = libsbml.XMLAttributes()
    token = libsbml.XMLToken(triple,attr)
    token.addNamespace( "http://test1.org/", "test1")
    token.addNamespace( "http://test2.org/", "test2")
    token.addNamespace( "http://test3.org/", "test3")
    token.addNamespace( "http://test4.org/", "test4")
    token.addNamespace( "http://test5.org/", "test5")
    self.assertTrue( token.getNamespacesLength() == 5 )
    token.removeNamespace( "test1")
    self.assertTrue( token.getNamespacesLength() == 4 )
    token.removeNamespace( "test2")
    self.assertTrue( token.getNamespacesLength() == 3 )
    token.removeNamespace( "test3")
    self.assertTrue( token.getNamespacesLength() == 2 )
    token.removeNamespace( "test4")
    self.assertTrue( token.getNamespacesLength() == 1 )
    token.removeNamespace( "test5")
    self.assertTrue( token.getNamespacesLength() == 0 )
    token.addNamespace( "http://test1.org/", "test1")
    token.addNamespace( "http://test2.org/", "test2")
    token.addNamespace( "http://test3.org/", "test3")
    token.addNamespace( "http://test4.org/", "test4")
    token.addNamespace( "http://test5.org/", "test5")
    self.assertTrue( token.getNamespacesLength() == 5 )
    token.removeNamespace( "test5")
    self.assertTrue( token.getNamespacesLength() == 4 )
    token.removeNamespace( "test4")
    self.assertTrue( token.getNamespacesLength() == 3 )
    token.removeNamespace( "test3")
    self.assertTrue( token.getNamespacesLength() == 2 )
    token.removeNamespace( "test2")
    self.assertTrue( token.getNamespacesLength() == 1 )
    token.removeNamespace( "test1")
    self.assertTrue( token.getNamespacesLength() == 0 )
    token.addNamespace( "http://test1.org/", "test1")
    token.addNamespace( "http://test2.org/", "test2")
    token.addNamespace( "http://test3.org/", "test3")
    token.addNamespace( "http://test4.org/", "test4")
    token.addNamespace( "http://test5.org/", "test5")
    self.assertTrue( token.getNamespacesLength() == 5 )
    token.removeNamespace( "test3")
    self.assertTrue( token.getNamespacesLength() == 4 )
    token.removeNamespace( "test1")
    self.assertTrue( token.getNamespacesLength() == 3 )
    token.removeNamespace( "test4")
    self.assertTrue( token.getNamespacesLength() == 2 )
    token.removeNamespace( "test5")
    self.assertTrue( token.getNamespacesLength() == 1 )
    token.removeNamespace( "test2")
    self.assertTrue( token.getNamespacesLength() == 0 )
    _dummyList = [ token ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ attr ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_XMLToken_namespace_set_clear(self):
    triple = libsbml.XMLTriple("test","","")
    attr = libsbml.XMLAttributes()
    token = libsbml.XMLToken(triple,attr)
    ns = libsbml.XMLNamespaces()
    self.assertTrue( token.getNamespacesLength() == 0 )
    self.assertTrue( token.isNamespacesEmpty() == True )
    ns.add( "http://test1.org/", "test1")
    ns.add( "http://test2.org/", "test2")
    ns.add( "http://test3.org/", "test3")
    ns.add( "http://test4.org/", "test4")
    ns.add( "http://test5.org/", "test5")
    token.setNamespaces(ns)
    self.assertTrue( token.getNamespacesLength() == 5 )
    self.assertTrue( token.isNamespacesEmpty() == False )
    test = token.getNamespacePrefix(0)
    self.assertTrue( (  "test1" != test ) == False )
    test = None
    test = token.getNamespacePrefix(1)
    self.assertTrue( (  "test2" != test ) == False )
    test = None
    test = token.getNamespacePrefix(2)
    self.assertTrue( (  "test3" != test ) == False )
    test = None
    test = token.getNamespacePrefix(3)
    self.assertTrue( (  "test4" != test ) == False )
    test = None
    test = token.getNamespacePrefix(4)
    self.assertTrue( (  "test5" != test ) == False )
    test = None
    test = token.getNamespaceURI(0)
    self.assertTrue( (  "http://test1.org/" != test ) == False )
    test = None
    test = token.getNamespaceURI(1)
    self.assertTrue( (  "http://test2.org/" != test ) == False )
    test = None
    test = token.getNamespaceURI(2)
    self.assertTrue( (  "http://test3.org/" != test ) == False )
    test = None
    test = token.getNamespaceURI(3)
    self.assertTrue( (  "http://test4.org/" != test ) == False )
    test = None
    test = token.getNamespaceURI(4)
    self.assertTrue( (  "http://test5.org/" != test ) == False )
    test = None
    token.clearNamespaces()
    self.assertTrue( token.getNamespacesLength() == 0 )
    _dummyList = [ ns ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ token ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ triple ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ attr ]; _dummyList[:] = []; del _dummyList
    pass  

def suite():
  suite = unittest.TestSuite()
  suite.addTest(unittest.makeSuite(TestXMLToken))

  return suite

if __name__ == "__main__":
  if unittest.TextTestRunner(verbosity=1).run(suite()).wasSuccessful() :
    sys.exit(0)
  else:
    sys.exit(1)
