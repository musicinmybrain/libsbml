#
# @file    TestSBMLConvertFromL3V2.py
# @brief   SBMLConvert unit tests for strict conversion from L3V2
#
# @author  Akiya Jouraku (Python conversion)
# @author  Sarah Keating 
# 
# ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
#
# DO NOT EDIT THIS FILE.
#
# This file was generated automatically by converting the file located at
# src/sbml/test/TestSBMLConvertFromL3V2.cpp
# using the conversion program dev/utilities/translateTests/translateTests.pl.
# Any changes made here will be lost the next time the file is regenerated.
#
# -----------------------------------------------------------------------------
# This file is part of libSBML.  Please visit http://sbml.org for more
# information about SBML, and the latest version of libSBML.
#
# Copyright 2005-2010 California Institute of Technology.
# Copyright 2002-2005 California Institute of Technology and
#                     Japan Science and Technology Corporation.
# 
# This library is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation.  A copy of the license agreement is provided
# in the file named "LICENSE.txt" included with this software distribution
# and also available online as http://sbml.org/software/libsbml/license.html
# -----------------------------------------------------------------------------

import sys
import unittest
import libsbml


class TestSBMLConvertFromL3V2(unittest.TestCase):


  def test_SBMLConvertFromL3V2_convertEmptyLO_nonstrict(self):
    expected = wrapString("<model>\n" + 
    "  <listOfParameters>\n" + 
    "    <annotation>some annotation</annotation>\n" + 
    "  </listOfParameters>\n" + 
    "</model>")
    expected1 = + "<model/>"
    doc = libsbml.SBMLDocument(3,2)
    m = doc.createModel()
    lo = m.getListOfParameters()
    lo.setAnnotation("some annotation")
    self.assertTrue( doc.getLevel() == 3 )
    self.assertTrue( doc.getVersion() == 2 )
    self.assertTrue( lo.getLevel() == 3 )
    self.assertTrue( lo.getVersion() == 2 )
    self.assertTrue( lo.isSetAnnotation() == True )
    sbml = m.toSBML()
    self.assertEqual( True, self.equals(expected,sbml) )
    sbml = None
    done = doc.setLevelAndVersion(2,4,False)
    self.assertTrue( done == True )
    self.assertTrue( doc.getErrorLog().contains(EmptyListOfElementNotSupported) == True )
    self.assertTrue( doc.getLevel() == 2 )
    self.assertTrue( doc.getVersion() == 4 )
    self.assertTrue( doc.getModel().getListOfParameters().getLevel() == 2 )
    self.assertTrue( doc.getModel().getListOfParameters().getVersion() == 4 )
    m1 = doc.getModel()
    sbml = m1.toSBML()
    self.assertEqual( True, self.equals(expected1,sbml) )
    sbml = None
    doc = None
    pass  

  def test_SBMLConvertFromL3V2_convertEmptyLO_strict(self):
    expected = wrapString("<model>\n" + 
    "  <listOfParameters>\n" + 
    "    <annotation>some annotation</annotation>\n" + 
    "  </listOfParameters>\n" + 
    "</model>")
    expected1 = + "<model/>"
    doc = libsbml.SBMLDocument(3,2)
    m = doc.createModel()
    lo = m.getListOfParameters()
    lo.setAnnotation("some annotation")
    self.assertTrue( doc.getLevel() == 3 )
    self.assertTrue( doc.getVersion() == 2 )
    self.assertTrue( lo.getLevel() == 3 )
    self.assertTrue( lo.getVersion() == 2 )
    self.assertTrue( lo.isSetAnnotation() == True )
    sbml = m.toSBML()
    self.assertEqual( True, self.equals(expected,sbml) )
    sbml = None
    done = doc.setLevelAndVersion(2,4,True)
    self.assertTrue( done == True )
    self.assertTrue( doc.getErrorLog().contains(EmptyListOfElementNotSupported) == True )
    self.assertTrue( doc.getLevel() == 2 )
    self.assertTrue( doc.getVersion() == 4 )
    self.assertTrue( doc.getModel().getListOfParameters().getLevel() == 2 )
    self.assertTrue( doc.getModel().getListOfParameters().getVersion() == 4 )
    m1 = doc.getModel()
    sbml = m1.toSBML()
    self.assertEqual( True, self.equals(expected1,sbml) )
    sbml = None
    doc = None
    pass  

  def test_SBMLConvertFromL3V2_convertIA_nonstrict(self):
    doc = libsbml.SBMLDocument(3,2)
    m = doc.createModel()
    p = m.createParameter()
    p.setId("p")
    p.setConstant(False)
    ar = m.createInitialAssignment()
    ar.setSymbol("p")
    math =  "2*3";
    node = .parseL3Formula()
    ar.setMath(node)
    node = None
    self.assertTrue( doc.getLevel() == 3 )
    self.assertTrue( doc.getVersion() == 2 )
    self.assertTrue( ar.getLevel() == 3 )
    self.assertTrue( ar.getVersion() == 2 )
    self.assertTrue( ar.isSetMath() == True )
    self.assertTrue( ar.getMath().usesL3V2MathConstructs() == False )
    self.assertTrue( m.getNumInitialAssignments() == 1 )
    self.assertTrue( p.isSetValue() == False )
    done = doc.setLevelAndVersion(2,4,False)
    self.assertTrue( done == True )
    self.assertTrue( doc.getErrorLog().contains(ConvertibleMathInitialAssignment) == False )
    self.assertTrue( doc.getLevel() == 2 )
    self.assertTrue( doc.getVersion() == 4 )
    self.assertTrue( doc.getModel().getParameter(0).getLevel() == 2 )
    self.assertTrue( doc.getModel().getParameter(0).getVersion() == 4 )
    self.assertTrue( m.getNumInitialAssignments() == 1 )
    node1 = doc.getModel().getInitialAssignment(0).getMath()
    str = node1.formulaToL3String()
    self.assertTrue((  "2 * 3" == str ))
    self.assertTrue( doc.getModel().getParameter(0).isSetValue() == False )
    doc = None
    pass  

  def test_SBMLConvertFromL3V2_convertIA_strict(self):
    doc = libsbml.SBMLDocument(3,2)
    m = doc.createModel()
    p = m.createParameter()
    p.setId("p")
    p.setConstant(False)
    ar = m.createInitialAssignment()
    ar.setSymbol("p")
    math =  "2*3";
    node = .parseL3Formula()
    ar.setMath(node)
    node = None
    self.assertTrue( doc.getLevel() == 3 )
    self.assertTrue( doc.getVersion() == 2 )
    self.assertTrue( ar.getLevel() == 3 )
    self.assertTrue( ar.getVersion() == 2 )
    self.assertTrue( ar.isSetMath() == True )
    self.assertTrue( ar.getMath().usesL3V2MathConstructs() == False )
    self.assertTrue( m.getNumInitialAssignments() == 1 )
    self.assertTrue( p.isSetValue() == False )
    done = doc.setLevelAndVersion(2,4,True)
    self.assertTrue( done == True )
    self.assertTrue( doc.getErrorLog().contains(ConvertibleMathInitialAssignment) == False )
    self.assertTrue( doc.getLevel() == 2 )
    self.assertTrue( doc.getVersion() == 4 )
    self.assertTrue( doc.getModel().getParameter(0).getLevel() == 2 )
    self.assertTrue( doc.getModel().getParameter(0).getVersion() == 4 )
    self.assertTrue( m.getNumInitialAssignments() == 1 )
    node1 = doc.getModel().getInitialAssignment(0).getMath()
    str = node1.formulaToL3String()
    self.assertTrue((  "2 * 3" == str ))
    self.assertTrue( doc.getModel().getParameter(0).isSetValue() == False )
    doc = None
    pass  

  def test_SBMLConvertFromL3V2_convertIAnewMath1_nonstrict(self):
    doc = libsbml.SBMLDocument(3,2)
    m = doc.createModel()
    p = m.createParameter()
    p.setId("p")
    p.setConstant(False)
    p1 = m.createParameter()
    p1.setId("x")
    p1.setConstant(True)
    p1.setValue(1)
    ar = m.createInitialAssignment()
    ar.setSymbol("p")
    math =  "rateOf(x)";
    node = .parseL3Formula()
    ar.setMath(node)
    node = None
    self.assertTrue( doc.getLevel() == 3 )
    self.assertTrue( doc.getVersion() == 2 )
    self.assertTrue( ar.getLevel() == 3 )
    self.assertTrue( ar.getVersion() == 2 )
    self.assertTrue( ar.isSetMath() == True )
    self.assertTrue( ar.getMath().usesL3V2MathConstructs() == True )
    self.assertTrue( ar.getMath().usesRateOf() == True )
    self.assertTrue( m.getNumInitialAssignments() == 1 )
    self.assertTrue( p.isSetValue() == False )
    done = doc.setLevelAndVersion(2,4,False)
    self.assertTrue( done == True )
    self.assertTrue( doc.getErrorLog().contains(MathMLElementNotSupported) == True )
    self.assertTrue( doc.getLevel() == 2 )
    self.assertTrue( doc.getVersion() == 4 )
    self.assertTrue( doc.getModel().getParameter(0).getLevel() == 2 )
    self.assertTrue( doc.getModel().getParameter(0).getVersion() == 4 )
    self.assertTrue( m.getNumInitialAssignments() == 1 )
    self.assertTrue( doc.getModel().getParameter(0).isSetValue() == False )
    node1 = doc.getModel().getInitialAssignment(0).getMath()
    str = node1.formulaToL3String()
    self.assertTrue((  "rateOf(x)" == str ))
    doc = None
    pass  

  def test_SBMLConvertFromL3V2_convertIAnewMath1_strict(self):
    doc = libsbml.SBMLDocument(3,2)
    m = doc.createModel()
    p = m.createParameter()
    p.setId("p")
    p.setConstant(False)
    p1 = m.createParameter()
    p1.setId("x")
    p1.setConstant(True)
    p1.setValue(1)
    ar = m.createInitialAssignment()
    ar.setSymbol("p")
    math =  "rateOf(x)";
    node = .parseL3Formula()
    ar.setMath(node)
    node = None
    self.assertTrue( doc.getLevel() == 3 )
    self.assertTrue( doc.getVersion() == 2 )
    self.assertTrue( ar.getLevel() == 3 )
    self.assertTrue( ar.getVersion() == 2 )
    self.assertTrue( ar.isSetMath() == True )
    self.assertTrue( ar.getMath().usesL3V2MathConstructs() == True )
    self.assertTrue( ar.getMath().usesRateOf() == True )
    self.assertTrue( m.getNumInitialAssignments() == 1 )
    self.assertTrue( p.isSetValue() == False )
    done = doc.setLevelAndVersion(2,4,True)
    self.assertTrue( done == False )
    self.assertTrue( doc.getErrorLog().contains(MathMLElementNotSupported) == True )
    self.assertTrue( doc.getLevel() == 3 )
    self.assertTrue( doc.getVersion() == 2 )
    self.assertTrue( doc.getModel().getParameter(0).getLevel() == 3 )
    self.assertTrue( doc.getModel().getParameter(0).getVersion() == 2 )
    self.assertTrue( m.getNumInitialAssignments() == 1 )
    self.assertTrue( doc.getModel().getParameter(0).isSetValue() == False )
    doc = None
    pass  

  def test_SBMLConvertFromL3V2_convertIAnewMath_nonstrict(self):
    doc = libsbml.SBMLDocument(3,2)
    m = doc.createModel()
    p = m.createParameter()
    p.setId("p")
    p.setConstant(False)
    ar = m.createInitialAssignment()
    ar.setSymbol("p")
    math =  "min(2, 3)";
    node = .parseL3Formula()
    ar.setMath(node)
    node = None
    self.assertTrue( doc.getLevel() == 3 )
    self.assertTrue( doc.getVersion() == 2 )
    self.assertTrue( ar.getLevel() == 3 )
    self.assertTrue( ar.getVersion() == 2 )
    self.assertTrue( ar.isSetMath() == True )
    self.assertTrue( ar.getMath().usesL3V2MathConstructs() == True )
    self.assertTrue( ar.getMath().usesRateOf() == False )
    self.assertTrue( m.getNumInitialAssignments() == 1 )
    self.assertTrue( p.isSetValue() == False )
    done = doc.setLevelAndVersion(2,4,True)
    self.assertTrue( done == True )
    self.assertTrue( doc.getErrorLog().contains(ConvertibleMathInitialAssignment) == True )
    self.assertTrue( doc.getLevel() == 2 )
    self.assertTrue( doc.getVersion() == 4 )
    self.assertTrue( doc.getModel().getParameter(0).getLevel() == 2 )
    self.assertTrue( doc.getModel().getParameter(0).getVersion() == 4 )
    self.assertTrue( m.getNumInitialAssignments() == 0 )
    self.assertTrue( doc.getModel().getParameter(0).isSetValue() == True )
    self.assertEqual( True, util_isEqual )
    doc = None
    pass  

  def test_SBMLConvertFromL3V2_convertIAnewMath_strict(self):
    doc = libsbml.SBMLDocument(3,2)
    m = doc.createModel()
    p = m.createParameter()
    p.setId("p")
    p.setConstant(False)
    ar = m.createInitialAssignment()
    ar.setSymbol("p")
    math =  "min(2, 3)";
    node = .parseL3Formula()
    ar.setMath(node)
    node = None
    self.assertTrue( doc.getLevel() == 3 )
    self.assertTrue( doc.getVersion() == 2 )
    self.assertTrue( ar.getLevel() == 3 )
    self.assertTrue( ar.getVersion() == 2 )
    self.assertTrue( ar.isSetMath() == True )
    self.assertTrue( ar.getMath().usesL3V2MathConstructs() == True )
    self.assertTrue( ar.getMath().usesRateOf() == False )
    self.assertTrue( m.getNumInitialAssignments() == 1 )
    self.assertTrue( p.isSetValue() == False )
    done = doc.setLevelAndVersion(2,4,True)
    self.assertTrue( done == True )
    self.assertTrue( doc.getErrorLog().contains(ConvertibleMathInitialAssignment) == True )
    self.assertTrue( doc.getLevel() == 2 )
    self.assertTrue( doc.getVersion() == 4 )
    self.assertTrue( doc.getModel().getParameter(0).getLevel() == 2 )
    self.assertTrue( doc.getModel().getParameter(0).getVersion() == 4 )
    self.assertTrue( m.getNumInitialAssignments() == 0 )
    self.assertTrue( doc.getModel().getParameter(0).isSetValue() == True )
    self.assertEqual( True, util_isEqual )
    doc = None
    pass  

  def test_SBMLConvertFromL3V2_convertIAvalue_nonstrict(self):
    doc = libsbml.SBMLDocument(3,2)
    m = doc.createModel()
    p = m.createParameter()
    p.setId("p")
    p.setConstant(False)
    ar = m.createInitialAssignment()
    ar.setSymbol("p")
    math =  "2 * 3";
    node = .parseL3Formula()
    ar.setMath(node)
    node = None
    self.assertTrue( doc.getLevel() == 3 )
    self.assertTrue( doc.getVersion() == 2 )
    self.assertTrue( ar.getLevel() == 3 )
    self.assertTrue( ar.getVersion() == 2 )
    self.assertTrue( ar.isSetMath() == True )
    self.assertTrue( ar.getMath().usesL3V2MathConstructs() == False )
    self.assertTrue( m.getNumInitialAssignments() == 1 )
    self.assertTrue( p.isSetValue() == False )
    done = doc.setLevelAndVersion(2,1,False)
    self.assertTrue( done == True )
    self.assertTrue( doc.getErrorLog().contains(ConvertibleMathInitialAssignment) == False )
    self.assertTrue( doc.getErrorLog().contains(MathMLElementNotSupported) == False )
    self.assertTrue( doc.getLevel() == 2 )
    self.assertTrue( doc.getVersion() == 1 )
    self.assertTrue( doc.getModel().getParameter(0).getLevel() == 2 )
    self.assertTrue( doc.getModel().getParameter(0).getVersion() == 1 )
    self.assertTrue( m.getNumInitialAssignments() == 0 )
    self.assertTrue( doc.getModel().getParameter(0).isSetValue() == True )
    self.assertEqual( True, util_isEqual )
    doc = None
    pass  

  def test_SBMLConvertFromL3V2_convertIAvalue_strict(self):
    doc = libsbml.SBMLDocument(3,2)
    m = doc.createModel()
    p = m.createParameter()
    p.setId("p")
    p.setConstant(False)
    ar = m.createInitialAssignment()
    ar.setSymbol("p")
    math =  "2 * 3";
    node = .parseL3Formula()
    ar.setMath(node)
    node = None
    self.assertTrue( doc.getLevel() == 3 )
    self.assertTrue( doc.getVersion() == 2 )
    self.assertTrue( ar.getLevel() == 3 )
    self.assertTrue( ar.getVersion() == 2 )
    self.assertTrue( ar.isSetMath() == True )
    self.assertTrue( ar.getMath().usesL3V2MathConstructs() == False )
    self.assertTrue( m.getNumInitialAssignments() == 1 )
    self.assertTrue( p.isSetValue() == False )
    done = doc.setLevelAndVersion(2,1,True)
    self.assertTrue( done == True )
    self.assertTrue( doc.getErrorLog().contains(ConvertibleMathInitialAssignment) == False )
    self.assertTrue( doc.getErrorLog().contains(MathMLElementNotSupported) == False )
    self.assertTrue( doc.getLevel() == 2 )
    self.assertTrue( doc.getVersion() == 1 )
    self.assertTrue( doc.getModel().getParameter(0).getLevel() == 2 )
    self.assertTrue( doc.getModel().getParameter(0).getVersion() == 1 )
    self.assertTrue( m.getNumInitialAssignments() == 0 )
    self.assertTrue( doc.getModel().getParameter(0).isSetValue() == True )
    self.assertEqual( True, util_isEqual )
    doc = None
    pass  

  def test_SBMLConvertFromL3V2_convertMissingEAMath_bug(self):
    doc = libsbml.SBMLDocument(3,2)
    m = doc.createModel()
    p = m.createParameter()
    p.setId("p")
    p.setConstant(False)
    e = m.createEvent()
    e.setUseValuesFromTriggerTime(True)
    t = e.createTrigger()
    t.setPersistent(False)
    t.setInitialValue(False)
    math =  "true";
    node = .parseL3Formula()
    t.setMath(node)
    node = None
    ea = e.createEventAssignment()
    ea.setVariable("p")
    self.assertTrue( doc.getLevel() == 3 )
    self.assertTrue( doc.getVersion() == 2 )
    self.assertTrue( e.getLevel() == 3 )
    self.assertTrue( e.getVersion() == 2 )
    self.assertTrue( e.isSetTrigger() == True )
    self.assertTrue( e.getTrigger().isSetMath() == True )
    self.assertTrue( e.getNumEventAssignments() == 1 )
    self.assertTrue( e.getEventAssignment(0).isSetMath() == False )
    done = doc.setLevelAndVersion(3,1,True)
    self.assertTrue( done == True )
    self.assertTrue( doc.getErrorLog().contains(MissingMathElementNotSupported) == True )
    self.assertTrue( doc.getLevel() == 3 )
    self.assertTrue( doc.getVersion() == 1 )
    self.assertTrue( doc.getModel().getEvent(0).getLevel() == 3 )
    self.assertTrue( doc.getModel().getEvent(0).getVersion() == 1 )
    self.assertTrue( doc.getModel().getEvent(0).isSetTrigger() == True )
    self.assertTrue( doc.getModel().getEvent(0).getTrigger().isSetMath() == True )
    self.assertTrue( e.getNumEventAssignments() == 0 )
    node1 = doc.getModel().getEvent(0).getTrigger().getMath()
    str = node1.formulaToL3String()
    self.assertTrue((  "true" == str ))
    doc = None
    pass  

  def test_SBMLConvertFromL3V2_convertMissingFast(self):
    filename = "../../sbml/sbml/test/test-data/"
    filename += "l3v2-reaction.xml"
    doc = libsbml.readSBML()
    self.assertTrue( doc.getLevel() == 3 )
    self.assertTrue( doc.getVersion() == 2 )
    self.assertTrue( doc.getModel().getNumReactions() == 1 )
    r = doc.getModel().getReaction(0)
    self.assertTrue( r != None )
    self.assertTrue( r.isSetFast() == False )
    done = doc.setLevelAndVersion(3,1,True)
    self.assertTrue( done == True )
    self.assertTrue( doc.getLevel() == 3 )
    self.assertTrue( doc.getVersion() == 1 )
    r = doc.getModel().getReaction(0)
    self.assertTrue( r != None )
    self.assertTrue( r.isSetFast() == True )
    self.assertTrue( r.getFast() == False )
    doc = None
    pass  

  def test_SBMLConvertFromL3V2_convertMissingMathForStoich_strict(self):
    filename = "../../sbml/sbml/test/test-data/"
    filename += "l3v2-stoich-math-missing.xml"
    doc = libsbml.readSBML()
    m = doc.getModel()
    ar = m.getRule(0)
    sr = m.getReaction(0).getProduct(0)
    self.assertTrue( doc.getLevel() == 3 )
    self.assertTrue( doc.getVersion() == 2 )
    self.assertTrue( ar.getLevel() == 3 )
    self.assertTrue( ar.getVersion() == 2 )
    self.assertTrue( ar.isSetMath() == False )
    self.assertTrue( m.getNumRules() == 1 )
    self.assertTrue( ar.getVariable() == sr.getId() )
    done = doc.setLevelAndVersion(2,4,True)
    self.assertTrue( done == True )
    self.assertTrue( doc.getLevel() == 2 )
    self.assertTrue( doc.getVersion() == 4 )
    m = doc.getModel()
    self.assertTrue( m.getNumRules() == 0 )
    sr = m.getReaction(0).getProduct(0)
    self.assertTrue( sr.isSetStoichiometryMath() == False )
    self.assertTrue( sr.isSetStoichiometry() == True )
    doc = None
    pass  

  def test_SBMLConvertFromL3V2_convertMissingMath_nonstrict(self):
    doc = libsbml.SBMLDocument(3,2)
    m = doc.createModel()
    p = m.createParameter()
    p.setId("p")
    p.setConstant(False)
    ar = m.createAssignmentRule()
    ar.setVariable("p")
    self.assertTrue( doc.getLevel() == 3 )
    self.assertTrue( doc.getVersion() == 2 )
    self.assertTrue( ar.getLevel() == 3 )
    self.assertTrue( ar.getVersion() == 2 )
    self.assertTrue( ar.isSetMath() == False )
    self.assertTrue( m.getNumRules() == 1 )
    done = doc.setLevelAndVersion(3,1,False)
    self.assertTrue( done == True )
    self.assertTrue( doc.getErrorLog().contains(MissingMathElementNotSupported) == True )
    self.assertTrue( doc.getLevel() == 3 )
    self.assertTrue( doc.getVersion() == 1 )
    self.assertTrue( doc.getModel().getParameter(0).getLevel() == 3 )
    self.assertTrue( doc.getModel().getParameter(0).getVersion() == 1 )
    self.assertTrue( m.getNumRules() == 1 )
    ar = doc.getModel().getAssignmentRule("p")
    self.assertTrue( ar.isSetMath() == False )
    doc = None
    pass  

  def test_SBMLConvertFromL3V2_convertMissingMath_strict(self):
    doc = libsbml.SBMLDocument(3,2)
    m = doc.createModel()
    p = m.createParameter()
    p.setId("p")
    p.setConstant(False)
    ar = m.createAssignmentRule()
    ar.setVariable("p")
    self.assertTrue( doc.getLevel() == 3 )
    self.assertTrue( doc.getVersion() == 2 )
    self.assertTrue( ar.getLevel() == 3 )
    self.assertTrue( ar.getVersion() == 2 )
    self.assertTrue( ar.isSetMath() == False )
    self.assertTrue( m.getNumRules() == 1 )
    done = doc.setLevelAndVersion(3,1,True)
    self.assertTrue( done == True )
    self.assertTrue( doc.getErrorLog().contains(MissingMathElementNotSupported) == True )
    self.assertTrue( doc.getLevel() == 3 )
    self.assertTrue( doc.getVersion() == 1 )
    self.assertTrue( doc.getModel().getParameter(0).getLevel() == 3 )
    self.assertTrue( doc.getModel().getParameter(0).getVersion() == 1 )
    self.assertTrue( m.getNumRules() == 0 )
    doc = None
    pass  

  def test_SBMLConvertFromL3V2_convertMissingReactantProducts_nonstrict(self):
    filename = "../../sbml/sbml/test/test-data/"
    filename += "l3v2-reaction-no-sr.xml"
    doc = libsbml.readSBML()
    self.assertTrue( doc.getLevel() == 3 )
    self.assertTrue( doc.getVersion() == 2 )
    self.assertTrue( doc.getModel().getNumReactions() == 1 )
    r = doc.getModel().getReaction(0)
    self.assertTrue( r != None )
    self.assertTrue( r.getNumProducts() == 0 )
    self.assertTrue( r.getNumReactants() == 0 )
    self.assertTrue( r.getNumModifiers() == 0 )
    self.assertTrue( r.isSetKineticLaw() == True )
    done = doc.setLevelAndVersion(3,1,False)
    self.assertTrue( done == True )
    self.assertTrue( doc.getErrorLog().contains(MissingParticipantsNotSupported) == True )
    self.assertTrue( doc.getLevel() == 3 )
    self.assertTrue( doc.getVersion() == 1 )
    self.assertTrue( doc.getModel().getNumReactions() == 1 )
    r = doc.getModel().getReaction(0)
    self.assertTrue( r != None )
    self.assertTrue( r.getNumProducts() == 0 )
    self.assertTrue( r.getNumReactants() == 0 )
    self.assertTrue( r.getNumModifiers() == 0 )
    self.assertTrue( r.isSetKineticLaw() == True )
    doc = None
    pass  

  def test_SBMLConvertFromL3V2_convertMissingReactantProducts_strict(self):
    filename = "../../sbml/sbml/test/test-data/"
    filename += "l3v2-reaction-no-sr.xml"
    doc = libsbml.readSBML()
    self.assertTrue( doc.getLevel() == 3 )
    self.assertTrue( doc.getVersion() == 2 )
    self.assertTrue( doc.getModel().getNumReactions() == 1 )
    r = doc.getModel().getReaction(0)
    self.assertTrue( r != None )
    self.assertTrue( r.getNumProducts() == 0 )
    self.assertTrue( r.getNumReactants() == 0 )
    self.assertTrue( r.getNumModifiers() == 0 )
    self.assertTrue( r.isSetKineticLaw() == True )
    done = doc.setLevelAndVersion(3,1,True)
    self.assertTrue( done == False )
    self.assertTrue( doc.getErrorLog().contains(MissingParticipantsNotSupported) == True )
    self.assertTrue( doc.getLevel() == 3 )
    self.assertTrue( doc.getVersion() == 2 )
    self.assertTrue( doc.getModel().getNumReactions() == 1 )
    doc = None
    pass  

  def test_SBMLConvertFromL3V2_convertMissingTriggerMath_nonstrict(self):
    doc = libsbml.SBMLDocument(3,2)
    m = doc.createModel()
    p = m.createParameter()
    p.setId("p")
    p.setConstant(False)
    e = m.createEvent()
    e.setUseValuesFromTriggerTime(True)
    t = e.createTrigger()
    t.setPersistent(False)
    t.setInitialValue(False)
    ea = e.createEventAssignment()
    ea.setVariable("p")
    math =  "2";
    node = .parseL3Formula()
    ea.setMath(node)
    node = None
    self.assertTrue( doc.getLevel() == 3 )
    self.assertTrue( doc.getVersion() == 2 )
    self.assertTrue( e.getLevel() == 3 )
    self.assertTrue( e.getVersion() == 2 )
    self.assertTrue( e.isSetTrigger() == True )
    self.assertTrue( e.getTrigger().isSetMath() == False )
    done = doc.setLevelAndVersion(3,1,False)
    self.assertTrue( done == True )
    self.assertTrue( doc.getErrorLog().contains(MissingMathElementNotSupported) == True )
    self.assertTrue( doc.getLevel() == 3 )
    self.assertTrue( doc.getVersion() == 1 )
    self.assertTrue( doc.getModel().getEvent(0).getLevel() == 3 )
    self.assertTrue( doc.getModel().getEvent(0).getVersion() == 1 )
    self.assertTrue( doc.getModel().getEvent(0).isSetTrigger() == True )
    self.assertTrue( doc.getModel().getEvent(0).getTrigger().isSetMath() == True )
    node1 = doc.getModel().getEvent(0).getTrigger().getMath()
    str = node1.formulaToL3String()
    self.assertTrue((  "false" == str ))
    doc = None
    pass  

  def test_SBMLConvertFromL3V2_convertMissingTriggerMath_strict(self):
    doc = libsbml.SBMLDocument(3,2)
    m = doc.createModel()
    p = m.createParameter()
    p.setId("p")
    p.setConstant(False)
    e = m.createEvent()
    e.setUseValuesFromTriggerTime(True)
    t = e.createTrigger()
    t.setPersistent(False)
    t.setInitialValue(False)
    ea = e.createEventAssignment()
    ea.setVariable("p")
    math =  "2";
    node = .parseL3Formula()
    ea.setMath(node)
    node = None
    self.assertTrue( doc.getLevel() == 3 )
    self.assertTrue( doc.getVersion() == 2 )
    self.assertTrue( e.getLevel() == 3 )
    self.assertTrue( e.getVersion() == 2 )
    self.assertTrue( e.isSetTrigger() == True )
    self.assertTrue( e.getTrigger().isSetMath() == False )
    done = doc.setLevelAndVersion(3,1,True)
    self.assertTrue( done == True )
    self.assertTrue( doc.getErrorLog().contains(MissingMathElementNotSupported) == True )
    self.assertTrue( doc.getLevel() == 3 )
    self.assertTrue( doc.getVersion() == 1 )
    self.assertTrue( doc.getModel().getEvent(0).getLevel() == 3 )
    self.assertTrue( doc.getModel().getEvent(0).getVersion() == 1 )
    self.assertTrue( doc.getModel().getEvent(0).isSetTrigger() == True )
    self.assertTrue( doc.getModel().getEvent(0).getTrigger().isSetMath() == True )
    node1 = doc.getModel().getEvent(0).getTrigger().getMath()
    str = node1.formulaToL3String()
    self.assertTrue((  "false" == str ))
    doc = None
    pass  

  def test_SBMLConvertFromL3V2_convertMissingTrigger_nonstrict(self):
    doc = libsbml.SBMLDocument(3,2)
    m = doc.createModel()
    p = m.createParameter()
    p.setId("p")
    p.setConstant(False)
    e = m.createEvent()
    e.setUseValuesFromTriggerTime(True)
    ea = e.createEventAssignment()
    ea.setVariable("p")
    math =  "2";
    node = .parseL3Formula()
    ea.setMath(node)
    node = None
    self.assertTrue( doc.getLevel() == 3 )
    self.assertTrue( doc.getVersion() == 2 )
    self.assertTrue( e.getLevel() == 3 )
    self.assertTrue( e.getVersion() == 2 )
    self.assertTrue( e.isSetTrigger() == False )
    done = doc.setLevelAndVersion(3,1,False)
    self.assertTrue( done == True )
    self.assertTrue( doc.getErrorLog().contains(MissingTriggerElementNotSupported) == True )
    self.assertTrue( doc.getLevel() == 3 )
    self.assertTrue( doc.getVersion() == 1 )
    self.assertTrue( doc.getModel().getEvent(0).getLevel() == 3 )
    self.assertTrue( doc.getModel().getEvent(0).getVersion() == 1 )
    self.assertTrue( doc.getModel().getEvent(0).isSetTrigger() == True )
    self.assertTrue( doc.getModel().getEvent(0).getTrigger().isSetMath() == True )
    node1 = doc.getModel().getEvent(0).getTrigger().getMath()
    str = node1.formulaToL3String()
    self.assertTrue((  "false" == str ))
    doc = None
    pass  

  def test_SBMLConvertFromL3V2_convertMissingTrigger_strict(self):
    doc = libsbml.SBMLDocument(3,2)
    m = doc.createModel()
    p = m.createParameter()
    p.setId("p")
    p.setConstant(False)
    e = m.createEvent()
    e.setUseValuesFromTriggerTime(True)
    ea = e.createEventAssignment()
    ea.setVariable("p")
    math =  "2";
    node = .parseL3Formula()
    ea.setMath(node)
    node = None
    self.assertTrue( doc.getLevel() == 3 )
    self.assertTrue( doc.getVersion() == 2 )
    self.assertTrue( e.getLevel() == 3 )
    self.assertTrue( e.getVersion() == 2 )
    self.assertTrue( e.isSetTrigger() == False )
    done = doc.setLevelAndVersion(3,1,True)
    self.assertTrue( done == True )
    self.assertTrue( doc.getErrorLog().contains(MissingTriggerElementNotSupported) == True )
    self.assertTrue( doc.getLevel() == 3 )
    self.assertTrue( doc.getVersion() == 1 )
    self.assertTrue( doc.getModel().getEvent(0).getLevel() == 3 )
    self.assertTrue( doc.getModel().getEvent(0).getVersion() == 1 )
    self.assertTrue( doc.getModel().getEvent(0).isSetTrigger() == True )
    self.assertTrue( doc.getModel().getEvent(0).getTrigger().isSetMath() == True )
    node1 = doc.getModel().getEvent(0).getTrigger().getMath()
    str = node1.formulaToL3String()
    self.assertTrue((  "false" == str ))
    doc = None
    pass  

  def test_SBMLConvertFromL3V2_convertnewMath_nonstrict(self):
    doc = libsbml.SBMLDocument(3,2)
    m = doc.createModel()
    p = m.createParameter()
    p.setId("p")
    p.setConstant(False)
    ar = m.createAssignmentRule()
    ar.setVariable("p")
    math =  "min(2, 3)";
    node = .parseL3Formula()
    ar.setMath(node)
    node = None
    self.assertTrue( doc.getLevel() == 3 )
    self.assertTrue( doc.getVersion() == 2 )
    self.assertTrue( ar.getLevel() == 3 )
    self.assertTrue( ar.getVersion() == 2 )
    self.assertTrue( ar.isSetMath() == True )
    self.assertTrue( ar.getMath().usesL3V2MathConstructs() == True )
    done = doc.setLevelAndVersion(2,4,False)
    self.assertTrue( done == True )
    self.assertTrue( doc.getErrorLog().contains(MathMLElementNotSupported) == True )
    self.assertTrue( doc.getLevel() == 2 )
    self.assertTrue( doc.getVersion() == 4 )
    self.assertTrue( doc.getModel().getRule(0).getLevel() == 2 )
    self.assertTrue( doc.getModel().getRule(0).getVersion() == 4 )
    self.assertTrue( doc.getModel().getRule(0).isSetMath() == True )
    self.assertTrue( doc.getModel().getRule(0).getMath().usesL3V2MathConstructs() == True )
    node1 = doc.getModel().getRule(0).getMath()
    str = node1.formulaToL3String()
    self.assertTrue((  "min(2, 3)" == str ))
    doc = None
    pass  

  def test_SBMLConvertFromL3V2_convertnewMath_strict(self):
    doc = libsbml.SBMLDocument(3,2)
    m = doc.createModel()
    p = m.createParameter()
    p.setId("p")
    p.setConstant(False)
    ar = m.createAssignmentRule()
    ar.setVariable("p")
    math =  "min(2, 3)";
    node = .parseL3Formula()
    ar.setMath(node)
    node = None
    self.assertTrue( doc.getLevel() == 3 )
    self.assertTrue( doc.getVersion() == 2 )
    self.assertTrue( ar.getLevel() == 3 )
    self.assertTrue( ar.getVersion() == 2 )
    self.assertTrue( ar.isSetMath() == True )
    self.assertTrue( ar.getMath().usesL3V2MathConstructs() == True )
    done = doc.setLevelAndVersion(2,4,True)
    self.assertTrue( done == False )
    self.assertTrue( doc.getErrorLog().contains(MathMLElementNotSupported) == True )
    self.assertTrue( doc.getLevel() == 3 )
    self.assertTrue( doc.getVersion() == 2 )
    self.assertTrue( doc.getModel().getRule(0).getLevel() == 3 )
    self.assertTrue( doc.getModel().getRule(0).getVersion() == 2 )
    self.assertTrue( doc.getModel().getRule(0).isSetMath() == True )
    self.assertTrue( doc.getModel().getRule(0).getMath().usesL3V2MathConstructs() == True )
    node1 = doc.getModel().getRule(0).getMath()
    str = node1.formulaToL3String()
    self.assertTrue((  "min(2, 3)" == str ))
    doc = None
    pass  

def suite():
  suite = unittest.TestSuite()
  suite.addTest(unittest.makeSuite(TestSBMLConvertFromL3V2))

  return suite

if __name__ == "__main__":
  if unittest.TextTestRunner(verbosity=1).run(suite()).wasSuccessful() :
    sys.exit(0)
  else:
    sys.exit(1)
