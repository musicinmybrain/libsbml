#
# @file    TestAttributeFunctions.py
# @brief   Attribute function tests
#
# @author  Akiya Jouraku (Python conversion)
# @author  Sarah Keating 
# 
# ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
#
# DO NOT EDIT THIS FILE.
#
# This file was generated automatically by converting the file located at
# src/sbml/test/TestAttributeFunctions.cpp
# using the conversion program dev/utilities/translateTests/translateTests.pl.
# Any changes made here will be lost the next time the file is regenerated.
#
# -----------------------------------------------------------------------------
# This file is part of libSBML.  Please visit http://sbml.org for more
# information about SBML, and the latest version of libSBML.
#
# Copyright 2005-2010 California Institute of Technology.
# Copyright 2002-2005 California Institute of Technology and
#                     Japan Science and Technology Corporation.
# 
# This library is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation.  A copy of the license agreement is provided
# in the file named "LICENSE.txt" included with this software distribution
# and also available online as http://sbml.org/software/libsbml/license.html
# -----------------------------------------------------------------------------

import sys
import unittest
import libsbml


class TestAttributeFunctions(unittest.TestCase):

  global S
  S = None

  def setUp(self):
    self.S = libsbml.Model(2,4)
    if (self.S == None):
      pass    
    pass  

  def tearDown(self):
    self.S = None
    pass  

  def test_Attributes_AssignmentRule_variable(self):
    obj = libsbml.AssignmentRule(3,1)
    initialValue =  "string";
    result = obj.setAttribute("variable",initialValue)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.getVariable() == initialValue )
    self.assertTrue( obj.isSetVariable() == True )
    self.assertTrue( obj.isSetAttribute("variable") == True )
    result = obj.getAttribute("variable",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == initialValue )
    otherValue = obj.getAttribute < string > "variable"
    self.assertTrue( otherValue == initialValue )
    result = obj.unsetAttribute("variable")
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.isSetVariable() == False )
    self.assertTrue( obj.isSetAttribute("variable") == False )
    result = obj.getAttribute("variable",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertEqual( True, value.empty() )
    obj = None
    pass  

  def test_Attributes_Compartment_constant(self):
    obj = libsbml.Compartment(3,1)
    initialValue = True
    result = obj.setAttribute("constant",initialValue)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.getConstant() == initialValue )
    self.assertTrue( obj.isSetConstant() == True )
    self.assertTrue( obj.isSetAttribute("constant") == True )
    result = obj.getAttribute("constant",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == initialValue )
    otherValue = obj.getAttribute < bool > "constant"
    self.assertTrue( otherValue == initialValue )
    result = obj.unsetAttribute("constant")
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.isSetConstant() == False )
    self.assertTrue( obj.isSetAttribute("constant") == False )
    result = obj.getAttribute("constant",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == True )
    obj = None
    pass  

  def test_Attributes_Compartment_size(self):
    obj = libsbml.Compartment(3,1)
    initialValue = 3.6
    result = obj.setAttribute("size",initialValue)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertEqual( True, util_isEqual )
    self.assertTrue( obj.isSetSize() == True )
    self.assertTrue( obj.isSetAttribute("size") == True )
    result = obj.getAttribute("size",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertEqual( True, util_isEqual )
    otherValue = obj.getAttribute < double > "size"
    self.assertEqual( True, util_isEqual )
    result = obj.unsetAttribute("size")
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.isSetSize() == False )
    self.assertTrue( obj.isSetAttribute("size") == False )
    result = obj.getAttribute("size",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertEqual( True, util_isNaN )
    obj = None
    pass  

  def test_Attributes_Compartment_spatialDimensions(self):
    obj = libsbml.Compartment(3,1)
    initialValue = 2
    result = obj.setAttribute("spatialDimensions",initialValue)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.getSpatialDimensions() == initialValue )
    self.assertTrue( obj.isSetSpatialDimensions() == True )
    self.assertTrue( obj.isSetAttribute("spatialDimensions") == True )
    result = obj.getAttribute("spatialDimensions",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == initialValue )
    otherValue = obj.getAttribute < unsignedint > "spatialDimensions"
    self.assertTrue( otherValue == initialValue )
    result = obj.unsetAttribute("spatialDimensions")
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.isSetSpatialDimensions() == False )
    self.assertTrue( obj.isSetAttribute("spatialDimensions") == False )
    result = obj.getAttribute("spatialDimensions",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == 0 )
    obj = None
    pass  

  def test_Attributes_Compartment_spatialDimensions_double(self):
    obj = libsbml.Compartment(3,1)
    initialValue = 2.7
    result = obj.setAttribute("spatialDimensions",initialValue)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertEqual( True, util_isEqual )
    self.assertTrue( obj.isSetSpatialDimensions() == True )
    self.assertTrue( obj.isSetAttribute("spatialDimensions") == True )
    result = obj.getAttribute("spatialDimensions",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertEqual( True, util_isEqual )
    otherValue = obj.getAttribute < double > "spatialDimensions"
    self.assertTrue( otherValue == initialValue )
    result = obj.unsetAttribute("spatialDimensions")
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.isSetSpatialDimensions() == False )
    self.assertTrue( obj.isSetAttribute("spatialDimensions") == False )
    result = obj.getAttribute("spatialDimensions",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertEqual( True, util_isNaN )
    obj = None
    pass  

  def test_Attributes_Compartment_units(self):
    obj = libsbml.Compartment(3,1)
    initialValue =  "string";
    result = obj.setAttribute("units",initialValue)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.getUnits() == initialValue )
    self.assertTrue( obj.isSetUnits() == True )
    self.assertTrue( obj.isSetAttribute("units") == True )
    result = obj.getAttribute("units",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == initialValue )
    otherValue = obj.getAttribute < string > "units"
    self.assertTrue( otherValue == initialValue )
    result = obj.unsetAttribute("units")
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.isSetUnits() == False )
    self.assertTrue( obj.isSetAttribute("units") == False )
    result = obj.getAttribute("units",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertEqual( True, value.empty() )
    obj = None
    pass  

  def test_Attributes_EventAssignment_variable(self):
    obj = libsbml.EventAssignment(3,1)
    initialValue =  "string";
    result = obj.setAttribute("variable",initialValue)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.getVariable() == initialValue )
    self.assertTrue( obj.isSetVariable() == True )
    self.assertTrue( obj.isSetAttribute("variable") == True )
    result = obj.getAttribute("variable",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == initialValue )
    otherValue = obj.getAttribute < string > "variable"
    self.assertTrue( otherValue == initialValue )
    result = obj.unsetAttribute("variable")
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.isSetVariable() == False )
    self.assertTrue( obj.isSetAttribute("variable") == False )
    result = obj.getAttribute("variable",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertEqual( True, value.empty() )
    obj = None
    pass  

  def test_Attributes_Event_timeUnits(self):
    obj = libsbml.Event(3,1)
    initialValue =  "string";
    result = obj.setAttribute("timeUnits",initialValue)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.getTimeUnits() == initialValue )
    self.assertTrue( obj.isSetTimeUnits() == True )
    self.assertTrue( obj.isSetAttribute("timeUnits") == True )
    result = obj.getAttribute("timeUnits",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == initialValue )
    otherValue = obj.getAttribute < string > "timeUnits"
    self.assertTrue( otherValue == initialValue )
    result = obj.unsetAttribute("timeUnits")
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.isSetTimeUnits() == False )
    self.assertTrue( obj.isSetAttribute("timeUnits") == False )
    result = obj.getAttribute("timeUnits",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertEqual( True, value.empty() )
    obj = None
    pass  

  def test_Attributes_Event_useValuesFromTriggerTime(self):
    obj = libsbml.Event(3,1)
    initialValue = True
    result = obj.setAttribute("useValuesFromTriggerTime",initialValue)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.getUseValuesFromTriggerTime() == initialValue )
    self.assertTrue( obj.isSetUseValuesFromTriggerTime() == True )
    self.assertTrue( obj.isSetAttribute("useValuesFromTriggerTime") == True )
    result = obj.getAttribute("useValuesFromTriggerTime",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == initialValue )
    otherValue = obj.getAttribute < bool > "useValuesFromTriggerTime"
    self.assertTrue( otherValue == initialValue )
    result = obj.unsetAttribute("useValuesFromTriggerTime")
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.isSetUseValuesFromTriggerTime() == False )
    self.assertTrue( obj.isSetAttribute("useValuesFromTriggerTime") == False )
    result = obj.getAttribute("useValuesFromTriggerTime",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == True )
    obj = None
    pass  

  def test_Attributes_FunctionDefinition_sbo(self):
    obj = libsbml.FunctionDefinition(3,1)
    initialValue = 67
    result = obj.setAttribute("sboTerm",initialValue)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.getSBOTerm() == initialValue )
    self.assertTrue( obj.isSetSBOTerm() == True )
    self.assertTrue( obj.isSetAttribute("sboTerm") == True )
    result = obj.getAttribute("sboTerm",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == initialValue )
    otherValue = obj.getAttribute < int > "sboTerm"
    self.assertTrue( otherValue == initialValue )
    result = obj.unsetAttribute("sboTerm")
    self.assertTrue( obj.isSetSBOTerm() == False )
    self.assertTrue( obj.isSetAttribute("sboTerm") == False )
    result = obj.getAttribute("sboTerm",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertEqual( True, value ==-1 )
    obj = None
    pass  

  def test_Attributes_FunctionDefinition_sbo_string(self):
    obj = libsbml.FunctionDefinition(3,1)
    initialValue =  "SBO:0000067";
    result = obj.setAttribute("sboTerm",initialValue)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.getSBOTermID() == initialValue )
    self.assertTrue( obj.isSetSBOTerm() == True )
    self.assertTrue( obj.isSetAttribute("sboTerm") == True )
    result = obj.getAttribute("sboTerm",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == initialValue )
    otherValue = obj.getAttribute < string > "sboTerm"
    self.assertTrue( otherValue == initialValue )
    result = obj.unsetAttribute("sboTerm")
    self.assertTrue( obj.isSetSBOTerm() == False )
    self.assertTrue( obj.isSetAttribute("sboTerm") == False )
    result = obj.getAttribute("sboTerm",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == "" )
    obj = None
    pass  

  def test_Attributes_Id(self):
    const std::string& id =  "x12345";
    result = self.S.setAttribute("id",id)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( self.S.getIdAttribute() == id )
    self.assertTrue( self.S.isSetIdAttribute() == True )
    self.assertTrue( self.S.isSetAttribute("id") == True )
    result = self.S.getAttribute("id",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == id )
    other_value = S.getAttribute < string > "id"
    self.assertTrue( other_value == id )
    result = self.S.unsetAttribute("id")
    self.assertTrue( self.S.isSetIdAttribute() == False )
    self.assertTrue( self.S.isSetAttribute("id") == False )
    result = self.S.getAttribute("id",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value ==  "" )
    pass  

  def test_Attributes_InitialAssignment_symbol(self):
    obj = libsbml.InitialAssignment(3,1)
    initialValue =  "string";
    result = obj.setAttribute("symbol",initialValue)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.getSymbol() == initialValue )
    self.assertTrue( obj.isSetSymbol() == True )
    self.assertTrue( obj.isSetAttribute("symbol") == True )
    result = obj.getAttribute("symbol",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == initialValue )
    otherValue = obj.getAttribute < string > "symbol"
    self.assertTrue( otherValue == initialValue )
    result = obj.unsetAttribute("symbol")
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.isSetSymbol() == False )
    self.assertTrue( obj.isSetAttribute("symbol") == False )
    result = obj.getAttribute("symbol",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertEqual( True, value.empty() )
    obj = None
    pass  

  def test_Attributes_KineticLaw_timeUnits(self):
    obj = libsbml.KineticLaw(2,1)
    initialValue =  "string";
    result = obj.setAttribute("timeUnits",initialValue)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.getTimeUnits() == initialValue )
    self.assertTrue( obj.isSetTimeUnits() == True )
    self.assertTrue( obj.isSetAttribute("timeUnits") == True )
    result = obj.getAttribute("timeUnits",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == initialValue )
    otherValue = obj.getAttribute < string > "timeUnits"
    self.assertTrue( otherValue == initialValue )
    result = obj.unsetAttribute("timeUnits")
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.isSetTimeUnits() == False )
    self.assertTrue( obj.isSetAttribute("timeUnits") == False )
    result = obj.getAttribute("timeUnits",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertEqual( True, value.empty() )
    obj = None
    pass  

  def test_Attributes_LocalParameter_units(self):
    obj = LocalParameter(3,1)
    initialValue =  "string";
    result = obj.setAttribute("units",initialValue)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.getUnits() == initialValue )
    self.assertTrue( obj.isSetUnits() == True )
    self.assertTrue( obj.isSetAttribute("units") == True )
    result = obj.getAttribute("units",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == initialValue )
    otherValue = obj.getAttribute < string > "units"
    self.assertTrue( otherValue == initialValue )
    result = obj.unsetAttribute("units")
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.isSetUnits() == False )
    self.assertTrue( obj.isSetAttribute("units") == False )
    result = obj.getAttribute("units",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertEqual( True, value.empty() )
    obj = None
    pass  

  def test_Attributes_LocalParameter_value(self):
    obj = LocalParameter(3,1)
    initialValue = 3.6
    result = obj.setAttribute("value",initialValue)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertEqual( True, util_isEqual )
    self.assertTrue( obj.isSetValue() == True )
    self.assertTrue( obj.isSetAttribute("value") == True )
    result = obj.getAttribute("value",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertEqual( True, util_isEqual )
    otherValue = obj.getAttribute < double > "value"
    self.assertEqual( True, util_isEqual )
    result = obj.unsetAttribute("value")
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.isSetValue() == False )
    self.assertTrue( obj.isSetAttribute("value") == False )
    result = obj.getAttribute("value",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertEqual( True, util_isNaN )
    obj = None
    pass  

  def test_Attributes_MetaId(self):
    const std::string& metaid =  "x12345";
    const std::string name =  "metaid";
    result = self.S.setAttribute("metaid",metaid)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( self.S.getMetaId() == metaid )
    self.assertTrue( self.S.isSetMetaId() == True )
    self.assertTrue( self.S.isSetAttribute("metaid") == True )
    result = self.S.getAttribute("metaid",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == metaid )
    other_value = S.getAttribute < string > "metaid"
    self.assertTrue( other_value == metaid )
    result = self.S.unsetAttribute("metaid")
    self.assertTrue( self.S.isSetMetaId() == False )
    self.assertTrue( self.S.isSetAttribute("metaid") == False )
    result = self.S.getAttribute("metaid",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value ==  "" )
    pass  

  def test_Attributes_Model_substanceUnits(self):
    obj = libsbml.Model(3,1)
    initialValue =  "string";
    result = obj.setAttribute("substanceUnits",initialValue)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.getSubstanceUnits() == initialValue )
    self.assertTrue( obj.isSetSubstanceUnits() == True )
    self.assertTrue( obj.isSetAttribute("substanceUnits") == True )
    result = obj.getAttribute("substanceUnits",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == initialValue )
    otherValue = obj.getAttribute < string > "substanceUnits"
    self.assertTrue( otherValue == initialValue )
    result = obj.unsetAttribute("substanceUnits")
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.isSetSubstanceUnits() == False )
    self.assertTrue( obj.isSetAttribute("substanceUnits") == False )
    result = obj.getAttribute("substanceUnits",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertEqual( True, value.empty() )
    obj = None
    pass  

  def test_Attributes_Parameter_constant(self):
    obj = libsbml.Parameter(3,1)
    initialValue = True
    result = obj.setAttribute("constant",initialValue)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.getConstant() == initialValue )
    self.assertTrue( obj.isSetConstant() == True )
    self.assertTrue( obj.isSetAttribute("constant") == True )
    result = obj.getAttribute("constant",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == initialValue )
    otherValue = obj.getAttribute < bool > "constant"
    self.assertTrue( otherValue == initialValue )
    result = obj.unsetAttribute("constant")
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.isSetConstant() == False )
    self.assertTrue( obj.isSetAttribute("constant") == False )
    result = obj.getAttribute("constant",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == True )
    obj = None
    pass  

  def test_Attributes_Parameter_units(self):
    obj = libsbml.Parameter(3,1)
    initialValue =  "string";
    result = obj.setAttribute("units",initialValue)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.getUnits() == initialValue )
    self.assertTrue( obj.isSetUnits() == True )
    self.assertTrue( obj.isSetAttribute("units") == True )
    result = obj.getAttribute("units",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == initialValue )
    otherValue = obj.getAttribute < string > "units"
    self.assertTrue( otherValue == initialValue )
    result = obj.unsetAttribute("units")
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.isSetUnits() == False )
    self.assertTrue( obj.isSetAttribute("units") == False )
    result = obj.getAttribute("units",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertEqual( True, value.empty() )
    obj = None
    pass  

  def test_Attributes_Parameter_value(self):
    obj = libsbml.Parameter(3,1)
    initialValue = 3.6
    result = obj.setAttribute("value",initialValue)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertEqual( True, util_isEqual )
    self.assertTrue( obj.isSetValue() == True )
    self.assertTrue( obj.isSetAttribute("value") == True )
    result = obj.getAttribute("value",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertEqual( True, util_isEqual )
    otherValue = obj.getAttribute < double > "value"
    self.assertEqual( True, util_isEqual )
    result = obj.unsetAttribute("value")
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.isSetValue() == False )
    self.assertTrue( obj.isSetAttribute("value") == False )
    result = obj.getAttribute("value",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertEqual( True, util_isNaN )
    obj = None
    pass  

  def test_Attributes_RateRule_variable(self):
    obj = libsbml.RateRule(3,1)
    initialValue =  "string";
    result = obj.setAttribute("variable",initialValue)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.getVariable() == initialValue )
    self.assertTrue( obj.isSetVariable() == True )
    self.assertTrue( obj.isSetAttribute("variable") == True )
    result = obj.getAttribute("variable",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == initialValue )
    otherValue = obj.getAttribute < string > "variable"
    self.assertTrue( otherValue == initialValue )
    result = obj.unsetAttribute("variable")
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.isSetVariable() == False )
    self.assertTrue( obj.isSetAttribute("variable") == False )
    result = obj.getAttribute("variable",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertEqual( True, value.empty() )
    obj = None
    pass  

  def test_Attributes_Reaction_compartment(self):
    obj = libsbml.Reaction(3,1)
    initialValue =  "string";
    result = obj.setAttribute("compartment",initialValue)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.getCompartment() == initialValue )
    self.assertTrue( obj.isSetCompartment() == True )
    self.assertTrue( obj.isSetAttribute("compartment") == True )
    result = obj.getAttribute("compartment",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == initialValue )
    otherValue = obj.getAttribute < string > "compartment"
    self.assertTrue( otherValue == initialValue )
    result = obj.unsetAttribute("compartment")
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.isSetCompartment() == False )
    self.assertTrue( obj.isSetAttribute("compartment") == False )
    result = obj.getAttribute("compartment",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertEqual( True, value.empty() )
    obj = None
    pass  

  def test_Attributes_Reaction_fast(self):
    obj = libsbml.Reaction(3,1)
    initialValue = True
    result = obj.setAttribute("fast",initialValue)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.getFast() == initialValue )
    self.assertTrue( obj.isSetFast() == True )
    self.assertTrue( obj.isSetAttribute("fast") == True )
    result = obj.getAttribute("fast",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == initialValue )
    otherValue = obj.getAttribute < bool > "fast"
    self.assertTrue( otherValue == initialValue )
    result = obj.unsetAttribute("fast")
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.isSetFast() == False )
    self.assertTrue( obj.isSetAttribute("fast") == False )
    result = obj.getAttribute("fast",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == True )
    obj = None
    pass  

  def test_Attributes_SBOTerm(self):
    sboTerm = 5
    result = self.S.setAttribute("sboTerm",sboTerm)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( self.S.getSBOTerm() == sboTerm )
    self.assertTrue( self.S.isSetSBOTerm() == True )
    self.assertTrue( self.S.isSetAttribute("sboTerm") == True )
    result = self.S.getAttribute("sboTerm",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == sboTerm )
    other_value = S.getAttribute < int > "sboTerm"
    self.assertTrue( other_value == sboTerm )
    result = self.S.unsetAttribute("sboTerm")
    self.assertTrue( self.S.isSetSBOTerm() == False )
    self.assertTrue( self.S.isSetAttribute("sboTerm") == False )
    result = self.S.getAttribute("sboTerm",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertEqual( True, value ==-1 )
    pass  

  def test_Attributes_SimpleSpeciesReference_species(self):
    obj = libsbml.SpeciesReference(3,1)
    initialValue =  "string";
    result = obj.setAttribute("species",initialValue)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.getSpecies() == initialValue )
    self.assertTrue( obj.isSetSpecies() == True )
    self.assertTrue( obj.isSetAttribute("species") == True )
    result = obj.getAttribute("species",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == initialValue )
    otherValue = obj.getAttribute < string > "species"
    self.assertTrue( otherValue == initialValue )
    result = obj.unsetAttribute("species")
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.isSetSpecies() == False )
    self.assertTrue( obj.isSetAttribute("species") == False )
    result = obj.getAttribute("species",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertEqual( True, value.empty() )
    obj = None
    pass  

  def test_Attributes_SpeciesReference_constant(self):
    obj = libsbml.SpeciesReference(3,1)
    initialValue = True
    result = obj.setAttribute("constant",initialValue)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.getConstant() == initialValue )
    self.assertTrue( obj.isSetConstant() == True )
    self.assertTrue( obj.isSetAttribute("constant") == True )
    result = obj.getAttribute("constant",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == initialValue )
    otherValue = obj.getAttribute < bool > "constant"
    self.assertTrue( otherValue == initialValue )
    result = obj.unsetAttribute("constant")
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.isSetConstant() == False )
    self.assertTrue( obj.isSetAttribute("constant") == False )
    result = obj.getAttribute("constant",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == True )
    obj = None
    pass  

  def test_Attributes_SpeciesReference_denominator(self):
    obj = libsbml.SpeciesReference(1,2)
    initialValue = 2
    result = obj.setAttribute("denominator",initialValue)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.getDenominator() == initialValue )
    self.assertTrue( obj.isSetAttribute("denominator") == True )
    result = obj.getAttribute("denominator",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == initialValue )
    otherValue = obj.getAttribute < int > "denominator"
    self.assertTrue( otherValue == initialValue )
    result = obj.unsetAttribute("denominator")
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.isSetAttribute("denominator") == True )
    result = obj.getAttribute("denominator",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == 1 )
    obj = None
    pass  

  def test_Attributes_SpeciesReference_stoichiometry(self):
    obj = libsbml.SpeciesReference(1,2)
    initialValue = 3
    result = obj.setAttribute("stoichiometry",initialValue)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertEqual( True, util_isEqual )
    self.assertTrue( obj.isSetStoichiometry() == True )
    self.assertTrue( obj.isSetAttribute("stoichiometry") == True )
    result = obj.getAttribute("stoichiometry",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == initialValue )
    otherValue = obj.getAttribute < int > "stoichiometry"
    self.assertTrue( otherValue == initialValue )
    result = obj.unsetAttribute("stoichiometry")
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.isSetStoichiometry() == True )
    self.assertTrue( obj.isSetAttribute("stoichiometry") == True )
    result = obj.getAttribute("stoichiometry",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == 1 )
    obj = None
    pass  

  def test_Attributes_SpeciesReference_stoichiometry_double(self):
    obj = libsbml.SpeciesReference(3,1)
    initialValue = 3.6
    result = obj.setAttribute("stoichiometry",initialValue)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertEqual( True, util_isEqual )
    self.assertTrue( obj.isSetStoichiometry() == True )
    self.assertTrue( obj.isSetAttribute("stoichiometry") == True )
    result = obj.getAttribute("stoichiometry",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertEqual( True, util_isEqual )
    otherValue = obj.getAttribute < double > "stoichiometry"
    self.assertEqual( True, util_isEqual )
    result = obj.unsetAttribute("stoichiometry")
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.isSetStoichiometry() == False )
    self.assertTrue( obj.isSetAttribute("stoichiometry") == False )
    result = obj.getAttribute("stoichiometry",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertEqual( True, util_isNaN )
    obj = None
    pass  

  def test_Attributes_Species_charge(self):
    obj = libsbml.Species(2,1)
    initialValue = 2
    result = obj.setAttribute("charge",initialValue)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.getCharge() == initialValue )
    self.assertTrue( obj.isSetCharge() == True )
    self.assertTrue( obj.isSetAttribute("charge") == True )
    result = obj.getAttribute("charge",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == initialValue )
    otherValue = obj.getAttribute < int > "charge"
    self.assertTrue( otherValue == initialValue )
    result = obj.unsetAttribute("charge")
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.isSetCharge() == False )
    self.assertTrue( obj.isSetAttribute("charge") == False )
    result = obj.getAttribute("charge",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == 0 )
    obj = None
    pass  

  def test_Attributes_Species_compartment(self):
    obj = libsbml.Species(3,1)
    initialValue =  "string";
    result = obj.setAttribute("compartment",initialValue)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.getCompartment() == initialValue )
    self.assertTrue( obj.isSetCompartment() == True )
    self.assertTrue( obj.isSetAttribute("compartment") == True )
    result = obj.getAttribute("compartment",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == initialValue )
    otherValue = obj.getAttribute < string > "compartment"
    self.assertTrue( otherValue == initialValue )
    result = obj.unsetAttribute("compartment")
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.isSetCompartment() == False )
    self.assertTrue( obj.isSetAttribute("compartment") == False )
    result = obj.getAttribute("compartment",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertEqual( True, value.empty() )
    obj = None
    pass  

  def test_Attributes_Species_hasOnlySubstanceUnits(self):
    obj = libsbml.Species(3,1)
    initialValue = True
    result = obj.setAttribute("hasOnlySubstanceUnits",initialValue)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.getHasOnlySubstanceUnits() == initialValue )
    self.assertTrue( obj.isSetHasOnlySubstanceUnits() == True )
    self.assertTrue( obj.isSetAttribute("hasOnlySubstanceUnits") == True )
    result = obj.getAttribute("hasOnlySubstanceUnits",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == initialValue )
    otherValue = obj.getAttribute < bool > "hasOnlySubstanceUnits"
    self.assertTrue( otherValue == initialValue )
    result = obj.unsetAttribute("hasOnlySubstanceUnits")
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.isSetHasOnlySubstanceUnits() == False )
    self.assertTrue( obj.isSetAttribute("hasOnlySubstanceUnits") == False )
    result = obj.getAttribute("hasOnlySubstanceUnits",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == True )
    obj = None
    pass  

  def test_Attributes_Species_initialAmount(self):
    obj = libsbml.Species(3,1)
    initialValue = 3.6
    result = obj.setAttribute("initialAmount",initialValue)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertEqual( True, util_isEqual )
    self.assertTrue( obj.isSetInitialAmount() == True )
    self.assertTrue( obj.isSetAttribute("initialAmount") == True )
    result = obj.getAttribute("initialAmount",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertEqual( True, util_isEqual )
    otherValue = obj.getAttribute < double > "initialAmount"
    self.assertEqual( True, util_isEqual )
    result = obj.unsetAttribute("initialAmount")
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.isSetInitialAmount() == False )
    self.assertTrue( obj.isSetAttribute("initialAmount") == False )
    result = obj.getAttribute("initialAmount",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertEqual( True, util_isNaN )
    obj = None
    pass  

  def test_Attributes_Trigger_Id(self):
    obj = libsbml.Trigger(3,2)
    const std::string& att_name =  "id";
    id =  "x12345";
    result = obj.setAttribute(att_name,id)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.getId() == id )
    self.assertTrue( obj.isSetId() == True )
    self.assertTrue( obj.isSetAttribute(att_name) == True )
    result = obj.getAttribute(att_name,value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == id )
    result = obj.getAttribute(att_name,other_value)
    self.assertTrue( other_value == id )
    result = obj.unsetAttribute(att_name)
    self.assertTrue( obj.isSetId() == False )
    self.assertTrue( obj.isSetAttribute(att_name) == False )
    result = obj.getAttribute(att_name,value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertEqual( True, value.empty() )
    obj = None
    pass  

  def test_Attributes_Trigger_MetaId(self):
    obj = libsbml.Trigger(3,1)
    const std::string& metaid =  "x12345";
    result = obj.setAttribute("metaid",metaid)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.getMetaId() == metaid )
    self.assertTrue( obj.isSetMetaId() == True )
    self.assertTrue( obj.isSetAttribute("metaid") == True )
    result = obj.getAttribute("metaid",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == metaid )
    other_value = obj.getAttribute < string > "metaid"
    self.assertTrue( other_value == metaid )
    result = obj.unsetAttribute("metaid")
    self.assertTrue( obj.isSetMetaId() == False )
    self.assertTrue( obj.isSetAttribute("metaid") == False )
    result = obj.getAttribute("metaid",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value ==  "" )
    obj = None
    pass  

  def test_Attributes_Trigger_initialValue(self):
    obj = libsbml.Trigger(3,1)
    initialValue = True
    result = obj.setAttribute("initialValue",initialValue)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.getInitialValue() == initialValue )
    self.assertTrue( obj.isSetInitialValue() == True )
    self.assertTrue( obj.isSetAttribute("initialValue") == True )
    result = obj.getAttribute("initialValue",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == initialValue )
    otherValue = obj.getAttribute < bool > "initialValue"
    self.assertTrue( otherValue == initialValue )
    result = obj.getAttribute("initialValue",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == initialValue )
    result = obj.unsetAttribute("initialValue")
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.isSetInitialValue() == False )
    self.assertTrue( obj.isSetAttribute("initialValue") == False )
    result = obj.getAttribute("initialValue",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == True )
    obj = None
    pass  

  def test_Attributes_Unit_exponent(self):
    obj = libsbml.Unit(3,1)
    initialValue = 2
    result = obj.setAttribute("exponent",initialValue)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.getExponent() == initialValue )
    self.assertTrue( obj.isSetExponent() == True )
    self.assertTrue( obj.isSetAttribute("exponent") == True )
    result = obj.getAttribute("exponent",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == initialValue )
    otherValue = obj.getAttribute < int > "exponent"
    self.assertTrue( otherValue == initialValue )
    result = obj.unsetAttribute("exponent")
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.isSetExponent() == False )
    self.assertTrue( obj.isSetAttribute("exponent") == False )
    result = obj.getAttribute("exponent",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == 0 )
    obj = None
    pass  

  def test_Attributes_Unit_exponent_double(self):
    obj = libsbml.Unit(3,1)
    initialValue = 3.6
    result = obj.setAttribute("exponent",initialValue)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertEqual( True, util_isEqual )
    self.assertTrue( obj.isSetExponent() == True )
    self.assertTrue( obj.isSetAttribute("exponent") == True )
    result = obj.getAttribute("exponent",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertEqual( True, util_isEqual )
    otherValue = obj.getAttribute < double > "exponent"
    self.assertEqual( True, util_isEqual )
    result = obj.unsetAttribute("exponent")
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.isSetExponent() == False )
    self.assertTrue( obj.isSetAttribute("exponent") == False )
    result = obj.getAttribute("exponent",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertEqual( True, util_isNaN )
    obj = None
    pass  

  def test_Attributes_Unit_multiplier(self):
    obj = libsbml.Unit(3,1)
    initialValue = 3.6
    result = obj.setAttribute("multiplier",initialValue)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertEqual( True, util_isEqual )
    self.assertTrue( obj.isSetMultiplier() == True )
    self.assertTrue( obj.isSetAttribute("multiplier") == True )
    result = obj.getAttribute("multiplier",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertEqual( True, util_isEqual )
    otherValue = obj.getAttribute < double > "multiplier"
    self.assertEqual( True, util_isEqual )
    result = obj.unsetAttribute("multiplier")
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.isSetMultiplier() == False )
    self.assertTrue( obj.isSetAttribute("multiplier") == False )
    result = obj.getAttribute("multiplier",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertEqual( True, util_isNaN )
    obj = None
    pass  

  def test_Attributes_Unit_scale(self):
    obj = libsbml.Unit(3,1)
    initialValue = 2
    result = obj.setAttribute("scale",initialValue)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.getScale() == initialValue )
    self.assertTrue( obj.isSetScale() == True )
    self.assertTrue( obj.isSetAttribute("scale") == True )
    result = obj.getAttribute("scale",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == initialValue )
    otherValue = obj.getAttribute < int > "scale"
    self.assertTrue( otherValue == initialValue )
    result = obj.unsetAttribute("scale")
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( obj.isSetScale() == False )
    self.assertTrue( obj.isSetAttribute("scale") == False )
    result = obj.getAttribute("scale",value)
    self.assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( value == SBML_INT_MAX )
    obj = None
    pass  

  def test_Elements_Event(self):
    m = libsbml.Model(3,1)
    e = m.createChildObject("event")
    self.assertTrue( e.getNumEventAssignments() == 0 )
    self.assertTrue( e.getNumObjects("eventAssignments") == 0 )
    self.assertTrue( e.isSetTrigger() == False )
    self.assertTrue( e.getNumObjects("trigger") == 0 )
    t = e.createChildObject("trigger")
    self.assertTrue( e.isSetTrigger() == True )
    self.assertTrue( e.getNumObjects("trigger") == 1 )
    t1 = t.clone()
    t1.setPersistent(True)
    t1.setInitialValue(False)
    math = libsbml.parseFormula("true")
    t1.setMath(math)
    math = None
    e.unsetTrigger()
    self.assertTrue( e.isSetTrigger() == False )
    self.assertTrue( e.getNumObjects("trigger") == 0 )
    self.assertTrue( e.addChildObject("trigger",t1) == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( e.isSetTrigger() == True )
    self.assertTrue( e.getNumObjects("trigger") == 1 )
    t1 = None
    t2 = e.removeChildObject("trigger", "")
    self.assertTrue( t2 != None )
    self.assertTrue( e.isSetTrigger() == False )
    self.assertTrue( e.getNumObjects("trigger") == 0 )
    t2 = None
    m = None
    pass  

  def test_Elements_Model(self):
    m = libsbml.Model(3,1)
    self.assertTrue( m.getNumSpecies() == 0 )
    self.assertTrue( m.getNumObjects("species") == 0 )
    s = m.createChildObject("species")
    s.setId("s1")
    self.assertTrue( m.getNumSpecies() == 1 )
    self.assertTrue( m.getNumObjects("species") == 1 )
    s2 = s.clone()
    s2.setId("s2")
    s2.setCompartment("c")
    s2.setHasOnlySubstanceUnits(False)
    s2.setConstant(False)
    s2.setBoundaryCondition(True)
    self.assertTrue( m.addChildObject("species",s2) == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( m.getNumSpecies() == 2 )
    self.assertTrue( m.getNumObjects("species") == 2 )
    ss = m.removeChildObject("species", "s1")
    self.assertTrue( ss != None )
    self.assertTrue( ss.getId() ==  "s1" )
    self.assertTrue( m.getNumSpecies() == 1 )
    self.assertTrue( m.getNumObjects("species") == 1 )
    s2 = None
    ss = None
    m = None
    pass  

def suite():
  suite = unittest.TestSuite()
  suite.addTest(unittest.makeSuite(TestAttributeFunctions))

  return suite

if __name__ == "__main__":
  if unittest.TextTestRunner(verbosity=1).run(suite()).wasSuccessful() :
    sys.exit(0)
  else:
    sys.exit(1)
