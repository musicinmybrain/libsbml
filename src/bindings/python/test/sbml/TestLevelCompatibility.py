#
# @file    TestLevelCompatibility.py
# @brief   Compatability between levels unit tests
#
# @author  Akiya Jouraku (Python conversion)
# @author  Sarah Keating 
# 
# ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
#
# DO NOT EDIT THIS FILE.
#
# This file was generated automatically by converting the file located at
# src/sbml/test/TestLevelCompatibility.cpp
# using the conversion program dev/utilities/translateTests/translateTests.pl.
# Any changes made here will be lost the next time the file is regenerated.
#
# -----------------------------------------------------------------------------
# This file is part of libSBML.  Please visit http://sbml.org for more
# information about SBML, and the latest version of libSBML.
#
# Copyright 2005-2010 California Institute of Technology.
# Copyright 2002-2005 California Institute of Technology and
#                     Japan Science and Technology Corporation.
# 
# This library is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation.  A copy of the license agreement is provided
# in the file named "LICENSE.txt" included with this software distribution
# and also available online as http://sbml.org/software/libsbml/license.html
# -----------------------------------------------------------------------------

import sys
import unittest
import libsbml


class TestLevelCompatibility(unittest.TestCase):


  def test_LevelCompatibility_unit_fails(self):
    reader = libsbml.SBMLReader()
    filename = "../../sbml/sbml/test/test-data/"
    filename += "inconsistent-l2v1-units.xml"
    d = reader.readSBML(filename)
    if (d == None):
      pass    
    n = d.checkL2v1Compatibility()
    self.assertTrue( n == 1 )
    self.assertTrue( d.getError(0).getErrorId() == StrictUnitsRequiredInL2v1 )
    d.getErrorLog().clearLog()
    n = d.checkL2v1Compatibility(True)
    self.assertTrue( n == 0 )
    d = None
    pass  

  def test_LevelCompatibility_unit_fails_l1(self):
    reader = libsbml.SBMLReader()
    filename = "../../sbml/sbml/test/test-data/"
    filename += "inconsistent-l2v1-units.xml"
    d = reader.readSBML(filename)
    if (d == None):
      pass    
    n = d.checkL1Compatibility()
    self.assertTrue( n == 1 )
    self.assertTrue( d.getError(0).getErrorId() == StrictUnitsRequiredInL1 )
    d.getErrorLog().clearLog()
    n = d.checkL1Compatibility(True)
    self.assertTrue( n == 0 )
    d = None
    pass  

  def test_LevelCompatibility_unit_fails_l2v2(self):
    reader = libsbml.SBMLReader()
    filename = "../../sbml/sbml/test/test-data/"
    filename += "inconsistent-l2v1-units.xml"
    d = reader.readSBML(filename)
    if (d == None):
      pass    
    n = d.checkL2v2Compatibility()
    self.assertTrue( n == 1 )
    self.assertTrue( d.getError(0).getErrorId() == StrictUnitsRequiredInL2v2 )
    d.getErrorLog().clearLog()
    n = d.checkL1Compatibility(True)
    self.assertTrue( n == 0 )
    d = None
    pass  

  def test_LevelCompatibility_unit_fails_l2v3(self):
    reader = libsbml.SBMLReader()
    filename = "../../sbml/sbml/test/test-data/"
    filename += "inconsistent-l2v1-units.xml"
    d = reader.readSBML(filename)
    if (d == None):
      pass    
    n = d.checkL2v3Compatibility()
    self.assertTrue( n == 1 )
    self.assertTrue( d.getError(0).getErrorId() == StrictUnitsRequiredInL2v3 )
    d.getErrorLog().clearLog()
    n = d.checkL1Compatibility(True)
    self.assertTrue( n == 0 )
    d = None
    pass  

  def test_LevelCompatibility_unit_warnings(self):
    reader = libsbml.SBMLReader()
    filename = "../../sbml/sbml/test/test-data/"
    filename += "inconsistent-l2v1-units-2.xml"
    d = reader.readSBML(filename)
    if (d == None):
      pass    
    n = d.checkL2v1Compatibility()
    self.assertTrue( n == 0 )
    d.getErrorLog().clearLog()
    n = d.checkL2v1Compatibility(True)
    self.assertTrue( n == 0 )
    d = None
    pass  

  def test_LevelCompatibility_unit_warnings_l1(self):
    reader = libsbml.SBMLReader()
    filename = "../../sbml/sbml/test/test-data/"
    filename += "inconsistent-l2v1-units-2.xml"
    d = reader.readSBML(filename)
    if (d == None):
      pass    
    n = d.checkL1Compatibility()
    self.assertTrue( n == 0 )
    d.getErrorLog().clearLog()
    n = d.checkL1Compatibility(True)
    self.assertTrue( n == 0 )
    d = None
    pass  

def suite():
  suite = unittest.TestSuite()
  suite.addTest(unittest.makeSuite(TestLevelCompatibility))

  return suite

if __name__ == "__main__":
  if unittest.TextTestRunner(verbosity=1).run(suite()).wasSuccessful() :
    sys.exit(0)
  else:
    sys.exit(1)
