#
# @file    TestReadFromFileL3V2_2.py
# @brief   Reads test-data/l3v2-empty-lo-1.xml into memory and tests it.
#
# @author  Akiya Jouraku (Python conversion)
# @author  Sarah Keating 
# 
# ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
#
# DO NOT EDIT THIS FILE.
#
# This file was generated automatically by converting the file located at
# src/sbml/test/TestReadFromFileL3V2_2.cpp
# using the conversion program dev/utilities/translateTests/translateTests.pl.
# Any changes made here will be lost the next time the file is regenerated.
#
# -----------------------------------------------------------------------------
# This file is part of libSBML.  Please visit http://sbml.org for more
# information about SBML, and the latest version of libSBML.
#
# Copyright 2005-2010 California Institute of Technology.
# Copyright 2002-2005 California Institute of Technology and
#                     Japan Science and Technology Corporation.
# 
# This library is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation.  A copy of the license agreement is provided
# in the file named "LICENSE.txt" included with this software distribution
# and also available online as http://sbml.org/software/libsbml/license.html
# -----------------------------------------------------------------------------

import sys
import unittest
import libsbml


class TestReadFromFileL3V2_2(unittest.TestCase):


  def test_echo_l3v2_empty_lo_1(self):
    expected = wrapString("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + 
    "<sbml xmlns=\"http://www.sbml.org/sbml/level3/version2/core\" " + 
    "level=\"3\" version=\"2\">\n"  + 
    "  <model substanceUnits=\"mole\" timeUnits=\"second\" volumeUnits=\"litre\" " + 
    "areaUnits=\"metre\" lengthUnits=\"metre\" extentUnits=\"mole\" " + 
    "conversionFactor=\"p\">\n" + 
    "    <listOfFunctionDefinitions id=\"s\"/>\n" + 
    "    <listOfUnitDefinitions name=\"ss\"/>\n" + 
    "    <listOfCompartments id=\"s1\"/>\n" + 
    "    <listOfSpecies>\n" + 
    "      <annotation>\n" + 
    "        <rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" " + 
    "xmlns:dc=\"http://purl.org/dc/elements/1.1/\" " + 
    "xmlns:dcterms=\"http://purl.org/dc/terms/\" " + 
    "xmlns:vCard=\"http://www.w3.org/2001/vcard-rdf/3.0#\" " + 
    "xmlns:bqbiol=\"http://biomodels.net/biology-qualifiers/\" " + 
    "xmlns:bqmodel=\"http://biomodels.net/model-qualifiers/\">\n" + 
    "          <rdf:Description rdf:about=\"#_000002\">\n" + 
    "            <bqbiol:is>\n" + 
    "              <rdf:Bag>\n" + 
    "                <rdf:li rdf:resource=\"http://www.geneontology.org/#GO:0007274\"/>\n" + 
    "                <rdf:li rdf:resource=\"http://www.geneontology.org/#GO:0015464\"/>\n" + 
    "                <rdf:li rdf:resource=\"http://www.genome.jp/kegg/pathway/#hsa04080\"/>\n" + 
    "                <rdf:li rdf:resource=\"http://www.ncbi.nlm.nih.gov/Taxonomy/#7787\"/>\n" + 
    "              </rdf:Bag>\n" + 
    "            </bqbiol:is>\n" + 
    "          </rdf:Description>\n" + 
    "        </rdf:RDF>\n" + 
    "      </annotation>\n" + 
    "    </listOfSpecies>\n" + 
    "    <listOfParameters id=\"d\"/>\n" + 
    "    <listOfInitialAssignments name=\"55\"/>\n" + 
    "    <listOfRules>\n" + 
    "      <notes>\n" + 
    "        <body xmlns=\"http://www.w3.org/1999/xhtml\">\n" + 
    "          <center>\n" + 
    "            <h2>A Simple Mitotic Oscillator</h2>\n" + 
    "          </center>\n" + 
    "          <p>A minimal cascade model for the mitotic oscillator involving cyclin and cdc2 kinase</p>\n" + 
    "        </body>\n" + 
    "      </notes>\n" + 
    "    </listOfRules>\n" + 
    "    <listOfConstraints id=\"c\"/>\n" + 
    "    <listOfReactions name=\"v\"/>\n" + 
    "    <listOfEvents id=\"s\"/>\n" + 
    "  </model>\n" + 
    "</sbml>\n")
    filename = "../../sbml/sbml/test/test-data/"
    filename += "l3v2-empty-lo-1.xml"
    fileout = "../../sbml/sbml/test/test-data/"
    fileout += "tempOut.xml"
    d = libsbml.readSBML()
    if (d == None):
      pass    
    libsbml.writeSBML(d)
    outD = libsbml.readSBML()
    m = outD.getModel()
    self.assertTrue( m != None )
    self.assertTrue( m.getNumUnitDefinitions() == 0 )
    self.assertTrue( m.getListOfUnitDefinitions().isSetName() == True )
    self.assertTrue( m.getListOfUnitDefinitions().getName() ==  "ss" )
    self.assertTrue( m.getNumFunctionDefinitions() == 0 )
    self.assertTrue( m.getListOfFunctionDefinitions().isSetId() == True )
    self.assertTrue( m.getListOfFunctionDefinitions().getId() ==  "s" )
    self.assertTrue( m.getNumCompartments() == 0 )
    self.assertTrue( m.getListOfCompartments().isSetId() == True )
    self.assertTrue( m.getListOfCompartments().getId() ==  "s1" )
    self.assertTrue( m.getNumSpecies() == 0 )
    self.assertTrue( m.getListOfSpecies().isSetAnnotation() == True )
    self.assertTrue( m.getListOfSpecies().isSetNotes() == False )
    self.assertTrue( m.getNumParameters() == 0 )
    self.assertTrue( m.getListOfParameters().isSetId() == True )
    self.assertTrue( m.getListOfParameters().getId() ==  "d" )
    self.assertTrue( m.getNumRules() == 0 )
    self.assertTrue( m.getListOfRules().isSetAnnotation() == False )
    self.assertTrue( m.getListOfRules().isSetNotes() == True )
    self.assertTrue( m.getNumInitialAssignments() == 0 )
    self.assertTrue( m.getListOfInitialAssignments().isSetName() == True )
    self.assertTrue( m.getListOfInitialAssignments().getName() ==  "55" )
    self.assertTrue( m.getNumConstraints() == 0 )
    self.assertTrue( m.getListOfConstraints().isSetName() == False )
    self.assertTrue( m.getListOfConstraints().isSetId() == True )
    self.assertTrue( m.getListOfConstraints().getId() ==  "c" )
    self.assertTrue( m.getNumReactions() == 0 )
    self.assertTrue( m.getListOfReactions().isSetName() == True )
    self.assertTrue( m.getListOfReactions().isSetId() == False )
    self.assertTrue( m.getListOfReactions().getName() ==  "v" )
    self.assertTrue( m.getNumEvents() == 0 )
    self.assertTrue( m.getListOfEvents().isSetName() == False )
    self.assertTrue( m.getListOfEvents().isSetId() == True )
    self.assertTrue( m.getListOfEvents().getId() ==  "s" )
    S = libsbml.writeSBMLToString(outD)
    self.assertEqual( True, self.equals(expected,S) )
    d = None
    outD = None
    pass  

  def test_echo_l3v2_empty_lo_3(self):
    expected = wrapString("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + 
    "<sbml xmlns=\"http://www.sbml.org/sbml/level3/version2/core\" " + 
    "level=\"3\" version=\"2\">\n"  + 
    "  <model substanceUnits=\"mole\" timeUnits=\"second\" volumeUnits=\"litre\" " + 
    "areaUnits=\"metre\" lengthUnits=\"metre\" extentUnits=\"mole\" " + 
    "conversionFactor=\"p\">\n" + 
    "    <listOfUnitDefinitions>\n" + 
    "      <unitDefinition id=\"nonsense\">\n" + 
    "        <listOfUnits/>\n" + 
    "      </unitDefinition>\n" + 
    "    </listOfUnitDefinitions>\n" + 
    "    <listOfReactions>\n" + 
    "      <reaction id=\"in\" reversible=\"false\" compartment=\"comp\">\n" + 
    "        <listOfReactants/>\n" + 
    "        <listOfProducts name=\"ss\"/>\n" + 
    "        <listOfModifiers sboTerm=\"SBO:0000002\"/>\n" + 
    "        <kineticLaw>\n" + 
    "          <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\n" + 
    "            <apply>\n" + 
    "              <times/>\n" + 
    "              <ci> k1 </ci>\n" + 
    "              <ci> X0 </ci>\n" + 
    "              <ci> cell </ci>\n" + 
    "            </apply>\n" + 
    "          </math>\n" + 
    "          <listOfLocalParameters>\n" + 
    "            <notes>\n" + 
    "              <body xmlns=\"http://www.w3.org/1999/xhtml\">\n" + 
    "                <center>\n" + 
    "                  <h2>A Simple Mitotic Oscillator</h2>\n" + 
    "                </center>\n" + 
    "                <p>A minimal cascade model for the mitotic oscillator involving cyclin and cdc2 kinase</p>\n" + 
    "              </body>\n" + 
    "            </notes>\n" + 
    "          </listOfLocalParameters>\n" + 
    "        </kineticLaw>\n" + 
    "      </reaction>\n" + 
    "    </listOfReactions>\n" + 
    "    <listOfEvents/>\n" + 
    "  </model>\n" + 
    "</sbml>\n")
    filename = "../../sbml/sbml/test/test-data/"
    filename += "l3v2-empty-lo-3.xml"
    fileout = "../../sbml/sbml/test/test-data/"
    fileout += "tempOut.xml"
    d = libsbml.readSBML()
    if (d == None):
      pass    
    libsbml.writeSBML(d)
    outD = libsbml.readSBML()
    m = outD.getModel()
    self.assertTrue( m != None )
    self.assertTrue( m.getNumUnitDefinitions() == 1 )
    self.assertTrue( m.getNumFunctionDefinitions() == 0 )
    self.assertTrue( m.getNumCompartments() == 0 )
    self.assertTrue( m.getNumSpecies() == 0 )
    self.assertTrue( m.getNumParameters() == 0 )
    self.assertTrue( m.getNumRules() == 0 )
    self.assertTrue( m.getNumInitialAssignments() == 0 )
    self.assertTrue( m.getNumConstraints() == 0 )
    self.assertTrue( m.getNumReactions() == 1 )
    self.assertTrue( m.getNumEvents() == 0 )
    ud = m.getUnitDefinition(0)
    self.assertTrue( ud != None )
    self.assertTrue( ud.getNumUnits() == 0 )
    r = m.getReaction(0)
    self.assertTrue( r != None )
    self.assertTrue( r.getNumReactants() == 0 )
    self.assertTrue( r.getNumProducts() == 0 )
    self.assertTrue( r.getListOfProducts().isSetName() == True )
    self.assertTrue( r.getListOfProducts().getName() ==  "ss" )
    self.assertTrue( r.getNumModifiers() == 0 )
    self.assertTrue( r.getListOfModifiers().isSetSBOTerm() == True )
    self.assertTrue( r.getListOfModifiers().getSBOTerm() == 2 )
    kl = r.getKineticLaw()
    self.assertTrue( kl != None )
    self.assertTrue( kl.getNumLocalParameters() == 0 )
    self.assertTrue( kl.getListOfLocalParameters().isSetNotes() == True )
    self.assertTrue( kl.getListOfLocalParameters().isSetAnnotation() == False )
    S = libsbml.writeSBMLToString(outD)
    self.assertEqual( True, self.equals(expected,S) )
    d = None
    outD = None
    pass  

  def test_read_l3v2_empty_lo_1(self):
    reader = libsbml.SBMLReader()
    filename = "../../sbml/sbml/test/test-data/"
    filename += "l3v2-empty-lo-1.xml"
    d = reader.readSBML(filename)
    if (d == None):
      pass    
    self.assertTrue( d.getLevel() == 3 )
    self.assertTrue( d.getVersion() == 2 )
    m = d.getModel()
    self.assertTrue( m != None )
    self.assertTrue( m.getNumUnitDefinitions() == 0 )
    self.assertTrue( m.getListOfUnitDefinitions().isSetName() == True )
    self.assertTrue( m.getListOfUnitDefinitions().getName() ==  "ss" )
    self.assertTrue( m.getNumFunctionDefinitions() == 0 )
    self.assertTrue( m.getListOfFunctionDefinitions().isSetId() == True )
    self.assertTrue( m.getListOfFunctionDefinitions().getId() ==  "s" )
    self.assertTrue( m.getNumCompartments() == 0 )
    self.assertTrue( m.getListOfCompartments().isSetId() == True )
    self.assertTrue( m.getListOfCompartments().getId() ==  "s1" )
    self.assertTrue( m.getNumSpecies() == 0 )
    self.assertTrue( m.getListOfSpecies().isSetAnnotation() == True )
    self.assertTrue( m.getListOfSpecies().isSetNotes() == False )
    self.assertTrue( m.getNumParameters() == 0 )
    self.assertTrue( m.getListOfParameters().isSetId() == True )
    self.assertTrue( m.getListOfParameters().getId() ==  "d" )
    self.assertTrue( m.getNumRules() == 0 )
    self.assertTrue( m.getListOfRules().isSetAnnotation() == False )
    self.assertTrue( m.getListOfRules().isSetNotes() == True )
    self.assertTrue( m.getNumInitialAssignments() == 0 )
    self.assertTrue( m.getListOfInitialAssignments().isSetName() == True )
    self.assertTrue( m.getListOfInitialAssignments().getName() ==  "55" )
    self.assertTrue( m.getNumConstraints() == 0 )
    self.assertTrue( m.getListOfConstraints().isSetName() == False )
    self.assertTrue( m.getListOfConstraints().isSetId() == True )
    self.assertTrue( m.getListOfConstraints().getId() ==  "c" )
    self.assertTrue( m.getNumReactions() == 0 )
    self.assertTrue( m.getListOfReactions().isSetName() == True )
    self.assertTrue( m.getListOfReactions().isSetId() == False )
    self.assertTrue( m.getListOfReactions().getName() ==  "v" )
    self.assertTrue( m.getNumEvents() == 0 )
    self.assertTrue( m.getListOfEvents().isSetName() == False )
    self.assertTrue( m.getListOfEvents().isSetId() == True )
    self.assertTrue( m.getListOfEvents().getId() ==  "s" )
    d = None
    pass  

def suite():
  suite = unittest.TestSuite()
  suite.addTest(unittest.makeSuite(TestReadFromFileL3V2_2))

  return suite

if __name__ == "__main__":
  if unittest.TextTestRunner(verbosity=1).run(suite()).wasSuccessful() :
    sys.exit(0)
  else:
    sys.exit(1)
