#
# @file    TestReadFromFileL3V2_4.py
# @brief   Reads test-data/l3v2-empty-lo-2.xml into memory and tests it.
#
# @author  Akiya Jouraku (Python conversion)
# @author  Sarah Keating 
# 
# ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
#
# DO NOT EDIT THIS FILE.
#
# This file was generated automatically by converting the file located at
# src/sbml/test/TestReadFromFileL3V2_4.cpp
# using the conversion program dev/utilities/translateTests/translateTests.pl.
# Any changes made here will be lost the next time the file is regenerated.
#
# -----------------------------------------------------------------------------
# This file is part of libSBML.  Please visit http://sbml.org for more
# information about SBML, and the latest version of libSBML.
#
# Copyright 2005-2010 California Institute of Technology.
# Copyright 2002-2005 California Institute of Technology and
#                     Japan Science and Technology Corporation.
# 
# This library is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation.  A copy of the license agreement is provided
# in the file named "LICENSE.txt" included with this software distribution
# and also available online as http://sbml.org/software/libsbml/license.html
# -----------------------------------------------------------------------------

import sys
import unittest
import libsbml


class TestReadFromFileL3V2_4(unittest.TestCase):


  def test_echo_l3v2_empty_math(self):
    expected = wrapString("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + 
    "<sbml xmlns=\"http://www.sbml.org/sbml/level3/version2/core\" " + 
    "level=\"3\" version=\"2\">\n"  + 
    "  <model substanceUnits=\"mole\" timeUnits=\"second\" volumeUnits=\"litre\" " + 
    "areaUnits=\"metre\" lengthUnits=\"metre\" extentUnits=\"mole\" " + 
    "conversionFactor=\"p\">\n" + 
    "    <listOfCompartments>\n" + 
    "      <compartment id=\"c\" constant=\"true\"/>\n" + 
    "    </listOfCompartments>\n" + 
    "    <listOfSpecies>\n" + 
    "      <species id=\"s\" compartment=\"c\" hasOnlySubstanceUnits=\"false\" boundaryCondition=\"false\" constant=\"false\"/>\n" + 
    "    </listOfSpecies>\n" + 
    "    <listOfParameters>\n" + 
    "      <parameter id=\"p\" value=\"1\" units=\"dimensionless\" constant=\"true\"/>\n" + 
    "    </listOfParameters>\n" + 
    "    <listOfInitialAssignments>\n" + 
    "      <initialAssignment symbol=\"p\"/>\n" + 
    "    </listOfInitialAssignments>\n" + 
    "    <listOfRules>\n" + 
    "      <algebraicRule/>\n" + 
    "    </listOfRules>\n" + 
    "    <listOfReactions>\n" + 
    "      <reaction id=\"r\" reversible=\"false\">\n" + 
    "        <listOfReactants>\n" + 
    "          <speciesReference species=\"s\" constant=\"true\"/>\n" + 
    "        </listOfReactants>\n" + 
    "        <kineticLaw/>\n" + 
    "      </reaction>\n" + 
    "    </listOfReactions>\n" + 
    "  </model>\n" + 
    "</sbml>\n")
    filename = "../../sbml/sbml/test/test-data/"
    filename += "l3v2-empty-math.xml"
    fileout = "../../sbml/sbml/test/test-data/"
    fileout += "tempOut.xml"
    d = libsbml.readSBML()
    if (d == None):
      pass    
    libsbml.writeSBML(d)
    outD = libsbml.readSBML()
    m = outD.getModel()
    self.assertTrue( m != None )
    self.assertTrue( m.getNumUnitDefinitions() == 0 )
    self.assertTrue( m.getNumFunctionDefinitions() == 0 )
    self.assertTrue( m.getNumCompartments() == 1 )
    self.assertTrue( m.getNumSpecies() == 1 )
    self.assertTrue( m.getNumParameters() == 1 )
    self.assertTrue( m.getNumRules() == 1 )
    self.assertTrue( m.getNumInitialAssignments() == 1 )
    self.assertTrue( m.getNumConstraints() == 0 )
    self.assertTrue( m.getNumReactions() == 1 )
    self.assertTrue( m.getNumEvents() == 0 )
    ia = m.getInitialAssignment(0)
    self.assertTrue( ia != None )
    self.assertTrue( ia.isSetMath() == False )
    r = m.getReaction(0)
    self.assertTrue( r != None )
    kl = r.getKineticLaw()
    self.assertTrue( kl != None )
    self.assertTrue( kl.isSetMath() == False )
    S = libsbml.writeSBMLToString(outD)
    self.assertEqual( True, self.equals(expected,S) )
    d = None
    outD = None
    pass  

  def test_read_l3v2_empty_math(self):
    reader = libsbml.SBMLReader()
    filename = "../../sbml/sbml/test/test-data/"
    filename += "l3v2-empty-math.xml"
    d = reader.readSBML(filename)
    if (d == None):
      pass    
    self.assertTrue( d.getLevel() == 3 )
    self.assertTrue( d.getVersion() == 2 )
    m = d.getModel()
    self.assertTrue( m != None )
    self.assertTrue( m.getNumUnitDefinitions() == 0 )
    self.assertTrue( m.getNumFunctionDefinitions() == 0 )
    self.assertTrue( m.getNumCompartments() == 1 )
    self.assertTrue( m.getNumSpecies() == 1 )
    self.assertTrue( m.getNumParameters() == 1 )
    self.assertTrue( m.getNumRules() == 1 )
    self.assertTrue( m.getNumInitialAssignments() == 1 )
    self.assertTrue( m.getNumConstraints() == 0 )
    self.assertTrue( m.getNumReactions() == 1 )
    self.assertTrue( m.getNumEvents() == 0 )
    ia = m.getInitialAssignment(0)
    self.assertTrue( ia != None )
    self.assertTrue( ia.isSetMath() == False )
    r = m.getReaction(0)
    self.assertTrue( r != None )
    self.assertTrue( r.getNumReactants() == 1 )
    kl = r.getKineticLaw()
    self.assertTrue( kl != None )
    self.assertTrue( kl.isSetMath() == False )
    d = None
    pass  

def suite():
  suite = unittest.TestSuite()
  suite.addTest(unittest.makeSuite(TestReadFromFileL3V2_4))

  return suite

if __name__ == "__main__":
  if unittest.TextTestRunner(verbosity=1).run(suite()).wasSuccessful() :
    sys.exit(0)
  else:
    sys.exit(1)
