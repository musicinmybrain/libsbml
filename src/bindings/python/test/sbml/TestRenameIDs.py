#
# @file    TestRenameIDs.py
# @brief   RenameIDs unit tests
#
# @author  Akiya Jouraku (Python conversion)
# @author  Lucian Smith 
# 
# ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
#
# DO NOT EDIT THIS FILE.
#
# This file was generated automatically by converting the file located at
# src/sbml/test/TestRenameIDs.cpp
# using the conversion program dev/utilities/translateTests/translateTests.pl.
# Any changes made here will be lost the next time the file is regenerated.
#
# -----------------------------------------------------------------------------
# This file is part of libSBML.  Please visit http://sbml.org for more
# information about SBML, and the latest version of libSBML.
#
# Copyright 2005-2010 California Institute of Technology.
# Copyright 2002-2005 California Institute of Technology and
#                     Japan Science and Technology Corporation.
# 
# This library is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation.  A copy of the license agreement is provided
# in the file named "LICENSE.txt" included with this software distribution
# and also available online as http://sbml.org/software/libsbml/license.html
# -----------------------------------------------------------------------------

import sys
import unittest
import libsbml


class TestRenameIDs(unittest.TestCase):


  def test_RenameIDs(self):
    reader = libsbml.SBMLReader()
    filename = "../../sbml/sbml/test/test-data/"
    filename += "multiple-ids.xml"
    d = reader.readSBML(filename)
    if (d == NULL || d.getModel() == None):
      pass    
    allElements = d.getAllElements()
    self.assertTrue( obj != None )
    obj.renameSIdRefs("comp", "comp_new")
    obj.renameSIdRefs("C", "C_new")
    obj.renameSIdRefs("conv", "conv_new")
    obj.renameSIdRefs("b", "b_new")
    obj.renameSIdRefs("b2", "b2_new")
    obj.renameSIdRefs("x", "x_new")
    obj.renameSIdRefs("y"_COMMA_ "y_new"); //The 'y' here in the function definition not actually an SIdso this should have no effect.obj.renameUnitSIdRefs("volume"_COMMA_ "volume_new")
    obj.renameUnitSIdRefs("substance", "substance_new")
    obj.renameUnitSIdRefs("item", "item_new")
    obj.renameUnitSIdRefs("second", "second_new")
    obj.renameUnitSIdRefs("litre", "litre_new")
    obj.renameUnitSIdRefs("candela", "candela_new")
    obj.renameUnitSIdRefs("farad", "farad_new")
    obj.renameUnitSIdRefs("coulomb", "coulomb_new")
    pass  
  obj = d.getElementByMetaId("meta21")
  self.assertTrue( obj != None )
  xml = obj.toSBML()
  self.assertTrue( xmlstr.find("y_new") == string::npos )
  self.assertTrue( xmlstr.find("volume_new") != string::npos )
  obj = d.getElementByMetaId("meta4")
  self.assertTrue( obj != None )
  compartment = obj
  self.assertTrue( compartment.getUnits() ==  "volume_new" )
  obj = d.getElementByMetaId("meta6")
  self.assertTrue( obj != None )
  sp = obj
  self.assertTrue( sp.getSubstanceUnits() ==  "substance_new" )
  self.assertTrue( sp.getConversionFactor() ==  "conv_new" )
  self.assertTrue( sp.getCompartment() ==  "comp_new" )
  obj = d.getElementByMetaId("meta11")
  self.assertTrue( obj != None )
  xml = obj.toSBML()
  xmlstr = xml
  self.assertTrue( xmlstr.find("x_new") == string::npos )
  self.assertTrue( xmlstr.find("b_new") != string::npos )
  self.assertTrue( xmlstr.find("b2_new") != string::npos )
  self.assertTrue( xmlstr.find("volume_new") != string::npos )
  obj = d.getElementByMetaId("meta28")
  self.assertTrue( obj != None )
  lp = obj
  self.assertTrue( lp.getUnits() ==  "volume_new" )
  obj = d.getElementByMetaId("meta10")
  self.assertTrue( obj != None )
  sr = obj
  self.assertTrue( sr.getSpecies() ==  "b_new" )
  obj = d.getElementByMetaId("meta10")
  self.assertTrue( obj != None )
  msr = obj
  self.assertTrue( msr.getSpecies() ==  "b_new" )
  obj = d.getElementByMetaId("meta8")
  self.assertTrue( obj != None )
  rxn = obj
  self.assertTrue( rxn.getCompartment() ==  "comp_new" )
  obj = d.getElementByMetaId("meta18")
  self.assertTrue( obj != None )
  p = obj
  self.assertTrue( p.getUnits() ==  "volume_new" )
  obj = d.getElementByMetaId("meta14")
  self.assertTrue( obj != None )
  xml = obj.toSBML()
  xmlstr = xml
  self.assertTrue( xmlstr.find("b_new") != string::npos )
  self.assertTrue( xmlstr.find("volume_new") != string::npos )
  obj = d.getElementByMetaId("meta16")
  self.assertTrue( obj != None )
  xml = obj.toSBML()
  xmlstr = xml
  self.assertTrue( xmlstr.find("b_new") != string::npos )
  self.assertTrue( xmlstr.find("volume_new") != string::npos )
  ea = obj
  self.assertTrue( ea.getVariable() ==  "b_new" )
  obj = d.getElementByMetaId("meta17")
  self.assertTrue( obj != None )
  xml = obj.toSBML()
  xmlstr = xml
  self.assertTrue( xmlstr.find("b_new") != string::npos )
  self.assertTrue( xmlstr.find("volume_new") != string::npos )
  obj = d.getElementByMetaId("meta19")
  self.assertTrue( obj != None )
  xml = obj.toSBML()
  xmlstr = xml
  self.assertTrue( xmlstr.find("b_new") != string::npos )
  self.assertTrue( xmlstr.find("volume_new") != string::npos )
  obj = d.getElementByMetaId("meta23")
  self.assertTrue( obj != None )
  xml = obj.toSBML()
  xmlstr = xml
  self.assertTrue( xmlstr.find("x_new") != string::npos )
  self.assertTrue( xmlstr.find("volume_new") != string::npos )
  ia = obj
  self.assertTrue( ia.getSymbol() ==  "b_new" )
  obj = d.getElementByMetaId("meta25")
  self.assertTrue( obj != None )
  xml = obj.toSBML()
  xmlstr = xml
  self.assertTrue( xmlstr.find("b_new") != string::npos )
  self.assertTrue( xmlstr.find("volume_new") != string::npos )
  rr = obj
  self.assertTrue( rr.getVariable() ==  "x_new" )
  obj = d.getElementByMetaId("meta26")
  self.assertTrue( obj != None )
  xml = obj.toSBML()
  xmlstr = xml
  self.assertTrue( xmlstr.find("b_new") != string::npos )
  self.assertTrue( xmlstr.find("volume_new") != string::npos )
  ar = obj
  self.assertTrue( ar.getVariable() ==  "C_new" )
  obj = d.getElementByMetaId("meta2")
  self.assertTrue( obj != None )
  mod = obj
  self.assertTrue( mod.getConversionFactor() ==  "conv_new" )
  self.assertTrue( mod.getSubstanceUnits() ==  "item_new" )
  self.assertTrue( mod.getTimeUnits() ==  "second_new" )
  self.assertTrue( mod.getVolumeUnits() ==  "litre_new" )
  self.assertTrue( mod.getAreaUnits() ==  "candela_new" )
  self.assertTrue( mod.getLengthUnits() ==  "farad_new" )
  self.assertTrue( mod.getExtentUnits() ==  "coulomb_new" )
  d = None
  allElements = None
  pass

def suite():
  suite = unittest.TestSuite()
  suite.addTest(unittest.makeSuite(TestRenameIDs))

  return suite

if __name__ == "__main__":
  if unittest.TextTestRunner(verbosity=1).run(suite()).wasSuccessful() :
    sys.exit(0)
  else:
    sys.exit(1)
