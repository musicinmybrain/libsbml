#
# @file    TestSBMLValidators.py
# @brief   unit tests for SBMLValidator, SBMLInternalValidator and SBMLExternalValidator
#
# @author  Akiya Jouraku (Python conversion)
# @author  Frank Bergmann 
# 
# ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
#
# DO NOT EDIT THIS FILE.
#
# This file was generated automatically by converting the file located at
# src/sbml/test/TestSBMLValidators.cpp
# using the conversion program dev/utilities/translateTests/translateTests.pl.
# Any changes made here will be lost the next time the file is regenerated.
#
# -----------------------------------------------------------------------------
# This file is part of libSBML.  Please visit http://sbml.org for more
# information about SBML, and the latest version of libSBML.
#
# Copyright 2005-2010 California Institute of Technology.
# Copyright 2002-2005 California Institute of Technology and
#                     Japan Science and Technology Corporation.
# 
# This library is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation.  A copy of the license agreement is provided
# in the file named "LICENSE.txt" included with this software distribution
# and also available online as http://sbml.org/software/libsbml/license.html
# -----------------------------------------------------------------------------

import sys
import unittest
import libsbml


class TestSBMLValidators(unittest.TestCase):


  def test_SBMLValidators_create(self):
    validator.setDocument(None)
    self.assertTrue( validator.getDocument() == None )
    self.assertTrue( validator.getModel() == None )
    self.assertTrue( validator.getErrorLog() == None )
    self.assertTrue( validator.getFailures().size() == 0 )
    validator.logFailure(libsbml.SBMLError())
    self.assertTrue( validator.getFailures().size() == 1 )
    validator.clearFailures()
    doc = libsbml.SBMLDocument()
    doc.createModel()
    validator.setDocument(doc)
    self.assertTrue( validator.getDocument() != None )
    self.assertTrue( validator.getModel() != None )
    self.assertTrue( validator.getErrorLog() != None )
    self.assertTrue( validator.getFailures().size() == 0 )
    self.assertTrue( validator.validate() == 0 )
    pass  

  def test_SBMLValidators_internal(self):
    validator.setDocument(None)
    self.assertTrue( validator.getDocument() == None )
    self.assertTrue( validator.getModel() == None )
    self.assertTrue( validator.getErrorLog() == None )
    self.assertTrue( validator.getFailures().size() == 0 )
    validator.logFailure(libsbml.SBMLError())
    self.assertTrue( validator.getFailures().size() == 1 )
    validator.clearFailures()
    doc = libsbml.SBMLDocument()
    doc.createModel()
    validator.setDocument(doc)
    self.assertTrue( validator.getDocument() != None )
    self.assertTrue( validator.getModel() != None )
    self.assertTrue( validator.getErrorLog() != None )
    self.assertTrue( validator.getFailures().size() == 0 )
    self.assertTrue( validator.validate() == 0 )
    pass  

def suite():
  suite = unittest.TestSuite()
  suite.addTest(unittest.makeSuite(TestSBMLValidators))

  return suite

if __name__ == "__main__":
  if unittest.TextTestRunner(verbosity=1).run(suite()).wasSuccessful() :
    sys.exit(0)
  else:
    sys.exit(1)
