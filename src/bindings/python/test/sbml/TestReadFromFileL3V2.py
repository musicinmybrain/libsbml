#
# @file    TestReadFromFileL3V2.py
# @brief   Reads test-data/l3v2-all.xml into memory and tests it.
#
# @author  Akiya Jouraku (Python conversion)
# @author  Sarah Keating 
# 
# ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
#
# DO NOT EDIT THIS FILE.
#
# This file was generated automatically by converting the file located at
# src/sbml/test/TestReadFromFileL3V2.cpp
# using the conversion program dev/utilities/translateTests/translateTests.pl.
# Any changes made here will be lost the next time the file is regenerated.
#
# -----------------------------------------------------------------------------
# This file is part of libSBML.  Please visit http://sbml.org for more
# information about SBML, and the latest version of libSBML.
#
# Copyright 2005-2010 California Institute of Technology.
# Copyright 2002-2005 California Institute of Technology and
#                     Japan Science and Technology Corporation.
# 
# This library is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation.  A copy of the license agreement is provided
# in the file named "LICENSE.txt" included with this software distribution
# and also available online as http://sbml.org/software/libsbml/license.html
# -----------------------------------------------------------------------------

import sys
import unittest
import libsbml


class TestReadFromFileL3V2(unittest.TestCase):


  def test_echo_l3v2_all(self):
    filename = "../../sbml/sbml/test/test-data/"
    filename += "l3v2-all.xml"
    fileout = "../../sbml/sbml/test/test-data/"
    fileout += "tempOut.xml"
    d = libsbml.readSBML()
    if (d == None):
      pass    
    libsbml.writeSBML(d)
    outD = libsbml.readSBML()
    doc = d.toSBML()
    out = outD.toSBML()
    self.assertTrue( ( out != doc ) == False )
    d = None
    outD = None
    pass  

  def test_read_l3v2_all(self):
    reader = libsbml.SBMLReader()
    filename = "../../sbml/sbml/test/test-data/"
    filename += "l3v2-all.xml"
    d = reader.readSBML(filename)
    if (d == None):
      pass    
    self.assertTrue( d.getLevel() == 3 )
    self.assertTrue( d.getVersion() == 2 )
    m = d.getModel()
    self.assertTrue( m != None )
    self.assertEqual( True, m.isSetSubstanceUnits() )
    self.assertEqual( True, m.isSetTimeUnits() )
    self.assertEqual( True, m.isSetVolumeUnits() )
    self.assertEqual( True, m.isSetLengthUnits() )
    self.assertEqual( True, m.isSetAreaUnits() )
    self.assertEqual( True, m.isSetExtentUnits() )
    self.assertEqual( True, m.isSetConversionFactor() )
    self.assertTrue( m.getSubstanceUnits() ==  "mole" )
    self.assertTrue( m.getTimeUnits() ==  "second" )
    self.assertTrue( m.getVolumeUnits() ==  "litre" )
    self.assertTrue( m.getLengthUnits() ==  "metre" )
    self.assertTrue( m.getAreaUnits() ==  "metre" )
    self.assertTrue( m.getExtentUnits() ==  "mole" )
    self.assertTrue( m.getConversionFactor() ==  "p" )
    self.assertTrue( m.getNumUnitDefinitions() == 1 )
    ud = m.getUnitDefinition(0)
    self.assertTrue( ud.getNumUnits() == 3 )
    u = ud.getUnit(0)
    self.assertEqual( True, u.isSetExponent() )
    self.assertEqual( True, u.isSetScale() )
    self.assertEqual( True, u.isSetMultiplier() )
    self.assertTrue( u.getExponent() == -1 )
    self.assertTrue( u.getExponentAsDouble() == -1 )
    self.assertTrue( u.getScale() == 2 )
    self.assertTrue( u.getMultiplier() == 1.3 )
    u = ud.getUnit(1)
    self.assertEqual( True, u.isSetExponent() )
    self.assertEqual( True, u.isSetScale() )
    self.assertEqual( True, u.isSetMultiplier() )
    self.assertTrue( u.getExponentAsDouble() == 1.5 )
    self.assertTrue( u.getScale() == 10 )
    self.assertTrue( u.getMultiplier() == 0.5 )
    u = ud.getUnit(2)
    self.assertEqual( True, u.isSetExponent() )
    self.assertEqual( True, u.isSetScale() )
    self.assertEqual( True, u.isSetMultiplier() )
    self.assertTrue( u.getExponent() == 1 )
    self.assertTrue( u.getScale() == 0 )
    self.assertTrue( u.getMultiplier() == 1 )
    self.assertTrue( m.getNumCompartments() == 2 )
    c = m.getCompartment(0)
    self.assertEqual( True, c.isSetSize() )
    self.assertEqual( True, c.isSetSpatialDimensions() )
    self.assertEqual( True, c.isSetConstant() )
    self.assertTrue( c.getId() ==  "cell" )
    self.assertTrue( c.getSize() == 1e-14 )
    self.assertTrue( c.getSpatialDimensions() == 3 )
    self.assertTrue( c.getSpatialDimensionsAsDouble() == 3 )
    self.assertTrue( c.getUnits() ==  "litre" )
    self.assertTrue( c.getConstant() == True )
    c = m.getCompartment(1)
    self.assertEqual( False, c.isSetSize() )
    self.assertEqual( True, c.isSetSpatialDimensions() )
    self.assertEqual( True, c.isSetConstant() )
    self.assertTrue( c.getId() ==  "comp" )
    self.assertTrue( c.getSpatialDimensionsAsDouble() == 4.6 )
    self.assertTrue( m.getNumConstraints() == 1 )
    con = m.getConstraint(0)
    self.assertTrue( con != None )
    ast = con.getMath()
    formula = libsbml.formulaToString(ast)
    self.assertTrue((  "lt(x, 3)" == formula ))
    self.assertTrue( m.getNumEvents() == 1 )
    e = m.getEvent(0)
    self.assertTrue( e != None )
    self.assertTrue( e.getId() ==  "e1" )
    self.assertTrue( e.getSBOTerm() == 231 )
    self.assertTrue( e.getSBOTermID() ==  "SBO:0000231" )
    self.assertEqual( True, e.isSetDelay() )
    delay = e.getDelay()
    self.assertTrue( delay != None )
    self.assertTrue( delay.getSBOTerm() == 64 )
    self.assertTrue( delay.getSBOTermID() ==  "SBO:0000064" )
    ast = delay.getMath()
    formula = libsbml.formulaToString(ast)
    self.assertTrue((  "p + 3" == formula ))
    self.assertEqual( True, e.isSetPriority() )
    prior = e.getPriority()
    self.assertTrue( prior != None )
    self.assertTrue( prior.getSBOTerm() == 64 )
    self.assertTrue( prior.getSBOTermID() ==  "SBO:0000064" )
    ast = prior.getMath()
    formula = libsbml.formulaToString(ast)
    self.assertTrue((  "1" == formula ))
    self.assertEqual( True, e.isSetTrigger() )
    trigger = e.getTrigger()
    self.assertTrue( trigger != None )
    ast = trigger.getMath()
    formula = libsbml.formulaToString(ast)
    self.assertTrue((  "true" == formula ))
    loe = m.getListOfEvents()
    e1 = loe.get(0)
    self.assertTrue( e1 == e )
    e1 = loe.get("e1")
    self.assertTrue( e1 == e )
    self.assertTrue( e.getNumEventAssignments() == 1 )
    ea = e.getEventAssignment(0)
    self.assertTrue( ea != None )
    self.assertTrue( ea.getVariable() ==  "Keq" )
    self.assertTrue( ea.getSBOTerm() == 64 )
    self.assertTrue( ea.getSBOTermID() ==  "SBO:0000064" )
    ast = ea.getMath()
    formula = libsbml.formulaToString(ast)
    self.assertTrue((  "X0 * p" == formula ))
    loea = e.getListOfEventAssignments()
    ea1 = loea.get(0)
    self.assertTrue( ea1 == ea )
    ea1 = loea.get("Keq")
    self.assertTrue( ea1 == ea )
    self.assertTrue( m.getNumFunctionDefinitions() == 1 )
    fd = m.getFunctionDefinition(0)
    self.assertTrue( fd != None )
    self.assertTrue( fd.getId() ==  "fd" )
    self.assertTrue( fd.getSBOTerm() == 64 )
    self.assertTrue( fd.getSBOTermID() ==  "SBO:0000064" )
    ast = fd.getMath()
    formula = libsbml.formulaToString(ast)
    self.assertTrue((  "lambda(x, pow(x, 3))" == formula ))
    lofd = m.getListOfFunctionDefinitions()
    fd1 = lofd.get(0)
    self.assertTrue( fd1 == fd )
    fd1 = lofd.get("fd")
    self.assertTrue( fd1 == fd )
    self.assertTrue( m.getNumInitialAssignments() == 1 )
    ia = m.getInitialAssignment(0)
    self.assertTrue( ia != None )
    self.assertTrue( ia.getSymbol() ==  "p1" )
    ast = ia.getMath()
    formula = libsbml.formulaToString(ast)
    self.assertTrue((  "x * p3" == formula ))
    self.assertTrue( m.getNumRules() == 3 )
    alg = m.getRule(0)
    self.assertTrue( alg != None )
    self.assertTrue( alg.getSBOTerm() == 64 )
    self.assertTrue( alg.getSBOTermID() ==  "SBO:0000064" )
    ast = alg.getMath()
    formula = libsbml.formulaToString(ast)
    self.assertTrue((  "pow(x, 3)" == formula ))
    ar = m.getRule(1)
    self.assertTrue( ar != None )
    self.assertTrue( ar.getVariable() ==  "p2" )
    self.assertTrue( ar.getSBOTerm() == 64 )
    self.assertTrue( ar.getSBOTermID() ==  "SBO:0000064" )
    ast = ar.getMath()
    formula = libsbml.formulaToString(ast)
    self.assertTrue((  "x * p3" == formula ))
    rr = m.getRule(2)
    self.assertTrue( rr != None )
    self.assertTrue( rr.getVariable() ==  "p3" )
    self.assertTrue( rr.getSBOTerm() == 64 )
    self.assertTrue( rr.getSBOTermID() ==  "SBO:0000064" )
    ast = rr.getMath()
    formula = libsbml.formulaToString(ast)
    self.assertTrue((  "p1 / p" == formula ))
    self.assertTrue( m.getNumSpecies() == 2 )
    s = m.getSpecies(0)
    self.assertTrue( s != None )
    self.assertTrue( s.getId() ==  "X0" )
    self.assertTrue( s.getCompartment() ==  "comp" )
    self.assertEqual( True, s.isSetConversionFactor() )
    self.assertTrue( s.getConversionFactor() ==  "p" )
    self.assertEqual( True, s.isSetBoundaryCondition() )
    self.assertTrue( s.getBoundaryCondition() == False )
    self.assertEqual( True, s.isSetHasOnlySubstanceUnits() )
    self.assertTrue( s.getHasOnlySubstanceUnits() == False )
    self.assertEqual( True, s.isSetSubstanceUnits() )
    self.assertTrue( s.getSubstanceUnits() ==  "mole" )
    self.assertEqual( True, s.isSetConstant() )
    self.assertTrue( s.getConstant() == False )
    self.assertEqual( True, s.isSetInitialAmount() )
    self.assertTrue( s.getInitialAmount() == 0 )
    self.assertEqual( False, s.isSetInitialConcentration() )
    self.assertEqual( True, util_isNaN )
    self.assertTrue( m.getNumReactions() == 1 )
    r = m.getReaction(0)
    self.assertEqual( False, r.isSetFast() )
    self.assertTrue( r.getFast() == False )
    self.assertEqual( True, r.isSetReversible() )
    self.assertTrue( r.getReversible() == False )
    self.assertEqual( True, r.isSetCompartment() )
    self.assertTrue( r.getCompartment() ==  "comp" )
    sr = r.getReactant(0)
    self.assertEqual( True, sr.isSetConstant() )
    self.assertTrue( sr.getConstant() == True )
    self.assertEqual( True, sr.isSetStoichiometry() )
    self.assertTrue( sr.getStoichiometry() == 1 )
    sr = r.getProduct(0)
    self.assertEqual( True, sr.isSetConstant() )
    self.assertTrue( sr.getConstant() == False )
    self.assertEqual( False, sr.isSetStoichiometry() )
    self.assertEqual( True, util_isNaN )
    kl = r.getKineticLaw()
    self.assertTrue( kl.getNumLocalParameters() == 2 )
    self.assertTrue( kl.getNumParameters() == 2 )
    p = kl.getParameter(0)
    self.assertEqual( True, p.isSetUnits() )
    self.assertTrue( p.getUnits() ==  "per_second" )
    self.assertEqual( True, p.isSetValue() )
    self.assertTrue( p.getValue() == 0.1 )
    lp = kl.getLocalParameter(0)
    self.assertEqual( True, lp.isSetUnits() )
    self.assertTrue( lp.getUnits() ==  "per_second" )
    self.assertEqual( True, lp.isSetValue() )
    self.assertTrue( lp.getValue() == 0.1 )
    lp = kl.getLocalParameter(1)
    self.assertEqual( False, lp.isSetUnits() )
    self.assertTrue( lp.getUnits() ==  "" )
    self.assertEqual( False, lp.isSetValue() )
    self.assertEqual( True, util_isNaN )
    d = None
    pass  

def suite():
  suite = unittest.TestSuite()
  suite.addTest(unittest.makeSuite(TestReadFromFileL3V2))

  return suite

if __name__ == "__main__":
  if unittest.TextTestRunner(verbosity=1).run(suite()).wasSuccessful() :
    sys.exit(0)
  else:
    sys.exit(1)
