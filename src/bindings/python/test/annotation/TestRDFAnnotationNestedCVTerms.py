#
# @file    TestRDFAnnotationNestedCVTerms.py
# @brief   Tests for reading/writing nested annotation
#
# @author  Akiya Jouraku (Python conversion)
# @author  Sarah Keating 
# 
# ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
#
# DO NOT EDIT THIS FILE.
#
# This file was generated automatically by converting the file located at
# src/sbml/test/TestRDFAnnotationNestedCVTerms.cpp
# using the conversion program dev/utilities/translateTests/translateTests.pl.
# Any changes made here will be lost the next time the file is regenerated.
#
# -----------------------------------------------------------------------------
# This file is part of libSBML.  Please visit http://sbml.org for more
# information about SBML, and the latest version of libSBML.
#
# Copyright 2005-2010 California Institute of Technology.
# Copyright 2002-2005 California Institute of Technology and
#                     Japan Science and Technology Corporation.
# 
# This library is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation.  A copy of the license agreement is provided
# in the file named "LICENSE.txt" included with this software distribution
# and also available online as http://sbml.org/software/libsbml/license.html
# -----------------------------------------------------------------------------

import sys
import unittest
import libsbml


class TestRDFAnnotationNestedCVTerms(unittest.TestCase):

  global d
  d = None
  global d32
  d32 = None
  global m31
  m31 = None
  global d31
  d31 = None
  global m32
  m32 = None
  global m
  m = None

  def setUp(self):
    filename = "../../sbml/annotation/test/test-data/annotationNested-l2v5.xml"
    filename31 = "../../sbml/annotation/test/test-data/annotationNested-l3v1.xml"
    filename32 = "../../sbml/annotation/test/test-data/annotationNested-l3v2.xml"
    self.d = libsbml.readSBML(filename)
    self.m = self.d.getModel()
    self.d31 = libsbml.readSBML(filename31)
    self.m31 = self.d31.getModel()
    self.d32 = libsbml.readSBML(filename32)
    self.m32 = self.d32.getModel()
    pass  

  def tearDown(self):
    self.d = None
    self.d31 = None
    self.d32 = None
    pass  

  def test_RDFAnnotationNestedCVTerm_dcterms(self):
    node = libsbml.RDFAnnotationParser.parseModelHistory(self.m)
    self.assertTrue( node.getNumChildren() == 1 )
    rdf = node.getChild(0)
    self.assertTrue((  "RDF" == rdf.getName() ))
    self.assertTrue((  "rdf" == rdf.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == rdf.getURI() ))
    self.assertTrue( rdf.getNumChildren() == 1 )
    desc = rdf.getChild(0)
    self.assertTrue((  "Description" == desc.getName() ))
    self.assertTrue((  "rdf" == desc.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == desc.getURI() ))
    self.assertTrue( desc.getNumChildren() == 3 )
    creator = desc.getChild(0)
    self.assertTrue((  "creator" == creator.getName() ))
    self.assertTrue((  "dcterms" == creator.getPrefix() ))
    self.assertTrue((  "http://purl.org/dc/terms/" == creator.getURI() ))
    self.assertTrue( creator.getNumChildren() == 1 )
    Bag = creator.getChild(0)
    self.assertTrue((  "Bag" == Bag.getName() ))
    self.assertTrue((  "rdf" == Bag.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == Bag.getURI() ))
    self.assertTrue( Bag.getNumChildren() == 1 )
    li = Bag.getChild(0)
    self.assertTrue((  "li" == li.getName() ))
    self.assertTrue((  "rdf" == li.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == li.getURI() ))
    self.assertTrue( li.getNumChildren() == 3 )
    N = li.getChild(0)
    self.assertTrue((  "N" == N.getName() ))
    self.assertTrue((  "vCard" == N.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/2001/vcard-rdf/3.0#" == N.getURI() ))
    self.assertTrue( N.getNumChildren() == 2 )
    Family = N.getChild(0)
    self.assertTrue((  "Family" == Family.getName() ))
    self.assertTrue((  "vCard" == Family.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/2001/vcard-rdf/3.0#" == Family.getURI() ))
    self.assertTrue( Family.getNumChildren() == 1 )
    Given = N.getChild(1)
    self.assertTrue((  "Given" == Given.getName() ))
    self.assertTrue((  "vCard" == Given.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/2001/vcard-rdf/3.0#" == Given.getURI() ))
    self.assertTrue( Given.getNumChildren() == 1 )
    EMAIL = li.getChild(1)
    self.assertTrue((  "EMAIL" == EMAIL.getName() ))
    self.assertTrue((  "vCard" == EMAIL.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/2001/vcard-rdf/3.0#" == EMAIL.getURI() ))
    self.assertTrue( EMAIL.getNumChildren() == 1 )
    ORG = li.getChild(2)
    self.assertTrue((  "ORG" == ORG.getName() ))
    self.assertTrue((  "vCard" == ORG.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/2001/vcard-rdf/3.0#" == ORG.getURI() ))
    self.assertTrue( ORG.getNumChildren() == 1 )
    Orgname = ORG.getChild(0)
    self.assertTrue((  "Orgname" == Orgname.getName() ))
    self.assertTrue((  "vCard" == Orgname.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/2001/vcard-rdf/3.0#" == Orgname.getURI() ))
    self.assertTrue( Orgname.getNumChildren() == 1 )
    created = desc.getChild(1)
    self.assertTrue((  "created" == created.getName() ))
    self.assertTrue((  "dcterms" == created.getPrefix() ))
    self.assertTrue((  "http://purl.org/dc/terms/" == created.getURI() ))
    self.assertTrue( created.getNumChildren() == 1 )
    cr_date = created.getChild(0)
    self.assertTrue((  "W3CDTF" == cr_date.getName() ))
    self.assertTrue((  "dcterms" == cr_date.getPrefix() ))
    self.assertTrue((  "http://purl.org/dc/terms/" == cr_date.getURI() ))
    self.assertTrue( cr_date.getNumChildren() == 1 )
    modified = desc.getChild(2)
    self.assertTrue((  "modified" == modified.getName() ))
    self.assertTrue((  "dcterms" == modified.getPrefix() ))
    self.assertTrue((  "http://purl.org/dc/terms/" == modified.getURI() ))
    self.assertTrue( modified.getNumChildren() == 1 )
    mo_date = created.getChild(0)
    self.assertTrue((  "W3CDTF" == mo_date.getName() ))
    self.assertTrue((  "dcterms" == mo_date.getPrefix() ))
    self.assertTrue((  "http://purl.org/dc/terms/" == mo_date.getURI() ))
    self.assertTrue( mo_date.getNumChildren() == 1 )
    node = None
    pass  

  def test_RDFAnnotationNestedCVTerm_dcterms_31(self):
    node = libsbml.RDFAnnotationParser.parseModelHistory(self.m31)
    self.assertTrue( node.getNumChildren() == 1 )
    rdf = node.getChild(0)
    self.assertTrue((  "RDF" == rdf.getName() ))
    self.assertTrue((  "rdf" == rdf.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == rdf.getURI() ))
    self.assertTrue( rdf.getNumChildren() == 1 )
    desc = rdf.getChild(0)
    self.assertTrue((  "Description" == desc.getName() ))
    self.assertTrue((  "rdf" == desc.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == desc.getURI() ))
    self.assertTrue( desc.getNumChildren() == 3 )
    creator = desc.getChild(0)
    self.assertTrue((  "creator" == creator.getName() ))
    self.assertTrue((  "dcterms" == creator.getPrefix() ))
    self.assertTrue((  "http://purl.org/dc/terms/" == creator.getURI() ))
    self.assertTrue( creator.getNumChildren() == 1 )
    Bag = creator.getChild(0)
    self.assertTrue((  "Bag" == Bag.getName() ))
    self.assertTrue((  "rdf" == Bag.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == Bag.getURI() ))
    self.assertTrue( Bag.getNumChildren() == 1 )
    li = Bag.getChild(0)
    self.assertTrue((  "li" == li.getName() ))
    self.assertTrue((  "rdf" == li.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == li.getURI() ))
    self.assertTrue( li.getNumChildren() == 3 )
    N = li.getChild(0)
    self.assertTrue((  "N" == N.getName() ))
    self.assertTrue((  "vCard" == N.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/2001/vcard-rdf/3.0#" == N.getURI() ))
    self.assertTrue( N.getNumChildren() == 2 )
    Family = N.getChild(0)
    self.assertTrue((  "Family" == Family.getName() ))
    self.assertTrue((  "vCard" == Family.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/2001/vcard-rdf/3.0#" == Family.getURI() ))
    self.assertTrue( Family.getNumChildren() == 1 )
    Given = N.getChild(1)
    self.assertTrue((  "Given" == Given.getName() ))
    self.assertTrue((  "vCard" == Given.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/2001/vcard-rdf/3.0#" == Given.getURI() ))
    self.assertTrue( Given.getNumChildren() == 1 )
    EMAIL = li.getChild(1)
    self.assertTrue((  "EMAIL" == EMAIL.getName() ))
    self.assertTrue((  "vCard" == EMAIL.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/2001/vcard-rdf/3.0#" == EMAIL.getURI() ))
    self.assertTrue( EMAIL.getNumChildren() == 1 )
    ORG = li.getChild(2)
    self.assertTrue((  "ORG" == ORG.getName() ))
    self.assertTrue((  "vCard" == ORG.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/2001/vcard-rdf/3.0#" == ORG.getURI() ))
    self.assertTrue( ORG.getNumChildren() == 1 )
    Orgname = ORG.getChild(0)
    self.assertTrue((  "Orgname" == Orgname.getName() ))
    self.assertTrue((  "vCard" == Orgname.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/2001/vcard-rdf/3.0#" == Orgname.getURI() ))
    self.assertTrue( Orgname.getNumChildren() == 1 )
    created = desc.getChild(1)
    self.assertTrue((  "created" == created.getName() ))
    self.assertTrue((  "dcterms" == created.getPrefix() ))
    self.assertTrue((  "http://purl.org/dc/terms/" == created.getURI() ))
    self.assertTrue( created.getNumChildren() == 1 )
    cr_date = created.getChild(0)
    self.assertTrue((  "W3CDTF" == cr_date.getName() ))
    self.assertTrue((  "dcterms" == cr_date.getPrefix() ))
    self.assertTrue((  "http://purl.org/dc/terms/" == cr_date.getURI() ))
    self.assertTrue( cr_date.getNumChildren() == 1 )
    modified = desc.getChild(2)
    self.assertTrue((  "modified" == modified.getName() ))
    self.assertTrue((  "dcterms" == modified.getPrefix() ))
    self.assertTrue((  "http://purl.org/dc/terms/" == modified.getURI() ))
    self.assertTrue( modified.getNumChildren() == 1 )
    mo_date = created.getChild(0)
    self.assertTrue((  "W3CDTF" == mo_date.getName() ))
    self.assertTrue((  "dcterms" == mo_date.getPrefix() ))
    self.assertTrue((  "http://purl.org/dc/terms/" == mo_date.getURI() ))
    self.assertTrue( mo_date.getNumChildren() == 1 )
    node = None
    pass  

  def test_RDFAnnotationNestedCVTerm_dcterms_32(self):
    node = libsbml.RDFAnnotationParser.parseModelHistory(self.m32)
    self.assertTrue( node.getNumChildren() == 1 )
    rdf = node.getChild(0)
    self.assertTrue((  "RDF" == rdf.getName() ))
    self.assertTrue((  "rdf" == rdf.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == rdf.getURI() ))
    self.assertTrue( rdf.getNumChildren() == 1 )
    desc = rdf.getChild(0)
    self.assertTrue((  "Description" == desc.getName() ))
    self.assertTrue((  "rdf" == desc.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == desc.getURI() ))
    self.assertTrue( desc.getNumChildren() == 3 )
    creator = desc.getChild(0)
    self.assertTrue((  "creator" == creator.getName() ))
    self.assertTrue((  "dcterms" == creator.getPrefix() ))
    self.assertTrue((  "http://purl.org/dc/terms/" == creator.getURI() ))
    self.assertTrue( creator.getNumChildren() == 1 )
    Bag = creator.getChild(0)
    self.assertTrue((  "Bag" == Bag.getName() ))
    self.assertTrue((  "rdf" == Bag.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == Bag.getURI() ))
    self.assertTrue( Bag.getNumChildren() == 1 )
    li = Bag.getChild(0)
    self.assertTrue((  "li" == li.getName() ))
    self.assertTrue((  "rdf" == li.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == li.getURI() ))
    self.assertTrue( li.getNumChildren() == 3 )
    N = li.getChild(0)
    self.assertTrue((  "hasName" == N.getName() ))
    self.assertTrue((  "vCard4" == N.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/2006/vcard/ns#" == N.getURI() ))
    self.assertTrue( N.getNumChildren() == 2 )
    Family = N.getChild(0)
    self.assertTrue((  "family-name" == Family.getName() ))
    self.assertTrue((  "vCard4" == Family.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/2006/vcard/ns#" == Family.getURI() ))
    self.assertTrue( Family.getNumChildren() == 1 )
    Given = N.getChild(1)
    self.assertTrue((  "given-name" == Given.getName() ))
    self.assertTrue((  "vCard4" == Given.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/2006/vcard/ns#" == Given.getURI() ))
    self.assertTrue( Given.getNumChildren() == 1 )
    EMAIL = li.getChild(1)
    self.assertTrue((  "hasEmail" == EMAIL.getName() ))
    self.assertTrue((  "vCard4" == EMAIL.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/2006/vcard/ns#" == EMAIL.getURI() ))
    self.assertTrue( EMAIL.getNumChildren() == 1 )
    ORG = li.getChild(2)
    self.assertTrue((  "organization-name" == ORG.getName() ))
    self.assertTrue((  "vCard4" == ORG.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/2006/vcard/ns#" == ORG.getURI() ))
    self.assertTrue( ORG.getNumChildren() == 1 )
    created = desc.getChild(1)
    self.assertTrue((  "created" == created.getName() ))
    self.assertTrue((  "dcterms" == created.getPrefix() ))
    self.assertTrue((  "http://purl.org/dc/terms/" == created.getURI() ))
    self.assertTrue( created.getNumChildren() == 1 )
    cr_date = created.getChild(0)
    self.assertTrue((  "W3CDTF" == cr_date.getName() ))
    self.assertTrue((  "dcterms" == cr_date.getPrefix() ))
    self.assertTrue((  "http://purl.org/dc/terms/" == cr_date.getURI() ))
    self.assertTrue( cr_date.getNumChildren() == 1 )
    modified = desc.getChild(2)
    self.assertTrue((  "modified" == modified.getName() ))
    self.assertTrue((  "dcterms" == modified.getPrefix() ))
    self.assertTrue((  "http://purl.org/dc/terms/" == modified.getURI() ))
    self.assertTrue( modified.getNumChildren() == 1 )
    mo_date = created.getChild(0)
    self.assertTrue((  "W3CDTF" == mo_date.getName() ))
    self.assertTrue((  "dcterms" == mo_date.getPrefix() ))
    self.assertTrue((  "http://purl.org/dc/terms/" == mo_date.getURI() ))
    self.assertTrue( mo_date.getNumChildren() == 1 )
    node = None
    pass  

  def test_RDFAnnotationNestedCVTerm_parseCVTerms(self):
    node = libsbml.RDFAnnotationParser.parseCVTerms(self.m.getCompartment(0))
    self.assertTrue( node.getNumChildren() == 1 )
    rdf = node.getChild(0)
    self.assertTrue((  "RDF" == rdf.getName() ))
    self.assertTrue((  "rdf" == rdf.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == rdf.getURI() ))
    self.assertTrue( rdf.getNumChildren() == 1 )
    desc = rdf.getChild(0)
    self.assertTrue((  "Description" == desc.getName() ))
    self.assertTrue((  "rdf" == desc.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == desc.getURI() ))
    self.assertTrue( desc.getNumChildren() == 1 )
    is1 = desc.getChild(0)
    self.assertTrue((  "is" == is1.getName() ))
    self.assertTrue((  "bqbiol" == is1.getPrefix() ))
    self.assertTrue( is1.getNumChildren() == 1 )
    Bag = is1.getChild(0)
    self.assertTrue((  "Bag" == Bag.getName() ))
    self.assertTrue((  "rdf" == Bag.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == Bag.getURI() ))
    self.assertTrue( Bag.getNumChildren() == 5 )
    li = Bag.getChild(0)
    self.assertTrue((  "li" == li.getName() ))
    self.assertTrue((  "rdf" == li.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == li.getURI() ))
    self.assertTrue( li.getNumChildren() == 0 )
    li1 = Bag.getChild(1)
    self.assertTrue((  "li" == li1.getName() ))
    self.assertTrue((  "rdf" == li1.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == li1.getURI() ))
    self.assertTrue( li1.getNumChildren() == 0 )
    li2 = Bag.getChild(2)
    self.assertTrue((  "li" == li2.getName() ))
    self.assertTrue((  "rdf" == li2.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == li2.getURI() ))
    self.assertTrue( li2.getNumChildren() == 0 )
    li3 = Bag.getChild(3)
    self.assertTrue((  "li" == li3.getName() ))
    self.assertTrue((  "rdf" == li3.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == li3.getURI() ))
    self.assertTrue( li3.getNumChildren() == 0 )
    hasPart1 = Bag.getChild(4)
    self.assertTrue((  "hasPart" == hasPart1.getName() ))
    self.assertTrue((  "bqbiol" == hasPart1.getPrefix() ))
    self.assertTrue( hasPart1.getNumChildren() == 1 )
    Bag1 = hasPart1.getChild(0)
    self.assertTrue((  "Bag" == Bag1.getName() ))
    self.assertTrue((  "rdf" == Bag1.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == Bag1.getURI() ))
    self.assertTrue( Bag1.getNumChildren() == 1 )
    li4 = Bag1.getChild(0)
    self.assertTrue((  "li" == li4.getName() ))
    self.assertTrue((  "rdf" == li4.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == li4.getURI() ))
    self.assertTrue( li4.getNumChildren() == 0 )
    node = None
    pass  

  def test_RDFAnnotationNestedCVTerm_parseCVTerms_31(self):
    node = libsbml.RDFAnnotationParser.parseCVTerms(self.m31.getCompartment(0))
    self.assertTrue( node.getNumChildren() == 1 )
    rdf = node.getChild(0)
    self.assertTrue((  "RDF" == rdf.getName() ))
    self.assertTrue((  "rdf" == rdf.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == rdf.getURI() ))
    self.assertTrue( rdf.getNumChildren() == 1 )
    desc = rdf.getChild(0)
    self.assertTrue((  "Description" == desc.getName() ))
    self.assertTrue((  "rdf" == desc.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == desc.getURI() ))
    self.assertTrue( desc.getNumChildren() == 1 )
    is1 = desc.getChild(0)
    self.assertTrue((  "is" == is1.getName() ))
    self.assertTrue((  "bqbiol" == is1.getPrefix() ))
    self.assertTrue( is1.getNumChildren() == 1 )
    Bag = is1.getChild(0)
    self.assertTrue((  "Bag" == Bag.getName() ))
    self.assertTrue((  "rdf" == Bag.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == Bag.getURI() ))
    self.assertTrue( Bag.getNumChildren() == 5 )
    li = Bag.getChild(0)
    self.assertTrue((  "li" == li.getName() ))
    self.assertTrue((  "rdf" == li.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == li.getURI() ))
    self.assertTrue( li.getNumChildren() == 0 )
    li1 = Bag.getChild(1)
    self.assertTrue((  "li" == li1.getName() ))
    self.assertTrue((  "rdf" == li1.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == li1.getURI() ))
    self.assertTrue( li1.getNumChildren() == 0 )
    li2 = Bag.getChild(2)
    self.assertTrue((  "li" == li2.getName() ))
    self.assertTrue((  "rdf" == li2.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == li2.getURI() ))
    self.assertTrue( li2.getNumChildren() == 0 )
    li3 = Bag.getChild(3)
    self.assertTrue((  "li" == li3.getName() ))
    self.assertTrue((  "rdf" == li3.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == li3.getURI() ))
    self.assertTrue( li3.getNumChildren() == 0 )
    hasPart1 = Bag.getChild(4)
    self.assertTrue((  "hasPart" == hasPart1.getName() ))
    self.assertTrue((  "bqbiol" == hasPart1.getPrefix() ))
    self.assertTrue( hasPart1.getNumChildren() == 1 )
    Bag1 = hasPart1.getChild(0)
    self.assertTrue((  "Bag" == Bag1.getName() ))
    self.assertTrue((  "rdf" == Bag1.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == Bag1.getURI() ))
    self.assertTrue( Bag1.getNumChildren() == 1 )
    li4 = Bag1.getChild(0)
    self.assertTrue((  "li" == li4.getName() ))
    self.assertTrue((  "rdf" == li4.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == li4.getURI() ))
    self.assertTrue( li4.getNumChildren() == 0 )
    node = None
    pass  

  def test_RDFAnnotationNestedCVTerm_parseCVTerms_32(self):
    node = libsbml.RDFAnnotationParser.parseCVTerms(self.m32.getCompartment(0))
    self.assertTrue( node.getNumChildren() == 1 )
    rdf = node.getChild(0)
    self.assertTrue((  "RDF" == rdf.getName() ))
    self.assertTrue((  "rdf" == rdf.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == rdf.getURI() ))
    self.assertTrue( rdf.getNumChildren() == 1 )
    desc = rdf.getChild(0)
    self.assertTrue((  "Description" == desc.getName() ))
    self.assertTrue((  "rdf" == desc.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == desc.getURI() ))
    self.assertTrue( desc.getNumChildren() == 1 )
    is1 = desc.getChild(0)
    self.assertTrue((  "is" == is1.getName() ))
    self.assertTrue((  "bqbiol" == is1.getPrefix() ))
    self.assertTrue( is1.getNumChildren() == 1 )
    Bag = is1.getChild(0)
    self.assertTrue((  "Bag" == Bag.getName() ))
    self.assertTrue((  "rdf" == Bag.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == Bag.getURI() ))
    self.assertTrue( Bag.getNumChildren() == 5 )
    li = Bag.getChild(0)
    self.assertTrue((  "li" == li.getName() ))
    self.assertTrue((  "rdf" == li.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == li.getURI() ))
    self.assertTrue( li.getNumChildren() == 0 )
    li1 = Bag.getChild(1)
    self.assertTrue((  "li" == li1.getName() ))
    self.assertTrue((  "rdf" == li1.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == li1.getURI() ))
    self.assertTrue( li1.getNumChildren() == 0 )
    li2 = Bag.getChild(2)
    self.assertTrue((  "li" == li2.getName() ))
    self.assertTrue((  "rdf" == li2.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == li2.getURI() ))
    self.assertTrue( li2.getNumChildren() == 0 )
    li3 = Bag.getChild(3)
    self.assertTrue((  "li" == li3.getName() ))
    self.assertTrue((  "rdf" == li3.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == li3.getURI() ))
    self.assertTrue( li3.getNumChildren() == 0 )
    hasPart1 = Bag.getChild(4)
    self.assertTrue((  "hasPart" == hasPart1.getName() ))
    self.assertTrue((  "bqbiol" == hasPart1.getPrefix() ))
    self.assertTrue( hasPart1.getNumChildren() == 1 )
    Bag1 = hasPart1.getChild(0)
    self.assertTrue((  "Bag" == Bag1.getName() ))
    self.assertTrue((  "rdf" == Bag1.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == Bag1.getURI() ))
    self.assertTrue( Bag1.getNumChildren() == 1 )
    li4 = Bag1.getChild(0)
    self.assertTrue((  "li" == li4.getName() ))
    self.assertTrue((  "rdf" == li4.getPrefix() ))
    self.assertTrue((  "http://www.w3.org/1999/02/22-rdf-syntax-ns#" == li4.getURI() ))
    self.assertTrue( li4.getNumChildren() == 0 )
    node = None
    pass  

  def test_RDFAnnotationNestedCVTerm_reading(self):
    c = self.m.getCompartment(1)
    self.assertTrue( c.getNumCVTerms() == 1 )
    cv = c.getCVTerm(0)
    self.assertTrue( cv.getNumResources() == 1 )
    self.assertTrue( cv.getResourceURI(0) ==  "top" )
    self.assertTrue( cv.getNumNestedCVTerms() == 1 )
    cv1 = cv.getNestedCVTerm(0)
    self.assertTrue( cv1.getNumResources() == 1 )
    self.assertTrue( cv1.getResourceURI(0) ==  "nest" )
    self.assertTrue( cv1.getNumNestedCVTerms() == 1 )
    cv2 = cv1.getNestedCVTerm(0)
    self.assertTrue( cv2.getNumResources() == 1 )
    self.assertTrue( cv2.getResourceURI(0) ==  "nest_nest" )
    self.assertTrue( cv2.getNumNestedCVTerms() == 0 )
    pass  

  def test_RDFAnnotationNestedCVTerm_reading_31(self):
    c = self.m31.getCompartment(1)
    self.assertTrue( c.getNumCVTerms() == 1 )
    cv = c.getCVTerm(0)
    self.assertTrue( cv.getNumResources() == 1 )
    self.assertTrue( cv.getResourceURI(0) ==  "top" )
    self.assertTrue( cv.getNumNestedCVTerms() == 1 )
    cv1 = cv.getNestedCVTerm(0)
    self.assertTrue( cv1.getNumResources() == 1 )
    self.assertTrue( cv1.getResourceURI(0) ==  "nest" )
    self.assertTrue( cv1.getNumNestedCVTerms() == 1 )
    cv2 = cv1.getNestedCVTerm(0)
    self.assertTrue( cv2.getNumResources() == 1 )
    self.assertTrue( cv2.getResourceURI(0) ==  "nest_nest" )
    self.assertTrue( cv2.getNumNestedCVTerms() == 0 )
    pass  

  def test_RDFAnnotationNestedCVTerm_reading_32(self):
    c = self.m32.getCompartment(1)
    self.assertTrue( c.getNumCVTerms() == 1 )
    cv = c.getCVTerm(0)
    self.assertTrue( cv.getNumResources() == 1 )
    self.assertTrue( cv.getResourceURI(0) ==  "top" )
    self.assertTrue( cv.getNumNestedCVTerms() == 1 )
    cv1 = cv.getNestedCVTerm(0)
    self.assertTrue( cv1.getNumResources() == 1 )
    self.assertTrue( cv1.getResourceURI(0) ==  "nest" )
    self.assertTrue( cv1.getNumNestedCVTerms() == 1 )
    cv2 = cv1.getNestedCVTerm(0)
    self.assertTrue( cv2.getNumResources() == 1 )
    self.assertTrue( cv2.getResourceURI(0) ==  "nest_nest" )
    self.assertTrue( cv2.getNumNestedCVTerms() == 0 )
    pass  

  def test_RDFAnnotationNestedCVTerm_writeDC_creator(self):
    expected = wrapString("<model metaid=\"_000001\" id=\"EPSP_Edelstein\" name=\"Edelstein1996_EPSP_AChEvent\">\n" + 
    "  <annotation>\n" + 
    "    <rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" xmlns:dcterms=\"http://purl.org/dc/terms/\" xmlns:vCard=\"http://www.w3.org/2001/vcard-rdf/3.0#\" xmlns:bqbiol=\"http://biomodels.net/biology-qualifiers/\" xmlns:bqmodel=\"http://biomodels.net/model-qualifiers/\">\n" + 
    "      <rdf:Description rdf:about=\"#_000001\">\n" + 
    "        <dcterms:creator>\n" + 
    "          <rdf:Bag>\n" + 
    "            <rdf:li rdf:parseType=\"Resource\">\n" + 
    "              <vCard:N rdf:parseType=\"Resource\">\n" + 
    "                <vCard:Family>Le Novere</vCard:Family>\n" + 
    "                <vCard:Given>Nicolas</vCard:Given>\n" + 
    "              </vCard:N>\n" + 
    "              <vCard:EMAIL>lenov@ebi.ac.uk</vCard:EMAIL>\n" + 
    "              <vCard:ORG rdf:parseType=\"Resource\">\n" + 
    "                <vCard:Orgname>EMBL-EBI</vCard:Orgname>\n" + 
    "              </vCard:ORG>\n" + 
    "            </rdf:li>\n" + 
    "          </rdf:Bag>\n" + 
    "        </dcterms:creator>\n" + 
    "        <dcterms:created rdf:parseType=\"Resource\">\n" + 
    "          <dcterms:W3CDTF>2005-02-02T14:56:11</dcterms:W3CDTF>\n" + 
    "        </dcterms:created>\n" + 
    "        <dcterms:modified rdf:parseType=\"Resource\">\n" + 
    "          <dcterms:W3CDTF>2006-05-30T10:46:02</dcterms:W3CDTF>\n" + 
    "        </dcterms:modified>\n" + 
    "      </rdf:Description>\n" + 
    "    </rdf:RDF>\n" + 
    "  </annotation>\n" + 
    "</model>")
    c = self.m.removeCompartment(2)
    c = None
    c = self.m.removeCompartment(1)
    c = None
    c = self.m.removeCompartment(0)
    c = None
    produced = self.m.toSBML()
    self.assertEqual( True, self.equals(expected,produced) )
    pass  

  def test_RDFAnnotationNestedCVTerm_writeDC_creator_31(self):
    expected = wrapString("<model metaid=\"_000001\" id=\"EPSP_Edelstein\" name=\"Edelstein1996_EPSP_AChEvent\">\n" + 
    "  <annotation>\n" + 
    "    <rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" xmlns:dcterms=\"http://purl.org/dc/terms/\" xmlns:vCard=\"http://www.w3.org/2001/vcard-rdf/3.0#\" xmlns:bqbiol=\"http://biomodels.net/biology-qualifiers/\" xmlns:bqmodel=\"http://biomodels.net/model-qualifiers/\">\n" + 
    "      <rdf:Description rdf:about=\"#_000001\">\n" + 
    "        <dcterms:creator>\n" + 
    "          <rdf:Bag>\n" + 
    "            <rdf:li rdf:parseType=\"Resource\">\n" + 
    "              <vCard:N rdf:parseType=\"Resource\">\n" + 
    "                <vCard:Family>Le Novere</vCard:Family>\n" + 
    "                <vCard:Given>Nicolas</vCard:Given>\n" + 
    "              </vCard:N>\n" + 
    "              <vCard:EMAIL>lenov@ebi.ac.uk</vCard:EMAIL>\n" + 
    "              <vCard:ORG rdf:parseType=\"Resource\">\n" + 
    "                <vCard:Orgname>EMBL-EBI</vCard:Orgname>\n" + 
    "              </vCard:ORG>\n" + 
    "            </rdf:li>\n" + 
    "          </rdf:Bag>\n" + 
    "        </dcterms:creator>\n" + 
    "        <dcterms:created rdf:parseType=\"Resource\">\n" + 
    "          <dcterms:W3CDTF>2005-02-02T14:56:11</dcterms:W3CDTF>\n" + 
    "        </dcterms:created>\n" + 
    "        <dcterms:modified rdf:parseType=\"Resource\">\n" + 
    "          <dcterms:W3CDTF>2006-05-30T10:46:02</dcterms:W3CDTF>\n" + 
    "        </dcterms:modified>\n" + 
    "      </rdf:Description>\n" + 
    "    </rdf:RDF>\n" + 
    "  </annotation>\n" + 
    "</model>")
    c = self.m31.removeCompartment(2)
    c = None
    c = self.m31.removeCompartment(1)
    c = None
    c = self.m31.removeCompartment(0)
    c = None
    produced = self.m31.toSBML()
    self.assertEqual( True, self.equals(expected,produced) )
    pass  

  def test_RDFAnnotationNestedCVTerm_writeDC_creator_32(self):
    expected = wrapString("<model metaid=\"_000001\" id=\"EPSP_Edelstein\" name=\"Edelstein1996_EPSP_AChEvent\">\n" + 
    "  <annotation>\n" + 
    "    <rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" xmlns:dcterms=\"http://purl.org/dc/terms/\" xmlns:vCard=\"http://www.w3.org/2001/vcard-rdf/3.0#\" xmlns:bqbiol=\"http://biomodels.net/biology-qualifiers/\" xmlns:bqmodel=\"http://biomodels.net/model-qualifiers/\">\n" + 
    "      <rdf:Description rdf:about=\"#_000001\">\n" + 
    "        <dcterms:creator>\n" + 
    "          <rdf:Bag>\n" + 
    "            <rdf:li rdf:parseType=\"Resource\">\n" + 
    "              <vCard:N rdf:parseType=\"Resource\">\n" + 
    "                <vCard:Family>Le Novere</vCard:Family>\n" + 
    "                <vCard:Given>Nicolas</vCard:Given>\n" + 
    "              </vCard:N>\n" + 
    "              <vCard:EMAIL>lenov@ebi.ac.uk</vCard:EMAIL>\n" + 
    "              <vCard:ORG rdf:parseType=\"Resource\">\n" + 
    "                <vCard:Orgname>EMBL-EBI</vCard:Orgname>\n" + 
    "              </vCard:ORG>\n" + 
    "            </rdf:li>\n" + 
    "          </rdf:Bag>\n" + 
    "        </dcterms:creator>\n" + 
    "        <dcterms:created rdf:parseType=\"Resource\">\n" + 
    "          <dcterms:W3CDTF>2005-02-02T14:56:11</dcterms:W3CDTF>\n" + 
    "        </dcterms:created>\n" + 
    "        <dcterms:modified rdf:parseType=\"Resource\">\n" + 
    "          <dcterms:W3CDTF>2006-05-30T10:46:02</dcterms:W3CDTF>\n" + 
    "        </dcterms:modified>\n" + 
    "      </rdf:Description>\n" + 
    "    </rdf:RDF>\n" + 
    "  </annotation>\n" + 
    "  <listOfCompartments/>\n" + 
    "</model>")
    c = self.m32.removeCompartment(2)
    c = None
    c = self.m32.removeCompartment(1)
    c = None
    c = self.m32.removeCompartment(0)
    c = None
    produced = self.m32.toSBML()
    self.assertEqual( True, self.equals(expected,produced) )
    pass  

  def test_RDFAnnotationNestedCVTerm_writing(self):
    annot = wrapString("<compartment metaid=\"_4\" id=\"B\">\n" + 
    "  <annotation>\n" + 
    "    <rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" xmlns:dcterms=\"http://purl.org/dc/terms/\" xmlns:vCard=\"http://www.w3.org/2001/vcard-rdf/3.0#\" xmlns:bqbiol=\"http://biomodels.net/biology-qualifiers/\" xmlns:bqmodel=\"http://biomodels.net/model-qualifiers/\">\n" + 
    "      <rdf:Description rdf:about=\"#_4\">\n" + 
    "        <bqbiol:is>\n" + 
    "          <rdf:Bag>\n" + 
    "            <rdf:li rdf:resource=\"top\"/>\n" + 
    "            <bqbiol:hasPart>\n" + 
    "              <rdf:Bag>\n" + 
    "                <rdf:li rdf:resource=\"nest\"/>\n" + 
    "              </rdf:Bag>\n" + 
    "            </bqbiol:hasPart>\n" + 
    "          </rdf:Bag>\n" + 
    "        </bqbiol:is>\n" + 
    "      </rdf:Description>\n" + 
    "    </rdf:RDF>\n" + 
    "  </annotation>\n" + 
    "</compartment>")
    c = self.m.getCompartment(2)
    self.assertTrue( c.getNumCVTerms() == 0 )
    cv = libsbml.CVTerm(libsbml.BIOLOGICAL_QUALIFIER)
    cv.setBiologicalQualifierType(libsbml.BQB_IS)
    cv.addResource("top")
    cv1 = libsbml.CVTerm(libsbml.BIOLOGICAL_QUALIFIER)
    cv1.setBiologicalQualifierType(libsbml.BQB_HAS_PART)
    cv1.addResource("nest")
    cv.addNestedCVTerm(cv1)
    cv1 = None
    c.addCVTerm(cv)
    cv = None
    produced = c.toSBML()
    self.assertEqual( True, self.equals(annot,produced) )
    pass  

  def test_RDFAnnotationNestedCVTerm_writing_31(self):
    annot = wrapString("<compartment metaid=\"_4\" id=\"B\" constant=\"true\">\n" + 
    "  <annotation>\n" + 
    "    <rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" xmlns:dcterms=\"http://purl.org/dc/terms/\" xmlns:vCard=\"http://www.w3.org/2001/vcard-rdf/3.0#\" xmlns:vCard4=\"http://www.w3.org/2006/vcard/ns#\" xmlns:bqbiol=\"http://biomodels.net/biology-qualifiers/\" xmlns:bqmodel=\"http://biomodels.net/model-qualifiers/\">\n" + 
    "      <rdf:Description rdf:about=\"#_4\">\n" + 
    "        <bqbiol:is>\n" + 
    "          <rdf:Bag>\n" + 
    "            <rdf:li rdf:resource=\"top\"/>\n" + 
    "            <bqbiol:hasPart>\n" + 
    "              <rdf:Bag>\n" + 
    "                <rdf:li rdf:resource=\"nest\"/>\n" + 
    "              </rdf:Bag>\n" + 
    "            </bqbiol:hasPart>\n" + 
    "          </rdf:Bag>\n" + 
    "        </bqbiol:is>\n" + 
    "      </rdf:Description>\n" + 
    "    </rdf:RDF>\n" + 
    "  </annotation>\n" + 
    "</compartment>")
    c = self.m31.getCompartment(2)
    self.assertTrue( c.getNumCVTerms() == 0 )
    cv = libsbml.CVTerm(libsbml.BIOLOGICAL_QUALIFIER)
    cv.setBiologicalQualifierType(libsbml.BQB_IS)
    cv.addResource("top")
    cv1 = libsbml.CVTerm(libsbml.BIOLOGICAL_QUALIFIER)
    cv1.setBiologicalQualifierType(libsbml.BQB_HAS_PART)
    cv1.addResource("nest")
    cv.addNestedCVTerm(cv1)
    cv1 = None
    c.addCVTerm(cv)
    cv = None
    produced = c.toSBML()
    self.assertEqual( True, self.equals(annot,produced) )
    pass  

  def test_RDFAnnotationNestedCVTerm_writing_32(self):
    annot = wrapString("<compartment metaid=\"_4\" id=\"B\" constant=\"true\">\n" + 
    "  <annotation>\n" + 
    "    <rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" xmlns:dcterms=\"http://purl.org/dc/terms/\" xmlns:vCard=\"http://www.w3.org/2001/vcard-rdf/3.0#\" xmlns:vCard4=\"http://www.w3.org/2006/vcard/ns#\" xmlns:bqbiol=\"http://biomodels.net/biology-qualifiers/\" xmlns:bqmodel=\"http://biomodels.net/model-qualifiers/\">\n" + 
    "      <rdf:Description rdf:about=\"#_4\">\n" + 
    "        <bqbiol:is>\n" + 
    "          <rdf:Bag>\n" + 
    "            <rdf:li rdf:resource=\"top\"/>\n" + 
    "            <bqbiol:hasPart>\n" + 
    "              <rdf:Bag>\n" + 
    "                <rdf:li rdf:resource=\"nest\"/>\n" + 
    "              </rdf:Bag>\n" + 
    "            </bqbiol:hasPart>\n" + 
    "          </rdf:Bag>\n" + 
    "        </bqbiol:is>\n" + 
    "      </rdf:Description>\n" + 
    "    </rdf:RDF>\n" + 
    "  </annotation>\n" + 
    "</compartment>")
    c = self.m32.getCompartment(2)
    self.assertTrue( c.getNumCVTerms() == 0 )
    cv = libsbml.CVTerm(libsbml.BIOLOGICAL_QUALIFIER)
    cv.setBiologicalQualifierType(libsbml.BQB_IS)
    cv.addResource("top")
    cv1 = libsbml.CVTerm(libsbml.BIOLOGICAL_QUALIFIER)
    cv1.setBiologicalQualifierType(libsbml.BQB_HAS_PART)
    cv1.addResource("nest")
    cv.addNestedCVTerm(cv1)
    cv1 = None
    c.addCVTerm(cv)
    cv = None
    produced = c.toSBML()
    self.assertEqual( True, self.equals(annot,produced) )
    pass  

def suite():
  suite = unittest.TestSuite()
  suite.addTest(unittest.makeSuite(TestRDFAnnotationNestedCVTerms))

  return suite

if __name__ == "__main__":
  if unittest.TextTestRunner(verbosity=1).run(suite()).wasSuccessful() :
    sys.exit(0)
  else:
    sys.exit(1)
