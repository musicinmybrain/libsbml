#
# @file    TestCVTerms.py
# @brief   CVTerms unit tests
#
# @author  Akiya Jouraku (Python conversion)
# @author  Sarah Keating 
# 
# ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
#
# DO NOT EDIT THIS FILE.
#
# This file was generated automatically by converting the file located at
# src/sbml/test/TestCVTerms.c
# using the conversion program dev/utilities/translateTests/translateTests.pl.
# Any changes made here will be lost the next time the file is regenerated.
#
# -----------------------------------------------------------------------------
# This file is part of libSBML.  Please visit http://sbml.org for more
# information about SBML, and the latest version of libSBML.
#
# Copyright 2005-2010 California Institute of Technology.
# Copyright 2002-2005 California Institute of Technology and
#                     Japan Science and Technology Corporation.
# 
# This library is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation.  A copy of the license agreement is provided
# in the file named "LICENSE.txt" included with this software distribution
# and also available online as http://sbml.org/software/libsbml/license.html
# -----------------------------------------------------------------------------

import sys
import unittest
import libsbml


class TestCVTerms(unittest.TestCase):


  def test_CVTerm_accessWithNULL(self):
    self.assertTrue( None.addResource(None) == libsbml.LIBSBML_OPERATION_FAILED )
    self.assertTrue( None.clone() == None )
    self.assertTrue( libsbml.CVTerm(None) == None )
    _dummyList = [ None ]; _dummyList[:] = []; del _dummyList
    self.assertTrue( None.getBiologicalQualifierType() == libsbml.BQB_UNKNOWN )
    self.assertTrue( None.getModelQualifierType() == libsbml.BQM_UNKNOWN )
    self.assertTrue( None.getNumResources() == SBML_INT_MAX )
    self.assertTrue( None.getQualifierType() == UNKNOWN_QUALIFIER )
    self.assertTrue( None.getResources() == None )
    self.assertTrue( None.getResourceURI(0) == None )
    self.assertTrue( None.hasRequiredAttributes() == 0 )
    self.assertTrue( None.removeResource(None) == libsbml.LIBSBML_INVALID_OBJECT )
    self.assertTrue( None.setBiologicalQualifierType(libsbml.BQB_UNKNOWN) == libsbml.LIBSBML_INVALID_OBJECT )
    self.assertTrue( None.setBiologicalQualifierType(None) == libsbml.LIBSBML_INVALID_OBJECT )
    self.assertTrue( None.setModelQualifierType(libsbml.BQM_UNKNOWN) == libsbml.LIBSBML_INVALID_OBJECT )
    self.assertTrue( None.setModelQualifierType(None) == libsbml.LIBSBML_INVALID_OBJECT )
    self.assertTrue( None.setQualifierType(UNKNOWN_QUALIFIER) == libsbml.LIBSBML_INVALID_OBJECT )
    self.assertTrue( None.fromString() == libsbml.BQM_UNKNOWN )
    self.assertTrue( None.fromString() == libsbml.BQB_UNKNOWN )
    pass  

  def test_CVTerm_addNestedCVTerm(self):
    term = libsbml.CVTerm(libsbml.MODEL_QUALIFIER)
    resource =  "GO6666";
    term1 = libsbml.CVTerm(libsbml.MODEL_QUALIFIER)
    resource1 =  "nested";
    term.setModelQualifierType(libsbml.BQM_IS)
    term.addResource(resource)
    term1.setModelQualifierType(libsbml.BQM_IS)
    term1.addResource(resource1)
    i = term.addNestedCVTerm(term1)
    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( term.getNumNestedCVTerms() == 1 )
    nested = term.getNestedCVTerm(0)
    self.assertTrue( nested != None )
    xa = nested.getResources()
    self.assertTrue( xa.getLength() == 1 )
    name = xa.getName(0)
    value = xa.getValue(0)
    self.assertTrue((  "rdf:resource" == name ))
    self.assertTrue((  "nested" == value ))
    name = None
    value = None
    _dummyList = [ term1 ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ term ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_CVTerm_addResource(self):
    term = libsbml.CVTerm(libsbml.MODEL_QUALIFIER)
    resource =  "GO6666";
    self.assertTrue( term != None )
    self.assertTrue( term.getQualifierType() == libsbml.MODEL_QUALIFIER )
    term.addResource(resource)
    xa = term.getResources()
    self.assertTrue( xa.getLength() == 1 )
    name = xa.getName(0)
    value = xa.getValue(0)
    self.assertTrue((  "rdf:resource" == name ))
    self.assertTrue((  "GO6666" == value ))
    name = None
    value = None
    _dummyList = [ term ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_CVTerm_create(self):
    term = libsbml.CVTerm(libsbml.MODEL_QUALIFIER)
    self.assertTrue( term != None )
    self.assertTrue( term.getQualifierType() == libsbml.MODEL_QUALIFIER )
    _dummyList = [ term ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_CVTerm_createFromNode(self):
    qual_triple = libsbml.XMLTriple("is", "", "bqbiol")
    bag_triple = libsbml.XMLTriple()
    li_triple = libsbml.XMLTriple()
    att = libsbml.XMLAttributes()
    att.add( "", "This is my resource")
    att1 = libsbml.XMLAttributes()
    li_token = libsbml.XMLToken(li_triple,att)
    bag_token = libsbml.XMLToken(bag_triple,att1)
    qual_token = libsbml.XMLToken(qual_triple,att1)
    li = libsbml.XMLNode(li_token)
    bag = libsbml.XMLNode(bag_token)
    node = libsbml.XMLNode(qual_token)
    bag.addChild(li)
    node.addChild(bag)
    term = libsbml.CVTerm(node)
    self.assertTrue( term != None )
    self.assertTrue( term.getQualifierType() == libsbml.BIOLOGICAL_QUALIFIER )
    self.assertTrue( term.getBiologicalQualifierType() == libsbml.BQB_IS )
    xa = term.getResources()
    self.assertTrue( xa.getLength() == 1 )
    name = xa.getName(0)
    value = xa.getValue(0)
    self.assertTrue((  "rdf:resource" == name ))
    self.assertTrue((  "This is my resource" == value ))
    name = None
    value = None
    _dummyList = [ qual_triple ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ bag_triple ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ li_triple ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ li_token ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ bag_token ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ qual_token ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ att ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ att1 ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ term ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ bag ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ li ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_CVTerm_createFromNode_Nested(self):
    qual_triple = libsbml.XMLTriple("is", "", "bqbiol")
    bag_triple = libsbml.XMLTriple()
    li_triple = libsbml.XMLTriple()
    att = libsbml.XMLAttributes()
    att.add( "", "This is my resource")
    att1 = libsbml.XMLAttributes()
    nested_qual_triple = libsbml.XMLTriple("hasPart", "", "bqbiol")
    nested_bag_triple = libsbml.XMLTriple()
    nested_li_triple = libsbml.XMLTriple()
    nested_att = libsbml.XMLAttributes()
    nested_att.add( "", "This is my nested resource")
    li_token = libsbml.XMLToken(li_triple,att)
    bag_token = libsbml.XMLToken(bag_triple,att1)
    qual_token = libsbml.XMLToken(qual_triple,att1)
    nested_li_token = libsbml.XMLToken(nested_li_triple,nested_att)
    nested_bag_token = libsbml.XMLToken(nested_bag_triple,att1)
    nested_qual_token = libsbml.XMLToken(nested_qual_triple,att1)
    li = libsbml.XMLNode(li_token)
    bag = libsbml.XMLNode(bag_token)
    node = libsbml.XMLNode(qual_token)
    nested_li = libsbml.XMLNode(nested_li_token)
    nested_bag = libsbml.XMLNode(nested_bag_token)
    nested_node = libsbml.XMLNode(nested_qual_token)
    nested_bag.addChild(nested_li)
    nested_node.addChild(nested_bag)
    bag.addChild(li)
    bag.addChild(nested_node)
    node.addChild(bag)
    term = libsbml.CVTerm(node)
    self.assertTrue( term != None )
    self.assertTrue( term.getQualifierType() == libsbml.BIOLOGICAL_QUALIFIER )
    self.assertTrue( term.getBiologicalQualifierType() == libsbml.BQB_IS )
    xa = term.getResources()
    self.assertTrue( xa.getLength() == 1 )
    name = xa.getName(0)
    value = xa.getValue(0)
    self.assertTrue((  "rdf:resource" == name ))
    self.assertTrue((  "This is my resource" == value ))
    name = None
    value = None
    self.assertTrue( term.getNumNestedCVTerms() == 1 )
    nestedTerm = (const CVTerm_t*)(term).getNestedCVTerm(0)
    self.assertTrue( nestedTerm != None )
    self.assertTrue( nestedTerm.getQualifierType() == libsbml.BIOLOGICAL_QUALIFIER )
    self.assertTrue( nestedTerm.getBiologicalQualifierType() == libsbml.BQB_HAS_PART )
    xa = nestedTerm.getResources()
    self.assertTrue( xa.getLength() == 1 )
    name = xa.getName(0)
    value = xa.getValue(0)
    self.assertTrue((  "rdf:resource" == name ))
    self.assertTrue((  "This is my nested resource" == value ))
    name = None
    value = None
    self.assertTrue( nestedTerm.getNumNestedCVTerms() == 0 )
    _dummyList = [ qual_triple ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ bag_triple ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ li_triple ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ li_token ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ bag_token ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ qual_token ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ att ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ att1 ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ term ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ bag ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ li ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ nested_qual_triple ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ nested_bag_triple ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ nested_li_triple ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ nested_li_token ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ nested_bag_token ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ nested_qual_token ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ nested_att ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ nested_node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ nested_bag ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ nested_li ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_CVTerm_getListNestedCVTerms(self):
    term = libsbml.CVTerm(libsbml.MODEL_QUALIFIER)
    resource =  "GO6666";
    term1 = libsbml.CVTerm(libsbml.MODEL_QUALIFIER)
    resource1 =  "nested";
    term.setModelQualifierType(libsbml.BQM_IS)
    term.addResource(resource)
    term1.setModelQualifierType(libsbml.BQM_IS)
    term1.addResource(resource1)
    i = term.addNestedCVTerm(term1)
    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( term.getNumNestedCVTerms() == 1 )
    nested = term.getListNestedCVTerms()
    self.assertTrue( nested != None )
    self.assertTrue( nested.size() == 1 )
    _dummyList = [ term ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ term1 ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_CVTerm_getResources(self):
    term = libsbml.CVTerm(libsbml.MODEL_QUALIFIER)
    resource =  "GO6666";
    resource1 =  "OtherURI";
    term.addResource(resource)
    term.addResource(resource1)
    number = term.getNumResources()
    self.assertTrue( number == 2 )
    res1 = term.getResourceURI(0)
    res2 = term.getResourceURI(1)
    self.assertTrue((  "GO6666" == res1 ))
    self.assertTrue((  "OtherURI" == res2 ))
    res1 = None
    res2 = None
    _dummyList = [ term ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_CVTerm_get_biol_qualifiers(self):
    self.assertTrue( "is".fromString() == libsbml.BQB_IS )
    self.assertTrue( "hasPart".fromString() == libsbml.BQB_HAS_PART )
    self.assertTrue( "isPartOf".fromString() == libsbml.BQB_IS_PART_OF )
    self.assertTrue( "isVersionOf".fromString() == libsbml.BQB_IS_VERSION_OF )
    self.assertTrue( "hasVersion".fromString() == libsbml.BQB_HAS_VERSION )
    self.assertTrue( "isHomologTo".fromString() == libsbml.BQB_IS_HOMOLOG_TO )
    self.assertTrue( "isDescribedBy".fromString() == libsbml.BQB_IS_DESCRIBED_BY )
    self.assertTrue( "isEncodedBy".fromString() == libsbml.BQB_IS_ENCODED_BY )
    self.assertTrue( "encodes".fromString() == libsbml.BQB_ENCODES )
    self.assertTrue( "occursIn".fromString() == libsbml.BQB_OCCURS_IN )
    self.assertTrue( "hasProperty".fromString() == libsbml.BQB_HAS_PROPERTY )
    self.assertTrue( "isPropertyOf".fromString() == libsbml.BQB_IS_PROPERTY_OF )
    self.assertTrue( "hasTaxon".fromString() == libsbml.BQB_HAS_TAXON )
    self.assertTrue( "isUnknown".fromString() == libsbml.BQB_UNKNOWN )
    self.assertTrue( "xxx".fromString() == libsbml.BQB_UNKNOWN )
    self.assertTrue( (  "is" != libsbml.BQB_IS.toString() ) == False )
    self.assertTrue( (  "hasPart" != libsbml.BQB_HAS_PART.toString() ) == False )
    self.assertTrue( (  "isPartOf" != libsbml.BQB_IS_PART_OF.toString() ) == False )
    self.assertTrue( (  "isVersionOf" != libsbml.BQB_IS_VERSION_OF.toString() ) == False )
    self.assertTrue( (  "hasVersion" != libsbml.BQB_HAS_VERSION.toString() ) == False )
    self.assertTrue( (  "isHomologTo" != libsbml.BQB_IS_HOMOLOG_TO.toString() ) == False )
    self.assertTrue( (  "isDescribedBy" != libsbml.BQB_IS_DESCRIBED_BY.toString() ) == False )
    self.assertTrue( (  "isEncodedBy" != libsbml.BQB_IS_ENCODED_BY.toString() ) == False )
    self.assertTrue( (  "encodes" != libsbml.BQB_ENCODES.toString() ) == False )
    self.assertTrue( (  "occursIn" != libsbml.BQB_OCCURS_IN.toString() ) == False )
    self.assertTrue( (  "hasProperty" != libsbml.BQB_HAS_PROPERTY.toString() ) == False )
    self.assertTrue( (  "isPropertyOf" != libsbml.BQB_IS_PROPERTY_OF.toString() ) == False )
    self.assertTrue( (  "hasTaxon" != libsbml.BQB_HAS_TAXON.toString() ) == False )
    self.assertTrue( libsbml.BQB_UNKNOWN.toString() == None )
    pass  

  def test_CVTerm_get_model_qualifiers(self):
    self.assertTrue( "is".fromString() == libsbml.BQM_IS )
    self.assertTrue( "isDescribedBy".fromString() == libsbml.BQM_IS_DESCRIBED_BY )
    self.assertTrue( "isDerivedFrom".fromString() == libsbml.BQM_IS_DERIVED_FROM )
    self.assertTrue( "isUnknown".fromString() == libsbml.BQM_UNKNOWN )
    self.assertTrue( "xxx".fromString() == libsbml.BQM_UNKNOWN )
    self.assertTrue( (  "is" != libsbml.BQM_IS.toString() ) == False )
    self.assertTrue( (  "isDescribedBy" != libsbml.BQM_IS_DESCRIBED_BY.toString() ) == False )
    self.assertTrue( (  "isDerivedFrom" != libsbml.BQM_IS_DERIVED_FROM.toString() ) == False )
    self.assertTrue( libsbml.BQM_UNKNOWN.toString() == None )
    pass  

  def test_CVTerm_removeNestedCVTerm(self):
    term = libsbml.CVTerm(libsbml.MODEL_QUALIFIER)
    resource =  "GO6666";
    term1 = libsbml.CVTerm(libsbml.MODEL_QUALIFIER)
    resource1 =  "nested";
    term.setModelQualifierType(libsbml.BQM_IS)
    term.addResource(resource)
    term1.setModelQualifierType(libsbml.BQM_IS)
    term1.addResource(resource1)
    i = term.addNestedCVTerm(term1)
    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( term.getNumNestedCVTerms() == 1 )
    removed = term.removeNestedCVTerm(0)
    self.assertTrue( removed != None )
    self.assertTrue( term.getNumNestedCVTerms() == 0 )
    xa = removed.getResources()
    self.assertTrue( xa.getLength() == 1 )
    name = xa.getName(0)
    value = xa.getValue(0)
    self.assertTrue((  "rdf:resource" == name ))
    self.assertTrue((  "nested" == value ))
    name = None
    value = None
    _dummyList = [ term ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ term1 ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ removed ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_CVTerm_set_get(self):
    term = libsbml.CVTerm(libsbml.MODEL_QUALIFIER)
    self.assertTrue( term != None )
    self.assertTrue( term.getQualifierType() == libsbml.MODEL_QUALIFIER )
    term.setModelQualifierType(libsbml.BQM_IS)
    self.assertTrue( term != None )
    self.assertTrue( term.getQualifierType() == libsbml.MODEL_QUALIFIER )
    self.assertTrue( term.getModelQualifierType() == libsbml.BQM_IS )
    self.assertTrue( (  "is"  != term.getModelQualifierType().toString() ) == False )
    term.setModelQualifierType( "isDerivedFrom")
    self.assertTrue( term.getModelQualifierType() == libsbml.BQM_IS_DERIVED_FROM )
    term.setModelQualifierType(None)
    self.assertTrue( term.getModelQualifierType() == libsbml.BQM_UNKNOWN )
    term.setQualifierType(libsbml.BIOLOGICAL_QUALIFIER)
    term.setBiologicalQualifierType(libsbml.BQB_IS)
    self.assertTrue( term.getQualifierType() == libsbml.BIOLOGICAL_QUALIFIER )
    self.assertTrue( term.getBiologicalQualifierType() == libsbml.BQB_IS )
    self.assertTrue( (  "is"  != term.getBiologicalQualifierType().toString() ) == False )
    term.setBiologicalQualifierType( "encodes")
    self.assertTrue( term.getBiologicalQualifierType() == libsbml.BQB_ENCODES )
    term.setBiologicalQualifierType(None)
    self.assertTrue( term.getBiologicalQualifierType() == libsbml.BQB_UNKNOWN )
    _dummyList = [ term ]; _dummyList[:] = []; del _dummyList
    pass  

def suite():
  suite = unittest.TestSuite()
  suite.addTest(unittest.makeSuite(TestCVTerms))

  return suite

if __name__ == "__main__":
  if unittest.TextTestRunner(verbosity=1).run(suite()).wasSuccessful() :
    sys.exit(0)
  else:
    sys.exit(1)
