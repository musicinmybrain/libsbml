#
# @file    TestASTNode.py
# @brief   ASTNode unit tests
#
# @author  Akiya Jouraku (Python conversion)
# @author  Ben Bornstein 
# 
# ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
#
# DO NOT EDIT THIS FILE.
#
# This file was generated automatically by converting the file located at
# src/sbml/test/TestASTNode.c
# using the conversion program dev/utilities/translateTests/translateTests.pl.
# Any changes made here will be lost the next time the file is regenerated.
#
# -----------------------------------------------------------------------------
# This file is part of libSBML.  Please visit http://sbml.org for more
# information about SBML, and the latest version of libSBML.
#
# Copyright 2005-2010 California Institute of Technology.
# Copyright 2002-2005 California Institute of Technology and
#                     Japan Science and Technology Corporation.
# 
# This library is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation.  A copy of the license agreement is provided
# in the file named "LICENSE.txt" included with this software distribution
# and also available online as http://sbml.org/software/libsbml/license.html
# -----------------------------------------------------------------------------

import sys
import unittest
import libsbml

DBL_EPSILON =  2.2204460492503131e-16


class TestASTNode(unittest.TestCase):


  def test_ASTNode_accessWithNULL(self):
    self.assertTrue( None.addChild(None) == libsbml.LIBSBML_INVALID_OBJECT )
    self.assertTrue( None.addSemanticsAnnotation(None) == libsbml.LIBSBML_INVALID_OBJECT )
    self.assertTrue( None.canonicalize() == 0 )
    self.assertTrue( libsbml.ASTNode(None) == None )
    self.assertTrue( None.deepCopy() == None )
    None.fillListOfNodes(None,None)
    _dummyList = [ None ]; _dummyList[:] = []; del _dummyList
    self.assertTrue( None.freeName() == libsbml.LIBSBML_INVALID_OBJECT )
    self.assertTrue( None.getCharacter() == CHAR_MAX )
    self.assertTrue( None.getChild(0) == None )
    self.assertTrue( None.getDenominator() == LONG_MAX )
    self.assertTrue( None.getExponent() == LONG_MAX )
    self.assertTrue( None.getInteger() == LONG_MAX )
    self.assertTrue( None.getLeftChild() == None )
    self.assertTrue( None.getListOfNodes(None) == None )
    self.assertEqual( True, util_isNaN )
    self.assertTrue( None.getName() == None )
    self.assertTrue( None.getNumChildren() == 0 )
    self.assertTrue( None.getNumerator() == LONG_MAX )
    self.assertTrue( None.getNumSemanticsAnnotations() == 0 )
    self.assertTrue( None.getParentSBMLObject() == None )
    self.assertTrue( None.getPrecedence() == 6 )
    self.assertEqual( True, util_isNaN )
    self.assertTrue( None.getRightChild() == None )
    self.assertTrue( None.getSemanticsAnnotation(0) == None )
    self.assertTrue( None.getType() == libsbml.AST_UNKNOWN )
    self.assertTrue( None.getUnits() == "" )
    self.assertTrue( None.getUserData() == None )
    self.assertTrue( None.hasCorrectNumberArguments() == 0 )
    self.assertTrue( None.hasUnits() == 0 )
    self.assertTrue( None.insertChild(0,None) == libsbml.LIBSBML_INVALID_OBJECT )
    self.assertTrue( None.isBoolean() == 0 )
    self.assertTrue( None.returnsBoolean() == 0 )
    self.assertTrue( None.isConstant() == 0 )
    self.assertTrue( None.isFunction() == 0 )
    self.assertTrue( None.isInfinity() == 0 )
    self.assertTrue( None.isInteger() == 0 )
    self.assertTrue( None.isLambda() == 0 )
    self.assertTrue( None.isLog10() == False )
    self.assertTrue( None.isLogical() == 0 )
    self.assertTrue( None.isName() == 0 )
    self.assertTrue( None.isNaN() == 0 )
    self.assertTrue( None.isNegInfinity() == 0 )
    self.assertTrue( None.isNumber() == 0 )
    self.assertTrue( None.isOperator() == 0 )
    self.assertTrue( None.isPiecewise() == 0 )
    self.assertTrue( None.isRational() == 0 )
    self.assertTrue( None.isReal() == 0 )
    self.assertTrue( None.isRelational() == 0 )
    self.assertTrue( None.isSetUnits() == False )
    self.assertTrue( None.isSqrt() == False )
    self.assertTrue( None.isUMinus() == False )
    self.assertTrue( None.isUPlus() == 0 )
    self.assertTrue( None.isUnknown() == 0 )
    self.assertTrue( None.isWellFormedASTNode() == 0 )
    self.assertTrue( None.prependChild(None) == libsbml.LIBSBML_INVALID_OBJECT )
    None.reduceToBinary()
    None.replaceArgument(None,None)
    self.assertTrue( None.removeChild(0) == libsbml.LIBSBML_INVALID_OBJECT )
    self.assertTrue( None.replaceChild(0,None) == libsbml.LIBSBML_INVALID_OBJECT )
    self.assertTrue( None.setCharacter(CHAR_MAX) == libsbml.LIBSBML_INVALID_OBJECT )
    self.assertTrue( None.setValue(0) == libsbml.LIBSBML_INVALID_OBJECT )
    self.assertTrue( None.setName(None) == libsbml.LIBSBML_INVALID_OBJECT )
    self.assertTrue( None.setValue(0,0) == libsbml.LIBSBML_INVALID_OBJECT )
    self.assertTrue( None.setValue(0.0) == libsbml.LIBSBML_INVALID_OBJECT )
    self.assertTrue( None.setValue(0.0,0) == libsbml.LIBSBML_INVALID_OBJECT )
    self.assertTrue( None.setType(libsbml.AST_UNKNOWN) == libsbml.LIBSBML_INVALID_OBJECT )
    self.assertTrue( None.setUnits(None) == libsbml.LIBSBML_INVALID_OBJECT )
    self.assertTrue( None.setUserData(None) == libsbml.LIBSBML_INVALID_OBJECT )
    self.assertTrue( None.swapChildren(None) == libsbml.LIBSBML_INVALID_OBJECT )
    self.assertTrue( None.unsetUnits() == libsbml.LIBSBML_INVALID_OBJECT )
    pass  

  def test_ASTNode_addChild1(self):
    node = libsbml.ASTNode()
    c1 = libsbml.ASTNode()
    c2 = libsbml.ASTNode()
    c1_1 = libsbml.ASTNode()
    i = 0
    node.setType(libsbml.AST_LOGICAL_AND)
    c1.setName( "a")
    c2.setName( "b")
    node.addChild(c1)
    node.addChild(c2)
    self.assertTrue( node.getNumChildren() == 2 )
    math = libsbml.formulaToString(node)
    self.assertTrue((  "and(a, b)" == math ))
    c1_1.setName( "d")
    i = node.addChild(c1_1)
    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( node.getNumChildren() == 3 )
    math = libsbml.formulaToString(node)
    self.assertTrue((  "and(a, b, d)" == math ))
    self.assertTrue((  "a" == node.getChild(0).getName() ))
    self.assertTrue((  "b" == node.getChild(1).getName() ))
    self.assertTrue((  "d" == node.getChild(2).getName() ))
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_addSemanticsAnnotation(self):
    ann = libsbml.XMLNode()
    node = libsbml.ASTNode()
    i = 0
    i = node.addSemanticsAnnotation(ann)
    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( node.getNumSemanticsAnnotations() == 1 )
    i = node.addSemanticsAnnotation(None)
    self.assertTrue( i == libsbml.LIBSBML_OPERATION_FAILED )
    self.assertTrue( node.getNumSemanticsAnnotations() == 1 )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_avogadro(self):
    n = libsbml.ASTNode()
    n.setType(libsbml.AST_NAME_AVOGADRO)
    n.setName( "NA")
    self.assertTrue((  "NA" == n.getName() ))
    val = n.getReal()
    self.assertTrue( val == 6.02214179e23 )
    self.assertTrue( n.isConstant() == 1 )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_avogadro_bug(self):
    n = libsbml.ASTNode()
    n.setName( "NA")
    n.setType(libsbml.AST_NAME_AVOGADRO)
    self.assertTrue((  "NA" == n.getName() ))
    val = n.getReal()
    self.assertTrue( val == 6.02214179e23 )
    self.assertTrue( n.isConstant() == 1 )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_canonicalizeConstants(self):
    n = libsbml.ASTNode()
    n.setName( "ExponentialE")
    self.assertEqual( True, n.isName() )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_CONSTANT_E )
    n.setType(libsbml.AST_NAME)
    n.setName( "False")
    self.assertEqual( True, n.isName() )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_CONSTANT_FALSE )
    n.setType(libsbml.AST_NAME)
    n.setName( "Pi")
    self.assertEqual( True, n.isName() )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_CONSTANT_PI )
    n.setType(libsbml.AST_NAME)
    n.setName( "True")
    self.assertEqual( True, n.isName() )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_CONSTANT_TRUE )
    n.setType(libsbml.AST_NAME)
    n.setName( "Foo")
    self.assertEqual( True, n.isName() )
    n.canonicalize()
    self.assertEqual( True, n.isName() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_canonicalizeFunctions(self):
    n = libsbml.ASTNode(libsbml.AST_FUNCTION)
    n.setName( "abs")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_ABS )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "arccos")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_ARCCOS )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "arccosh")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_ARCCOSH )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "arccot")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_ARCCOT )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "arccoth")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_ARCCOTH )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "arccsc")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_ARCCSC )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "arccsch")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_ARCCSCH )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "arcsec")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_ARCSEC )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "arcsech")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_ARCSECH )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "arcsin")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_ARCSIN )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "arcsinh")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_ARCSINH )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "arctan")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_ARCTAN )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "arctanh")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_ARCTANH )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "ceiling")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_CEILING )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "cos")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_COS )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "cosh")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_COSH )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "cot")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_COT )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "coth")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_COTH )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "csc")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_CSC )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "csch")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_CSCH )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "exp")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_EXP )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "factorial")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_FACTORIAL )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "floor")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_FLOOR )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "lambda")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_LAMBDA )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "ln")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_LN )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "log")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_LOG )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "piecewise")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_PIECEWISE )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "power")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_POWER )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "root")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_ROOT )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "sec")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_SEC )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "sech")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_SECH )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "sin")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_SIN )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "sinh")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_SINH )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "tan")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_TAN )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "tanh")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_TANH )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "Foo")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_canonicalizeFunctionsL1(self):
    n = libsbml.ASTNode(libsbml.AST_FUNCTION)
    n.setName( "acos")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_ARCCOS )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "asin")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_ARCSIN )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "atan")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_ARCTAN )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "ceil")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_CEILING )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "pow")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_POWER )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION)
    n.setName( "log")
    c = libsbml.ASTNode()
    c.setName( "x")
    n.addChild(c)
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    self.assertTrue( n.getNumChildren() == 1 )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_LN )
    self.assertTrue( n.getNumChildren() == 1 )
    n.setType(libsbml.AST_FUNCTION)
    c = libsbml.ASTNode()
    c.setName( "y")
    n.addChild(c)
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    self.assertTrue( n.getNumChildren() == 2 )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_LOG )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION)
    n.setName( "log10")
    c = libsbml.ASTNode()
    c.setName( "x")
    n.addChild(c)
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    self.assertTrue( n.getNumChildren() == 1 )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_LOG )
    self.assertTrue( n.getNumChildren() == 2 )
    c = n.getLeftChild()
    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
    self.assertTrue( c.getInteger() == 10 )
    c = n.getRightChild()
    self.assertTrue( c.getType() == libsbml.AST_NAME )
    self.assertTrue((  "x" == c.getName() ))
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION)
    n.setName( "sqr")
    c = libsbml.ASTNode()
    c.setName( "x")
    n.addChild(c)
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    self.assertTrue( n.getNumChildren() == 1 )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_POWER )
    self.assertTrue( n.getNumChildren() == 2 )
    c = n.getLeftChild()
    self.assertTrue( c.getType() == libsbml.AST_NAME )
    self.assertTrue((  "x" == c.getName() ))
    c = n.getRightChild()
    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
    self.assertTrue( c.getInteger() == 2 )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION)
    n.setName( "sqrt")
    c = libsbml.ASTNode()
    c.setName( "x")
    n.addChild(c)
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    self.assertTrue( n.getNumChildren() == 1 )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION_ROOT )
    self.assertTrue( n.getNumChildren() == 2 )
    c = n.getLeftChild()
    self.assertTrue( c.getType() == libsbml.AST_INTEGER )
    self.assertTrue( c.getInteger() == 2 )
    c = n.getRightChild()
    self.assertTrue( c.getType() == libsbml.AST_NAME )
    self.assertTrue((  "x" == c.getName() ))
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_canonicalizeLogical(self):
    n = libsbml.ASTNode(libsbml.AST_FUNCTION)
    n.setName( "and")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_LOGICAL_AND )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "not")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_LOGICAL_NOT )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "or")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_LOGICAL_OR )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "xor")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_LOGICAL_XOR )
    n.setType(libsbml.AST_FUNCTION)
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_canonicalizeRelational(self):
    n = libsbml.ASTNode(libsbml.AST_FUNCTION)
    n.setName( "eq")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_RELATIONAL_EQ )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "geq")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_RELATIONAL_GEQ )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "gt")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_RELATIONAL_GT )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "leq")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_RELATIONAL_LEQ )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "lt")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_RELATIONAL_LT )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "neq")
    self.assertTrue( n.getType() == libsbml.AST_FUNCTION )
    n.canonicalize()
    self.assertTrue( n.getType() == libsbml.AST_RELATIONAL_NEQ )
    n.setType(libsbml.AST_FUNCTION)
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_children(self):
    parent = libsbml.ASTNode()
    left = libsbml.ASTNode()
    right = libsbml.ASTNode()
    right2 = libsbml.ASTNode()
    parent.setType(libsbml.AST_PLUS)
    left.setValue(1)
    right.setValue(2)
    right2.setValue(3)
    parent.addChild(left)
    parent.addChild(right)
    self.assertTrue( parent.getNumChildren() == 2 )
    self.assertTrue( left.getNumChildren() == 0 )
    self.assertTrue( right.getNumChildren() == 0 )
    self.assertTrue( parent.getLeftChild() == left )
    self.assertTrue( parent.getRightChild() == right )
    self.assertTrue( parent.getChild(0) == left )
    self.assertTrue( parent.getChild(1) == right )
    self.assertTrue( parent.getChild(2) == None )
    parent.addChild(right2)
    self.assertTrue( parent.getNumChildren() == 3 )
    self.assertTrue( left.getNumChildren() == 0 )
    self.assertTrue( right.getNumChildren() == 0 )
    self.assertTrue( right2.getNumChildren() == 0 )
    self.assertTrue( parent.getLeftChild() == left )
    self.assertTrue( parent.getRightChild() == right2 )
    self.assertTrue( parent.getChild(0) == left )
    self.assertTrue( parent.getChild(1) == right )
    self.assertTrue( parent.getChild(2) == right2 )
    self.assertTrue( parent.getChild(3) == None )
    _dummyList = [ parent ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_class(self):
    n = libsbml.ASTNode()
    i = n.setClass( "test")
    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( n.isSetClass() == 1 )
    nclass = n.getClass()
    self.assertTrue((  "test" == nclass ))
    i = n.unsetClass()
    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( n.isSetClass() == 0 )
    nclass = n.getClass()
    self.assertTrue((  "" == nclass ))
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_create(self):
    n = libsbml.ASTNode()
    ea = libsbml.EventAssignment(2,4)
    self.assertTrue( n.getType() == libsbml.AST_UNKNOWN )
    self.assertTrue( n.getCharacter() == "\0" )
    self.assertTrue( n.getName() == None )
    self.assertTrue( n.getInteger() == 0 )
    self.assertTrue( n.getExponent() == 0 )
    self.assertTrue( n.getNumChildren() == 0 )
    self.assertTrue( n.getParentSBMLObject() == None )
    _dummyList = [ ea ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_deepCopy_1(self):
    node = libsbml.ASTNode()
    node.setCharacter( '+')
    node.addChild(libsbml.ASTNode())
    node.addChild(libsbml.ASTNode())
    node.getLeftChild().setValue(1)
    node.getRightChild().setValue(2)
    self.assertTrue( node.getType() == libsbml.AST_PLUS )
    self.assertTrue( node.getCharacter() == '+' )
    self.assertTrue( node.getNumChildren() == 2 )
    child = node.getLeftChild()
    self.assertTrue( child.getType() == libsbml.AST_INTEGER )
    self.assertTrue( child.getInteger() == 1 )
    self.assertTrue( child.getNumChildren() == 0 )
    child = node.getRightChild()
    self.assertTrue( child.getType() == libsbml.AST_INTEGER )
    self.assertTrue( child.getInteger() == 2 )
    self.assertTrue( child.getNumChildren() == 0 )
    copy = node.deepCopy()
    self.assertTrue( copy != node )
    self.assertTrue( copy.getType() == libsbml.AST_PLUS )
    self.assertTrue( copy.getCharacter() == '+' )
    self.assertTrue( copy.getNumChildren() == 2 )
    child = copy.getLeftChild()
    self.assertTrue( child != node.getLeftChild() )
    self.assertTrue( child.getType() == libsbml.AST_INTEGER )
    self.assertTrue( child.getInteger() == 1 )
    self.assertTrue( child.getNumChildren() == 0 )
    child = copy.getRightChild()
    self.assertTrue( child != node.getRightChild() )
    self.assertTrue( child.getType() == libsbml.AST_INTEGER )
    self.assertTrue( child.getInteger() == 2 )
    self.assertTrue( child.getNumChildren() == 0 )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ copy ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_deepCopy_2(self):
    node = libsbml.ASTNode()
    node.setName( "Foo")
    self.assertTrue( node.getType() == libsbml.AST_NAME )
    self.assertTrue((  "Foo" == node.getName() ))
    self.assertTrue( node.getNumChildren() == 0 )
    copy = node.deepCopy()
    self.assertTrue( copy != node )
    self.assertTrue( copy.getType() == libsbml.AST_NAME )
    self.assertTrue((  "Foo" == copy.getName() ))
    self.assertTrue( copy.getNumChildren() == 0 )
    self.assertTrue(( node.getName() == copy.getName() ))
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ copy ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_deepCopy_3(self):
    node = libsbml.ASTNode(libsbml.AST_FUNCTION)
    node.setName( "Foo")
    self.assertTrue( node.getType() == libsbml.AST_FUNCTION )
    self.assertTrue((  "Foo" == node.getName() ))
    self.assertTrue( node.getNumChildren() == 0 )
    copy = node.deepCopy()
    self.assertTrue( copy != node )
    self.assertTrue( copy.getType() == libsbml.AST_FUNCTION )
    self.assertTrue((  "Foo" == copy.getName() ))
    self.assertTrue( copy.getNumChildren() == 0 )
    self.assertTrue(( node.getName() == copy.getName() ))
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ copy ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_deepCopy_4(self):
    node = libsbml.ASTNode(libsbml.AST_FUNCTION_ABS)
    node.setName( "ABS")
    self.assertTrue( node.getType() == libsbml.AST_FUNCTION_ABS )
    self.assertTrue((  "ABS" == node.getName() ))
    self.assertTrue( node.getNumChildren() == 0 )
    copy = node.deepCopy()
    self.assertTrue( copy != node )
    self.assertTrue( copy.getType() == libsbml.AST_FUNCTION_ABS )
    self.assertTrue((  "ABS" == copy.getName() ))
    self.assertTrue( copy.getNumChildren() == 0 )
    self.assertTrue(( node.getName() == copy.getName() ))
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ copy ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_deepCopy_5(self):
    node = libsbml.parseFormula("a + b")
    xmlstr = wrapString("<annotation encoding=\"infix\">\n" + "test\n" + "</annotation>")
    ann = libsbml.XMLNode.convertStringToXMLNode(xmlstr,None)
    node.addSemanticsAnnotation(ann)
    self.assertTrue( node.getNumSemanticsAnnotations() == 1 )
    copy = node.deepCopy()
    self.assertTrue( copy != node )
    self.assertTrue( copy.getNumSemanticsAnnotations() == 1 )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ copy ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_freeName(self):
    node = libsbml.ASTNode()
    i = 0
    i = node.setName( "a")
    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
    math = libsbml.formulaToString(node)
    self.assertTrue((  "a" == math ))
    self.assertTrue((  "a" == node.getName() ))
    i = node.freeName()
    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( node.getName() == None )
    i = node.freeName()
    self.assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
    self.assertTrue( node.getName() == None )
    node.setType(libsbml.AST_UNKNOWN)
    i = node.freeName()
    self.assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
    self.assertTrue( node.getName() == None )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_free_NULL(self):
    _dummyList = [ None ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_getName(self):
    n = libsbml.ASTNode()
    n.setName( "foo")
    self.assertTrue((  "foo" == n.getName() ))
    n.setType(libsbml.AST_NAME_TIME)
    self.assertTrue((  "foo" == n.getName() ))
    n.setName(None)
    self.assertTrue( n.getName() == None )
    self.assertEqual( True, util_isNaN )
    self.assertTrue( n.isWellFormedASTNode() == True )
    n.setType(libsbml.AST_CONSTANT_E)
    self.assertTrue((  "exponentiale" == n.getName() ))
    self.assertEqual( True, util_isEqual )
    self.assertTrue( n.isWellFormedASTNode() == True )
    n.setType(libsbml.AST_CONSTANT_FALSE)
    self.assertTrue((  "false" == n.getName() ))
    self.assertEqual( True, util_isEqual )
    self.assertTrue( n.isWellFormedASTNode() == True )
    n.setType(libsbml.AST_CONSTANT_PI)
    self.assertTrue((  "pi" == n.getName() ))
    self.assertEqual( True, util_isEqual )
    self.assertTrue( n.isWellFormedASTNode() == True )
    n.setType(libsbml.AST_CONSTANT_TRUE)
    self.assertTrue((  "true" == n.getName() ))
    self.assertEqual( True, util_isEqual )
    self.assertTrue( n.isWellFormedASTNode() == True )
    n.setType(libsbml.AST_LAMBDA)
    self.assertTrue((  "lambda" == n.getName() ))
    self.assertEqual( True, util_isNaN )
    self.assertTrue( n.isWellFormedASTNode() == False )
    n.setType(libsbml.AST_FUNCTION)
    n.setName( "f")
    self.assertTrue((  "f" == n.getName() ))
    self.assertEqual( True, util_isNaN )
    self.assertTrue( n.isWellFormedASTNode() == True )
    n.setType(libsbml.AST_FUNCTION_DELAY)
    self.assertTrue((  "f" == n.getName() ))
    self.assertEqual( True, util_isNaN )
    self.assertTrue( n.isWellFormedASTNode() == False )
    n.setName(None)
    self.assertTrue((  "delay" == n.getName() ))
    self.assertEqual( True, util_isNaN )
    n.setType(libsbml.AST_FUNCTION)
    self.assertTrue( n.getName() == None )
    self.assertEqual( True, util_isNaN )
    self.assertTrue( n.isWellFormedASTNode() == True )
    n.setType(libsbml.AST_FUNCTION_ABS)
    self.assertTrue((  "abs" == n.getName() ))
    self.assertEqual( True, util_isNaN )
    n.setType(libsbml.AST_FUNCTION_ARCCOS)
    self.assertTrue((  "arccos" == n.getName() ))
    self.assertEqual( True, util_isNaN )
    n.setType(libsbml.AST_FUNCTION_TAN)
    self.assertTrue((  "tan" == n.getName() ))
    self.assertEqual( True, util_isNaN )
    n.setType(libsbml.AST_FUNCTION_TANH)
    self.assertTrue((  "tanh" == n.getName() ))
    self.assertEqual( True, util_isNaN )
    n.setType(libsbml.AST_LOGICAL_AND)
    self.assertTrue((  "and" == n.getName() ))
    self.assertEqual( True, util_isNaN )
    n.setType(libsbml.AST_LOGICAL_NOT)
    self.assertTrue((  "not" == n.getName() ))
    self.assertEqual( True, util_isNaN )
    n.setType(libsbml.AST_LOGICAL_OR)
    self.assertTrue((  "or" == n.getName() ))
    self.assertEqual( True, util_isNaN )
    n.setType(libsbml.AST_LOGICAL_XOR)
    self.assertTrue((  "xor" == n.getName() ))
    self.assertEqual( True, util_isNaN )
    self.assertTrue( n.isWellFormedASTNode() == True )
    n.setType(libsbml.AST_RELATIONAL_EQ)
    self.assertTrue((  "eq" == n.getName() ))
    self.assertEqual( True, util_isNaN )
    n.setType(libsbml.AST_RELATIONAL_GEQ)
    self.assertTrue((  "geq" == n.getName() ))
    self.assertEqual( True, util_isNaN )
    n.setType(libsbml.AST_RELATIONAL_LT)
    self.assertTrue((  "lt" == n.getName() ))
    self.assertEqual( True, util_isNaN )
    n.setType(libsbml.AST_RELATIONAL_NEQ)
    self.assertTrue((  "neq" == n.getName() ))
    self.assertEqual( True, util_isNaN )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_getPrecedence(self):
    n = libsbml.ASTNode()
    n.setType(libsbml.AST_PLUS)
    self.assertTrue( n.getPrecedence() == 2 )
    n.setType(libsbml.AST_MINUS)
    self.assertTrue( n.getPrecedence() == 2 )
    n.setType(libsbml.AST_TIMES)
    self.assertTrue( n.getPrecedence() == 3 )
    n.setType(libsbml.AST_DIVIDE)
    self.assertTrue( n.getPrecedence() == 3 )
    n.setType(libsbml.AST_POWER)
    self.assertTrue( n.getPrecedence() == 4 )
    n.setType(libsbml.AST_MINUS)
    n.addChild(libsbml.ASTNode(libsbml.AST_NAME))
    self.assertTrue( n.isUMinus() == True )
    self.assertTrue( n.getPrecedence() == 5 )
    n.setType(libsbml.AST_NAME)
    self.assertTrue( n.getPrecedence() == 6 )
    n.setType(libsbml.AST_FUNCTION)
    self.assertTrue( n.getPrecedence() == 6 )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_getReal(self):
    n = libsbml.ASTNode()
    n.setType(libsbml.AST_REAL)
    n.setValue(1.6)
    self.assertTrue( n.getReal() == 1.6 )
    n.setType(libsbml.AST_REAL_E)
    n.setValue(12.3,3)
    self.assertEqual( True, util_isEqual )
    n.setType(libsbml.AST_RATIONAL)
    n.setValue(1,2)
    self.assertTrue( n.getReal() == 0.5 )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_hasTypeAndNumChildren(self):
    n = libsbml.ASTNode()
    c = libsbml.ASTNode()
    n.setType(libsbml.AST_PLUS)
    self.assertEqual( True, n.hasTypeAndNumChildren(libsbml.AST_PLUS,0) )
    self.assertEqual( False, n.hasTypeAndNumChildren(libsbml.AST_PLUS,1) )
    self.assertEqual( False, n.hasTypeAndNumChildren(libsbml.AST_MINUS,0) )
    self.assertEqual( False, n.hasTypeAndNumChildren(libsbml.AST_UNKNOWN,1) )
    c.setName( "x")
    n.addChild(c)
    n.setType(libsbml.AST_FUNCTION_PIECEWISE)
    self.assertEqual( True, n.hasTypeAndNumChildren(libsbml.AST_FUNCTION_PIECEWISE,1) )
    self.assertEqual( False, n.hasTypeAndNumChildren(libsbml.AST_FUNCTION_PIECEWISE,0) )
    self.assertEqual( False, n.hasTypeAndNumChildren(libsbml.AST_LOGICAL_AND,1) )
    self.assertEqual( False, n.hasTypeAndNumChildren(libsbml.AST_DIVIDE,0) )
    c = libsbml.ASTNode()
    c.setName( "y")
    n.addChild(c)
    n.setType(libsbml.AST_DIVIDE)
    self.assertEqual( True, n.hasTypeAndNumChildren(libsbml.AST_DIVIDE,2) )
    self.assertEqual( False, n.hasTypeAndNumChildren(libsbml.AST_DIVIDE,0) )
    self.assertEqual( False, n.hasTypeAndNumChildren(libsbml.AST_CONSTANT_E,2) )
    self.assertEqual( False, n.hasTypeAndNumChildren(libsbml.AST_RELATIONAL_EQ,0) )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_hasUnits(self):
    n = libsbml.ASTNode()
    c = libsbml.ASTNode()
    n.setValue(1)
    self.assertTrue( n.hasUnits() == 0 )
    n.setUnits( "litre")
    self.assertTrue( n.hasUnits() == 1 )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode()
    n.setType(libsbml.AST_PLUS)
    c.setValue(2)
    n.addChild(c)
    self.assertTrue( n.hasUnits() == 0 )
    c = libsbml.ASTNode()
    c.setValue(3)
    c.setUnits( "mole")
    n.addChild(c)
    self.assertTrue( n.hasUnits() == 1 )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_id(self):
    n = libsbml.ASTNode()
    i = n.setId( "test")
    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( n.isSetId() == True )
    id = n.getId()
    self.assertTrue((  "test" == id ))
    i = n.unsetId()
    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( n.isSetId() == False )
    id = n.getId()
    self.assertTrue((  "" == id ))
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_insertChild(self):
    node = libsbml.ASTNode()
    c1 = libsbml.ASTNode()
    c2 = libsbml.ASTNode()
    c3 = libsbml.ASTNode()
    newc = libsbml.ASTNode()
    newc1 = libsbml.ASTNode()
    i = 0
    node.setType(libsbml.AST_LOGICAL_AND)
    c1.setName( "a")
    c2.setName( "b")
    c3.setName( "c")
    node.addChild(c1)
    node.addChild(c2)
    node.addChild(c3)
    self.assertTrue( node.getNumChildren() == 3 )
    math = libsbml.formulaToString(node)
    self.assertTrue((  "and(a, b, c)" == math ))
    newc.setName( "d")
    newc1.setName( "e")
    i = node.insertChild(1,newc)
    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( node.getNumChildren() == 4 )
    math = libsbml.formulaToString(node)
    self.assertTrue((  "and(a, d, b, c)" == math ))
    i = node.insertChild(5,newc)
    self.assertTrue( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE )
    self.assertTrue( node.getNumChildren() == 4 )
    math = libsbml.formulaToString(node)
    self.assertTrue((  "and(a, d, b, c)" == math ))
    i = node.insertChild(2,newc1)
    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( node.getNumChildren() == 5 )
    math = libsbml.formulaToString(node)
    self.assertTrue((  "and(a, d, e, b, c)" == math ))
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_isAvogadro(self):
    n = libsbml.ASTNode(libsbml.AST_PLUS)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_MINUS)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_TIMES)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_DIVIDE)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_POWER)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_INTEGER)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_REAL)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_REAL_E)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_RATIONAL)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_NAME)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_NAME_AVOGADRO)
    self.assertEqual( True, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_NAME_TIME)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_CONSTANT_E)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_CONSTANT_FALSE)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_CONSTANT_PI)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_CONSTANT_TRUE)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_LAMBDA)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_ABS)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_ARCCOS)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_ARCCOSH)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_ARCCOT)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_ARCCOTH)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_ARCCSC)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_ARCCSCH)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_ARCSEC)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_ARCSECH)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_ARCSIN)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_ARCSINH)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_ARCTAN)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_ARCTANH)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_CEILING)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_COS)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_COSH)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_COT)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_COTH)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_CSC)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_CSCH)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_DELAY)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_EXP)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_FACTORIAL)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_FLOOR)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_LN)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_LOG)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_PIECEWISE)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_POWER)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_ROOT)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_SEC)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_SECH)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_SIN)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_SINH)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_TAN)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_TANH)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_LOGICAL_AND)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_LOGICAL_NOT)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_LOGICAL_OR)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_LOGICAL_XOR)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_RELATIONAL_EQ)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_RELATIONAL_GEQ)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_RELATIONAL_GT)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_RELATIONAL_LEQ)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_RELATIONAL_LT)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_RELATIONAL_NEQ)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_UNKNOWN)
    self.assertEqual( False, n.isAvogadro() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_isBoolean(self):
    n = libsbml.ASTNode(libsbml.AST_PLUS)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_MINUS)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_TIMES)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_DIVIDE)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_POWER)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_INTEGER)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_REAL)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_REAL_E)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_RATIONAL)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_NAME)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_NAME_AVOGADRO)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_NAME_TIME)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_CONSTANT_E)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_CONSTANT_FALSE)
    self.assertEqual( True, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_CONSTANT_PI)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_CONSTANT_TRUE)
    self.assertEqual( True, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_LAMBDA)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_ABS)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_ARCCOS)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_ARCCOSH)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_ARCCOT)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_ARCCOTH)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_ARCCSC)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_ARCCSCH)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_ARCSEC)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_ARCSECH)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_ARCSIN)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_ARCSINH)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_ARCTAN)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_ARCTANH)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_CEILING)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_COS)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_COSH)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_COT)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_COTH)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_CSC)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_CSCH)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_DELAY)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_EXP)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_FACTORIAL)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_FLOOR)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_LN)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_LOG)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_PIECEWISE)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_POWER)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_ROOT)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_SEC)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_SECH)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_SIN)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_SINH)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_TAN)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_FUNCTION_TANH)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_LOGICAL_AND)
    self.assertEqual( True, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_LOGICAL_NOT)
    self.assertEqual( True, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_LOGICAL_OR)
    self.assertEqual( True, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_LOGICAL_XOR)
    self.assertEqual( True, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_RELATIONAL_EQ)
    self.assertEqual( True, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_RELATIONAL_GEQ)
    self.assertEqual( True, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_RELATIONAL_GT)
    self.assertEqual( True, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_RELATIONAL_LEQ)
    self.assertEqual( True, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_RELATIONAL_LT)
    self.assertEqual( True, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_RELATIONAL_NEQ)
    self.assertEqual( True, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.ASTNode(libsbml.AST_UNKNOWN)
    self.assertEqual( False, n.isBoolean() )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_isLog10(self):
    n = libsbml.ASTNode()
    n.setType(libsbml.AST_FUNCTION)
    self.assertTrue( n.isLog10() == False )
    n.setType(libsbml.AST_FUNCTION_LOG)
    self.assertTrue( n.isLog10() == False )
    self.assertTrue( n.isWellFormedASTNode() == False )
    c = libsbml.ASTNode()
    n.addChild(c)
    c.setValue(10)
    self.assertTrue( n.isLog10() == False )
    n.addChild(libsbml.ASTNode())
    self.assertTrue( n.isLog10() == True )
    self.assertTrue( n.isWellFormedASTNode() == True )
    c.setValue(2)
    self.assertTrue( n.isLog10() == False )
    self.assertTrue( n.isWellFormedASTNode() == True )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_isSqrt(self):
    n = libsbml.ASTNode()
    n.setType(libsbml.AST_FUNCTION)
    self.assertTrue( n.isSqrt() == False )
    n.setType(libsbml.AST_FUNCTION_ROOT)
    self.assertTrue( n.isSqrt() == False )
    c = libsbml.ASTNode()
    n.addChild(c)
    c.setValue(2)
    self.assertTrue( n.isSqrt() == False )
    n.addChild(libsbml.ASTNode())
    self.assertTrue( n.isSqrt() == True )
    self.assertTrue( n.isWellFormedASTNode() == True )
    c.setValue(3)
    self.assertTrue( n.isSqrt() == False )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_isUMinus(self):
    n = libsbml.ASTNode()
    n.setType(libsbml.AST_MINUS)
    self.assertTrue( n.isUMinus() == False )
    n.addChild(libsbml.ASTNode(libsbml.AST_NAME))
    self.assertTrue( n.isUMinus() == True )
    self.assertTrue( n.isWellFormedASTNode() == True )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_isUPlus(self):
    n = libsbml.ASTNode()
    n.setType(libsbml.AST_PLUS)
    self.assertTrue( n.isUPlus() == 0 )
    n.addChild(libsbml.ASTNode(libsbml.AST_NAME))
    self.assertTrue( n.isUPlus() == 1 )
    self.assertTrue( n.isWellFormedASTNode() == True )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_no_children(self):
    node = libsbml.ASTNode()
    self.assertTrue( node.getNumChildren() == 0 )
    self.assertTrue( node.getLeftChild() == None )
    self.assertTrue( node.getRightChild() == None )
    self.assertTrue( node.getChild(0) == None )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_one_child(self):
    node = libsbml.ASTNode()
    child = libsbml.ASTNode()
    node.addChild(child)
    self.assertTrue( node.getNumChildren() == 1 )
    self.assertTrue( node.getLeftChild() == child )
    self.assertTrue( node.getRightChild() == None )
    self.assertTrue( node.getChild(0) == child )
    self.assertTrue( node.getChild(1) == None )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_prependChild1(self):
    node = libsbml.ASTNode()
    c1 = libsbml.ASTNode()
    c2 = libsbml.ASTNode()
    c1_1 = libsbml.ASTNode()
    i = 0
    node.setType(libsbml.AST_LOGICAL_AND)
    c1.setName( "a")
    c2.setName( "b")
    node.addChild(c1)
    node.addChild(c2)
    self.assertTrue( node.getNumChildren() == 2 )
    math = libsbml.formulaToString(node)
    self.assertTrue((  "and(a, b)" == math ))
    c1_1.setName( "d")
    i = node.prependChild(c1_1)
    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( node.getNumChildren() == 3 )
    math = libsbml.formulaToString(node)
    self.assertTrue((  "and(d, a, b)" == math ))
    self.assertTrue((  "d" == node.getChild(0).getName() ))
    self.assertTrue((  "a" == node.getChild(1).getName() ))
    self.assertTrue((  "b" == node.getChild(2).getName() ))
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_reduceToBinary(self):
    n = libsbml.ASTNode()
    n.setType(libsbml.AST_PLUS)
    c1 = libsbml.ASTNode()
    c1.setValue(2)
    c2 = libsbml.ASTNode()
    c2.setValue(2)
    c3 = libsbml.ASTNode()
    c3.setValue(2)
    n.addChild(c1)
    n.addChild(c2)
    n.addChild(c3)
    self.assertTrue( n.getNumChildren() == 3 )
    n.reduceToBinary()
    self.assertTrue( n.getNumChildren() == 2 )
    child = n.getChild(0)
    self.assertTrue( child.getNumChildren() == 2 )
    child = n.getChild(1)
    self.assertTrue( child.getNumChildren() == 0 )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_removeChild(self):
    node = libsbml.ASTNode()
    c1 = libsbml.ASTNode()
    c2 = libsbml.ASTNode()
    i = 0
    node.setType(libsbml.AST_PLUS)
    c1.setName( "foo")
    c2.setName( "foo2")
    node.addChild(c1)
    node.addChild(c2)
    self.assertTrue( node.getNumChildren() == 2 )
    i = node.removeChild(0)
    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( node.getNumChildren() == 1 )
    i = node.removeChild(1)
    self.assertTrue( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE )
    self.assertTrue( node.getNumChildren() == 1 )
    i = node.removeChild(0)
    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( node.getNumChildren() == 0 )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ c1 ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ c2 ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_replaceArgument1(self):
    node = libsbml.parseFormula("x*y")
    user = libsbml.ASTNode(libsbml.AST_FUNCTION)
    user.setName( "f")
    c1 = libsbml.ASTNode()
    c2 = libsbml.ASTNode()
    bvar =  "x";
    c1.setName( "x")
    c2.setName( "y")
    user.addChild(c1)
    user.addChild(c2)
    math = libsbml.formulaToString(user)
    self.assertTrue((  "f(x, y)" == math ))
    node.replaceArgument(bvar,user)
    math = libsbml.formulaToString(node)
    self.assertTrue((  "f(x, y) * y" == math ))
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ user ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_replaceArgument2(self):
    node = libsbml.parseFormula("x*y")
    user = libsbml.ASTNode(libsbml.AST_NAME_TIME)
    user.setName( "f")
    bvar =  "x";
    node.replaceArgument(bvar,user)
    math = libsbml.formulaToString(node)
    self.assertTrue((  "f * y" == math ))
    child = node.getChild(0)
    self.assertTrue( child.getType() == libsbml.AST_NAME_TIME )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ user ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_replaceArgument3(self):
    node = libsbml.parseFormula("piecewise(x, gt(x, y), x)")
    repl1 = libsbml.parseFormula("a/b")
    repl2 = libsbml.parseFormula("2")
    bvar =  "x";
    node.replaceArgument(bvar,repl2)
    math = libsbml.formulaToString(node)
    self.assertTrue((  "piecewise(2, gt(2, y), 2)" == math ))
    node.replaceArgument( "y",repl1)
    math = libsbml.formulaToString(node)
    self.assertTrue((  "piecewise(2, gt(2, a / b), 2)" == math ))
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ repl1 ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ repl2 ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_replaceArgument4(self):
    node = libsbml.parseFormula("piecewise(x, gt(x, y), y)")
    repl1 = libsbml.parseFormula("a/b")
    repl2 = libsbml.parseFormula("2")
    bvar =  "x";
    node.replaceArgument(bvar,repl2)
    math = libsbml.formulaToString(node)
    self.assertTrue((  "piecewise(2, gt(2, y), y)" == math ))
    node.replaceArgument( "y",repl1)
    math = libsbml.formulaToString(node)
    self.assertTrue((  "piecewise(2, gt(2, a / b), a / b)" == math ))
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ repl1 ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ repl2 ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_replaceArgument5(self):
    node = libsbml.parseFormula("piecewise(y, gt(x, y), x)")
    repl1 = libsbml.parseFormula("a/b")
    repl2 = libsbml.parseFormula("2")
    bvar =  "x";
    node.replaceArgument(bvar,repl2)
    math = libsbml.formulaToString(node)
    self.assertTrue((  "piecewise(y, gt(2, y), 2)" == math ))
    node.replaceArgument( "y",repl1)
    math = libsbml.formulaToString(node)
    self.assertTrue((  "piecewise(a / b, gt(2, a / b), 2)" == math ))
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ repl1 ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ repl2 ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_replaceChild(self):
    node = libsbml.ASTNode()
    c1 = libsbml.ASTNode()
    c2 = libsbml.ASTNode()
    c3 = libsbml.ASTNode()
    c4 = libsbml.ASTNode()
    c5 = libsbml.ASTNode()
    i = 0
    node.setType(libsbml.AST_LOGICAL_AND)
    c1.setName( "a")
    c2.setName( "b")
    c3.setName( "c")
    c4.setName( "d")
    c5.setName( "e")
    node.addChild(c1)
    node.addChild(c2)
    node.addChild(c3)
    self.assertTrue( node.getNumChildren() == 3 )
    math = libsbml.formulaToString(node)
    self.assertTrue((  "and(a, b, c)" == math ))
    i = node.replaceChild(0,c4)
    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( node.getNumChildren() == 3 )
    math = libsbml.formulaToString(node)
    self.assertTrue((  "and(d, b, c)" == math ))
    i = node.replaceChild(3,c4)
    self.assertTrue( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE )
    self.assertTrue( node.getNumChildren() == 3 )
    math = libsbml.formulaToString(node)
    self.assertTrue((  "and(d, b, c)" == math ))
    i = node.replaceChild(1,c5)
    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( node.getNumChildren() == 3 )
    math = libsbml.formulaToString(node)
    self.assertTrue((  "and(d, e, c)" == math ))
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ c1 ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ c2 ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_returnsBoolean(self):
    n = libsbml.parseFormula("geq(a,b)")
    self.assertTrue( n.returnsBoolean() == 1 )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.parseFormula("times(a,b)")
    self.assertTrue( n.returnsBoolean() == 0 )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.parseFormula("piecewise(true, geq(X, T), false)")
    self.assertTrue( n.returnsBoolean() == 1 )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.parseFormula("piecewise(true, geq(X, T), 5)")
    self.assertTrue( n.returnsBoolean() == 0 )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    n = libsbml.parseFormula("func1(X)")
    self.assertTrue( n.returnsBoolean() == 0 )
    doc = libsbml.SBMLDocument(3,1)
    model = doc.createModel()
    c = model.createConstraint()
    c.setMath(n)
    math = c.getMath()
    self.assertTrue( math.returnsBoolean() == 0 )
    fd = model.createFunctionDefinition()
    fd.setId( "func1")
    self.assertTrue( math.returnsBoolean() == 0 )
    m = libsbml.parseFormula("lambda(x, true)")
    fd.setMath(m)
    _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
    self.assertTrue( math.returnsBoolean() == 1 )
    m = libsbml.parseFormula("lambda(x, 6)")
    fd.setMath(m)
    _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
    self.assertTrue( math.returnsBoolean() == 0 )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ doc ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_setCharacter(self):
    node = libsbml.ASTNode()
    node.setName( "foo")
    self.assertTrue( node.getType() == libsbml.AST_NAME )
    self.assertTrue( node.getCharacter() == "\0" )
    self.assertTrue((  "foo" == node.getName() ))
    self.assertTrue( node.getInteger() == 0 )
    self.assertTrue( node.getReal() == 0 )
    self.assertTrue( node.getExponent() == 0 )
    self.assertTrue( node.getDenominator() == 1 )
    node.setCharacter( '+')
    self.assertTrue( node.getType() == libsbml.AST_PLUS )
    self.assertTrue( node.getCharacter() == '+' )
    self.assertTrue( node.getName() == None )
    self.assertTrue( node.getInteger() == 0 )
    self.assertTrue( node.getReal() == 0 )
    self.assertTrue( node.getExponent() == 0 )
    self.assertTrue( node.getDenominator() == 1 )
    node.setCharacter( '-')
    self.assertTrue( node.getType() == libsbml.AST_MINUS )
    self.assertTrue( node.getCharacter() == '-' )
    self.assertTrue( node.getName() == None )
    self.assertTrue( node.getInteger() == 0 )
    self.assertTrue( node.getReal() == 0 )
    self.assertTrue( node.getExponent() == 0 )
    self.assertTrue( node.getDenominator() == 1 )
    node.setCharacter( '*')
    self.assertTrue( node.getType() == libsbml.AST_TIMES )
    self.assertTrue( node.getCharacter() == '*' )
    self.assertTrue( node.getName() == None )
    self.assertTrue( node.getInteger() == 0 )
    self.assertTrue( node.getReal() == 0 )
    self.assertTrue( node.getExponent() == 0 )
    self.assertTrue( node.getDenominator() == 1 )
    node.setCharacter( '/')
    self.assertTrue( node.getType() == libsbml.AST_DIVIDE )
    self.assertTrue( node.getCharacter() == '/' )
    self.assertTrue( node.getName() == None )
    self.assertTrue( node.getInteger() == 0 )
    self.assertTrue( node.getReal() == 0 )
    self.assertTrue( node.getExponent() == 0 )
    self.assertTrue( node.getDenominator() == 1 )
    node.setCharacter( '^')
    self.assertTrue( node.getType() == libsbml.AST_POWER )
    self.assertTrue( node.getCharacter() == '^' )
    self.assertTrue( node.getName() == None )
    self.assertTrue( node.getInteger() == 0 )
    self.assertTrue( node.getReal() == 0 )
    self.assertTrue( node.getExponent() == 0 )
    self.assertTrue( node.getDenominator() == 1 )
    node.setCharacter( '$')
    self.assertTrue( node.getType() == libsbml.AST_UNKNOWN )
    self.assertTrue( node.getCharacter() == '$' )
    self.assertTrue( node.getName() == None )
    self.assertTrue( node.getInteger() == 0 )
    self.assertTrue( node.getReal() == 0 )
    self.assertTrue( node.getExponent() == 0 )
    self.assertTrue( node.getDenominator() == 1 )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_setInteger(self):
    node = libsbml.ASTNode()
    node.setName( "foo")
    self.assertTrue( node.getType() == libsbml.AST_NAME )
    self.assertTrue((  "foo" == node.getName() ))
    self.assertTrue( node.getCharacter() == "\0" )
    self.assertTrue( node.getInteger() == 0 )
    self.assertTrue( node.getReal() == 0 )
    self.assertTrue( node.getExponent() == 0 )
    self.assertTrue( node.getDenominator() == 1 )
    node.setValue(3.2)
    self.assertTrue( node.getType() == libsbml.AST_REAL )
    self.assertTrue( node.getInteger() == 0 )
    self.assertTrue( node.getName() == None )
    self.assertTrue( node.getCharacter() == "\0" )
    self.assertTrue( node.getReal() == 3.2 )
    self.assertTrue( node.getExponent() == 0 )
    self.assertTrue( node.getDenominator() == 1 )
    node.setValue(321)
    self.assertTrue( node.getType() == libsbml.AST_INTEGER )
    self.assertTrue( node.getInteger() == 321 )
    self.assertTrue( node.getName() == None )
    self.assertTrue( node.getCharacter() == "\0" )
    self.assertTrue( node.getReal() == 0 )
    self.assertTrue( node.getExponent() == 0 )
    self.assertTrue( node.getDenominator() == 1 )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_setName_1(self):
    name =  "foo";
    node = libsbml.ASTNode()
    self.assertTrue( node.getType() == libsbml.AST_UNKNOWN )
    node.setName(name)
    self.assertTrue( node.getType() == libsbml.AST_NAME )
    self.assertTrue(( name == node.getName() ))
    self.assertTrue( node.getCharacter() == "\0" )
    self.assertTrue( node.getInteger() == 0 )
    self.assertTrue( node.getReal() == 0 )
    self.assertTrue( node.getExponent() == 0 )
    self.assertTrue( node.getDenominator() == 1 )
    if (node.getName() == name):
      pass    
    node.setName(None)
    self.assertTrue( node.getType() == libsbml.AST_NAME )
    if (node.getName() != None):
      pass    
    node.setType(libsbml.AST_FUNCTION_COS)
    self.assertTrue( node.getType() == libsbml.AST_FUNCTION_COS )
    self.assertTrue((  "cos" == node.getName() ))
    self.assertTrue( node.getCharacter() == "\0" )
    self.assertTrue( node.getInteger() == 0 )
    self.assertTrue( node.getReal() == 0 )
    self.assertTrue( node.getExponent() == 0 )
    self.assertTrue( node.getDenominator() == 1 )
    node.setType(libsbml.AST_PLUS)
    node.setName(name)
    self.assertTrue( node.getType() == libsbml.AST_NAME )
    self.assertTrue(( name == node.getName() ))
    self.assertTrue( node.getCharacter() == '+' )
    self.assertTrue( node.getInteger() == 0 )
    self.assertTrue( node.getReal() == 0 )
    self.assertTrue( node.getExponent() == 0 )
    self.assertTrue( node.getDenominator() == 1 )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_setName_2(self):
    name =  "foo";
    node = libsbml.ASTNode()
    node.setId( "s")
    self.assertTrue( node.getType() == libsbml.AST_UNKNOWN )
    node.setName(name)
    self.assertTrue( node.getType() == libsbml.AST_NAME )
    id = node.getId()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( ( name != node.getName() ) == False )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_setName_3(self):
    name =  "foo";
    node = libsbml.ASTNode(libsbml.AST_PLUS)
    node.setId( "s")
    node.setName(name)
    self.assertTrue( node.getType() == libsbml.AST_NAME )
    id = node.getId()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( ( name != node.getName() ) == False )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_setName_4(self):
    name =  "foo";
    node = libsbml.ASTNode(libsbml.AST_INTEGER)
    node.setId( "s")
    node.setName(name)
    self.assertTrue( node.getType() == libsbml.AST_NAME )
    id = node.getId()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( ( name != node.getName() ) == False )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_setName_5(self):
    name =  "foo";
    node = libsbml.ASTNode(libsbml.AST_INTEGER)
    node.setId( "s")
    node.setUnits( "mole")
    node.setName(name)
    self.assertTrue( node.getType() == libsbml.AST_NAME )
    id = node.getId()
    units = node.getUnits()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( ( name != node.getName() ) == False )
    self.assertTrue( (  "" != units ) == False )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_setName_override(self):
    node = libsbml.ASTNode(libsbml.AST_FUNCTION_SIN)
    self.assertTrue((  "sin" == node.getName() ))
    self.assertTrue( node.getType() == libsbml.AST_FUNCTION_SIN )
    node.setName( "MySinFunc")
    self.assertTrue((  "MySinFunc" == node.getName() ))
    self.assertTrue( node.getType() == libsbml.AST_FUNCTION_SIN )
    node.setName(None)
    self.assertTrue((  "sin" == node.getName() ))
    self.assertTrue( node.getType() == libsbml.AST_FUNCTION_SIN )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_setReal(self):
    node = libsbml.ASTNode()
    node.setName( "foo")
    self.assertTrue( node.getType() == libsbml.AST_NAME )
    node.setValue(32.1)
    self.assertTrue( node.getType() == libsbml.AST_REAL )
    self.assertTrue( node.getInteger() == 0 )
    self.assertTrue( node.getName() == None )
    self.assertTrue( node.getCharacter() == "\0" )
    self.assertTrue( node.getReal() == 32.1 )
    self.assertTrue( node.getExponent() == 0 )
    self.assertTrue( node.getDenominator() == 1 )
    self.assertTrue( node.getMantissa() == 32.1 )
    node.setValue(45,90)
    self.assertTrue( node.getType() == libsbml.AST_RATIONAL )
    self.assertTrue( node.getInteger() == 45 )
    self.assertTrue( node.getName() == None )
    self.assertTrue( node.getCharacter() == "\0" )
    self.assertTrue( node.getReal() == 0.5 )
    self.assertTrue( node.getExponent() == 0 )
    self.assertTrue( node.getDenominator() == 90 )
    self.assertTrue( node.getMantissa() == 0 )
    node.setValue(32.0,4)
    self.assertTrue( node.getType() == libsbml.AST_REAL_E )
    self.assertTrue( node.getInteger() == 0 )
    self.assertTrue( node.getName() == None )
    self.assertTrue( node.getCharacter() == "\0" )
    self.assertTrue( node.getReal() == 320000 )
    self.assertTrue( node.getExponent() == 4 )
    self.assertTrue( node.getDenominator() == 1 )
    self.assertTrue( node.getMantissa() == 32 )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_setType_1(self):
    node = libsbml.ASTNode()
    node.setName( "foo")
    self.assertTrue( node.getType() == libsbml.AST_NAME )
    node.setType(libsbml.AST_FUNCTION)
    self.assertTrue( node.getType() == libsbml.AST_FUNCTION )
    self.assertTrue((  "foo" == node.getName() ))
    node.setType(libsbml.AST_NAME)
    self.assertTrue( node.getType() == libsbml.AST_NAME )
    self.assertTrue((  "foo" == node.getName() ))
    node.setType(libsbml.AST_INTEGER)
    self.assertTrue( node.getType() == libsbml.AST_INTEGER )
    node.setType(libsbml.AST_REAL)
    self.assertTrue( node.getType() == libsbml.AST_REAL )
    node.setType(libsbml.AST_UNKNOWN)
    self.assertTrue( node.getType() == libsbml.AST_UNKNOWN )
    node.setType(libsbml.AST_PLUS)
    self.assertTrue( node.getType() == libsbml.AST_PLUS )
    self.assertTrue( node.getCharacter() == '+' )
    node.setType(libsbml.AST_MINUS)
    self.assertTrue( node.getType() == libsbml.AST_MINUS )
    self.assertTrue( node.getCharacter() == '-' )
    node.setType(libsbml.AST_TIMES)
    self.assertTrue( node.getType() == libsbml.AST_TIMES )
    self.assertTrue( node.getCharacter() == '*' )
    node.setType(libsbml.AST_DIVIDE)
    self.assertTrue( node.getType() == libsbml.AST_DIVIDE )
    self.assertTrue( node.getCharacter() == '/' )
    node.setType(libsbml.AST_POWER)
    self.assertTrue( node.getType() == libsbml.AST_POWER )
    self.assertTrue( node.getCharacter() == '^' )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_setType_10(self):
    node = libsbml.ASTNode(libsbml.AST_REAL_E)
    m = libsbml.Model(3,1)
    node.setId( "s")
    node.setUnits( "mole")
    node.setValue(2.3,1)
    node.setParentSBMLObject((m))
    self.assertTrue( node.getType() == libsbml.AST_REAL_E )
    self.assertTrue( node.getInteger() == 0 )
    self.assertEqual( True, util_isEqual )
    self.assertTrue( node.getExponent() == 1 )
    self.assertTrue( node.getDenominator() == 1 )
    self.assertTrue( node.getNumerator() == 0 )
    self.assertEqual( True, util_isEqual )
    id = node.getId()
    units = node.getUnits()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( (  "mole" != units ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    node.setType(libsbml.AST_PLUS)
    self.assertTrue( node.getType() == libsbml.AST_PLUS )
    self.assertTrue( node.getInteger() == 0 )
    self.assertTrue( node.getMantissa() == 0 )
    self.assertTrue( node.getExponent() == 0 )
    self.assertTrue( node.getDenominator() == 1 )
    self.assertTrue( node.getNumerator() == 0 )
    self.assertEqual( True, util_isEqual )
    id = node.getId()
    units = node.getUnits()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( (  "" != units ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_setType_11(self):
    node = libsbml.ASTNode(libsbml.AST_REAL)
    m = libsbml.Model(3,1)
    node.setId( "s")
    node.setUnits( "mole")
    node.setValue(2.3)
    node.setParentSBMLObject((m))
    self.assertTrue( node.getType() == libsbml.AST_REAL )
    self.assertTrue( node.getInteger() == 0 )
    self.assertEqual( True, util_isEqual )
    self.assertTrue( node.getExponent() == 0 )
    self.assertTrue( node.getDenominator() == 1 )
    self.assertTrue( node.getNumerator() == 0 )
    self.assertEqual( True, util_isEqual )
    id = node.getId()
    units = node.getUnits()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( (  "mole" != units ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    node.setType(libsbml.AST_FUNCTION_COS)
    self.assertTrue( node.getType() == libsbml.AST_FUNCTION_COS )
    self.assertTrue( node.getInteger() == 0 )
    self.assertTrue( node.getMantissa() == 0 )
    self.assertTrue( node.getExponent() == 0 )
    self.assertTrue( node.getDenominator() == 1 )
    self.assertTrue( node.getNumerator() == 0 )
    self.assertEqual( True, util_isEqual )
    id = node.getId()
    units = node.getUnits()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( (  "" != units ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_setType_12(self):
    node = libsbml.ASTNode(libsbml.AST_INTEGER)
    m = libsbml.Model(3,1)
    node.setId( "s")
    node.setUnits( "mole")
    node.setValue(2)
    node.setParentSBMLObject((m))
    self.assertTrue( node.getType() == libsbml.AST_INTEGER )
    self.assertTrue( node.getInteger() == 2 )
    self.assertEqual( True, util_isEqual )
    self.assertTrue( node.getExponent() == 0 )
    self.assertTrue( node.getDenominator() == 1 )
    self.assertTrue( node.getNumerator() == 2 )
    self.assertEqual( True, util_isEqual )
    id = node.getId()
    units = node.getUnits()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( (  "mole" != units ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    node.setType(libsbml.AST_DIVIDE)
    self.assertTrue( node.getType() == libsbml.AST_DIVIDE )
    self.assertTrue( node.getInteger() == 0 )
    self.assertTrue( node.getMantissa() == 0 )
    self.assertTrue( node.getExponent() == 0 )
    self.assertTrue( node.getDenominator() == 1 )
    self.assertTrue( node.getNumerator() == 0 )
    self.assertEqual( True, util_isEqual )
    id = node.getId()
    units = node.getUnits()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( (  "" != units ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_setType_13(self):
    node = libsbml.ASTNode(libsbml.AST_NAME)
    m = libsbml.Model(3,1)
    node.setId( "s")
    node.setParentSBMLObject((m))
    node.setDefinitionURLString( "my_url")
    node.setName( "t")
    self.assertTrue( node.getType() == libsbml.AST_NAME )
    id = node.getId()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    self.assertTrue( node.isName() == 1 )
    self.assertTrue( (  "t" != node.getName() ) == False )
    url = node.getDefinitionURLString()
    self.assertTrue( (  "my_url" != url ) == False )
    node.setType(libsbml.AST_FUNCTION)
    self.assertTrue( node.getType() == libsbml.AST_FUNCTION )
    id = node.getId()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    self.assertTrue( node.isName() == 0 )
    self.assertTrue( (  "t" != node.getName() ) == False )
    url = node.getDefinitionURLString()
    self.assertTrue( (  "my_url" != url ) == False )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_setType_14(self):
    node = libsbml.ASTNode(libsbml.AST_NAME_TIME)
    m = libsbml.Model(3,1)
    node.setId( "s")
    node.setName( "t")
    node.setParentSBMLObject((m))
    self.assertTrue( node.getType() == libsbml.AST_NAME_TIME )
    id = node.getId()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( (  "t" != node.getName() ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    self.assertTrue( node.isName() == 1 )
    self.assertTrue( node.getReal() == 0 )
    url = node.getDefinitionURLString()
    self.assertTrue( (                        "http://www.sbml.org/sbml/symbols/time" != url ) == False )
    node.setType(libsbml.AST_LAMBDA)
    self.assertTrue( node.getType() == libsbml.AST_LAMBDA )
    id = node.getId()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( (  "t" != node.getName() ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    self.assertTrue( node.isName() == 0 )
    self.assertTrue( node.getReal() == 0 )
    url = node.getDefinitionURLString()
    self.assertTrue( (                        "" != url ) == False )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_setType_15(self):
    node = libsbml.ASTNode(libsbml.AST_NAME_TIME)
    m = libsbml.Model(3,1)
    node.setId( "s")
    node.setName( "t")
    node.setParentSBMLObject((m))
    self.assertTrue( node.getType() == libsbml.AST_NAME_TIME )
    id = node.getId()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( (  "t" != node.getName() ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    self.assertTrue( node.isName() == 1 )
    self.assertTrue( node.getReal() == 0 )
    url = node.getDefinitionURLString()
    self.assertTrue( (                        "http://www.sbml.org/sbml/symbols/time" != url ) == False )
    node.setType(libsbml.AST_FUNCTION_PIECEWISE)
    self.assertTrue( node.getType() == libsbml.AST_FUNCTION_PIECEWISE )
    id = node.getId()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( (  "t" != node.getName() ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    self.assertTrue( node.isName() == 0 )
    self.assertTrue( node.getReal() == 0 )
    url = node.getDefinitionURLString()
    self.assertTrue( (                        "" != url ) == False )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_setType_16(self):
    node = libsbml.ASTNode(libsbml.AST_NAME_TIME)
    m = libsbml.Model(3,1)
    node.setId( "s")
    node.setName( "t")
    node.setParentSBMLObject((m))
    self.assertTrue( node.getType() == libsbml.AST_NAME_TIME )
    id = node.getId()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( (  "t" != node.getName() ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    self.assertTrue( node.isName() == 1 )
    self.assertTrue( node.getReal() == 0 )
    url = node.getDefinitionURLString()
    self.assertTrue( (                        "http://www.sbml.org/sbml/symbols/time" != url ) == False )
    node.setType(libsbml.AST_FUNCTION_DELAY)
    self.assertTrue( node.getType() == libsbml.AST_FUNCTION_DELAY )
    id = node.getId()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( (  "t" != node.getName() ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    self.assertTrue( node.isName() == 0 )
    self.assertTrue( node.getReal() == 0 )
    url = node.getDefinitionURLString()
    self.assertTrue( (                        "http://www.sbml.org/sbml/symbols/delay" != url ) == False )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_setType_17(self):
    node = libsbml.ASTNode(libsbml.AST_INTEGER)
    m = libsbml.Model(3,1)
    node.setId( "s")
    node.setUnits( "mole")
    node.setValue(2)
    node.setParentSBMLObject((m))
    self.assertTrue( node.getType() == libsbml.AST_INTEGER )
    self.assertTrue( node.getInteger() == 2 )
    self.assertEqual( True, util_isEqual )
    self.assertTrue( node.getExponent() == 0 )
    self.assertTrue( node.getDenominator() == 1 )
    self.assertTrue( node.getNumerator() == 2 )
    self.assertEqual( True, util_isEqual )
    id = node.getId()
    units = node.getUnits()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( (  "mole" != units ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    url = node.getDefinitionURLString()
    self.assertTrue( (                        "" != url ) == False )
    node.setType(libsbml.AST_FUNCTION_DELAY)
    self.assertTrue( node.getType() == libsbml.AST_FUNCTION_DELAY )
    self.assertTrue( node.getInteger() == 0 )
    self.assertTrue( node.getMantissa() == 0 )
    self.assertTrue( node.getExponent() == 0 )
    self.assertTrue( node.getDenominator() == 1 )
    self.assertTrue( node.getNumerator() == 0 )
    self.assertEqual( True, util_isEqual )
    id = node.getId()
    units = node.getUnits()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( (  "" != units ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    url = node.getDefinitionURLString()
    self.assertTrue( (                        "http://www.sbml.org/sbml/symbols/delay" != url ) == False )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_setType_18(self):
    node = libsbml.ASTNode(libsbml.AST_PLUS)
    m = libsbml.Model(3,1)
    node.setId( "s")
    node.setParentSBMLObject((m))
    self.assertTrue( node.getType() == libsbml.AST_PLUS )
    self.assertTrue( node.getInteger() == 0 )
    self.assertTrue( node.getMantissa() == 0 )
    self.assertTrue( node.getExponent() == 0 )
    self.assertTrue( node.getDenominator() == 1 )
    self.assertTrue( node.getNumerator() == 0 )
    self.assertEqual( True, util_isEqual )
    id = node.getId()
    units = node.getUnits()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( (  "" != units ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    node.setType(libsbml.AST_INTEGER)
    self.assertTrue( node.getType() == libsbml.AST_INTEGER )
    self.assertTrue( node.getInteger() == 0 )
    self.assertTrue( node.getMantissa() == 0 )
    self.assertTrue( node.getExponent() == 0 )
    self.assertTrue( node.getDenominator() == 1 )
    self.assertTrue( node.getNumerator() == 0 )
    self.assertEqual( True, util_isEqual )
    id = node.getId()
    units = node.getUnits()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( (  "" != units ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_setType_19(self):
    node = libsbml.ASTNode(libsbml.AST_FUNCTION_COS)
    m = libsbml.Model(3,1)
    node.setId( "s")
    node.setParentSBMLObject((m))
    self.assertTrue( node.getType() == libsbml.AST_FUNCTION_COS )
    self.assertTrue( node.getInteger() == 0 )
    self.assertTrue( node.getMantissa() == 0 )
    self.assertTrue( node.getExponent() == 0 )
    self.assertTrue( node.getDenominator() == 1 )
    self.assertTrue( node.getNumerator() == 0 )
    self.assertEqual( True, util_isEqual )
    id = node.getId()
    units = node.getUnits()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( (  "" != units ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    node.setType(libsbml.AST_RATIONAL)
    self.assertTrue( node.getType() == libsbml.AST_RATIONAL )
    self.assertTrue( node.getInteger() == 0 )
    self.assertTrue( node.getMantissa() == 0 )
    self.assertTrue( node.getExponent() == 0 )
    self.assertTrue( node.getDenominator() == 1 )
    self.assertTrue( node.getNumerator() == 0 )
    self.assertEqual( True, util_isEqual )
    id = node.getId()
    units = node.getUnits()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( (  "" != units ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_setType_2(self):
    node = libsbml.ASTNode(libsbml.AST_INTEGER)
    m = libsbml.Model(3,1)
    node.setId( "s")
    node.setUnits( "mole")
    node.setValue(1)
    node.setParentSBMLObject((m))
    self.assertTrue( node.getType() == libsbml.AST_INTEGER )
    self.assertTrue( node.getInteger() == 1 )
    id = node.getId()
    units = node.getUnits()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( (  "mole" != units ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    node.setType(libsbml.AST_REAL)
    self.assertTrue( node.getType() == libsbml.AST_REAL )
    self.assertTrue( node.getInteger() == 0 )
    id = node.getId()
    units = node.getUnits()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( (  "mole" != units ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_setType_20(self):
    node = libsbml.ASTNode(libsbml.AST_DIVIDE)
    m = libsbml.Model(3,1)
    node.setId( "s")
    node.setParentSBMLObject((m))
    self.assertTrue( node.getType() == libsbml.AST_DIVIDE )
    self.assertTrue( node.getInteger() == 0 )
    self.assertTrue( node.getMantissa() == 0 )
    self.assertTrue( node.getExponent() == 0 )
    self.assertTrue( node.getDenominator() == 1 )
    self.assertTrue( node.getNumerator() == 0 )
    self.assertEqual( True, util_isEqual )
    id = node.getId()
    units = node.getUnits()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( (  "" != units ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    node.setType(libsbml.AST_REAL_E)
    self.assertTrue( node.getType() == libsbml.AST_REAL_E )
    self.assertTrue( node.getInteger() == 0 )
    self.assertTrue( node.getMantissa() == 0 )
    self.assertTrue( node.getExponent() == 0 )
    self.assertTrue( node.getDenominator() == 1 )
    self.assertTrue( node.getNumerator() == 0 )
    self.assertEqual( True, util_isEqual )
    id = node.getId()
    units = node.getUnits()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( (  "" != units ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_setType_21(self):
    node = libsbml.ASTNode(libsbml.AST_FUNCTION)
    m = libsbml.Model(3,1)
    node.setId( "s")
    node.setParentSBMLObject((m))
    self.assertTrue( node.getType() == libsbml.AST_FUNCTION )
    self.assertTrue( node.getInteger() == 0 )
    self.assertTrue( node.getMantissa() == 0 )
    self.assertTrue( node.getExponent() == 0 )
    self.assertTrue( node.getDenominator() == 1 )
    self.assertTrue( node.getNumerator() == 0 )
    self.assertEqual( True, util_isEqual )
    id = node.getId()
    units = node.getUnits()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( (  "" != units ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    node.setType(libsbml.AST_REAL)
    self.assertTrue( node.getType() == libsbml.AST_REAL )
    self.assertTrue( node.getInteger() == 0 )
    self.assertTrue( node.getMantissa() == 0 )
    self.assertTrue( node.getExponent() == 0 )
    self.assertTrue( node.getDenominator() == 1 )
    self.assertTrue( node.getNumerator() == 0 )
    self.assertEqual( True, util_isEqual )
    id = node.getId()
    units = node.getUnits()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( (  "" != units ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_setType_22(self):
    node = libsbml.ASTNode(libsbml.AST_PLUS)
    m = libsbml.Model(3,1)
    node.setId( "s")
    node.setParentSBMLObject((m))
    self.assertTrue( node.getType() == libsbml.AST_PLUS )
    self.assertTrue( node.getInteger() == 0 )
    self.assertTrue( node.getMantissa() == 0 )
    self.assertTrue( node.getExponent() == 0 )
    self.assertTrue( node.getDenominator() == 1 )
    self.assertTrue( node.getNumerator() == 0 )
    self.assertEqual( True, util_isEqual )
    id = node.getId()
    units = node.getUnits()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( (  "" != units ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    self.assertTrue( node.getName() == None )
    self.assertTrue( node.isName() == 0 )
    node.setType(libsbml.AST_NAME)
    self.assertTrue( node.getType() == libsbml.AST_NAME )
    self.assertTrue( node.getInteger() == 0 )
    self.assertTrue( node.getMantissa() == 0 )
    self.assertTrue( node.getExponent() == 0 )
    self.assertTrue( node.getDenominator() == 1 )
    self.assertTrue( node.getNumerator() == 0 )
    self.assertEqual( True, util_isEqual )
    id = node.getId()
    units = node.getUnits()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( (  "" != units ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    self.assertTrue( node.getName() == None )
    self.assertTrue( node.isName() == 1 )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_setType_23(self):
    node = libsbml.ASTNode(libsbml.AST_PLUS)
    m = libsbml.Model(3,1)
    node.setId( "s")
    node.setParentSBMLObject((m))
    self.assertTrue( node.getType() == libsbml.AST_PLUS )
    self.assertTrue( node.getInteger() == 0 )
    self.assertTrue( node.getMantissa() == 0 )
    self.assertTrue( node.getExponent() == 0 )
    self.assertTrue( node.getDenominator() == 1 )
    self.assertTrue( node.getNumerator() == 0 )
    self.assertEqual( True, util_isEqual )
    id = node.getId()
    units = node.getUnits()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( (  "" != units ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    self.assertTrue( node.isConstant() == 0 )
    node.setType(libsbml.AST_CONSTANT_E)
    self.assertTrue( node.getType() == libsbml.AST_CONSTANT_E )
    self.assertTrue( node.getInteger() == 0 )
    self.assertTrue( node.getMantissa() == 0 )
    self.assertTrue( node.getExponent() == 0 )
    self.assertTrue( node.getDenominator() == 1 )
    self.assertTrue( node.getNumerator() == 0 )
    self.assertEqual( True, util_isEqual )
    id = node.getId()
    units = node.getUnits()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( (  "" != units ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    self.assertTrue( node.isConstant() == 1 )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_setType_24(self):
    node = libsbml.ASTNode(libsbml.AST_PLUS)
    m = libsbml.Model(3,1)
    node.setId( "s")
    node.setParentSBMLObject((m))
    self.assertTrue( node.getType() == libsbml.AST_PLUS )
    self.assertTrue( node.getInteger() == 0 )
    self.assertTrue( node.getMantissa() == 0 )
    self.assertTrue( node.getExponent() == 0 )
    self.assertTrue( node.getDenominator() == 1 )
    self.assertTrue( node.getNumerator() == 0 )
    self.assertEqual( True, util_isEqual )
    id = node.getId()
    units = node.getUnits()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( (  "" != units ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    self.assertTrue( node.getName() == None )
    self.assertTrue( node.isName() == 0 )
    url = node.getDefinitionURLString()
    self.assertTrue( (  "" != url ) == False )
    self.assertTrue( node.isConstant() == 0 )
    node.setType(libsbml.AST_NAME_AVOGADRO)
    self.assertTrue( node.getType() == libsbml.AST_NAME_AVOGADRO )
    self.assertTrue( node.getInteger() == 0 )
    self.assertEqual( True, util_isEqual )
    self.assertTrue( node.getExponent() == 0 )
    self.assertTrue( node.getDenominator() == 1 )
    self.assertTrue( node.getNumerator() == 0 )
    self.assertEqual( True, util_isEqual )
    id = node.getId()
    units = node.getUnits()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( (  "" != units ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    self.assertTrue( (  "avogadro" != node.getName() ) == False )
    self.assertTrue( node.isName() == 1 )
    url = node.getDefinitionURLString()
    self.assertTrue( (      "http://www.sbml.org/sbml/symbols/avogadro" != url ) == False )
    self.assertTrue( node.isConstant() == 1 )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_setType_25(self):
    node = libsbml.ASTNode(libsbml.AST_PLUS)
    m = libsbml.Model(3,1)
    node.setId( "s")
    node.setParentSBMLObject((m))
    self.assertTrue( node.getType() == libsbml.AST_PLUS )
    self.assertTrue( node.getInteger() == 0 )
    self.assertTrue( node.getMantissa() == 0 )
    self.assertTrue( node.getExponent() == 0 )
    self.assertTrue( node.getDenominator() == 1 )
    self.assertTrue( node.getNumerator() == 0 )
    self.assertEqual( True, util_isEqual )
    id = node.getId()
    units = node.getUnits()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( (  "" != units ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    self.assertTrue( node.getName() == None )
    self.assertTrue( node.isName() == 0 )
    url = node.getDefinitionURLString()
    self.assertTrue( (  "" != url ) == False )
    self.assertTrue( node.isConstant() == 0 )
    node.setType(libsbml.AST_NAME_TIME)
    self.assertTrue( node.getType() == libsbml.AST_NAME_TIME )
    self.assertTrue( node.getInteger() == 0 )
    self.assertEqual( True, util_isEqual )
    self.assertTrue( node.getExponent() == 0 )
    self.assertTrue( node.getDenominator() == 1 )
    self.assertTrue( node.getNumerator() == 0 )
    self.assertEqual( True, util_isEqual )
    id = node.getId()
    units = node.getUnits()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( (  "" != units ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    self.assertTrue( node.getName() == None )
    self.assertTrue( node.isName() == 1 )
    url = node.getDefinitionURLString()
    self.assertTrue( (      "http://www.sbml.org/sbml/symbols/time" != url ) == False )
    self.assertTrue( node.isConstant() == 0 )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_setType_26(self):
    node = libsbml.ASTNode(libsbml.AST_FUNCTION_DELAY)
    m = libsbml.Model(3,1)
    node.setId( "s")
    node.setParentSBMLObject((m))
    self.assertTrue( node.getType() == libsbml.AST_FUNCTION_DELAY )
    self.assertTrue( node.getInteger() == 0 )
    self.assertTrue( node.getMantissa() == 0 )
    self.assertTrue( node.getExponent() == 0 )
    self.assertTrue( node.getDenominator() == 1 )
    self.assertTrue( node.getNumerator() == 0 )
    self.assertEqual( True, util_isEqual )
    id = node.getId()
    units = node.getUnits()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( (  "" != units ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    self.assertTrue( (  "delay" != node.getName() ) == False )
    self.assertTrue( node.isName() == 0 )
    url = node.getDefinitionURLString()
    self.assertTrue( (      "http://www.sbml.org/sbml/symbols/delay" != url ) == False )
    node.setType(libsbml.AST_NAME_TIME)
    self.assertTrue( node.getType() == libsbml.AST_NAME_TIME )
    self.assertTrue( node.getInteger() == 0 )
    self.assertEqual( True, util_isEqual )
    self.assertTrue( node.getExponent() == 0 )
    self.assertTrue( node.getDenominator() == 1 )
    self.assertTrue( node.getNumerator() == 0 )
    self.assertEqual( True, util_isEqual )
    id = node.getId()
    units = node.getUnits()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( (  "" != units ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    self.assertTrue( node.getName() == None )
    self.assertTrue( node.isName() == 1 )
    url = node.getDefinitionURLString()
    self.assertTrue( (      "http://www.sbml.org/sbml/symbols/time" != url ) == False )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_setType_27(self):
    m = libsbml.Model(3,1)
    node = libsbml.ASTNode(libsbml.AST_PLUS)
    node.setId( "s")
    node.setParentSBMLObject((m))
    c1 = libsbml.ASTNode(libsbml.AST_NAME)
    c1.setId( "c1")
    c1.setName( "child")
    node.addChild(c1)
    c2 = libsbml.ASTNode(libsbml.AST_REAL)
    c2.setParentSBMLObject((m))
    c2.setValue(3.2)
    node.addChild(c2)
    self.assertTrue( node.getType() == libsbml.AST_PLUS )
    self.assertTrue( node.getNumChildren() == 2 )
    id = node.getId()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    child = node.getChild(0)
    self.assertTrue( child.getType() == libsbml.AST_NAME )
    self.assertTrue( child.getNumChildren() == 0 )
    id = child.getId()
    self.assertTrue( (  "c1" != id ) == False )
    self.assertTrue( child.getParentSBMLObject() == None )
    self.assertTrue( (  "child" != child.getName() ) == False )
    child = node.getChild(1)
    self.assertTrue( child.getType() == libsbml.AST_REAL )
    self.assertTrue( child.getNumChildren() == 0 )
    id = child.getId()
    self.assertTrue( (  "" != id ) == False )
    self.assertTrue( child.getParentSBMLObject() == (m) )
    self.assertEqual( True, util_isEqual )
    node.setType(libsbml.AST_FUNCTION_COS)
    self.assertTrue( node.getType() == libsbml.AST_FUNCTION_COS )
    self.assertTrue( node.getNumChildren() == 2 )
    id = node.getId()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    child = node.getChild(0)
    self.assertTrue( child.getType() == libsbml.AST_NAME )
    self.assertTrue( child.getNumChildren() == 0 )
    id = child.getId()
    self.assertTrue( (  "c1" != id ) == False )
    self.assertTrue( child.getParentSBMLObject() == None )
    self.assertTrue( (  "child" != child.getName() ) == False )
    child = node.getChild(1)
    self.assertTrue( child.getType() == libsbml.AST_REAL )
    self.assertTrue( child.getNumChildren() == 0 )
    id = child.getId()
    self.assertTrue( (  "" != id ) == False )
    self.assertTrue( child.getParentSBMLObject() == (m) )
    self.assertEqual( True, util_isEqual )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_setType_28(self):
    m = libsbml.Model(3,1)
    node = libsbml.ASTNode(libsbml.AST_DIVIDE)
    node.setId( "s")
    node.setParentSBMLObject((m))
    c1 = libsbml.ASTNode(libsbml.AST_NAME)
    c1.setId( "c1")
    c1.setName( "child")
    node.addChild(c1)
    c2 = libsbml.ASTNode(libsbml.AST_REAL)
    c2.setParentSBMLObject((m))
    c2.setValue(3.2)
    node.addChild(c2)
    self.assertTrue( node.getType() == libsbml.AST_DIVIDE )
    self.assertTrue( node.getNumChildren() == 2 )
    id = node.getId()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    child = node.getChild(0)
    self.assertTrue( child.getType() == libsbml.AST_NAME )
    self.assertTrue( child.getNumChildren() == 0 )
    id = child.getId()
    self.assertTrue( (  "c1" != id ) == False )
    self.assertTrue( child.getParentSBMLObject() == None )
    self.assertTrue( (  "child" != child.getName() ) == False )
    child = node.getChild(1)
    self.assertTrue( child.getType() == libsbml.AST_REAL )
    self.assertTrue( child.getNumChildren() == 0 )
    id = child.getId()
    self.assertTrue( (  "" != id ) == False )
    self.assertTrue( child.getParentSBMLObject() == (m) )
    self.assertEqual( True, util_isEqual )
    node.setType(libsbml.AST_RELATIONAL_NEQ)
    self.assertTrue( node.getType() == libsbml.AST_RELATIONAL_NEQ )
    self.assertTrue( node.getNumChildren() == 2 )
    id = node.getId()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    child = node.getChild(0)
    self.assertTrue( child.getType() == libsbml.AST_NAME )
    self.assertTrue( child.getNumChildren() == 0 )
    id = child.getId()
    self.assertTrue( (  "c1" != id ) == False )
    self.assertTrue( child.getParentSBMLObject() == None )
    self.assertTrue( (  "child" != child.getName() ) == False )
    child = node.getChild(1)
    self.assertTrue( child.getType() == libsbml.AST_REAL )
    self.assertTrue( child.getNumChildren() == 0 )
    id = child.getId()
    self.assertTrue( (  "" != id ) == False )
    self.assertTrue( child.getParentSBMLObject() == (m) )
    self.assertEqual( True, util_isEqual )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_setType_29(self):
    m = libsbml.Model(3,1)
    node = libsbml.ASTNode(libsbml.AST_DIVIDE)
    node.setId( "s")
    node.setParentSBMLObject((m))
    c1 = libsbml.ASTNode(libsbml.AST_NAME)
    c1.setId( "c1")
    c1.setName( "child")
    node.addChild(c1)
    c2 = libsbml.ASTNode(libsbml.AST_REAL)
    c2.setParentSBMLObject((m))
    c2.setValue(3.2)
    node.addChild(c2)
    self.assertTrue( node.getType() == libsbml.AST_DIVIDE )
    self.assertTrue( node.getNumChildren() == 2 )
    id = node.getId()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    child = node.getChild(0)
    self.assertTrue( child.getType() == libsbml.AST_NAME )
    self.assertTrue( child.getNumChildren() == 0 )
    id = child.getId()
    self.assertTrue( (  "c1" != id ) == False )
    self.assertTrue( child.getParentSBMLObject() == None )
    self.assertTrue( (  "child" != child.getName() ) == False )
    child = node.getChild(1)
    self.assertTrue( child.getType() == libsbml.AST_REAL )
    self.assertTrue( child.getNumChildren() == 0 )
    id = child.getId()
    self.assertTrue( (  "" != id ) == False )
    self.assertTrue( child.getParentSBMLObject() == (m) )
    self.assertEqual( True, util_isEqual )
    node.setType(libsbml.AST_LOGICAL_OR)
    self.assertTrue( node.getType() == libsbml.AST_LOGICAL_OR )
    self.assertTrue( node.getNumChildren() == 2 )
    id = node.getId()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    child = node.getChild(0)
    self.assertTrue( child.getType() == libsbml.AST_NAME )
    self.assertTrue( child.getNumChildren() == 0 )
    id = child.getId()
    self.assertTrue( (  "c1" != id ) == False )
    self.assertTrue( child.getParentSBMLObject() == None )
    self.assertTrue( (  "child" != child.getName() ) == False )
    child = node.getChild(1)
    self.assertTrue( child.getType() == libsbml.AST_REAL )
    self.assertTrue( child.getNumChildren() == 0 )
    id = child.getId()
    self.assertTrue( (  "" != id ) == False )
    self.assertTrue( child.getParentSBMLObject() == (m) )
    self.assertEqual( True, util_isEqual )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_setType_3(self):
    node = libsbml.ASTNode(libsbml.AST_REAL_E)
    m = libsbml.Model(3,1)
    node.setId( "s")
    node.setUnits( "mole")
    node.setValue(2.3,1)
    node.setParentSBMLObject((m))
    self.assertTrue( node.getType() == libsbml.AST_REAL_E )
    self.assertTrue( node.getInteger() == 0 )
    self.assertEqual( True, util_isEqual )
    self.assertTrue( node.getExponent() == 1 )
    self.assertTrue( node.getDenominator() == 1 )
    self.assertTrue( node.getNumerator() == 0 )
    self.assertEqual( True, util_isEqual )
    id = node.getId()
    units = node.getUnits()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( (  "mole" != units ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    node.setType(libsbml.AST_RATIONAL)
    self.assertTrue( node.getType() == libsbml.AST_RATIONAL )
    self.assertTrue( node.getInteger() == 0 )
    self.assertTrue( node.getMantissa() == 0 )
    self.assertTrue( node.getExponent() == 0 )
    self.assertTrue( node.getDenominator() == 1 )
    self.assertTrue( node.getNumerator() == 0 )
    self.assertTrue( node.getReal() == 0 )
    id = node.getId()
    units = node.getUnits()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( (  "mole" != units ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_setType_30(self):
    m = libsbml.Model(3,1)
    node = libsbml.ASTNode(libsbml.AST_DIVIDE)
    node.setId( "s")
    node.setParentSBMLObject((m))
    c1 = libsbml.ASTNode(libsbml.AST_NAME)
    c1.setId( "c1")
    c1.setName( "child")
    node.addChild(c1)
    c2 = libsbml.ASTNode(libsbml.AST_REAL)
    c2.setParentSBMLObject((m))
    c2.setValue(3.2)
    node.addChild(c2)
    self.assertTrue( node.getType() == libsbml.AST_DIVIDE )
    self.assertTrue( node.getNumChildren() == 2 )
    id = node.getId()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    child = node.getChild(0)
    self.assertTrue( child.getType() == libsbml.AST_NAME )
    self.assertTrue( child.getNumChildren() == 0 )
    id = child.getId()
    self.assertTrue( (  "c1" != id ) == False )
    self.assertTrue( child.getParentSBMLObject() == None )
    self.assertTrue( (  "child" != child.getName() ) == False )
    child = node.getChild(1)
    self.assertTrue( child.getType() == libsbml.AST_REAL )
    self.assertTrue( child.getNumChildren() == 0 )
    id = child.getId()
    self.assertTrue( (  "" != id ) == False )
    self.assertTrue( child.getParentSBMLObject() == (m) )
    self.assertEqual( True, util_isEqual )
    node.setType(libsbml.AST_FUNCTION)
    self.assertTrue( node.getType() == libsbml.AST_FUNCTION )
    self.assertTrue( node.getNumChildren() == 2 )
    id = node.getId()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    child = node.getChild(0)
    self.assertTrue( child.getType() == libsbml.AST_NAME )
    self.assertTrue( child.getNumChildren() == 0 )
    id = child.getId()
    self.assertTrue( (  "c1" != id ) == False )
    self.assertTrue( child.getParentSBMLObject() == None )
    self.assertTrue( (  "child" != child.getName() ) == False )
    child = node.getChild(1)
    self.assertTrue( child.getType() == libsbml.AST_REAL )
    self.assertTrue( child.getNumChildren() == 0 )
    id = child.getId()
    self.assertTrue( (  "" != id ) == False )
    self.assertTrue( child.getParentSBMLObject() == (m) )
    self.assertEqual( True, util_isEqual )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_setType_31(self):
    m = libsbml.Model(3,1)
    node = libsbml.ASTNode(libsbml.AST_FUNCTION_DELAY)
    node.setId( "s")
    node.setParentSBMLObject((m))
    c1 = libsbml.ASTNode(libsbml.AST_NAME)
    c1.setId( "c1")
    c1.setName( "child")
    node.addChild(c1)
    c2 = libsbml.ASTNode(libsbml.AST_REAL)
    c2.setParentSBMLObject((m))
    c2.setValue(3.2)
    node.addChild(c2)
    self.assertTrue( node.getType() == libsbml.AST_FUNCTION_DELAY )
    self.assertTrue( node.getNumChildren() == 2 )
    id = node.getId()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    self.assertTrue( (  "delay" != node.getName() ) == False )
    url = node.getDefinitionURLString()
    self.assertTrue( (      "http://www.sbml.org/sbml/symbols/delay" != url ) == False )
    child = node.getChild(0)
    self.assertTrue( child.getType() == libsbml.AST_NAME )
    self.assertTrue( child.getNumChildren() == 0 )
    id = child.getId()
    self.assertTrue( (  "c1" != id ) == False )
    self.assertTrue( child.getParentSBMLObject() == None )
    self.assertTrue( (  "child" != child.getName() ) == False )
    child = node.getChild(1)
    self.assertTrue( child.getType() == libsbml.AST_REAL )
    self.assertTrue( child.getNumChildren() == 0 )
    id = child.getId()
    self.assertTrue( (  "" != id ) == False )
    self.assertTrue( child.getParentSBMLObject() == (m) )
    self.assertEqual( True, util_isEqual )
    node.setType(libsbml.AST_FUNCTION)
    self.assertTrue( node.getType() == libsbml.AST_FUNCTION )
    self.assertTrue( node.getNumChildren() == 2 )
    id = node.getId()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    self.assertTrue( node.getName() == None )
    url = node.getDefinitionURLString()
    self.assertTrue( (      "http://www.sbml.org/sbml/symbols/delay" != url ) == False )
    child = node.getChild(0)
    self.assertTrue( child.getType() == libsbml.AST_NAME )
    self.assertTrue( child.getNumChildren() == 0 )
    id = child.getId()
    self.assertTrue( (  "c1" != id ) == False )
    self.assertTrue( child.getParentSBMLObject() == None )
    self.assertTrue( (  "child" != child.getName() ) == False )
    child = node.getChild(1)
    self.assertTrue( child.getType() == libsbml.AST_REAL )
    self.assertTrue( child.getNumChildren() == 0 )
    id = child.getId()
    self.assertTrue( (  "" != id ) == False )
    self.assertTrue( child.getParentSBMLObject() == (m) )
    self.assertEqual( True, util_isEqual )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_setType_32(self):
    m = libsbml.Model(3,1)
    node = libsbml.ASTNode(libsbml.AST_DIVIDE)
    node.setId( "s")
    node.setParentSBMLObject((m))
    c1 = libsbml.ASTNode(libsbml.AST_NAME)
    c1.setId( "c1")
    c1.setName( "child")
    node.addChild(c1)
    c2 = libsbml.ASTNode(libsbml.AST_REAL)
    c2.setParentSBMLObject((m))
    c2.setValue(3.2)
    node.addChild(c2)
    self.assertTrue( node.getType() == libsbml.AST_DIVIDE )
    self.assertTrue( node.getNumChildren() == 2 )
    id = node.getId()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    child = node.getChild(0)
    self.assertTrue( child.getType() == libsbml.AST_NAME )
    self.assertTrue( child.getNumChildren() == 0 )
    id = child.getId()
    self.assertTrue( (  "c1" != id ) == False )
    self.assertTrue( child.getParentSBMLObject() == None )
    self.assertTrue( (  "child" != child.getName() ) == False )
    child = node.getChild(1)
    self.assertTrue( child.getType() == libsbml.AST_REAL )
    self.assertTrue( child.getNumChildren() == 0 )
    id = child.getId()
    self.assertTrue( (  "" != id ) == False )
    self.assertTrue( child.getParentSBMLObject() == (m) )
    self.assertEqual( True, util_isEqual )
    node.setType(libsbml.AST_LAMBDA)
    self.assertTrue( node.getType() == libsbml.AST_LAMBDA )
    self.assertTrue( node.getNumChildren() == 2 )
    id = node.getId()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    child = node.getChild(0)
    self.assertTrue( child.getType() == libsbml.AST_NAME )
    self.assertTrue( child.getNumChildren() == 0 )
    id = child.getId()
    self.assertTrue( (  "c1" != id ) == False )
    self.assertTrue( child.getParentSBMLObject() == None )
    self.assertTrue( (  "child" != child.getName() ) == False )
    child = node.getChild(1)
    self.assertTrue( child.getType() == libsbml.AST_REAL )
    self.assertTrue( child.getNumChildren() == 0 )
    id = child.getId()
    self.assertTrue( (  "" != id ) == False )
    self.assertTrue( child.getParentSBMLObject() == (m) )
    self.assertEqual( True, util_isEqual )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_setType_33(self):
    m = libsbml.Model(3,1)
    node = libsbml.ASTNode(libsbml.AST_DIVIDE)
    node.setId( "s")
    node.setParentSBMLObject((m))
    c1 = libsbml.ASTNode(libsbml.AST_NAME)
    c1.setId( "c1")
    c1.setName( "child")
    node.addChild(c1)
    c2 = libsbml.ASTNode(libsbml.AST_REAL)
    c2.setParentSBMLObject((m))
    c2.setValue(3.2)
    node.addChild(c2)
    self.assertTrue( node.getType() == libsbml.AST_DIVIDE )
    self.assertTrue( node.getNumChildren() == 2 )
    id = node.getId()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    child = node.getChild(0)
    self.assertTrue( child.getType() == libsbml.AST_NAME )
    self.assertTrue( child.getNumChildren() == 0 )
    id = child.getId()
    self.assertTrue( (  "c1" != id ) == False )
    self.assertTrue( child.getParentSBMLObject() == None )
    self.assertTrue( (  "child" != child.getName() ) == False )
    child = node.getChild(1)
    self.assertTrue( child.getType() == libsbml.AST_REAL )
    self.assertTrue( child.getNumChildren() == 0 )
    id = child.getId()
    self.assertTrue( (  "" != id ) == False )
    self.assertTrue( child.getParentSBMLObject() == (m) )
    self.assertEqual( True, util_isEqual )
    node.setType(libsbml.AST_FUNCTION_PIECEWISE)
    self.assertTrue( node.getType() == libsbml.AST_FUNCTION_PIECEWISE )
    self.assertTrue( node.getNumChildren() == 2 )
    id = node.getId()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    child = node.getChild(0)
    self.assertTrue( child.getType() == libsbml.AST_NAME )
    self.assertTrue( child.getNumChildren() == 0 )
    id = child.getId()
    self.assertTrue( (  "c1" != id ) == False )
    self.assertTrue( child.getParentSBMLObject() == None )
    self.assertTrue( (  "child" != child.getName() ) == False )
    child = node.getChild(1)
    self.assertTrue( child.getType() == libsbml.AST_REAL )
    self.assertTrue( child.getNumChildren() == 0 )
    id = child.getId()
    self.assertTrue( (  "" != id ) == False )
    self.assertTrue( child.getParentSBMLObject() == (m) )
    self.assertEqual( True, util_isEqual )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_setType_34(self):
    m = libsbml.Model(3,1)
    node = libsbml.ASTNode(libsbml.AST_FUNCTION)
    node.setId( "s")
    node.setParentSBMLObject((m))
    node.setName( "my_func")
    node.setDefinitionURLString( "my_url")
    c1 = libsbml.ASTNode(libsbml.AST_NAME)
    c1.setId( "c1")
    c1.setName( "child")
    node.addChild(c1)
    c2 = libsbml.ASTNode(libsbml.AST_REAL)
    c2.setParentSBMLObject((m))
    c2.setValue(3.2)
    node.addChild(c2)
    self.assertTrue( node.getType() == libsbml.AST_FUNCTION )
    self.assertTrue( node.getNumChildren() == 2 )
    id = node.getId()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    self.assertTrue( (  "my_func" != node.getName() ) == False )
    url = node.getDefinitionURLString()
    self.assertTrue( (      "my_url" != url ) == False )
    child = node.getChild(0)
    self.assertTrue( child.getType() == libsbml.AST_NAME )
    self.assertTrue( child.getNumChildren() == 0 )
    id = child.getId()
    self.assertTrue( (  "c1" != id ) == False )
    self.assertTrue( child.getParentSBMLObject() == None )
    self.assertTrue( (  "child" != child.getName() ) == False )
    child = node.getChild(1)
    self.assertTrue( child.getType() == libsbml.AST_REAL )
    self.assertTrue( child.getNumChildren() == 0 )
    id = child.getId()
    self.assertTrue( (  "" != id ) == False )
    self.assertTrue( child.getParentSBMLObject() == (m) )
    self.assertEqual( True, util_isEqual )
    node.setType(libsbml.AST_FUNCTION_DELAY)
    self.assertTrue( node.getType() == libsbml.AST_FUNCTION_DELAY )
    self.assertTrue( node.getNumChildren() == 2 )
    id = node.getId()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    self.assertTrue( (  "my_func" != node.getName() ) == False )
    url = node.getDefinitionURLString()
    self.assertTrue( (      "http://www.sbml.org/sbml/symbols/delay" != url ) == False )
    child = node.getChild(0)
    self.assertTrue( child.getType() == libsbml.AST_NAME )
    self.assertTrue( child.getNumChildren() == 0 )
    id = child.getId()
    self.assertTrue( (  "c1" != id ) == False )
    self.assertTrue( child.getParentSBMLObject() == None )
    self.assertTrue( (  "child" != child.getName() ) == False )
    child = node.getChild(1)
    self.assertTrue( child.getType() == libsbml.AST_REAL )
    self.assertTrue( child.getNumChildren() == 0 )
    id = child.getId()
    self.assertTrue( (  "" != id ) == False )
    self.assertTrue( child.getParentSBMLObject() == (m) )
    self.assertEqual( True, util_isEqual )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_setType_35(self):
    m = libsbml.Model(3,1)
    node = libsbml.ASTNode(libsbml.AST_FUNCTION)
    node.setId( "s")
    node.setParentSBMLObject((m))
    node.setName( "my_func")
    node.setDefinitionURLString( "my_url")
    c1 = libsbml.ASTNode(libsbml.AST_NAME)
    c1.setId( "c1")
    c1.setName( "child")
    node.addChild(c1)
    c2 = libsbml.ASTNode(libsbml.AST_REAL)
    c2.setParentSBMLObject((m))
    c2.setValue(3.2)
    node.addChild(c2)
    self.assertTrue( node.getType() == libsbml.AST_FUNCTION )
    self.assertTrue( node.getNumChildren() == 2 )
    id = node.getId()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    self.assertTrue( (  "my_func" != node.getName() ) == False )
    url = node.getDefinitionURLString()
    self.assertTrue( (      "my_url" != url ) == False )
    child = node.getChild(0)
    self.assertTrue( child.getType() == libsbml.AST_NAME )
    self.assertTrue( child.getNumChildren() == 0 )
    id = child.getId()
    self.assertTrue( (  "c1" != id ) == False )
    self.assertTrue( child.getParentSBMLObject() == None )
    self.assertTrue( (  "child" != child.getName() ) == False )
    child = node.getChild(1)
    self.assertTrue( child.getType() == libsbml.AST_REAL )
    self.assertTrue( child.getNumChildren() == 0 )
    id = child.getId()
    self.assertTrue( (  "" != id ) == False )
    self.assertTrue( child.getParentSBMLObject() == (m) )
    self.assertEqual( True, util_isEqual )
    node.setType(libsbml.AST_LAMBDA)
    self.assertTrue( node.getType() == libsbml.AST_LAMBDA )
    self.assertTrue( node.getNumChildren() == 2 )
    id = node.getId()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    self.assertTrue( (  "my_func" != node.getName() ) == False )
    url = node.getDefinitionURLString()
    self.assertTrue( (  "" != url ) == False )
    child = node.getChild(0)
    self.assertTrue( child.getType() == libsbml.AST_NAME )
    self.assertTrue( child.getNumChildren() == 0 )
    id = child.getId()
    self.assertTrue( (  "c1" != id ) == False )
    self.assertTrue( child.getParentSBMLObject() == None )
    self.assertTrue( (  "child" != child.getName() ) == False )
    child = node.getChild(1)
    self.assertTrue( child.getType() == libsbml.AST_REAL )
    self.assertTrue( child.getNumChildren() == 0 )
    id = child.getId()
    self.assertTrue( (  "" != id ) == False )
    self.assertTrue( child.getParentSBMLObject() == (m) )
    self.assertEqual( True, util_isEqual )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_setType_36(self):
    m = libsbml.Model(3,2)
    node = libsbml.ASTNode(libsbml.AST_DIVIDE)
    node.setId( "s")
    node.setParentSBMLObject((m))
    c1 = libsbml.ASTNode(libsbml.AST_NAME)
    c1.setId( "c1")
    c1.setName( "child")
    node.addChild(c1)
    c2 = libsbml.ASTNode(libsbml.AST_REAL)
    c2.setParentSBMLObject((m))
    c2.setValue(3.2)
    node.addChild(c2)
    self.assertTrue( node.getType() == libsbml.AST_DIVIDE )
    self.assertTrue( node.getNumChildren() == 2 )
    id = node.getId()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    child = node.getChild(0)
    self.assertTrue( child.getType() == libsbml.AST_NAME )
    self.assertTrue( child.getNumChildren() == 0 )
    id = child.getId()
    self.assertTrue( (  "c1" != id ) == False )
    self.assertTrue( child.getParentSBMLObject() == None )
    self.assertTrue( (  "child" != child.getName() ) == False )
    child = node.getChild(1)
    self.assertTrue( child.getType() == libsbml.AST_REAL )
    self.assertTrue( child.getNumChildren() == 0 )
    id = child.getId()
    self.assertTrue( (  "" != id ) == False )
    self.assertTrue( child.getParentSBMLObject() == (m) )
    self.assertEqual( True, util_isEqual )
    node.setType(libsbml.AST_FUNCTION_MAX)
    self.assertTrue( node.getType() == libsbml.AST_FUNCTION_MAX )
    self.assertTrue( node.getNumChildren() == 2 )
    id = node.getId()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    child = node.getChild(0)
    self.assertTrue( child.getType() == libsbml.AST_NAME )
    self.assertTrue( child.getNumChildren() == 0 )
    id = child.getId()
    self.assertTrue( (  "c1" != id ) == False )
    self.assertTrue( child.getParentSBMLObject() == None )
    self.assertTrue( (  "child" != child.getName() ) == False )
    child = node.getChild(1)
    self.assertTrue( child.getType() == libsbml.AST_REAL )
    self.assertTrue( child.getNumChildren() == 0 )
    id = child.getId()
    self.assertTrue( (  "" != id ) == False )
    self.assertTrue( child.getParentSBMLObject() == (m) )
    self.assertEqual( True, util_isEqual )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_setType_4(self):
    node = libsbml.ASTNode(libsbml.AST_NAME_TIME)
    m = libsbml.Model(3,1)
    node.setId( "s")
    node.setName( "t")
    node.setParentSBMLObject((m))
    self.assertTrue( node.getType() == libsbml.AST_NAME_TIME )
    id = node.getId()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( (  "t" != node.getName() ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    self.assertTrue( node.isConstant() == 0 )
    self.assertTrue( node.isName() == 1 )
    self.assertTrue( node.getReal() == 0 )
    url = node.getDefinitionURLString()
    self.assertTrue( (                        "http://www.sbml.org/sbml/symbols/time" != url ) == False )
    node.setType(libsbml.AST_NAME_AVOGADRO)
    self.assertTrue( node.getType() == libsbml.AST_NAME_AVOGADRO )
    self.assertEqual( True, util_isEqual )
    id = node.getId()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( (  "t" != node.getName() ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    self.assertTrue( node.isConstant() == 1 )
    self.assertTrue( node.isName() == 1 )
    url = node.getDefinitionURLString()
    self.assertTrue( (                        "http://www.sbml.org/sbml/symbols/avogadro" != url ) == False )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_setType_5(self):
    node = libsbml.ASTNode(libsbml.AST_CONSTANT_PI)
    m = libsbml.Model(3,1)
    node.setId( "s")
    node.setParentSBMLObject((m))
    self.assertTrue( node.getType() == libsbml.AST_CONSTANT_PI )
    id = node.getId()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    self.assertTrue( node.isConstant() == 1 )
    self.assertTrue( node.getInteger() == 0 )
    node.setType(libsbml.AST_INTEGER)
    self.assertTrue( node.getType() == libsbml.AST_INTEGER )
    self.assertTrue( node.getInteger() == 0 )
    id = node.getId()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    self.assertTrue( node.isConstant() == 0 )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_setType_6(self):
    node = libsbml.ASTNode(libsbml.AST_NAME)
    m = libsbml.Model(3,1)
    node.setId( "s")
    node.setParentSBMLObject((m))
    node.setDefinitionURLString( "my_url")
    node.setName( "t")
    self.assertTrue( node.getType() == libsbml.AST_NAME )
    id = node.getId()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    self.assertTrue( node.isName() == 1 )
    self.assertTrue( (  "t" != node.getName() ) == False )
    url = node.getDefinitionURLString()
    self.assertTrue( (  "my_url" != url ) == False )
    node.setType(libsbml.AST_INTEGER)
    self.assertTrue( node.getType() == libsbml.AST_INTEGER )
    self.assertTrue( node.getInteger() == 0 )
    id = node.getId()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    self.assertTrue( node.isName() == 0 )
    self.assertTrue( node.getName() == None )
    url = node.getDefinitionURLString()
    self.assertTrue( (  "" != url ) == False )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_setType_7(self):
    node = libsbml.ASTNode(libsbml.AST_NAME_TIME)
    m = libsbml.Model(3,1)
    node.setId( "s")
    node.setName( "t")
    node.setParentSBMLObject((m))
    self.assertTrue( node.getType() == libsbml.AST_NAME_TIME )
    id = node.getId()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( (  "t" != node.getName() ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    self.assertTrue( node.isName() == 1 )
    self.assertTrue( node.getReal() == 0 )
    url = node.getDefinitionURLString()
    self.assertTrue( (                        "http://www.sbml.org/sbml/symbols/time" != url ) == False )
    node.setType(libsbml.AST_REAL)
    self.assertTrue( node.getType() == libsbml.AST_REAL )
    id = node.getId()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( node.getName() == None )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    self.assertTrue( node.isName() == 0 )
    self.assertTrue( node.getReal() == 0 )
    url = node.getDefinitionURLString()
    self.assertTrue( (                        "" != url ) == False )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_setType_8(self):
    node = libsbml.ASTNode(libsbml.AST_REAL_E)
    m = libsbml.Model(3,1)
    node.setId( "s")
    node.setUnits( "mole")
    node.setValue(2.3,1)
    node.setParentSBMLObject((m))
    self.assertTrue( node.getType() == libsbml.AST_REAL_E )
    self.assertTrue( node.getInteger() == 0 )
    self.assertEqual( True, util_isEqual )
    self.assertTrue( node.getExponent() == 1 )
    self.assertTrue( node.getDenominator() == 1 )
    self.assertTrue( node.getNumerator() == 0 )
    self.assertEqual( True, util_isEqual )
    id = node.getId()
    units = node.getUnits()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( (  "mole" != units ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    url = node.getDefinitionURLString()
    self.assertTrue( (                        "" != url ) == False )
    node.setType(libsbml.AST_NAME_AVOGADRO)
    self.assertTrue( node.getType() == libsbml.AST_NAME_AVOGADRO )
    self.assertTrue( node.getInteger() == 0 )
    self.assertEqual( True, util_isEqual )
    self.assertTrue( node.getExponent() == 0 )
    self.assertTrue( node.getDenominator() == 1 )
    self.assertTrue( node.getNumerator() == 0 )
    self.assertEqual( True, util_isEqual )
    id = node.getId()
    units = node.getUnits()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( (  "" != units ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    url = node.getDefinitionURLString()
    self.assertTrue( (                        "http://www.sbml.org/sbml/symbols/avogadro" != url ) == False )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_setType_9(self):
    node = libsbml.ASTNode(libsbml.AST_REAL_E)
    m = libsbml.Model(3,1)
    node.setId( "s")
    node.setUnits( "mole")
    node.setValue(2.3,1)
    node.setParentSBMLObject((m))
    self.assertTrue( node.getType() == libsbml.AST_REAL_E )
    self.assertTrue( node.getInteger() == 0 )
    self.assertEqual( True, util_isEqual )
    self.assertTrue( node.getExponent() == 1 )
    self.assertTrue( node.getDenominator() == 1 )
    self.assertTrue( node.getNumerator() == 0 )
    self.assertEqual( True, util_isEqual )
    id = node.getId()
    units = node.getUnits()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( (  "mole" != units ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    node.setType(libsbml.AST_NAME)
    self.assertTrue( node.getType() == libsbml.AST_NAME )
    self.assertTrue( node.getInteger() == 0 )
    self.assertTrue( node.getMantissa() == 0 )
    self.assertTrue( node.getExponent() == 0 )
    self.assertTrue( node.getDenominator() == 1 )
    self.assertTrue( node.getNumerator() == 0 )
    self.assertEqual( True, util_isEqual )
    id = node.getId()
    units = node.getUnits()
    self.assertTrue( (  "s" != id ) == False )
    self.assertTrue( (  "" != units ) == False )
    self.assertTrue( node.getParentSBMLObject() == (m) )
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_style(self):
    n = libsbml.ASTNode()
    i = n.setStyle( "test")
    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( n.isSetStyle() == 1 )
    style = n.getStyle()
    self.assertTrue((  "test" == style ))
    i = n.unsetStyle()
    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( n.isSetStyle() == 0 )
    style = n.getStyle()
    self.assertTrue((  "" == style ))
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_swapChildren(self):
    node = libsbml.ASTNode()
    c1 = libsbml.ASTNode()
    c2 = libsbml.ASTNode()
    node_1 = libsbml.ASTNode()
    c1_1 = libsbml.ASTNode()
    c2_1 = libsbml.ASTNode()
    i = 0
    node.setType(libsbml.AST_LOGICAL_AND)
    c1.setName( "a")
    c2.setName( "b")
    node.addChild(c1)
    node.addChild(c2)
    self.assertTrue( node.getNumChildren() == 2 )
    math = libsbml.formulaToString(node)
    self.assertTrue((  "and(a, b)" == math ))
    node_1.setType(libsbml.AST_LOGICAL_AND)
    c1_1.setName( "d")
    c2_1.setName( "f")
    node_1.addChild(c1_1)
    node_1.addChild(c2_1)
    self.assertTrue( node_1.getNumChildren() == 2 )
    math = libsbml.formulaToString(node_1)
    self.assertTrue((  "and(d, f)" == math ))
    i = node.swapChildren(node_1)
    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( node.getNumChildren() == 2 )
    math = libsbml.formulaToString(node)
    self.assertTrue((  "and(d, f)" == math ))
    self.assertTrue( node_1.getNumChildren() == 2 )
    math = libsbml.formulaToString(node_1)
    self.assertTrue((  "and(a, b)" == math ))
    _dummyList = [ node_1 ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ node ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_units(self):
    n = libsbml.ASTNode()
    n.setType(libsbml.AST_REAL)
    n.setValue(1.6)
    i = n.setUnits( "mole")
    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( n.isSetUnits() == True )
    units = n.getUnits()
    self.assertTrue((  "mole" == units ))
    i = n.unsetUnits()
    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( n.isSetUnits() == False )
    units = n.getUnits()
    self.assertTrue((  "" == units ))
    i = n.setUnits( "1mole")
    self.assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE )
    self.assertTrue( n.isSetUnits() == False )
    n.setType(libsbml.AST_FUNCTION)
    i = n.setUnits( "mole")
    self.assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE )
    self.assertTrue( n.isSetUnits() == False )
    units = n.getUnits()
    self.assertTrue((  "" == units ))
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    pass  

  def test_ASTNode_userData_1(self):
    n = libsbml.ASTNode()
    m = libsbml.Model(3,1)
    self.assertTrue( n.getUserData() == None )
    self.assertTrue( n.isSetUserData() == 0 )
    i = n.setUserData((m))
    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( n.getUserData() != None )
    self.assertTrue( n.getUserData() == m )
    self.assertTrue( n.isSetUserData() == 1 )
    i = n.setUserData(None)
    self.assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS )
    self.assertTrue( n.getUserData() == None )
    self.assertTrue( n.isSetUserData() == 0 )
    _dummyList = [ n ]; _dummyList[:] = []; del _dummyList
    _dummyList = [ m ]; _dummyList[:] = []; del _dummyList
    pass  

def suite():
  suite = unittest.TestSuite()
  suite.addTest(unittest.makeSuite(TestASTNode))

  return suite

if __name__ == "__main__":
  if unittest.TextTestRunner(verbosity=1).run(suite()).wasSuccessful() :
    sys.exit(0)
  else:
    sys.exit(1)
