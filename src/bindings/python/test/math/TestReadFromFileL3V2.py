#
# @file    TestReadFromFileL3V2.py
# @brief   Tests for reading MathML from files into ASTNodes.
#
# @author  Akiya Jouraku (Python conversion)
# @author  Sarah Keating 
# 
# ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
#
# DO NOT EDIT THIS FILE.
#
# This file was generated automatically by converting the file located at
# src/sbml/test/TestReadFromFileL3V2.cpp
# using the conversion program dev/utilities/translateTests/translateTests.pl.
# Any changes made here will be lost the next time the file is regenerated.
#
# -----------------------------------------------------------------------------
# This file is part of libSBML.  Please visit http://sbml.org for more
# information about SBML, and the latest version of libSBML.
#
# Copyright 2005-2010 California Institute of Technology.
# Copyright 2002-2005 California Institute of Technology and
#                     Japan Science and Technology Corporation.
# 
# This library is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation.  A copy of the license agreement is provided
# in the file named "LICENSE.txt" included with this software distribution
# and also available online as http://sbml.org/software/libsbml/license.html
# -----------------------------------------------------------------------------

import sys
import unittest
import libsbml


class TestReadFromFileL3V2(unittest.TestCase):


  def test_read_MathML_L3V2(self):
    expected = wrapString("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + 
    "<math xmlns=\"http://www.w3.org/1998/Math/MathML\">\n" + 
    "  <apply>\n" + 
    "    <max/>\n" + 
    "    <cn> 2 </cn>\n" + 
    "    <cn> 3 </cn>\n" + 
    "  </apply>\n" + 
    "</math>")
    filename = "../../sbml/math/test/test-data/"
    filename += "L3V2Math.xml"
    d = libsbml.readSBML()
    if (d == None):
      pass    
    m = d.getModel()
    self.assertTrue( m != None )
    ia = m.getInitialAssignment(0)
    math = ia.getMath()
    out = writeMathMLToStdString
    self.assertEqual( True, self.equals(expected,) )
    expected1 = wrapString("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + 
    "<math xmlns=\"http://www.w3.org/1998/Math/MathML\">\n" + 
    "  <apply>\n" + 
    "    <times/>\n" + 
    "    <cn> 2 </cn>\n" + 
    "    <cn> 3 </cn>\n" + 
    "  </apply>\n" + 
    "</math>")
    ia = m.getInitialAssignment(1)
    math = ia.getMath()
    self.assertTrue( math.getNumPlugins() == 0 )
    out = writeMathMLToStdString
    self.assertEqual( True, self.equals(expected1,) )
    d = None
    pass  

def suite():
  suite = unittest.TestSuite()
  suite.addTest(unittest.makeSuite(TestReadFromFileL3V2))

  return suite

if __name__ == "__main__":
  if unittest.TextTestRunner(verbosity=1).run(suite()).wasSuccessful() :
    sys.exit(0)
  else:
    sys.exit(1)
