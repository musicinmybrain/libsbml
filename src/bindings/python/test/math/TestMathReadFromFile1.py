#
# @file    TestMathReadFromFile1.py
# @brief   Tests for reading MathML from files into ASTNodes.
#
# @author  Akiya Jouraku (Python conversion)
# @author  Sarah Keating 
# 
# ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
#
# DO NOT EDIT THIS FILE.
#
# This file was generated automatically by converting the file located at
# src/sbml/test/TestReadFromFile1.cpp
# using the conversion program dev/utilities/translateTests/translateTests.pl.
# Any changes made here will be lost the next time the file is regenerated.
#
# -----------------------------------------------------------------------------
# This file is part of libSBML.  Please visit http://sbml.org for more
# information about SBML, and the latest version of libSBML.
#
# Copyright 2005-2010 California Institute of Technology.
# Copyright 2002-2005 California Institute of Technology and
#                     Japan Science and Technology Corporation.
# 
# This library is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation.  A copy of the license agreement is provided
# in the file named "LICENSE.txt" included with this software distribution
# and also available online as http://sbml.org/software/libsbml/license.html
# -----------------------------------------------------------------------------

import sys
import unittest
import libsbml

def MATHML_FOOTER():
  return "</math>"
  pass

def MATHML_HEADER():
  return "<math xmlns=\"http://www.w3.org/1998/Math/MathML\">\n"
  pass

def XML_HEADER():
  return "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
  pass

def wrapMathML(s):
  r = XML_HEADER()
  r += MATHML_HEADER()
  r += s
  r += MATHML_FOOTER()
  return r
  pass


class TestMathReadFromFile1(unittest.TestCase):


  def test_read_MathML_1(self):
    reader = libsbml.SBMLReader()
    filename = "../../sbml/math/test/test-data/"
    filename += "mathML_1-invalid.xml"
    d = reader.readSBML(filename)
    m = d.getModel()
    if (m == None):
      pass    
    self.assertTrue( m != None )
    self.assertTrue( m.getNumFunctionDefinitions() == 2 )
    self.assertTrue( m.getNumInitialAssignments() == 1 )
    self.assertTrue( m.getNumRules() == 2 )
    self.assertTrue( m.getNumReactions() == 1 )
    fd = m.getFunctionDefinition(0)
    fd_math = fd.getMath()
    self.assertTrue( fd_math.getType() == libsbml.AST_LAMBDA )
    self.assertTrue( fd_math.getNumChildren() == 2 )
    math = libsbml.formulaToString(fd_math)
    self.assertTrue((  "lambda(x, )" == math ))
    self.assertTrue( fd_math.getParentSBMLObject() == fd )
    self.assertTrue( fd_math.getNumBvars() == 1 )
    child = fd_math.getRightChild()
    self.assertTrue( child.getType() == libsbml.AST_UNKNOWN )
    self.assertTrue( child.getNumChildren() == 0 )
    math = libsbml.formulaToString(child)
    self.assertTrue((  "" == math ))
    fd = m.getFunctionDefinition(1)
    fd1_math = fd.getMath()
    self.assertTrue( fd1_math.getType() == libsbml.AST_LAMBDA )
    self.assertTrue( fd1_math.getNumChildren() == 2 )
    math = libsbml.formulaToString(fd1_math)
    self.assertTrue((  "lambda(x, true)" == math ))
    self.assertTrue( fd1_math.getParentSBMLObject() == fd )
    child1 = fd1_math.getRightChild()
    self.assertTrue( child1.getType() == libsbml.AST_CONSTANT_TRUE )
    self.assertTrue( child1.getNumChildren() == 0 )
    math = libsbml.formulaToString(child1)
    self.assertTrue((  "true" == math ))
    ia = m.getInitialAssignment(0)
    ia_math = ia.getMath()
    self.assertTrue( ia_math.getType() == libsbml.AST_UNKNOWN )
    self.assertTrue( ia_math.getNumChildren() == 0 )
    math = libsbml.formulaToString(ia_math)
    self.assertTrue((  "" == math ))
    self.assertTrue( ia_math.getParentSBMLObject() == ia )
    r = m.getRule(0)
    r_math = r.getMath()
    self.assertTrue( r_math.getType() == libsbml.AST_CONSTANT_TRUE )
    self.assertTrue( r_math.getNumChildren() == 0 )
    math = libsbml.formulaToString(r_math)
    self.assertTrue((  "true" == math ))
    self.assertTrue( r_math.getParentSBMLObject() == r )
    r = m.getRule(1)
    r1_math = r.getMath()
    self.assertTrue( r1_math.getType() == libsbml.AST_REAL )
    self.assertTrue( r1_math.getNumChildren() == 0 )
    math = libsbml.formulaToString(r1_math)
    self.assertTrue((  "INF" == math ))
    self.assertTrue( r1_math.getParentSBMLObject() == r )
    kl = m.getReaction(0).getKineticLaw()
    kl_math = kl.getMath()
    self.assertTrue( kl_math.getType() == libsbml.AST_REAL )
    self.assertTrue( kl_math.getNumChildren() == 0 )
    math = libsbml.formulaToString(kl_math)
    self.assertTrue((  "4.5" == math ))
    self.assertTrue( kl_math.getParentSBMLObject() == kl )
    d = None
    pass  

  def test_read_MathML_fromStream(self):
    expected = wrapMathML("  <apply>\n" + 
    "    <divide/>\n" + 
    "    <ci> LacIbNormalized </ci>\n" + 
    "    <apply>\n" + 
    "      <csymbol encoding=\"text\" definitionURL=\"http://sed-ml.org/#max\"> max </csymbol>\n" + 
    "      <ci> LacIbNormalized </ci>\n" + 
    "    </apply>\n" + 
    "  </apply>\n")
    filename = "../../sbml/math/test/test-data/"
    filename += "non_sbml_symbol.xml"
    stream = libsbml.XMLInputStream( ,True, "",log )
    self.assertTrue( stream.getSBMLNamespaces() == None )
    node = libsbml.readMathML(stream)
    result = writeMathMLToStdString
    self.assertTrue( node != None )
    self.assertTrue( log.getNumErrors() == 0 )
    self.assertEqual( True, self.equals(expected,) )
    node = None
    pass  

def suite():
  suite = unittest.TestSuite()
  suite.addTest(unittest.makeSuite(TestMathReadFromFile1))

  return suite

if __name__ == "__main__":
  if unittest.TextTestRunner(verbosity=1).run(suite()).wasSuccessful() :
    sys.exit(0)
  else:
    sys.exit(1)
