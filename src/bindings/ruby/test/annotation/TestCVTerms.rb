# @file    TestCVTerms.rb
# @brief   CVTerms unit tests
#
# @author  Akiya Jouraku (Ruby conversion)
# @author  Sarah Keating 
# 
# ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
#
# DO NOT EDIT THIS FILE.
#
# This file was generated automatically by converting the file located at
# src/sbml/test/TestCVTerms.c
# using the conversion program dev/utilities/translateTests/translateTests.pl.
# Any changes made here will be lost the next time the file is regenerated.
#
# -----------------------------------------------------------------------------
# This file is part of libSBML.  Please visit http://sbml.org for more
# information about SBML, and the latest version of libSBML.
#
# Copyright 2005-2010 California Institute of Technology.
# Copyright 2002-2005 California Institute of Technology and
#                     Japan Science and Technology Corporation.
# 
# This library is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation.  A copy of the license agreement is provided
# in the file named "LICENSE.txt" included with this software distribution
# and also available online as http://sbml.org/software/libsbml/license.html
# -----------------------------------------------------------------------------
require 'test/unit'
require 'libSBML'

class TestCVTerms < Test::Unit::TestCase

  def test_CVTerm_accessWithNULL
    assert( nil.addResource(nil) == LibSBML::LIBSBML_OPERATION_FAILED )
    assert( nil.clone() == nil )
    assert( LibSBML::CVTerm.new(nil) == nil )
    assert( nil.getBiologicalQualifierType() == LibSBML::BQB_UNKNOWN )
    assert( nil.getModelQualifierType() == LibSBML::BQM_UNKNOWN )
    assert( nil.getNumResources() == @@SBML_INT_MAX )
    assert( nil.getQualifierType() == UNKNOWN_QUALIFIER )
    assert( nil.getResources() == nil )
    assert( nil.getResourceURI(0) == nil )
    assert( nil.hasRequiredAttributes() == 0 )
    assert( nil.removeResource(nil) == LibSBML::LIBSBML_INVALID_OBJECT )
    assert( nil.setBiologicalQualifierType(LibSBML::BQB_UNKNOWN) == LibSBML::LIBSBML_INVALID_OBJECT )
    assert( nil.setBiologicalQualifierType(nil) == LibSBML::LIBSBML_INVALID_OBJECT )
    assert( nil.setModelQualifierType(LibSBML::BQM_UNKNOWN) == LibSBML::LIBSBML_INVALID_OBJECT )
    assert( nil.setModelQualifierType(nil) == LibSBML::LIBSBML_INVALID_OBJECT )
    assert( nil.setQualifierType(UNKNOWN_QUALIFIER) == LibSBML::LIBSBML_INVALID_OBJECT )
    assert( nil.fromString() == LibSBML::BQM_UNKNOWN )
    assert( nil.fromString() == LibSBML::BQB_UNKNOWN )
  end

  def test_CVTerm_addNestedCVTerm
    term = LibSBML::CVTerm.new(LibSBML::MODEL_QUALIFIER)
    resource =  "GO6666";
    term1 = LibSBML::CVTerm.new(LibSBML::MODEL_QUALIFIER)
    resource1 =  "nested";
    term.setModelQualifierType(LibSBML::BQM_IS)
    term.addResource(resource)
    term1.setModelQualifierType(LibSBML::BQM_IS)
    term1.addResource(resource1)
    i = term.addNestedCVTerm(term1)
    assert( i == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( term.getNumNestedCVTerms() == 1 )
    nested = term.getNestedCVTerm(0)
    assert( nested != nil )
    xa = nested.getResources()
    assert( xa.getLength() == 1 )
    name = xa.getName(0)
    value = xa.getValue(0)
    assert ((  "rdf:resource" == name ))
    assert ((  "nested" == value ))
    name = nil
    value = nil
    term1 = nil
    term = nil
  end

  def test_CVTerm_addResource
    term = LibSBML::CVTerm.new(LibSBML::MODEL_QUALIFIER)
    resource =  "GO6666";
    assert( term != nil )
    assert( term.getQualifierType() == LibSBML::MODEL_QUALIFIER )
    term.addResource(resource)
    xa = term.getResources()
    assert( xa.getLength() == 1 )
    name = xa.getName(0)
    value = xa.getValue(0)
    assert ((  "rdf:resource" == name ))
    assert ((  "GO6666" == value ))
    name = nil
    value = nil
    term = nil
  end

  def test_CVTerm_create
    term = LibSBML::CVTerm.new(LibSBML::MODEL_QUALIFIER)
    assert( term != nil )
    assert( term.getQualifierType() == LibSBML::MODEL_QUALIFIER )
    term = nil
  end

  def test_CVTerm_createFromNode
    qual_triple = LibSBML::XMLTriple.new("is", "", "bqbiol")
    bag_triple = LibSBML::XMLTriple.new()
    li_triple = LibSBML::XMLTriple.new()
    att = LibSBML::XMLAttributes.new()
    att.add( "", "This is my resource")
    att1 = LibSBML::XMLAttributes.new()
    li_token = LibSBML::XMLToken.new(li_triple,att)
    bag_token = LibSBML::XMLToken.new(bag_triple,att1)
    qual_token = LibSBML::XMLToken.new(qual_triple,att1)
    li = LibSBML::XMLNode.new(li_token)
    bag = LibSBML::XMLNode.new(bag_token)
    node = LibSBML::XMLNode.new(qual_token)
    bag.addChild(li)
    node.addChild(bag)
    term = LibSBML::CVTerm.new(node)
    assert( term != nil )
    assert( term.getQualifierType() == LibSBML::BIOLOGICAL_QUALIFIER )
    assert( term.getBiologicalQualifierType() == LibSBML::BQB_IS )
    xa = term.getResources()
    assert( xa.getLength() == 1 )
    name = xa.getName(0)
    value = xa.getValue(0)
    assert ((  "rdf:resource" == name ))
    assert ((  "This is my resource" == value ))
    name = nil
    value = nil
    qual_triple = nil
    bag_triple = nil
    li_triple = nil
    li_token = nil
    bag_token = nil
    qual_token = nil
    att = nil
    att1 = nil
    term = nil
    node = nil
    bag = nil
    li = nil
  end

  def test_CVTerm_createFromNode_Nested
    qual_triple = LibSBML::XMLTriple.new("is", "", "bqbiol")
    bag_triple = LibSBML::XMLTriple.new()
    li_triple = LibSBML::XMLTriple.new()
    att = LibSBML::XMLAttributes.new()
    att.add( "", "This is my resource")
    att1 = LibSBML::XMLAttributes.new()
    nested_qual_triple = LibSBML::XMLTriple.new("hasPart", "", "bqbiol")
    nested_bag_triple = LibSBML::XMLTriple.new()
    nested_li_triple = LibSBML::XMLTriple.new()
    nested_att = LibSBML::XMLAttributes.new()
    nested_att.add( "", "This is my nested resource")
    li_token = LibSBML::XMLToken.new(li_triple,att)
    bag_token = LibSBML::XMLToken.new(bag_triple,att1)
    qual_token = LibSBML::XMLToken.new(qual_triple,att1)
    nested_li_token = LibSBML::XMLToken.new(nested_li_triple,nested_att)
    nested_bag_token = LibSBML::XMLToken.new(nested_bag_triple,att1)
    nested_qual_token = LibSBML::XMLToken.new(nested_qual_triple,att1)
    li = LibSBML::XMLNode.new(li_token)
    bag = LibSBML::XMLNode.new(bag_token)
    node = LibSBML::XMLNode.new(qual_token)
    nested_li = LibSBML::XMLNode.new(nested_li_token)
    nested_bag = LibSBML::XMLNode.new(nested_bag_token)
    nested_node = LibSBML::XMLNode.new(nested_qual_token)
    nested_bag.addChild(nested_li)
    nested_node.addChild(nested_bag)
    bag.addChild(li)
    bag.addChild(nested_node)
    node.addChild(bag)
    term = LibSBML::CVTerm.new(node)
    assert( term != nil )
    assert( term.getQualifierType() == LibSBML::BIOLOGICAL_QUALIFIER )
    assert( term.getBiologicalQualifierType() == LibSBML::BQB_IS )
    xa = term.getResources()
    assert( xa.getLength() == 1 )
    name = xa.getName(0)
    value = xa.getValue(0)
    assert ((  "rdf:resource" == name ))
    assert ((  "This is my resource" == value ))
    name = nil
    value = nil
    assert( term.getNumNestedCVTerms() == 1 )
    nestedTerm = (const CVTerm_t*)(term).getNestedCVTerm(0)
    assert( nestedTerm != nil )
    assert( nestedTerm.getQualifierType() == LibSBML::BIOLOGICAL_QUALIFIER )
    assert( nestedTerm.getBiologicalQualifierType() == LibSBML::BQB_HAS_PART )
    xa = nestedTerm.getResources()
    assert( xa.getLength() == 1 )
    name = xa.getName(0)
    value = xa.getValue(0)
    assert ((  "rdf:resource" == name ))
    assert ((  "This is my nested resource" == value ))
    name = nil
    value = nil
    assert( nestedTerm.getNumNestedCVTerms() == 0 )
    qual_triple = nil
    bag_triple = nil
    li_triple = nil
    li_token = nil
    bag_token = nil
    qual_token = nil
    att = nil
    att1 = nil
    term = nil
    node = nil
    bag = nil
    li = nil
    nested_qual_triple = nil
    nested_bag_triple = nil
    nested_li_triple = nil
    nested_li_token = nil
    nested_bag_token = nil
    nested_qual_token = nil
    nested_att = nil
    nested_node = nil
    nested_bag = nil
    nested_li = nil
  end

  def test_CVTerm_getListNestedCVTerms
    term = LibSBML::CVTerm.new(LibSBML::MODEL_QUALIFIER)
    resource =  "GO6666";
    term1 = LibSBML::CVTerm.new(LibSBML::MODEL_QUALIFIER)
    resource1 =  "nested";
    term.setModelQualifierType(LibSBML::BQM_IS)
    term.addResource(resource)
    term1.setModelQualifierType(LibSBML::BQM_IS)
    term1.addResource(resource1)
    i = term.addNestedCVTerm(term1)
    assert( i == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( term.getNumNestedCVTerms() == 1 )
    nested = term.getListNestedCVTerms()
    assert( nested != nil )
    assert( nested.size() == 1 )
    term = nil
    term1 = nil
  end

  def test_CVTerm_getResources
    term = LibSBML::CVTerm.new(LibSBML::MODEL_QUALIFIER)
    resource =  "GO6666";
    resource1 =  "OtherURI";
    term.addResource(resource)
    term.addResource(resource1)
    number = term.getNumResources()
    assert( number == 2 )
    res1 = term.getResourceURI(0)
    res2 = term.getResourceURI(1)
    assert ((  "GO6666" == res1 ))
    assert ((  "OtherURI" == res2 ))
    res1 = nil
    res2 = nil
    term = nil
  end

  def test_CVTerm_get_biol_qualifiers
    assert( "is".fromString() == LibSBML::BQB_IS )
    assert( "hasPart".fromString() == LibSBML::BQB_HAS_PART )
    assert( "isPartOf".fromString() == LibSBML::BQB_IS_PART_OF )
    assert( "isVersionOf".fromString() == LibSBML::BQB_IS_VERSION_OF )
    assert( "hasVersion".fromString() == LibSBML::BQB_HAS_VERSION )
    assert( "isHomologTo".fromString() == LibSBML::BQB_IS_HOMOLOG_TO )
    assert( "isDescribedBy".fromString() == LibSBML::BQB_IS_DESCRIBED_BY )
    assert( "isEncodedBy".fromString() == LibSBML::BQB_IS_ENCODED_BY )
    assert( "encodes".fromString() == LibSBML::BQB_ENCODES )
    assert( "occursIn".fromString() == LibSBML::BQB_OCCURS_IN )
    assert( "hasProperty".fromString() == LibSBML::BQB_HAS_PROPERTY )
    assert( "isPropertyOf".fromString() == LibSBML::BQB_IS_PROPERTY_OF )
    assert( "hasTaxon".fromString() == LibSBML::BQB_HAS_TAXON )
    assert( "isUnknown".fromString() == LibSBML::BQB_UNKNOWN )
    assert( "xxx".fromString() == LibSBML::BQB_UNKNOWN )
    assert( (  "is" != LibSBML::BQB_IS.toString() ) == false )
    assert( (  "hasPart" != LibSBML::BQB_HAS_PART.toString() ) == false )
    assert( (  "isPartOf" != LibSBML::BQB_IS_PART_OF.toString() ) == false )
    assert( (  "isVersionOf" != LibSBML::BQB_IS_VERSION_OF.toString() ) == false )
    assert( (  "hasVersion" != LibSBML::BQB_HAS_VERSION.toString() ) == false )
    assert( (  "isHomologTo" != LibSBML::BQB_IS_HOMOLOG_TO.toString() ) == false )
    assert( (  "isDescribedBy" != LibSBML::BQB_IS_DESCRIBED_BY.toString() ) == false )
    assert( (  "isEncodedBy" != LibSBML::BQB_IS_ENCODED_BY.toString() ) == false )
    assert( (  "encodes" != LibSBML::BQB_ENCODES.toString() ) == false )
    assert( (  "occursIn" != LibSBML::BQB_OCCURS_IN.toString() ) == false )
    assert( (  "hasProperty" != LibSBML::BQB_HAS_PROPERTY.toString() ) == false )
    assert( (  "isPropertyOf" != LibSBML::BQB_IS_PROPERTY_OF.toString() ) == false )
    assert( (  "hasTaxon" != LibSBML::BQB_HAS_TAXON.toString() ) == false )
    assert( LibSBML::BQB_UNKNOWN.toString() == nil )
  end

  def test_CVTerm_get_model_qualifiers
    assert( "is".fromString() == LibSBML::BQM_IS )
    assert( "isDescribedBy".fromString() == LibSBML::BQM_IS_DESCRIBED_BY )
    assert( "isDerivedFrom".fromString() == LibSBML::BQM_IS_DERIVED_FROM )
    assert( "isUnknown".fromString() == LibSBML::BQM_UNKNOWN )
    assert( "xxx".fromString() == LibSBML::BQM_UNKNOWN )
    assert( (  "is" != LibSBML::BQM_IS.toString() ) == false )
    assert( (  "isDescribedBy" != LibSBML::BQM_IS_DESCRIBED_BY.toString() ) == false )
    assert( (  "isDerivedFrom" != LibSBML::BQM_IS_DERIVED_FROM.toString() ) == false )
    assert( LibSBML::BQM_UNKNOWN.toString() == nil )
  end

  def test_CVTerm_removeNestedCVTerm
    term = LibSBML::CVTerm.new(LibSBML::MODEL_QUALIFIER)
    resource =  "GO6666";
    term1 = LibSBML::CVTerm.new(LibSBML::MODEL_QUALIFIER)
    resource1 =  "nested";
    term.setModelQualifierType(LibSBML::BQM_IS)
    term.addResource(resource)
    term1.setModelQualifierType(LibSBML::BQM_IS)
    term1.addResource(resource1)
    i = term.addNestedCVTerm(term1)
    assert( i == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( term.getNumNestedCVTerms() == 1 )
    removed = term.removeNestedCVTerm(0)
    assert( removed != nil )
    assert( term.getNumNestedCVTerms() == 0 )
    xa = removed.getResources()
    assert( xa.getLength() == 1 )
    name = xa.getName(0)
    value = xa.getValue(0)
    assert ((  "rdf:resource" == name ))
    assert ((  "nested" == value ))
    name = nil
    value = nil
    term = nil
    term1 = nil
    removed = nil
  end

  def test_CVTerm_set_get
    term = LibSBML::CVTerm.new(LibSBML::MODEL_QUALIFIER)
    assert( term != nil )
    assert( term.getQualifierType() == LibSBML::MODEL_QUALIFIER )
    term.setModelQualifierType(LibSBML::BQM_IS)
    assert( term != nil )
    assert( term.getQualifierType() == LibSBML::MODEL_QUALIFIER )
    assert( term.getModelQualifierType() == LibSBML::BQM_IS )
    assert( (  "is"  != term.getModelQualifierType().toString() ) == false )
    term.setModelQualifierType( "isDerivedFrom")
    assert( term.getModelQualifierType() == LibSBML::BQM_IS_DERIVED_FROM )
    term.setModelQualifierType(nil)
    assert( term.getModelQualifierType() == LibSBML::BQM_UNKNOWN )
    term.setQualifierType(LibSBML::BIOLOGICAL_QUALIFIER)
    term.setBiologicalQualifierType(LibSBML::BQB_IS)
    assert( term.getQualifierType() == LibSBML::BIOLOGICAL_QUALIFIER )
    assert( term.getBiologicalQualifierType() == LibSBML::BQB_IS )
    assert( (  "is"  != term.getBiologicalQualifierType().toString() ) == false )
    term.setBiologicalQualifierType( "encodes")
    assert( term.getBiologicalQualifierType() == LibSBML::BQB_ENCODES )
    term.setBiologicalQualifierType(nil)
    assert( term.getBiologicalQualifierType() == LibSBML::BQB_UNKNOWN )
    term = nil
  end

end
