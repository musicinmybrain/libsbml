# @file    TestMathReadFromFile1.rb
# @brief   Tests for reading MathML from files into ASTNodes.
#
# @author  Akiya Jouraku (Ruby conversion)
# @author  Sarah Keating 
# 
# ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
#
# DO NOT EDIT THIS FILE.
#
# This file was generated automatically by converting the file located at
# src/sbml/test/TestReadFromFile1.cpp
# using the conversion program dev/utilities/translateTests/translateTests.pl.
# Any changes made here will be lost the next time the file is regenerated.
#
# -----------------------------------------------------------------------------
# This file is part of libSBML.  Please visit http://sbml.org for more
# information about SBML, and the latest version of libSBML.
#
# Copyright 2005-2010 California Institute of Technology.
# Copyright 2002-2005 California Institute of Technology and
#                     Japan Science and Technology Corporation.
# 
# This library is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation.  A copy of the license agreement is provided
# in the file named "LICENSE.txt" included with this software distribution
# and also available online as http://sbml.org/software/libsbml/license.html
# -----------------------------------------------------------------------------
require 'test/unit'
require 'libSBML'

class TestMathReadFromFile1 < Test::Unit::TestCase

  def MATHML_FOOTER
    return "</math>"
  end

  def MATHML_HEADER
    return "<math xmlns=\"http://www.w3.org/1998/Math/MathML\">\n"
  end

  def XML_HEADER
    return "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
  end

  def wrapMathML(s)
    r = XML_HEADER()
    r += MATHML_HEADER()
    r += s
    r += MATHML_FOOTER()
    return r
  end

  def test_read_MathML_1
    reader = LibSBML::SBMLReader.new()
    filename = "../../sbml/math/test/test-data/"
    filename += "mathML_1-invalid.xml"
    d = reader.readSBML(filename)
    m = d.getModel()
    if (m == nil)
    end
    assert( m != nil )
    assert( m.getNumFunctionDefinitions() == 2 )
    assert( m.getNumInitialAssignments() == 1 )
    assert( m.getNumRules() == 2 )
    assert( m.getNumReactions() == 1 )
    fd = m.getFunctionDefinition(0)
    fd_math = fd.getMath()
    assert( fd_math.getType() == LibSBML::AST_LAMBDA )
    assert( fd_math.getNumChildren() == 2 )
    math = LibSBML::formulaToString(fd_math)
    assert ((  "lambda(x, )" == math ))
    assert( fd_math.getParentSBMLObject() == fd )
    assert( fd_math.getNumBvars() == 1 )
    child = fd_math.getRightChild()
    assert( child.getType() == LibSBML::AST_UNKNOWN )
    assert( child.getNumChildren() == 0 )
    math = LibSBML::formulaToString(child)
    assert ((  "" == math ))
    fd = m.getFunctionDefinition(1)
    fd1_math = fd.getMath()
    assert( fd1_math.getType() == LibSBML::AST_LAMBDA )
    assert( fd1_math.getNumChildren() == 2 )
    math = LibSBML::formulaToString(fd1_math)
    assert ((  "lambda(x, true)" == math ))
    assert( fd1_math.getParentSBMLObject() == fd )
    child1 = fd1_math.getRightChild()
    assert( child1.getType() == LibSBML::AST_CONSTANT_TRUE )
    assert( child1.getNumChildren() == 0 )
    math = LibSBML::formulaToString(child1)
    assert ((  "true" == math ))
    ia = m.getInitialAssignment(0)
    ia_math = ia.getMath()
    assert( ia_math.getType() == LibSBML::AST_UNKNOWN )
    assert( ia_math.getNumChildren() == 0 )
    math = LibSBML::formulaToString(ia_math)
    assert ((  "" == math ))
    assert( ia_math.getParentSBMLObject() == ia )
    r = m.getRule(0)
    r_math = r.getMath()
    assert( r_math.getType() == LibSBML::AST_CONSTANT_TRUE )
    assert( r_math.getNumChildren() == 0 )
    math = LibSBML::formulaToString(r_math)
    assert ((  "true" == math ))
    assert( r_math.getParentSBMLObject() == r )
    r = m.getRule(1)
    r1_math = r.getMath()
    assert( r1_math.getType() == LibSBML::AST_REAL )
    assert( r1_math.getNumChildren() == 0 )
    math = LibSBML::formulaToString(r1_math)
    assert ((  "INF" == math ))
    assert( r1_math.getParentSBMLObject() == r )
    kl = m.getReaction(0).getKineticLaw()
    kl_math = kl.getMath()
    assert( kl_math.getType() == LibSBML::AST_REAL )
    assert( kl_math.getNumChildren() == 0 )
    math = LibSBML::formulaToString(kl_math)
    assert ((  "4.5" == math ))
    assert( kl_math.getParentSBMLObject() == kl )
    d = nil
  end

  def test_read_MathML_fromStream
    expected = wrapMathML("  <apply>\n" + 
    "    <divide/>\n" + 
    "    <ci> LacIbNormalized </ci>\n" + 
    "    <apply>\n" + 
    "      <csymbol encoding=\"text\" definitionURL=\"http://sed-ml.org/#max\"> max </csymbol>\n" + 
    "      <ci> LacIbNormalized </ci>\n" + 
    "    </apply>\n" + 
    "  </apply>\n")
    filename = "../../sbml/math/test/test-data/"
    filename += "non_sbml_symbol.xml"
    stream = LibSBML::XMLInputStream.new( ,true, "",log )
    assert( stream.getSBMLNamespaces() == nil )
    node = LibSBML::readMathML(stream)
    result = writeMathMLToStdString
    assert( node != nil )
    assert( log.getNumErrors() == 0 )
    assert_equal true, equals(expected,)
    node = nil
  end

end
