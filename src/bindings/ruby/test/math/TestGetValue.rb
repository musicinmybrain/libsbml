# @file    TestGetValue.rb
# @brief   Test the getValue function
#
# @author  Akiya Jouraku (Ruby conversion)
# @author  Sarah Keating 
# 
# ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
#
# DO NOT EDIT THIS FILE.
#
# This file was generated automatically by converting the file located at
# src/sbml/test/TestGetValue.cpp
# using the conversion program dev/utilities/translateTests/translateTests.pl.
# Any changes made here will be lost the next time the file is regenerated.
#
# -----------------------------------------------------------------------------
# This file is part of libSBML.  Please visit http://sbml.org for more
# information about SBML, and the latest version of libSBML.
#
# Copyright 2005-2010 California Institute of Technology.
# Copyright 2002-2005 California Institute of Technology and
#                     Japan Science and Technology Corporation.
# 
# This library is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation.  A copy of the license agreement is provided
# in the file named "LICENSE.txt" included with this software distribution
# and also available online as http://sbml.org/software/libsbml/license.html
# -----------------------------------------------------------------------------
require 'test/unit'
require 'libSBML'

class TestGetValue < Test::Unit::TestCase

  def test_getValue_constant_e
    n = LibSBML::readMathMLFromString("<math xmlns='http://www.w3.org/1998/Math/MathML'>" + 
    "  <exponentiale/>" + 
    "</math>")
    assert( n != nil )
    assert_equal true, util_isEqual
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_CONSTANT_E)
    assert_equal true, util_isEqual
    n = nil
  end

  def test_getValue_constant_false
    n = LibSBML::readMathMLFromString("<math xmlns='http://www.w3.org/1998/Math/MathML'>" + 
    "  <false/>" + 
    "</math>")
    assert( n != nil )
    assert_equal true, util_isEqual
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_CONSTANT_FALSE)
    assert_equal true, util_isEqual
    n = nil
  end

  def test_getValue_constant_pi
    n = LibSBML::readMathMLFromString("<math xmlns='http://www.w3.org/1998/Math/MathML'>" + 
    "  <pi/>" + 
    "</math>")
    assert( n != nil )
    assert_equal true, util_isEqual
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_CONSTANT_PI)
    assert_equal true, util_isEqual
    n = nil
  end

  def test_getValue_constant_true
    n = LibSBML::readMathMLFromString("<math xmlns='http://www.w3.org/1998/Math/MathML'>" + 
    "  <true/>" + 
    "</math>")
    assert( n != nil )
    assert_equal true, util_isEqual
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_CONSTANT_TRUE)
    assert_equal true, util_isEqual
    n = nil
  end

  def test_getValue_exponential
    n = LibSBML::readMathMLFromString("<math xmlns='http://www.w3.org/1998/Math/MathML'>" + 
    "  <cn type=\"e-notation\"> 6.3 <sep/> 2 </cn>" + 
    "</math>")
    assert( n != nil )
    assert_equal true, util_isEqual
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_REAL_E)
    n.setValue(4.12,(long)(2))
    assert_equal true, util_isEqual
    n = nil
  end

  def test_getValue_function
    n = LibSBML::readMathMLFromString("<math xmlns='http://www.w3.org/1998/Math/MathML'>" + 
    "  <apply>" + 
    "    <leq/>" + 
    "    <cn> 2 </cn>" + 
    "    <cn> 5 </cn>" + 
    "  </apply>" + 
    "</math>")
    assert( n != nil )
    assert_equal true, util_isNaN
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_POWER)
    n1 = LibSBML::ASTNode.new(LibSBML::AST_INTEGER)
    n1.setValue(2)
    n2 = LibSBML::ASTNode.new(LibSBML::AST_INTEGER)
    n2.setValue(3)
    n.addChild(n1)
    n.addChild(n2)
    assert_equal true, util_isNaN
    n = nil
  end

  def test_getValue_integer
    n = LibSBML::readMathMLFromString("<math xmlns='http://www.w3.org/1998/Math/MathML'>" + 
    "  <cn type=\"integer\"> 6 </cn>" + 
    "</math>")
    assert( n != nil )
    assert_equal true, util_isEqual
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_INTEGER)
    n.setValue((int)(7))
    assert_equal true, util_isEqual
    n = nil
  end

  def test_getValue_name
    n = LibSBML::readMathMLFromString("<math xmlns='http://www.w3.org/1998/Math/MathML'>" + 
    "  <ci> x </ci>" + 
    "</math>")
    assert( n != nil )
    assert_equal true, util_isNaN
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_NAME)
    n.setName("w")
    assert_equal true, util_isNaN
    n = nil
  end

  def test_getValue_name_avogadro
    n = LibSBML::readMathMLFromString("<math xmlns='http://www.w3.org/1998/Math/MathML'>" + 
    "  <csymbol encoding=\"text\" definitionURL=\"http://www.sbml.org/sbml/symbols/avogadro\"> x </csymbol>" + 
    "</math>")
    assert( n != nil )
    assert_equal true, util_isEqual
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_NAME_AVOGADRO)
    n.setName("w")
    assert_equal true, util_isEqual
    n = nil
  end

  def test_getValue_name_time
    n = LibSBML::readMathMLFromString("<math xmlns='http://www.w3.org/1998/Math/MathML'>" + 
    "  <csymbol encoding=\"text\" definitionURL=\"http://www.sbml.org/sbml/symbols/time\"> x </csymbol>" + 
    "</math>")
    assert( n != nil )
    assert_equal true, util_isNaN
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_NAME_TIME)
    n.setName("w")
    assert_equal true, util_isNaN
    n = nil
  end

  def test_getValue_operator
    n = LibSBML::readMathMLFromString("<math xmlns='http://www.w3.org/1998/Math/MathML'>" + 
    "  <apply>" + 
    "    <plus/>" + 
    "    <cn> 2 </cn>" + 
    "    <cn> 5 </cn>" + 
    "  </apply>" + 
    "</math>")
    assert( n != nil )
    assert_equal true, util_isNaN
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_MINUS)
    n1 = LibSBML::ASTNode.new(LibSBML::AST_INTEGER)
    n1.setValue(2)
    n2 = LibSBML::ASTNode.new(LibSBML::AST_INTEGER)
    n2.setValue(3)
    n.addChild(n1)
    n.addChild(n2)
    assert_equal true, util_isNaN
    n = nil
  end

  def test_getValue_rational
    n = LibSBML::readMathMLFromString("<math xmlns='http://www.w3.org/1998/Math/MathML'>" + 
    "  <cn type=\"rational\"> 6 <sep/> 4 </cn>" + 
    "</math>")
    assert( n != nil )
    assert_equal true, util_isEqual
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_RATIONAL)
    n.setValue((long)(3),(long)(2))
    assert_equal true, util_isEqual
    n = nil
  end

  def test_getValue_real
    n = LibSBML::readMathMLFromString("<math xmlns='http://www.w3.org/1998/Math/MathML'>" + 
    "  <cn> 0.6 </cn>" + 
    "</math>")
    assert( n != nil )
    assert_equal true, util_isEqual
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_REAL)
    n.setValue(0.75)
    assert_equal true, util_isEqual
    n = nil
  end

end
