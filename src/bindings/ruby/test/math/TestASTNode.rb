# @file    TestASTNode.rb
# @brief   ASTNode unit tests
#
# @author  Akiya Jouraku (Ruby conversion)
# @author  Ben Bornstein 
# 
# ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
#
# DO NOT EDIT THIS FILE.
#
# This file was generated automatically by converting the file located at
# src/sbml/test/TestASTNode.c
# using the conversion program dev/utilities/translateTests/translateTests.pl.
# Any changes made here will be lost the next time the file is regenerated.
#
# -----------------------------------------------------------------------------
# This file is part of libSBML.  Please visit http://sbml.org for more
# information about SBML, and the latest version of libSBML.
#
# Copyright 2005-2010 California Institute of Technology.
# Copyright 2002-2005 California Institute of Technology and
#                     Japan Science and Technology Corporation.
# 
# This library is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation.  A copy of the license agreement is provided
# in the file named "LICENSE.txt" included with this software distribution
# and also available online as http://sbml.org/software/libsbml/license.html
# -----------------------------------------------------------------------------
require 'test/unit'
require 'libSBML'

class TestASTNode < Test::Unit::TestCase

  @@DBL_EPSILON =  2.2204460492503131e-16
  def test_ASTNode_accessWithNULL
    assert( nil.addChild(nil) == LibSBML::LIBSBML_INVALID_OBJECT )
    assert( nil.addSemanticsAnnotation(nil) == LibSBML::LIBSBML_INVALID_OBJECT )
    assert( nil.canonicalize() == 0 )
    assert( LibSBML::ASTNode.new(nil) == nil )
    assert( nil.deepCopy() == nil )
    nil.fillListOfNodes(nil,nil)
    assert( nil.freeName() == LibSBML::LIBSBML_INVALID_OBJECT )
    assert( nil.getCharacter() == CHAR_MAX )
    assert( nil.getChild(0) == nil )
    assert( nil.getDenominator() == LONG_MAX )
    assert( nil.getExponent() == LONG_MAX )
    assert( nil.getInteger() == LONG_MAX )
    assert( nil.getLeftChild() == nil )
    assert( nil.getListOfNodes(nil) == nil )
    assert_equal true, util_isNaN
    assert( nil.getName() == nil )
    assert( nil.getNumChildren() == 0 )
    assert( nil.getNumerator() == LONG_MAX )
    assert( nil.getNumSemanticsAnnotations() == 0 )
    assert( nil.getParentSBMLObject() == nil )
    assert( nil.getPrecedence() == 6 )
    assert_equal true, util_isNaN
    assert( nil.getRightChild() == nil )
    assert( nil.getSemanticsAnnotation(0) == nil )
    assert( nil.getType() == LibSBML::AST_UNKNOWN )
    assert( nil.getUnits() == "" )
    assert( nil.getUserData() == nil )
    assert( nil.hasCorrectNumberArguments() == 0 )
    assert( nil.hasUnits() == 0 )
    assert( nil.insertChild(0,nil) == LibSBML::LIBSBML_INVALID_OBJECT )
    assert( nil.isBoolean() == 0 )
    assert( nil.returnsBoolean() == 0 )
    assert( nil.isConstant() == 0 )
    assert( nil.isFunction() == 0 )
    assert( nil.isInfinity() == 0 )
    assert( nil.isInteger() == 0 )
    assert( nil.isLambda() == 0 )
    assert( nil.isLog10() == false )
    assert( nil.isLogical() == 0 )
    assert( nil.isName() == 0 )
    assert( nil.isNaN() == 0 )
    assert( nil.isNegInfinity() == 0 )
    assert( nil.isNumber() == 0 )
    assert( nil.isOperator() == 0 )
    assert( nil.isPiecewise() == 0 )
    assert( nil.isRational() == 0 )
    assert( nil.isReal() == 0 )
    assert( nil.isRelational() == 0 )
    assert( nil.isSetUnits() == false )
    assert( nil.isSqrt() == false )
    assert( nil.isUMinus() == false )
    assert( nil.isUPlus() == 0 )
    assert( nil.isUnknown() == 0 )
    assert( nil.isWellFormedASTNode() == 0 )
    assert( nil.prependChild(nil) == LibSBML::LIBSBML_INVALID_OBJECT )
    nil.reduceToBinary()
    nil.replaceArgument(nil,nil)
    assert( nil.removeChild(0) == LibSBML::LIBSBML_INVALID_OBJECT )
    assert( nil.replaceChild(0,nil) == LibSBML::LIBSBML_INVALID_OBJECT )
    assert( nil.setCharacter(CHAR_MAX) == LibSBML::LIBSBML_INVALID_OBJECT )
    assert( nil.setValue(0) == LibSBML::LIBSBML_INVALID_OBJECT )
    assert( nil.setName(nil) == LibSBML::LIBSBML_INVALID_OBJECT )
    assert( nil.setValue(0,0) == LibSBML::LIBSBML_INVALID_OBJECT )
    assert( nil.setValue(0.0) == LibSBML::LIBSBML_INVALID_OBJECT )
    assert( nil.setValue(0.0,0) == LibSBML::LIBSBML_INVALID_OBJECT )
    assert( nil.setType(LibSBML::AST_UNKNOWN) == LibSBML::LIBSBML_INVALID_OBJECT )
    assert( nil.setUnits(nil) == LibSBML::LIBSBML_INVALID_OBJECT )
    assert( nil.setUserData(nil) == LibSBML::LIBSBML_INVALID_OBJECT )
    assert( nil.swapChildren(nil) == LibSBML::LIBSBML_INVALID_OBJECT )
    assert( nil.unsetUnits() == LibSBML::LIBSBML_INVALID_OBJECT )
  end

  def test_ASTNode_addChild1
    node = LibSBML::ASTNode.new()
    c1 = LibSBML::ASTNode.new()
    c2 = LibSBML::ASTNode.new()
    c1_1 = LibSBML::ASTNode.new()
    i = 0
    node.setType(LibSBML::AST_LOGICAL_AND)
    c1.setName( "a")
    c2.setName( "b")
    node.addChild(c1)
    node.addChild(c2)
    assert( node.getNumChildren() == 2 )
    math = LibSBML::formulaToString(node)
    assert ((  "and(a, b)" == math ))
    c1_1.setName( "d")
    i = node.addChild(c1_1)
    assert( i == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( node.getNumChildren() == 3 )
    math = LibSBML::formulaToString(node)
    assert ((  "and(a, b, d)" == math ))
    assert ((  "a" == node.getChild(0).getName() ))
    assert ((  "b" == node.getChild(1).getName() ))
    assert ((  "d" == node.getChild(2).getName() ))
    node = nil
  end

  def test_ASTNode_addSemanticsAnnotation
    ann = LibSBML::XMLNode.new()
    node = LibSBML::ASTNode.new()
    i = 0
    i = node.addSemanticsAnnotation(ann)
    assert( i == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( node.getNumSemanticsAnnotations() == 1 )
    i = node.addSemanticsAnnotation(nil)
    assert( i == LibSBML::LIBSBML_OPERATION_FAILED )
    assert( node.getNumSemanticsAnnotations() == 1 )
    node = nil
  end

  def test_ASTNode_avogadro
    n = LibSBML::ASTNode.new()
    n.setType(LibSBML::AST_NAME_AVOGADRO)
    n.setName( "NA")
    assert ((  "NA" == n.getName() ))
    val = n.getReal()
    assert( val == 6.02214179e23 )
    assert( n.isConstant() == 1 )
    n = nil
  end

  def test_ASTNode_avogadro_bug
    n = LibSBML::ASTNode.new()
    n.setName( "NA")
    n.setType(LibSBML::AST_NAME_AVOGADRO)
    assert ((  "NA" == n.getName() ))
    val = n.getReal()
    assert( val == 6.02214179e23 )
    assert( n.isConstant() == 1 )
    n = nil
  end

  def test_ASTNode_canonicalizeConstants
    n = LibSBML::ASTNode.new()
    n.setName( "ExponentialE")
    assert_equal true, n.isName()
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_CONSTANT_E )
    n.setType(LibSBML::AST_NAME)
    n.setName( "False")
    assert_equal true, n.isName()
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_CONSTANT_FALSE )
    n.setType(LibSBML::AST_NAME)
    n.setName( "Pi")
    assert_equal true, n.isName()
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_CONSTANT_PI )
    n.setType(LibSBML::AST_NAME)
    n.setName( "True")
    assert_equal true, n.isName()
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_CONSTANT_TRUE )
    n.setType(LibSBML::AST_NAME)
    n.setName( "Foo")
    assert_equal true, n.isName()
    n.canonicalize()
    assert_equal true, n.isName()
    n = nil
  end

  def test_ASTNode_canonicalizeFunctions
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION)
    n.setName( "abs")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_FUNCTION_ABS )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "arccos")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_FUNCTION_ARCCOS )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "arccosh")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_FUNCTION_ARCCOSH )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "arccot")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_FUNCTION_ARCCOT )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "arccoth")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_FUNCTION_ARCCOTH )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "arccsc")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_FUNCTION_ARCCSC )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "arccsch")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_FUNCTION_ARCCSCH )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "arcsec")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_FUNCTION_ARCSEC )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "arcsech")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_FUNCTION_ARCSECH )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "arcsin")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_FUNCTION_ARCSIN )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "arcsinh")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_FUNCTION_ARCSINH )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "arctan")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_FUNCTION_ARCTAN )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "arctanh")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_FUNCTION_ARCTANH )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "ceiling")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_FUNCTION_CEILING )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "cos")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_FUNCTION_COS )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "cosh")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_FUNCTION_COSH )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "cot")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_FUNCTION_COT )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "coth")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_FUNCTION_COTH )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "csc")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_FUNCTION_CSC )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "csch")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_FUNCTION_CSCH )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "exp")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_FUNCTION_EXP )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "factorial")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_FUNCTION_FACTORIAL )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "floor")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_FUNCTION_FLOOR )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "lambda")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_LAMBDA )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "ln")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_FUNCTION_LN )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "log")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_FUNCTION_LOG )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "piecewise")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_FUNCTION_PIECEWISE )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "power")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_FUNCTION_POWER )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "root")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_FUNCTION_ROOT )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "sec")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_FUNCTION_SEC )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "sech")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_FUNCTION_SECH )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "sin")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_FUNCTION_SIN )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "sinh")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_FUNCTION_SINH )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "tan")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_FUNCTION_TAN )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "tanh")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_FUNCTION_TANH )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "Foo")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n = nil
  end

  def test_ASTNode_canonicalizeFunctionsL1
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION)
    n.setName( "acos")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_FUNCTION_ARCCOS )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "asin")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_FUNCTION_ARCSIN )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "atan")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_FUNCTION_ARCTAN )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "ceil")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_FUNCTION_CEILING )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "pow")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_FUNCTION_POWER )
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION)
    n.setName( "log")
    c = LibSBML::ASTNode.new()
    c.setName( "x")
    n.addChild(c)
    assert( n.getType() == LibSBML::AST_FUNCTION )
    assert( n.getNumChildren() == 1 )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_FUNCTION_LN )
    assert( n.getNumChildren() == 1 )
    n.setType(LibSBML::AST_FUNCTION)
    c = LibSBML::ASTNode.new()
    c.setName( "y")
    n.addChild(c)
    assert( n.getType() == LibSBML::AST_FUNCTION )
    assert( n.getNumChildren() == 2 )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_FUNCTION_LOG )
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION)
    n.setName( "log10")
    c = LibSBML::ASTNode.new()
    c.setName( "x")
    n.addChild(c)
    assert( n.getType() == LibSBML::AST_FUNCTION )
    assert( n.getNumChildren() == 1 )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_FUNCTION_LOG )
    assert( n.getNumChildren() == 2 )
    c = n.getLeftChild()
    assert( c.getType() == LibSBML::AST_INTEGER )
    assert( c.getInteger() == 10 )
    c = n.getRightChild()
    assert( c.getType() == LibSBML::AST_NAME )
    assert ((  "x" == c.getName() ))
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION)
    n.setName( "sqr")
    c = LibSBML::ASTNode.new()
    c.setName( "x")
    n.addChild(c)
    assert( n.getType() == LibSBML::AST_FUNCTION )
    assert( n.getNumChildren() == 1 )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_FUNCTION_POWER )
    assert( n.getNumChildren() == 2 )
    c = n.getLeftChild()
    assert( c.getType() == LibSBML::AST_NAME )
    assert ((  "x" == c.getName() ))
    c = n.getRightChild()
    assert( c.getType() == LibSBML::AST_INTEGER )
    assert( c.getInteger() == 2 )
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION)
    n.setName( "sqrt")
    c = LibSBML::ASTNode.new()
    c.setName( "x")
    n.addChild(c)
    assert( n.getType() == LibSBML::AST_FUNCTION )
    assert( n.getNumChildren() == 1 )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_FUNCTION_ROOT )
    assert( n.getNumChildren() == 2 )
    c = n.getLeftChild()
    assert( c.getType() == LibSBML::AST_INTEGER )
    assert( c.getInteger() == 2 )
    c = n.getRightChild()
    assert( c.getType() == LibSBML::AST_NAME )
    assert ((  "x" == c.getName() ))
    n = nil
  end

  def test_ASTNode_canonicalizeLogical
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION)
    n.setName( "and")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_LOGICAL_AND )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "not")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_LOGICAL_NOT )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "or")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_LOGICAL_OR )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "xor")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_LOGICAL_XOR )
    n.setType(LibSBML::AST_FUNCTION)
    n = nil
  end

  def test_ASTNode_canonicalizeRelational
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION)
    n.setName( "eq")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_RELATIONAL_EQ )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "geq")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_RELATIONAL_GEQ )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "gt")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_RELATIONAL_GT )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "leq")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_RELATIONAL_LEQ )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "lt")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_RELATIONAL_LT )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "neq")
    assert( n.getType() == LibSBML::AST_FUNCTION )
    n.canonicalize()
    assert( n.getType() == LibSBML::AST_RELATIONAL_NEQ )
    n.setType(LibSBML::AST_FUNCTION)
    n = nil
  end

  def test_ASTNode_children
    parent = LibSBML::ASTNode.new()
    left = LibSBML::ASTNode.new()
    right = LibSBML::ASTNode.new()
    right2 = LibSBML::ASTNode.new()
    parent.setType(LibSBML::AST_PLUS)
    left.setValue(1)
    right.setValue(2)
    right2.setValue(3)
    parent.addChild(left)
    parent.addChild(right)
    assert( parent.getNumChildren() == 2 )
    assert( left.getNumChildren() == 0 )
    assert( right.getNumChildren() == 0 )
    assert( parent.getLeftChild() == left )
    assert( parent.getRightChild() == right )
    assert( parent.getChild(0) == left )
    assert( parent.getChild(1) == right )
    assert( parent.getChild(2) == nil )
    parent.addChild(right2)
    assert( parent.getNumChildren() == 3 )
    assert( left.getNumChildren() == 0 )
    assert( right.getNumChildren() == 0 )
    assert( right2.getNumChildren() == 0 )
    assert( parent.getLeftChild() == left )
    assert( parent.getRightChild() == right2 )
    assert( parent.getChild(0) == left )
    assert( parent.getChild(1) == right )
    assert( parent.getChild(2) == right2 )
    assert( parent.getChild(3) == nil )
    parent = nil
  end

  def test_ASTNode_class
    n = LibSBML::ASTNode.new()
    i = n.setClass( "test")
    assert( i == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( n.isSetClass() == 1 )
    nclass = n.getClass()
    assert ((  "test" == nclass ))
    i = n.unsetClass()
    assert( i == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( n.isSetClass() == 0 )
    nclass = n.getClass()
    assert ((  "" == nclass ))
    n = nil
  end

  def test_ASTNode_create
    n = LibSBML::ASTNode.new()
    ea = LibSBML::EventAssignment.new(2,4)
    assert( n.getType() == LibSBML::AST_UNKNOWN )
    assert( n.getCharacter() == "\0" )
    assert( n.getName() == nil )
    assert( n.getInteger() == 0 )
    assert( n.getExponent() == 0 )
    assert( n.getNumChildren() == 0 )
    assert( n.getParentSBMLObject() == nil )
    ea = nil
    n = nil
  end

  def test_ASTNode_deepCopy_1
    node = LibSBML::ASTNode.new()
    node.setCharacter( '+')
    node.addChild(LibSBML::ASTNode.new())
    node.addChild(LibSBML::ASTNode.new())
    node.getLeftChild().setValue(1)
    node.getRightChild().setValue(2)
    assert( node.getType() == LibSBML::AST_PLUS )
    assert( node.getCharacter() == '+' )
    assert( node.getNumChildren() == 2 )
    child = node.getLeftChild()
    assert( child.getType() == LibSBML::AST_INTEGER )
    assert( child.getInteger() == 1 )
    assert( child.getNumChildren() == 0 )
    child = node.getRightChild()
    assert( child.getType() == LibSBML::AST_INTEGER )
    assert( child.getInteger() == 2 )
    assert( child.getNumChildren() == 0 )
    copy = node.deepCopy()
    assert( copy != node )
    assert( copy.getType() == LibSBML::AST_PLUS )
    assert( copy.getCharacter() == '+' )
    assert( copy.getNumChildren() == 2 )
    child = copy.getLeftChild()
    assert( child != node.getLeftChild() )
    assert( child.getType() == LibSBML::AST_INTEGER )
    assert( child.getInteger() == 1 )
    assert( child.getNumChildren() == 0 )
    child = copy.getRightChild()
    assert( child != node.getRightChild() )
    assert( child.getType() == LibSBML::AST_INTEGER )
    assert( child.getInteger() == 2 )
    assert( child.getNumChildren() == 0 )
    node = nil
    copy = nil
  end

  def test_ASTNode_deepCopy_2
    node = LibSBML::ASTNode.new()
    node.setName( "Foo")
    assert( node.getType() == LibSBML::AST_NAME )
    assert ((  "Foo" == node.getName() ))
    assert( node.getNumChildren() == 0 )
    copy = node.deepCopy()
    assert( copy != node )
    assert( copy.getType() == LibSBML::AST_NAME )
    assert ((  "Foo" == copy.getName() ))
    assert( copy.getNumChildren() == 0 )
    assert (( node.getName() == copy.getName() ))
    node = nil
    copy = nil
  end

  def test_ASTNode_deepCopy_3
    node = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION)
    node.setName( "Foo")
    assert( node.getType() == LibSBML::AST_FUNCTION )
    assert ((  "Foo" == node.getName() ))
    assert( node.getNumChildren() == 0 )
    copy = node.deepCopy()
    assert( copy != node )
    assert( copy.getType() == LibSBML::AST_FUNCTION )
    assert ((  "Foo" == copy.getName() ))
    assert( copy.getNumChildren() == 0 )
    assert (( node.getName() == copy.getName() ))
    node = nil
    copy = nil
  end

  def test_ASTNode_deepCopy_4
    node = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_ABS)
    node.setName( "ABS")
    assert( node.getType() == LibSBML::AST_FUNCTION_ABS )
    assert ((  "ABS" == node.getName() ))
    assert( node.getNumChildren() == 0 )
    copy = node.deepCopy()
    assert( copy != node )
    assert( copy.getType() == LibSBML::AST_FUNCTION_ABS )
    assert ((  "ABS" == copy.getName() ))
    assert( copy.getNumChildren() == 0 )
    assert (( node.getName() == copy.getName() ))
    node = nil
    copy = nil
  end

  def test_ASTNode_deepCopy_5
    node = LibSBML::parseFormula("a + b")
    xmlstr = "<annotation encoding=\"infix\">\n" + "test\n" + "</annotation>";
    ann = LibSBML::XMLNode.convertStringToXMLNode(xmlstr,nil)
    node.addSemanticsAnnotation(ann)
    assert( node.getNumSemanticsAnnotations() == 1 )
    copy = node.deepCopy()
    assert( copy != node )
    assert( copy.getNumSemanticsAnnotations() == 1 )
    node = nil
    copy = nil
  end

  def test_ASTNode_freeName
    node = LibSBML::ASTNode.new()
    i = 0
    i = node.setName( "a")
    assert( i == LibSBML::LIBSBML_OPERATION_SUCCESS )
    math = LibSBML::formulaToString(node)
    assert ((  "a" == math ))
    assert ((  "a" == node.getName() ))
    i = node.freeName()
    assert( i == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( node.getName() == nil )
    i = node.freeName()
    assert( i == LibSBML::LIBSBML_UNEXPECTED_ATTRIBUTE )
    assert( node.getName() == nil )
    node.setType(LibSBML::AST_UNKNOWN)
    i = node.freeName()
    assert( i == LibSBML::LIBSBML_UNEXPECTED_ATTRIBUTE )
    assert( node.getName() == nil )
    node = nil
  end

  def test_ASTNode_free_NULL
  end

  def test_ASTNode_getName
    n = LibSBML::ASTNode.new()
    n.setName( "foo")
    assert ((  "foo" == n.getName() ))
    n.setType(LibSBML::AST_NAME_TIME)
    assert ((  "foo" == n.getName() ))
    n.setName(nil)
    assert( n.getName() == nil )
    assert_equal true, util_isNaN
    assert( n.isWellFormedASTNode() == true )
    n.setType(LibSBML::AST_CONSTANT_E)
    assert ((  "exponentiale" == n.getName() ))
    assert_equal true, util_isEqual
    assert( n.isWellFormedASTNode() == true )
    n.setType(LibSBML::AST_CONSTANT_FALSE)
    assert ((  "false" == n.getName() ))
    assert_equal true, util_isEqual
    assert( n.isWellFormedASTNode() == true )
    n.setType(LibSBML::AST_CONSTANT_PI)
    assert ((  "pi" == n.getName() ))
    assert_equal true, util_isEqual
    assert( n.isWellFormedASTNode() == true )
    n.setType(LibSBML::AST_CONSTANT_TRUE)
    assert ((  "true" == n.getName() ))
    assert_equal true, util_isEqual
    assert( n.isWellFormedASTNode() == true )
    n.setType(LibSBML::AST_LAMBDA)
    assert ((  "lambda" == n.getName() ))
    assert_equal true, util_isNaN
    assert( n.isWellFormedASTNode() == false )
    n.setType(LibSBML::AST_FUNCTION)
    n.setName( "f")
    assert ((  "f" == n.getName() ))
    assert_equal true, util_isNaN
    assert( n.isWellFormedASTNode() == true )
    n.setType(LibSBML::AST_FUNCTION_DELAY)
    assert ((  "f" == n.getName() ))
    assert_equal true, util_isNaN
    assert( n.isWellFormedASTNode() == false )
    n.setName(nil)
    assert ((  "delay" == n.getName() ))
    assert_equal true, util_isNaN
    n.setType(LibSBML::AST_FUNCTION)
    assert( n.getName() == nil )
    assert_equal true, util_isNaN
    assert( n.isWellFormedASTNode() == true )
    n.setType(LibSBML::AST_FUNCTION_ABS)
    assert ((  "abs" == n.getName() ))
    assert_equal true, util_isNaN
    n.setType(LibSBML::AST_FUNCTION_ARCCOS)
    assert ((  "arccos" == n.getName() ))
    assert_equal true, util_isNaN
    n.setType(LibSBML::AST_FUNCTION_TAN)
    assert ((  "tan" == n.getName() ))
    assert_equal true, util_isNaN
    n.setType(LibSBML::AST_FUNCTION_TANH)
    assert ((  "tanh" == n.getName() ))
    assert_equal true, util_isNaN
    n.setType(LibSBML::AST_LOGICAL_AND)
    assert ((  "and" == n.getName() ))
    assert_equal true, util_isNaN
    n.setType(LibSBML::AST_LOGICAL_NOT)
    assert ((  "not" == n.getName() ))
    assert_equal true, util_isNaN
    n.setType(LibSBML::AST_LOGICAL_OR)
    assert ((  "or" == n.getName() ))
    assert_equal true, util_isNaN
    n.setType(LibSBML::AST_LOGICAL_XOR)
    assert ((  "xor" == n.getName() ))
    assert_equal true, util_isNaN
    assert( n.isWellFormedASTNode() == true )
    n.setType(LibSBML::AST_RELATIONAL_EQ)
    assert ((  "eq" == n.getName() ))
    assert_equal true, util_isNaN
    n.setType(LibSBML::AST_RELATIONAL_GEQ)
    assert ((  "geq" == n.getName() ))
    assert_equal true, util_isNaN
    n.setType(LibSBML::AST_RELATIONAL_LT)
    assert ((  "lt" == n.getName() ))
    assert_equal true, util_isNaN
    n.setType(LibSBML::AST_RELATIONAL_NEQ)
    assert ((  "neq" == n.getName() ))
    assert_equal true, util_isNaN
    n = nil
  end

  def test_ASTNode_getPrecedence
    n = LibSBML::ASTNode.new()
    n.setType(LibSBML::AST_PLUS)
    assert( n.getPrecedence() == 2 )
    n.setType(LibSBML::AST_MINUS)
    assert( n.getPrecedence() == 2 )
    n.setType(LibSBML::AST_TIMES)
    assert( n.getPrecedence() == 3 )
    n.setType(LibSBML::AST_DIVIDE)
    assert( n.getPrecedence() == 3 )
    n.setType(LibSBML::AST_POWER)
    assert( n.getPrecedence() == 4 )
    n.setType(LibSBML::AST_MINUS)
    n.addChild(LibSBML::ASTNode.new(LibSBML::AST_NAME))
    assert( n.isUMinus() == true )
    assert( n.getPrecedence() == 5 )
    n.setType(LibSBML::AST_NAME)
    assert( n.getPrecedence() == 6 )
    n.setType(LibSBML::AST_FUNCTION)
    assert( n.getPrecedence() == 6 )
    n = nil
  end

  def test_ASTNode_getReal
    n = LibSBML::ASTNode.new()
    n.setType(LibSBML::AST_REAL)
    n.setValue(1.6)
    assert( n.getReal() == 1.6 )
    n.setType(LibSBML::AST_REAL_E)
    n.setValue(12.3,3)
    assert_equal true, util_isEqual
    n.setType(LibSBML::AST_RATIONAL)
    n.setValue(1,2)
    assert( n.getReal() == 0.5 )
    n = nil
  end

  def test_ASTNode_hasTypeAndNumChildren
    n = LibSBML::ASTNode.new()
    c = LibSBML::ASTNode.new()
    n.setType(LibSBML::AST_PLUS)
    assert_equal true, n.hasTypeAndNumChildren(LibSBML::AST_PLUS,0)
    assert_equal false, n.hasTypeAndNumChildren(LibSBML::AST_PLUS,1)
    assert_equal false, n.hasTypeAndNumChildren(LibSBML::AST_MINUS,0)
    assert_equal false, n.hasTypeAndNumChildren(LibSBML::AST_UNKNOWN,1)
    c.setName( "x")
    n.addChild(c)
    n.setType(LibSBML::AST_FUNCTION_PIECEWISE)
    assert_equal true, n.hasTypeAndNumChildren(LibSBML::AST_FUNCTION_PIECEWISE,1)
    assert_equal false, n.hasTypeAndNumChildren(LibSBML::AST_FUNCTION_PIECEWISE,0)
    assert_equal false, n.hasTypeAndNumChildren(LibSBML::AST_LOGICAL_AND,1)
    assert_equal false, n.hasTypeAndNumChildren(LibSBML::AST_DIVIDE,0)
    c = LibSBML::ASTNode.new()
    c.setName( "y")
    n.addChild(c)
    n.setType(LibSBML::AST_DIVIDE)
    assert_equal true, n.hasTypeAndNumChildren(LibSBML::AST_DIVIDE,2)
    assert_equal false, n.hasTypeAndNumChildren(LibSBML::AST_DIVIDE,0)
    assert_equal false, n.hasTypeAndNumChildren(LibSBML::AST_CONSTANT_E,2)
    assert_equal false, n.hasTypeAndNumChildren(LibSBML::AST_RELATIONAL_EQ,0)
    n = nil
  end

  def test_ASTNode_hasUnits
    n = LibSBML::ASTNode.new()
    c = LibSBML::ASTNode.new()
    n.setValue(1)
    assert( n.hasUnits() == 0 )
    n.setUnits( "litre")
    assert( n.hasUnits() == 1 )
    n = nil
    n = LibSBML::ASTNode.new()
    n.setType(LibSBML::AST_PLUS)
    c.setValue(2)
    n.addChild(c)
    assert( n.hasUnits() == 0 )
    c = LibSBML::ASTNode.new()
    c.setValue(3)
    c.setUnits( "mole")
    n.addChild(c)
    assert( n.hasUnits() == 1 )
    n = nil
  end

  def test_ASTNode_id
    n = LibSBML::ASTNode.new()
    i = n.setId( "test")
    assert( i == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( n.isSetId() == true )
    id = n.getId()
    assert ((  "test" == id ))
    i = n.unsetId()
    assert( i == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( n.isSetId() == false )
    id = n.getId()
    assert ((  "" == id ))
    n = nil
  end

  def test_ASTNode_insertChild
    node = LibSBML::ASTNode.new()
    c1 = LibSBML::ASTNode.new()
    c2 = LibSBML::ASTNode.new()
    c3 = LibSBML::ASTNode.new()
    newc = LibSBML::ASTNode.new()
    newc1 = LibSBML::ASTNode.new()
    i = 0
    node.setType(LibSBML::AST_LOGICAL_AND)
    c1.setName( "a")
    c2.setName( "b")
    c3.setName( "c")
    node.addChild(c1)
    node.addChild(c2)
    node.addChild(c3)
    assert( node.getNumChildren() == 3 )
    math = LibSBML::formulaToString(node)
    assert ((  "and(a, b, c)" == math ))
    newc.setName( "d")
    newc1.setName( "e")
    i = node.insertChild(1,newc)
    assert( i == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( node.getNumChildren() == 4 )
    math = LibSBML::formulaToString(node)
    assert ((  "and(a, d, b, c)" == math ))
    i = node.insertChild(5,newc)
    assert( i == LibSBML::LIBSBML_INDEX_EXCEEDS_SIZE )
    assert( node.getNumChildren() == 4 )
    math = LibSBML::formulaToString(node)
    assert ((  "and(a, d, b, c)" == math ))
    i = node.insertChild(2,newc1)
    assert( i == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( node.getNumChildren() == 5 )
    math = LibSBML::formulaToString(node)
    assert ((  "and(a, d, e, b, c)" == math ))
    node = nil
  end

  def test_ASTNode_isAvogadro
    n = LibSBML::ASTNode.new(LibSBML::AST_PLUS)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_MINUS)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_TIMES)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_DIVIDE)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_POWER)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_INTEGER)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_REAL)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_REAL_E)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_RATIONAL)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_NAME)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_NAME_AVOGADRO)
    assert_equal true, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_NAME_TIME)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_CONSTANT_E)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_CONSTANT_FALSE)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_CONSTANT_PI)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_CONSTANT_TRUE)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_LAMBDA)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_ABS)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_ARCCOS)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_ARCCOSH)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_ARCCOT)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_ARCCOTH)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_ARCCSC)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_ARCCSCH)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_ARCSEC)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_ARCSECH)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_ARCSIN)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_ARCSINH)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_ARCTAN)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_ARCTANH)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_CEILING)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_COS)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_COSH)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_COT)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_COTH)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_CSC)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_CSCH)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_DELAY)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_EXP)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_FACTORIAL)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_FLOOR)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_LN)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_LOG)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_PIECEWISE)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_POWER)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_ROOT)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_SEC)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_SECH)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_SIN)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_SINH)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_TAN)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_TANH)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_LOGICAL_AND)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_LOGICAL_NOT)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_LOGICAL_OR)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_LOGICAL_XOR)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_RELATIONAL_EQ)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_RELATIONAL_GEQ)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_RELATIONAL_GT)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_RELATIONAL_LEQ)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_RELATIONAL_LT)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_RELATIONAL_NEQ)
    assert_equal false, n.isAvogadro()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_UNKNOWN)
    assert_equal false, n.isAvogadro()
    n = nil
  end

  def test_ASTNode_isBoolean
    n = LibSBML::ASTNode.new(LibSBML::AST_PLUS)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_MINUS)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_TIMES)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_DIVIDE)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_POWER)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_INTEGER)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_REAL)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_REAL_E)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_RATIONAL)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_NAME)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_NAME_AVOGADRO)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_NAME_TIME)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_CONSTANT_E)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_CONSTANT_FALSE)
    assert_equal true, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_CONSTANT_PI)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_CONSTANT_TRUE)
    assert_equal true, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_LAMBDA)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_ABS)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_ARCCOS)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_ARCCOSH)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_ARCCOT)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_ARCCOTH)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_ARCCSC)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_ARCCSCH)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_ARCSEC)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_ARCSECH)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_ARCSIN)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_ARCSINH)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_ARCTAN)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_ARCTANH)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_CEILING)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_COS)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_COSH)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_COT)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_COTH)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_CSC)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_CSCH)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_DELAY)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_EXP)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_FACTORIAL)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_FLOOR)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_LN)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_LOG)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_PIECEWISE)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_POWER)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_ROOT)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_SEC)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_SECH)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_SIN)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_SINH)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_TAN)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_TANH)
    assert_equal false, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_LOGICAL_AND)
    assert_equal true, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_LOGICAL_NOT)
    assert_equal true, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_LOGICAL_OR)
    assert_equal true, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_LOGICAL_XOR)
    assert_equal true, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_RELATIONAL_EQ)
    assert_equal true, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_RELATIONAL_GEQ)
    assert_equal true, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_RELATIONAL_GT)
    assert_equal true, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_RELATIONAL_LEQ)
    assert_equal true, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_RELATIONAL_LT)
    assert_equal true, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_RELATIONAL_NEQ)
    assert_equal true, n.isBoolean()
    n = nil
    n = LibSBML::ASTNode.new(LibSBML::AST_UNKNOWN)
    assert_equal false, n.isBoolean()
    n = nil
  end

  def test_ASTNode_isLog10
    n = LibSBML::ASTNode.new()
    n.setType(LibSBML::AST_FUNCTION)
    assert( n.isLog10() == false )
    n.setType(LibSBML::AST_FUNCTION_LOG)
    assert( n.isLog10() == false )
    assert( n.isWellFormedASTNode() == false )
    c = LibSBML::ASTNode.new()
    n.addChild(c)
    c.setValue(10)
    assert( n.isLog10() == false )
    n.addChild(LibSBML::ASTNode.new())
    assert( n.isLog10() == true )
    assert( n.isWellFormedASTNode() == true )
    c.setValue(2)
    assert( n.isLog10() == false )
    assert( n.isWellFormedASTNode() == true )
    n = nil
  end

  def test_ASTNode_isSqrt
    n = LibSBML::ASTNode.new()
    n.setType(LibSBML::AST_FUNCTION)
    assert( n.isSqrt() == false )
    n.setType(LibSBML::AST_FUNCTION_ROOT)
    assert( n.isSqrt() == false )
    c = LibSBML::ASTNode.new()
    n.addChild(c)
    c.setValue(2)
    assert( n.isSqrt() == false )
    n.addChild(LibSBML::ASTNode.new())
    assert( n.isSqrt() == true )
    assert( n.isWellFormedASTNode() == true )
    c.setValue(3)
    assert( n.isSqrt() == false )
    n = nil
  end

  def test_ASTNode_isUMinus
    n = LibSBML::ASTNode.new()
    n.setType(LibSBML::AST_MINUS)
    assert( n.isUMinus() == false )
    n.addChild(LibSBML::ASTNode.new(LibSBML::AST_NAME))
    assert( n.isUMinus() == true )
    assert( n.isWellFormedASTNode() == true )
    n = nil
  end

  def test_ASTNode_isUPlus
    n = LibSBML::ASTNode.new()
    n.setType(LibSBML::AST_PLUS)
    assert( n.isUPlus() == 0 )
    n.addChild(LibSBML::ASTNode.new(LibSBML::AST_NAME))
    assert( n.isUPlus() == 1 )
    assert( n.isWellFormedASTNode() == true )
    n = nil
  end

  def test_ASTNode_no_children
    node = LibSBML::ASTNode.new()
    assert( node.getNumChildren() == 0 )
    assert( node.getLeftChild() == nil )
    assert( node.getRightChild() == nil )
    assert( node.getChild(0) == nil )
    node = nil
  end

  def test_ASTNode_one_child
    node = LibSBML::ASTNode.new()
    child = LibSBML::ASTNode.new()
    node.addChild(child)
    assert( node.getNumChildren() == 1 )
    assert( node.getLeftChild() == child )
    assert( node.getRightChild() == nil )
    assert( node.getChild(0) == child )
    assert( node.getChild(1) == nil )
    node = nil
  end

  def test_ASTNode_prependChild1
    node = LibSBML::ASTNode.new()
    c1 = LibSBML::ASTNode.new()
    c2 = LibSBML::ASTNode.new()
    c1_1 = LibSBML::ASTNode.new()
    i = 0
    node.setType(LibSBML::AST_LOGICAL_AND)
    c1.setName( "a")
    c2.setName( "b")
    node.addChild(c1)
    node.addChild(c2)
    assert( node.getNumChildren() == 2 )
    math = LibSBML::formulaToString(node)
    assert ((  "and(a, b)" == math ))
    c1_1.setName( "d")
    i = node.prependChild(c1_1)
    assert( i == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( node.getNumChildren() == 3 )
    math = LibSBML::formulaToString(node)
    assert ((  "and(d, a, b)" == math ))
    assert ((  "d" == node.getChild(0).getName() ))
    assert ((  "a" == node.getChild(1).getName() ))
    assert ((  "b" == node.getChild(2).getName() ))
    node = nil
  end

  def test_ASTNode_reduceToBinary
    n = LibSBML::ASTNode.new()
    n.setType(LibSBML::AST_PLUS)
    c1 = LibSBML::ASTNode.new()
    c1.setValue(2)
    c2 = LibSBML::ASTNode.new()
    c2.setValue(2)
    c3 = LibSBML::ASTNode.new()
    c3.setValue(2)
    n.addChild(c1)
    n.addChild(c2)
    n.addChild(c3)
    assert( n.getNumChildren() == 3 )
    n.reduceToBinary()
    assert( n.getNumChildren() == 2 )
    child = n.getChild(0)
    assert( child.getNumChildren() == 2 )
    child = n.getChild(1)
    assert( child.getNumChildren() == 0 )
    n = nil
  end

  def test_ASTNode_removeChild
    node = LibSBML::ASTNode.new()
    c1 = LibSBML::ASTNode.new()
    c2 = LibSBML::ASTNode.new()
    i = 0
    node.setType(LibSBML::AST_PLUS)
    c1.setName( "foo")
    c2.setName( "foo2")
    node.addChild(c1)
    node.addChild(c2)
    assert( node.getNumChildren() == 2 )
    i = node.removeChild(0)
    assert( i == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( node.getNumChildren() == 1 )
    i = node.removeChild(1)
    assert( i == LibSBML::LIBSBML_INDEX_EXCEEDS_SIZE )
    assert( node.getNumChildren() == 1 )
    i = node.removeChild(0)
    assert( i == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( node.getNumChildren() == 0 )
    node = nil
    c1 = nil
    c2 = nil
  end

  def test_ASTNode_replaceArgument1
    node = LibSBML::parseFormula("x*y")
    user = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION)
    user.setName( "f")
    c1 = LibSBML::ASTNode.new()
    c2 = LibSBML::ASTNode.new()
    bvar =  "x";
    c1.setName( "x")
    c2.setName( "y")
    user.addChild(c1)
    user.addChild(c2)
    math = LibSBML::formulaToString(user)
    assert ((  "f(x, y)" == math ))
    node.replaceArgument(bvar,user)
    math = LibSBML::formulaToString(node)
    assert ((  "f(x, y) * y" == math ))
    node = nil
    user = nil
  end

  def test_ASTNode_replaceArgument2
    node = LibSBML::parseFormula("x*y")
    user = LibSBML::ASTNode.new(LibSBML::AST_NAME_TIME)
    user.setName( "f")
    bvar =  "x";
    node.replaceArgument(bvar,user)
    math = LibSBML::formulaToString(node)
    assert ((  "f * y" == math ))
    child = node.getChild(0)
    assert( child.getType() == LibSBML::AST_NAME_TIME )
    node = nil
    user = nil
  end

  def test_ASTNode_replaceArgument3
    node = LibSBML::parseFormula("piecewise(x, gt(x, y), x)")
    repl1 = LibSBML::parseFormula("a/b")
    repl2 = LibSBML::parseFormula("2")
    bvar =  "x";
    node.replaceArgument(bvar,repl2)
    math = LibSBML::formulaToString(node)
    assert ((  "piecewise(2, gt(2, y), 2)" == math ))
    node.replaceArgument( "y",repl1)
    math = LibSBML::formulaToString(node)
    assert ((  "piecewise(2, gt(2, a / b), 2)" == math ))
    node = nil
    repl1 = nil
    repl2 = nil
  end

  def test_ASTNode_replaceArgument4
    node = LibSBML::parseFormula("piecewise(x, gt(x, y), y)")
    repl1 = LibSBML::parseFormula("a/b")
    repl2 = LibSBML::parseFormula("2")
    bvar =  "x";
    node.replaceArgument(bvar,repl2)
    math = LibSBML::formulaToString(node)
    assert ((  "piecewise(2, gt(2, y), y)" == math ))
    node.replaceArgument( "y",repl1)
    math = LibSBML::formulaToString(node)
    assert ((  "piecewise(2, gt(2, a / b), a / b)" == math ))
    node = nil
    repl1 = nil
    repl2 = nil
  end

  def test_ASTNode_replaceArgument5
    node = LibSBML::parseFormula("piecewise(y, gt(x, y), x)")
    repl1 = LibSBML::parseFormula("a/b")
    repl2 = LibSBML::parseFormula("2")
    bvar =  "x";
    node.replaceArgument(bvar,repl2)
    math = LibSBML::formulaToString(node)
    assert ((  "piecewise(y, gt(2, y), 2)" == math ))
    node.replaceArgument( "y",repl1)
    math = LibSBML::formulaToString(node)
    assert ((  "piecewise(a / b, gt(2, a / b), 2)" == math ))
    node = nil
    repl1 = nil
    repl2 = nil
  end

  def test_ASTNode_replaceChild
    node = LibSBML::ASTNode.new()
    c1 = LibSBML::ASTNode.new()
    c2 = LibSBML::ASTNode.new()
    c3 = LibSBML::ASTNode.new()
    c4 = LibSBML::ASTNode.new()
    c5 = LibSBML::ASTNode.new()
    i = 0
    node.setType(LibSBML::AST_LOGICAL_AND)
    c1.setName( "a")
    c2.setName( "b")
    c3.setName( "c")
    c4.setName( "d")
    c5.setName( "e")
    node.addChild(c1)
    node.addChild(c2)
    node.addChild(c3)
    assert( node.getNumChildren() == 3 )
    math = LibSBML::formulaToString(node)
    assert ((  "and(a, b, c)" == math ))
    i = node.replaceChild(0,c4)
    assert( i == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( node.getNumChildren() == 3 )
    math = LibSBML::formulaToString(node)
    assert ((  "and(d, b, c)" == math ))
    i = node.replaceChild(3,c4)
    assert( i == LibSBML::LIBSBML_INDEX_EXCEEDS_SIZE )
    assert( node.getNumChildren() == 3 )
    math = LibSBML::formulaToString(node)
    assert ((  "and(d, b, c)" == math ))
    i = node.replaceChild(1,c5)
    assert( i == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( node.getNumChildren() == 3 )
    math = LibSBML::formulaToString(node)
    assert ((  "and(d, e, c)" == math ))
    node = nil
    c1 = nil
    c2 = nil
  end

  def test_ASTNode_returnsBoolean
    n = LibSBML::parseFormula("geq(a,b)")
    assert( n.returnsBoolean() == 1 )
    n = nil
    n = LibSBML::parseFormula("times(a,b)")
    assert( n.returnsBoolean() == 0 )
    n = nil
    n = LibSBML::parseFormula("piecewise(true, geq(X, T), false)")
    assert( n.returnsBoolean() == 1 )
    n = nil
    n = LibSBML::parseFormula("piecewise(true, geq(X, T), 5)")
    assert( n.returnsBoolean() == 0 )
    n = nil
    n = LibSBML::parseFormula("func1(X)")
    assert( n.returnsBoolean() == 0 )
    doc = LibSBML::SBMLDocument.new(3,1)
    model = doc.createModel()
    c = model.createConstraint()
    c.setMath(n)
    math = c.getMath()
    assert( math.returnsBoolean() == 0 )
    fd = model.createFunctionDefinition()
    fd.setId( "func1")
    assert( math.returnsBoolean() == 0 )
    m = LibSBML::parseFormula("lambda(x, true)")
    fd.setMath(m)
    m = nil
    assert( math.returnsBoolean() == 1 )
    m = LibSBML::parseFormula("lambda(x, 6)")
    fd.setMath(m)
    m = nil
    assert( math.returnsBoolean() == 0 )
    n = nil
    doc = nil
  end

  def test_ASTNode_setCharacter
    node = LibSBML::ASTNode.new()
    node.setName( "foo")
    assert( node.getType() == LibSBML::AST_NAME )
    assert( node.getCharacter() == "\0" )
    assert ((  "foo" == node.getName() ))
    assert( node.getInteger() == 0 )
    assert( node.getReal() == 0 )
    assert( node.getExponent() == 0 )
    assert( node.getDenominator() == 1 )
    node.setCharacter( '+')
    assert( node.getType() == LibSBML::AST_PLUS )
    assert( node.getCharacter() == '+' )
    assert( node.getName() == nil )
    assert( node.getInteger() == 0 )
    assert( node.getReal() == 0 )
    assert( node.getExponent() == 0 )
    assert( node.getDenominator() == 1 )
    node.setCharacter( '-')
    assert( node.getType() == LibSBML::AST_MINUS )
    assert( node.getCharacter() == '-' )
    assert( node.getName() == nil )
    assert( node.getInteger() == 0 )
    assert( node.getReal() == 0 )
    assert( node.getExponent() == 0 )
    assert( node.getDenominator() == 1 )
    node.setCharacter( '*')
    assert( node.getType() == LibSBML::AST_TIMES )
    assert( node.getCharacter() == '*' )
    assert( node.getName() == nil )
    assert( node.getInteger() == 0 )
    assert( node.getReal() == 0 )
    assert( node.getExponent() == 0 )
    assert( node.getDenominator() == 1 )
    node.setCharacter( '/')
    assert( node.getType() == LibSBML::AST_DIVIDE )
    assert( node.getCharacter() == '/' )
    assert( node.getName() == nil )
    assert( node.getInteger() == 0 )
    assert( node.getReal() == 0 )
    assert( node.getExponent() == 0 )
    assert( node.getDenominator() == 1 )
    node.setCharacter( '^')
    assert( node.getType() == LibSBML::AST_POWER )
    assert( node.getCharacter() == '^' )
    assert( node.getName() == nil )
    assert( node.getInteger() == 0 )
    assert( node.getReal() == 0 )
    assert( node.getExponent() == 0 )
    assert( node.getDenominator() == 1 )
    node.setCharacter( '$')
    assert( node.getType() == LibSBML::AST_UNKNOWN )
    assert( node.getCharacter() == '$' )
    assert( node.getName() == nil )
    assert( node.getInteger() == 0 )
    assert( node.getReal() == 0 )
    assert( node.getExponent() == 0 )
    assert( node.getDenominator() == 1 )
    node = nil
  end

  def test_ASTNode_setInteger
    node = LibSBML::ASTNode.new()
    node.setName( "foo")
    assert( node.getType() == LibSBML::AST_NAME )
    assert ((  "foo" == node.getName() ))
    assert( node.getCharacter() == "\0" )
    assert( node.getInteger() == 0 )
    assert( node.getReal() == 0 )
    assert( node.getExponent() == 0 )
    assert( node.getDenominator() == 1 )
    node.setValue(3.2)
    assert( node.getType() == LibSBML::AST_REAL )
    assert( node.getInteger() == 0 )
    assert( node.getName() == nil )
    assert( node.getCharacter() == "\0" )
    assert( node.getReal() == 3.2 )
    assert( node.getExponent() == 0 )
    assert( node.getDenominator() == 1 )
    node.setValue(321)
    assert( node.getType() == LibSBML::AST_INTEGER )
    assert( node.getInteger() == 321 )
    assert( node.getName() == nil )
    assert( node.getCharacter() == "\0" )
    assert( node.getReal() == 0 )
    assert( node.getExponent() == 0 )
    assert( node.getDenominator() == 1 )
    node = nil
  end

  def test_ASTNode_setName_1
    name =  "foo";
    node = LibSBML::ASTNode.new()
    assert( node.getType() == LibSBML::AST_UNKNOWN )
    node.setName(name)
    assert( node.getType() == LibSBML::AST_NAME )
    assert (( name == node.getName() ))
    assert( node.getCharacter() == "\0" )
    assert( node.getInteger() == 0 )
    assert( node.getReal() == 0 )
    assert( node.getExponent() == 0 )
    assert( node.getDenominator() == 1 )
    if (node.getName() == name)
    end
    node.setName(nil)
    assert( node.getType() == LibSBML::AST_NAME )
    if (node.getName() != nil)
    end
    node.setType(LibSBML::AST_FUNCTION_COS)
    assert( node.getType() == LibSBML::AST_FUNCTION_COS )
    assert ((  "cos" == node.getName() ))
    assert( node.getCharacter() == "\0" )
    assert( node.getInteger() == 0 )
    assert( node.getReal() == 0 )
    assert( node.getExponent() == 0 )
    assert( node.getDenominator() == 1 )
    node.setType(LibSBML::AST_PLUS)
    node.setName(name)
    assert( node.getType() == LibSBML::AST_NAME )
    assert (( name == node.getName() ))
    assert( node.getCharacter() == '+' )
    assert( node.getInteger() == 0 )
    assert( node.getReal() == 0 )
    assert( node.getExponent() == 0 )
    assert( node.getDenominator() == 1 )
    node = nil
  end

  def test_ASTNode_setName_2
    name =  "foo";
    node = LibSBML::ASTNode.new()
    node.setId( "s")
    assert( node.getType() == LibSBML::AST_UNKNOWN )
    node.setName(name)
    assert( node.getType() == LibSBML::AST_NAME )
    id = node.getId()
    assert( (  "s" != id ) == false )
    assert( ( name != node.getName() ) == false )
    node = nil
  end

  def test_ASTNode_setName_3
    name =  "foo";
    node = LibSBML::ASTNode.new(LibSBML::AST_PLUS)
    node.setId( "s")
    node.setName(name)
    assert( node.getType() == LibSBML::AST_NAME )
    id = node.getId()
    assert( (  "s" != id ) == false )
    assert( ( name != node.getName() ) == false )
    node = nil
  end

  def test_ASTNode_setName_4
    name =  "foo";
    node = LibSBML::ASTNode.new(LibSBML::AST_INTEGER)
    node.setId( "s")
    node.setName(name)
    assert( node.getType() == LibSBML::AST_NAME )
    id = node.getId()
    assert( (  "s" != id ) == false )
    assert( ( name != node.getName() ) == false )
    node = nil
  end

  def test_ASTNode_setName_5
    name =  "foo";
    node = LibSBML::ASTNode.new(LibSBML::AST_INTEGER)
    node.setId( "s")
    node.setUnits( "mole")
    node.setName(name)
    assert( node.getType() == LibSBML::AST_NAME )
    id = node.getId()
    units = node.getUnits()
    assert( (  "s" != id ) == false )
    assert( ( name != node.getName() ) == false )
    assert( (  "" != units ) == false )
    node = nil
  end

  def test_ASTNode_setName_override
    node = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_SIN)
    assert ((  "sin" == node.getName() ))
    assert( node.getType() == LibSBML::AST_FUNCTION_SIN )
    node.setName( "MySinFunc")
    assert ((  "MySinFunc" == node.getName() ))
    assert( node.getType() == LibSBML::AST_FUNCTION_SIN )
    node.setName(nil)
    assert ((  "sin" == node.getName() ))
    assert( node.getType() == LibSBML::AST_FUNCTION_SIN )
    node = nil
  end

  def test_ASTNode_setReal
    node = LibSBML::ASTNode.new()
    node.setName( "foo")
    assert( node.getType() == LibSBML::AST_NAME )
    node.setValue(32.1)
    assert( node.getType() == LibSBML::AST_REAL )
    assert( node.getInteger() == 0 )
    assert( node.getName() == nil )
    assert( node.getCharacter() == "\0" )
    assert( node.getReal() == 32.1 )
    assert( node.getExponent() == 0 )
    assert( node.getDenominator() == 1 )
    assert( node.getMantissa() == 32.1 )
    node.setValue(45,90)
    assert( node.getType() == LibSBML::AST_RATIONAL )
    assert( node.getInteger() == 45 )
    assert( node.getName() == nil )
    assert( node.getCharacter() == "\0" )
    assert( node.getReal() == 0.5 )
    assert( node.getExponent() == 0 )
    assert( node.getDenominator() == 90 )
    assert( node.getMantissa() == 0 )
    node.setValue(32.0,4)
    assert( node.getType() == LibSBML::AST_REAL_E )
    assert( node.getInteger() == 0 )
    assert( node.getName() == nil )
    assert( node.getCharacter() == "\0" )
    assert( node.getReal() == 320000 )
    assert( node.getExponent() == 4 )
    assert( node.getDenominator() == 1 )
    assert( node.getMantissa() == 32 )
    node = nil
  end

  def test_ASTNode_setType_1
    node = LibSBML::ASTNode.new()
    node.setName( "foo")
    assert( node.getType() == LibSBML::AST_NAME )
    node.setType(LibSBML::AST_FUNCTION)
    assert( node.getType() == LibSBML::AST_FUNCTION )
    assert ((  "foo" == node.getName() ))
    node.setType(LibSBML::AST_NAME)
    assert( node.getType() == LibSBML::AST_NAME )
    assert ((  "foo" == node.getName() ))
    node.setType(LibSBML::AST_INTEGER)
    assert( node.getType() == LibSBML::AST_INTEGER )
    node.setType(LibSBML::AST_REAL)
    assert( node.getType() == LibSBML::AST_REAL )
    node.setType(LibSBML::AST_UNKNOWN)
    assert( node.getType() == LibSBML::AST_UNKNOWN )
    node.setType(LibSBML::AST_PLUS)
    assert( node.getType() == LibSBML::AST_PLUS )
    assert( node.getCharacter() == '+' )
    node.setType(LibSBML::AST_MINUS)
    assert( node.getType() == LibSBML::AST_MINUS )
    assert( node.getCharacter() == '-' )
    node.setType(LibSBML::AST_TIMES)
    assert( node.getType() == LibSBML::AST_TIMES )
    assert( node.getCharacter() == '*' )
    node.setType(LibSBML::AST_DIVIDE)
    assert( node.getType() == LibSBML::AST_DIVIDE )
    assert( node.getCharacter() == '/' )
    node.setType(LibSBML::AST_POWER)
    assert( node.getType() == LibSBML::AST_POWER )
    assert( node.getCharacter() == '^' )
    node = nil
  end

  def test_ASTNode_setType_10
    node = LibSBML::ASTNode.new(LibSBML::AST_REAL_E)
    m = LibSBML::Model.new(3,1)
    node.setId( "s")
    node.setUnits( "mole")
    node.setValue(2.3,1)
    node.setParentSBMLObject((m))
    assert( node.getType() == LibSBML::AST_REAL_E )
    assert( node.getInteger() == 0 )
    assert_equal true, util_isEqual
    assert( node.getExponent() == 1 )
    assert( node.getDenominator() == 1 )
    assert( node.getNumerator() == 0 )
    assert_equal true, util_isEqual
    id = node.getId()
    units = node.getUnits()
    assert( (  "s" != id ) == false )
    assert( (  "mole" != units ) == false )
    assert( node.getParentSBMLObject() == (m) )
    node.setType(LibSBML::AST_PLUS)
    assert( node.getType() == LibSBML::AST_PLUS )
    assert( node.getInteger() == 0 )
    assert( node.getMantissa() == 0 )
    assert( node.getExponent() == 0 )
    assert( node.getDenominator() == 1 )
    assert( node.getNumerator() == 0 )
    assert_equal true, util_isEqual
    id = node.getId()
    units = node.getUnits()
    assert( (  "s" != id ) == false )
    assert( (  "" != units ) == false )
    assert( node.getParentSBMLObject() == (m) )
    node = nil
    m = nil
  end

  def test_ASTNode_setType_11
    node = LibSBML::ASTNode.new(LibSBML::AST_REAL)
    m = LibSBML::Model.new(3,1)
    node.setId( "s")
    node.setUnits( "mole")
    node.setValue(2.3)
    node.setParentSBMLObject((m))
    assert( node.getType() == LibSBML::AST_REAL )
    assert( node.getInteger() == 0 )
    assert_equal true, util_isEqual
    assert( node.getExponent() == 0 )
    assert( node.getDenominator() == 1 )
    assert( node.getNumerator() == 0 )
    assert_equal true, util_isEqual
    id = node.getId()
    units = node.getUnits()
    assert( (  "s" != id ) == false )
    assert( (  "mole" != units ) == false )
    assert( node.getParentSBMLObject() == (m) )
    node.setType(LibSBML::AST_FUNCTION_COS)
    assert( node.getType() == LibSBML::AST_FUNCTION_COS )
    assert( node.getInteger() == 0 )
    assert( node.getMantissa() == 0 )
    assert( node.getExponent() == 0 )
    assert( node.getDenominator() == 1 )
    assert( node.getNumerator() == 0 )
    assert_equal true, util_isEqual
    id = node.getId()
    units = node.getUnits()
    assert( (  "s" != id ) == false )
    assert( (  "" != units ) == false )
    assert( node.getParentSBMLObject() == (m) )
    node = nil
    m = nil
  end

  def test_ASTNode_setType_12
    node = LibSBML::ASTNode.new(LibSBML::AST_INTEGER)
    m = LibSBML::Model.new(3,1)
    node.setId( "s")
    node.setUnits( "mole")
    node.setValue(2)
    node.setParentSBMLObject((m))
    assert( node.getType() == LibSBML::AST_INTEGER )
    assert( node.getInteger() == 2 )
    assert_equal true, util_isEqual
    assert( node.getExponent() == 0 )
    assert( node.getDenominator() == 1 )
    assert( node.getNumerator() == 2 )
    assert_equal true, util_isEqual
    id = node.getId()
    units = node.getUnits()
    assert( (  "s" != id ) == false )
    assert( (  "mole" != units ) == false )
    assert( node.getParentSBMLObject() == (m) )
    node.setType(LibSBML::AST_DIVIDE)
    assert( node.getType() == LibSBML::AST_DIVIDE )
    assert( node.getInteger() == 0 )
    assert( node.getMantissa() == 0 )
    assert( node.getExponent() == 0 )
    assert( node.getDenominator() == 1 )
    assert( node.getNumerator() == 0 )
    assert_equal true, util_isEqual
    id = node.getId()
    units = node.getUnits()
    assert( (  "s" != id ) == false )
    assert( (  "" != units ) == false )
    assert( node.getParentSBMLObject() == (m) )
    node = nil
    m = nil
  end

  def test_ASTNode_setType_13
    node = LibSBML::ASTNode.new(LibSBML::AST_NAME)
    m = LibSBML::Model.new(3,1)
    node.setId( "s")
    node.setParentSBMLObject((m))
    node.setDefinitionURLString( "my_url")
    node.setName( "t")
    assert( node.getType() == LibSBML::AST_NAME )
    id = node.getId()
    assert( (  "s" != id ) == false )
    assert( node.getParentSBMLObject() == (m) )
    assert( node.isName() == 1 )
    assert( (  "t" != node.getName() ) == false )
    url = node.getDefinitionURLString()
    assert( (  "my_url" != url ) == false )
    node.setType(LibSBML::AST_FUNCTION)
    assert( node.getType() == LibSBML::AST_FUNCTION )
    id = node.getId()
    assert( (  "s" != id ) == false )
    assert( node.getParentSBMLObject() == (m) )
    assert( node.isName() == 0 )
    assert( (  "t" != node.getName() ) == false )
    url = node.getDefinitionURLString()
    assert( (  "my_url" != url ) == false )
    node = nil
    m = nil
  end

  def test_ASTNode_setType_14
    node = LibSBML::ASTNode.new(LibSBML::AST_NAME_TIME)
    m = LibSBML::Model.new(3,1)
    node.setId( "s")
    node.setName( "t")
    node.setParentSBMLObject((m))
    assert( node.getType() == LibSBML::AST_NAME_TIME )
    id = node.getId()
    assert( (  "s" != id ) == false )
    assert( (  "t" != node.getName() ) == false )
    assert( node.getParentSBMLObject() == (m) )
    assert( node.isName() == 1 )
    assert( node.getReal() == 0 )
    url = node.getDefinitionURLString()
    assert( (                        "http://www.sbml.org/sbml/symbols/time" != url ) == false )
    node.setType(LibSBML::AST_LAMBDA)
    assert( node.getType() == LibSBML::AST_LAMBDA )
    id = node.getId()
    assert( (  "s" != id ) == false )
    assert( (  "t" != node.getName() ) == false )
    assert( node.getParentSBMLObject() == (m) )
    assert( node.isName() == 0 )
    assert( node.getReal() == 0 )
    url = node.getDefinitionURLString()
    assert( (                        "" != url ) == false )
    node = nil
    m = nil
  end

  def test_ASTNode_setType_15
    node = LibSBML::ASTNode.new(LibSBML::AST_NAME_TIME)
    m = LibSBML::Model.new(3,1)
    node.setId( "s")
    node.setName( "t")
    node.setParentSBMLObject((m))
    assert( node.getType() == LibSBML::AST_NAME_TIME )
    id = node.getId()
    assert( (  "s" != id ) == false )
    assert( (  "t" != node.getName() ) == false )
    assert( node.getParentSBMLObject() == (m) )
    assert( node.isName() == 1 )
    assert( node.getReal() == 0 )
    url = node.getDefinitionURLString()
    assert( (                        "http://www.sbml.org/sbml/symbols/time" != url ) == false )
    node.setType(LibSBML::AST_FUNCTION_PIECEWISE)
    assert( node.getType() == LibSBML::AST_FUNCTION_PIECEWISE )
    id = node.getId()
    assert( (  "s" != id ) == false )
    assert( (  "t" != node.getName() ) == false )
    assert( node.getParentSBMLObject() == (m) )
    assert( node.isName() == 0 )
    assert( node.getReal() == 0 )
    url = node.getDefinitionURLString()
    assert( (                        "" != url ) == false )
    node = nil
    m = nil
  end

  def test_ASTNode_setType_16
    node = LibSBML::ASTNode.new(LibSBML::AST_NAME_TIME)
    m = LibSBML::Model.new(3,1)
    node.setId( "s")
    node.setName( "t")
    node.setParentSBMLObject((m))
    assert( node.getType() == LibSBML::AST_NAME_TIME )
    id = node.getId()
    assert( (  "s" != id ) == false )
    assert( (  "t" != node.getName() ) == false )
    assert( node.getParentSBMLObject() == (m) )
    assert( node.isName() == 1 )
    assert( node.getReal() == 0 )
    url = node.getDefinitionURLString()
    assert( (                        "http://www.sbml.org/sbml/symbols/time" != url ) == false )
    node.setType(LibSBML::AST_FUNCTION_DELAY)
    assert( node.getType() == LibSBML::AST_FUNCTION_DELAY )
    id = node.getId()
    assert( (  "s" != id ) == false )
    assert( (  "t" != node.getName() ) == false )
    assert( node.getParentSBMLObject() == (m) )
    assert( node.isName() == 0 )
    assert( node.getReal() == 0 )
    url = node.getDefinitionURLString()
    assert( (                        "http://www.sbml.org/sbml/symbols/delay" != url ) == false )
    node = nil
    m = nil
  end

  def test_ASTNode_setType_17
    node = LibSBML::ASTNode.new(LibSBML::AST_INTEGER)
    m = LibSBML::Model.new(3,1)
    node.setId( "s")
    node.setUnits( "mole")
    node.setValue(2)
    node.setParentSBMLObject((m))
    assert( node.getType() == LibSBML::AST_INTEGER )
    assert( node.getInteger() == 2 )
    assert_equal true, util_isEqual
    assert( node.getExponent() == 0 )
    assert( node.getDenominator() == 1 )
    assert( node.getNumerator() == 2 )
    assert_equal true, util_isEqual
    id = node.getId()
    units = node.getUnits()
    assert( (  "s" != id ) == false )
    assert( (  "mole" != units ) == false )
    assert( node.getParentSBMLObject() == (m) )
    url = node.getDefinitionURLString()
    assert( (                        "" != url ) == false )
    node.setType(LibSBML::AST_FUNCTION_DELAY)
    assert( node.getType() == LibSBML::AST_FUNCTION_DELAY )
    assert( node.getInteger() == 0 )
    assert( node.getMantissa() == 0 )
    assert( node.getExponent() == 0 )
    assert( node.getDenominator() == 1 )
    assert( node.getNumerator() == 0 )
    assert_equal true, util_isEqual
    id = node.getId()
    units = node.getUnits()
    assert( (  "s" != id ) == false )
    assert( (  "" != units ) == false )
    assert( node.getParentSBMLObject() == (m) )
    url = node.getDefinitionURLString()
    assert( (                        "http://www.sbml.org/sbml/symbols/delay" != url ) == false )
    node = nil
    m = nil
  end

  def test_ASTNode_setType_18
    node = LibSBML::ASTNode.new(LibSBML::AST_PLUS)
    m = LibSBML::Model.new(3,1)
    node.setId( "s")
    node.setParentSBMLObject((m))
    assert( node.getType() == LibSBML::AST_PLUS )
    assert( node.getInteger() == 0 )
    assert( node.getMantissa() == 0 )
    assert( node.getExponent() == 0 )
    assert( node.getDenominator() == 1 )
    assert( node.getNumerator() == 0 )
    assert_equal true, util_isEqual
    id = node.getId()
    units = node.getUnits()
    assert( (  "s" != id ) == false )
    assert( (  "" != units ) == false )
    assert( node.getParentSBMLObject() == (m) )
    node.setType(LibSBML::AST_INTEGER)
    assert( node.getType() == LibSBML::AST_INTEGER )
    assert( node.getInteger() == 0 )
    assert( node.getMantissa() == 0 )
    assert( node.getExponent() == 0 )
    assert( node.getDenominator() == 1 )
    assert( node.getNumerator() == 0 )
    assert_equal true, util_isEqual
    id = node.getId()
    units = node.getUnits()
    assert( (  "s" != id ) == false )
    assert( (  "" != units ) == false )
    assert( node.getParentSBMLObject() == (m) )
    node = nil
    m = nil
  end

  def test_ASTNode_setType_19
    node = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_COS)
    m = LibSBML::Model.new(3,1)
    node.setId( "s")
    node.setParentSBMLObject((m))
    assert( node.getType() == LibSBML::AST_FUNCTION_COS )
    assert( node.getInteger() == 0 )
    assert( node.getMantissa() == 0 )
    assert( node.getExponent() == 0 )
    assert( node.getDenominator() == 1 )
    assert( node.getNumerator() == 0 )
    assert_equal true, util_isEqual
    id = node.getId()
    units = node.getUnits()
    assert( (  "s" != id ) == false )
    assert( (  "" != units ) == false )
    assert( node.getParentSBMLObject() == (m) )
    node.setType(LibSBML::AST_RATIONAL)
    assert( node.getType() == LibSBML::AST_RATIONAL )
    assert( node.getInteger() == 0 )
    assert( node.getMantissa() == 0 )
    assert( node.getExponent() == 0 )
    assert( node.getDenominator() == 1 )
    assert( node.getNumerator() == 0 )
    assert_equal true, util_isEqual
    id = node.getId()
    units = node.getUnits()
    assert( (  "s" != id ) == false )
    assert( (  "" != units ) == false )
    assert( node.getParentSBMLObject() == (m) )
    node = nil
    m = nil
  end

  def test_ASTNode_setType_2
    node = LibSBML::ASTNode.new(LibSBML::AST_INTEGER)
    m = LibSBML::Model.new(3,1)
    node.setId( "s")
    node.setUnits( "mole")
    node.setValue(1)
    node.setParentSBMLObject((m))
    assert( node.getType() == LibSBML::AST_INTEGER )
    assert( node.getInteger() == 1 )
    id = node.getId()
    units = node.getUnits()
    assert( (  "s" != id ) == false )
    assert( (  "mole" != units ) == false )
    assert( node.getParentSBMLObject() == (m) )
    node.setType(LibSBML::AST_REAL)
    assert( node.getType() == LibSBML::AST_REAL )
    assert( node.getInteger() == 0 )
    id = node.getId()
    units = node.getUnits()
    assert( (  "s" != id ) == false )
    assert( (  "mole" != units ) == false )
    assert( node.getParentSBMLObject() == (m) )
    node = nil
    m = nil
  end

  def test_ASTNode_setType_20
    node = LibSBML::ASTNode.new(LibSBML::AST_DIVIDE)
    m = LibSBML::Model.new(3,1)
    node.setId( "s")
    node.setParentSBMLObject((m))
    assert( node.getType() == LibSBML::AST_DIVIDE )
    assert( node.getInteger() == 0 )
    assert( node.getMantissa() == 0 )
    assert( node.getExponent() == 0 )
    assert( node.getDenominator() == 1 )
    assert( node.getNumerator() == 0 )
    assert_equal true, util_isEqual
    id = node.getId()
    units = node.getUnits()
    assert( (  "s" != id ) == false )
    assert( (  "" != units ) == false )
    assert( node.getParentSBMLObject() == (m) )
    node.setType(LibSBML::AST_REAL_E)
    assert( node.getType() == LibSBML::AST_REAL_E )
    assert( node.getInteger() == 0 )
    assert( node.getMantissa() == 0 )
    assert( node.getExponent() == 0 )
    assert( node.getDenominator() == 1 )
    assert( node.getNumerator() == 0 )
    assert_equal true, util_isEqual
    id = node.getId()
    units = node.getUnits()
    assert( (  "s" != id ) == false )
    assert( (  "" != units ) == false )
    assert( node.getParentSBMLObject() == (m) )
    node = nil
    m = nil
  end

  def test_ASTNode_setType_21
    node = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION)
    m = LibSBML::Model.new(3,1)
    node.setId( "s")
    node.setParentSBMLObject((m))
    assert( node.getType() == LibSBML::AST_FUNCTION )
    assert( node.getInteger() == 0 )
    assert( node.getMantissa() == 0 )
    assert( node.getExponent() == 0 )
    assert( node.getDenominator() == 1 )
    assert( node.getNumerator() == 0 )
    assert_equal true, util_isEqual
    id = node.getId()
    units = node.getUnits()
    assert( (  "s" != id ) == false )
    assert( (  "" != units ) == false )
    assert( node.getParentSBMLObject() == (m) )
    node.setType(LibSBML::AST_REAL)
    assert( node.getType() == LibSBML::AST_REAL )
    assert( node.getInteger() == 0 )
    assert( node.getMantissa() == 0 )
    assert( node.getExponent() == 0 )
    assert( node.getDenominator() == 1 )
    assert( node.getNumerator() == 0 )
    assert_equal true, util_isEqual
    id = node.getId()
    units = node.getUnits()
    assert( (  "s" != id ) == false )
    assert( (  "" != units ) == false )
    assert( node.getParentSBMLObject() == (m) )
    node = nil
    m = nil
  end

  def test_ASTNode_setType_22
    node = LibSBML::ASTNode.new(LibSBML::AST_PLUS)
    m = LibSBML::Model.new(3,1)
    node.setId( "s")
    node.setParentSBMLObject((m))
    assert( node.getType() == LibSBML::AST_PLUS )
    assert( node.getInteger() == 0 )
    assert( node.getMantissa() == 0 )
    assert( node.getExponent() == 0 )
    assert( node.getDenominator() == 1 )
    assert( node.getNumerator() == 0 )
    assert_equal true, util_isEqual
    id = node.getId()
    units = node.getUnits()
    assert( (  "s" != id ) == false )
    assert( (  "" != units ) == false )
    assert( node.getParentSBMLObject() == (m) )
    assert( node.getName() == nil )
    assert( node.isName() == 0 )
    node.setType(LibSBML::AST_NAME)
    assert( node.getType() == LibSBML::AST_NAME )
    assert( node.getInteger() == 0 )
    assert( node.getMantissa() == 0 )
    assert( node.getExponent() == 0 )
    assert( node.getDenominator() == 1 )
    assert( node.getNumerator() == 0 )
    assert_equal true, util_isEqual
    id = node.getId()
    units = node.getUnits()
    assert( (  "s" != id ) == false )
    assert( (  "" != units ) == false )
    assert( node.getParentSBMLObject() == (m) )
    assert( node.getName() == nil )
    assert( node.isName() == 1 )
    node = nil
    m = nil
  end

  def test_ASTNode_setType_23
    node = LibSBML::ASTNode.new(LibSBML::AST_PLUS)
    m = LibSBML::Model.new(3,1)
    node.setId( "s")
    node.setParentSBMLObject((m))
    assert( node.getType() == LibSBML::AST_PLUS )
    assert( node.getInteger() == 0 )
    assert( node.getMantissa() == 0 )
    assert( node.getExponent() == 0 )
    assert( node.getDenominator() == 1 )
    assert( node.getNumerator() == 0 )
    assert_equal true, util_isEqual
    id = node.getId()
    units = node.getUnits()
    assert( (  "s" != id ) == false )
    assert( (  "" != units ) == false )
    assert( node.getParentSBMLObject() == (m) )
    assert( node.isConstant() == 0 )
    node.setType(LibSBML::AST_CONSTANT_E)
    assert( node.getType() == LibSBML::AST_CONSTANT_E )
    assert( node.getInteger() == 0 )
    assert( node.getMantissa() == 0 )
    assert( node.getExponent() == 0 )
    assert( node.getDenominator() == 1 )
    assert( node.getNumerator() == 0 )
    assert_equal true, util_isEqual
    id = node.getId()
    units = node.getUnits()
    assert( (  "s" != id ) == false )
    assert( (  "" != units ) == false )
    assert( node.getParentSBMLObject() == (m) )
    assert( node.isConstant() == 1 )
    node = nil
    m = nil
  end

  def test_ASTNode_setType_24
    node = LibSBML::ASTNode.new(LibSBML::AST_PLUS)
    m = LibSBML::Model.new(3,1)
    node.setId( "s")
    node.setParentSBMLObject((m))
    assert( node.getType() == LibSBML::AST_PLUS )
    assert( node.getInteger() == 0 )
    assert( node.getMantissa() == 0 )
    assert( node.getExponent() == 0 )
    assert( node.getDenominator() == 1 )
    assert( node.getNumerator() == 0 )
    assert_equal true, util_isEqual
    id = node.getId()
    units = node.getUnits()
    assert( (  "s" != id ) == false )
    assert( (  "" != units ) == false )
    assert( node.getParentSBMLObject() == (m) )
    assert( node.getName() == nil )
    assert( node.isName() == 0 )
    url = node.getDefinitionURLString()
    assert( (  "" != url ) == false )
    assert( node.isConstant() == 0 )
    node.setType(LibSBML::AST_NAME_AVOGADRO)
    assert( node.getType() == LibSBML::AST_NAME_AVOGADRO )
    assert( node.getInteger() == 0 )
    assert_equal true, util_isEqual
    assert( node.getExponent() == 0 )
    assert( node.getDenominator() == 1 )
    assert( node.getNumerator() == 0 )
    assert_equal true, util_isEqual
    id = node.getId()
    units = node.getUnits()
    assert( (  "s" != id ) == false )
    assert( (  "" != units ) == false )
    assert( node.getParentSBMLObject() == (m) )
    assert( (  "avogadro" != node.getName() ) == false )
    assert( node.isName() == 1 )
    url = node.getDefinitionURLString()
    assert( (      "http://www.sbml.org/sbml/symbols/avogadro" != url ) == false )
    assert( node.isConstant() == 1 )
    node = nil
    m = nil
  end

  def test_ASTNode_setType_25
    node = LibSBML::ASTNode.new(LibSBML::AST_PLUS)
    m = LibSBML::Model.new(3,1)
    node.setId( "s")
    node.setParentSBMLObject((m))
    assert( node.getType() == LibSBML::AST_PLUS )
    assert( node.getInteger() == 0 )
    assert( node.getMantissa() == 0 )
    assert( node.getExponent() == 0 )
    assert( node.getDenominator() == 1 )
    assert( node.getNumerator() == 0 )
    assert_equal true, util_isEqual
    id = node.getId()
    units = node.getUnits()
    assert( (  "s" != id ) == false )
    assert( (  "" != units ) == false )
    assert( node.getParentSBMLObject() == (m) )
    assert( node.getName() == nil )
    assert( node.isName() == 0 )
    url = node.getDefinitionURLString()
    assert( (  "" != url ) == false )
    assert( node.isConstant() == 0 )
    node.setType(LibSBML::AST_NAME_TIME)
    assert( node.getType() == LibSBML::AST_NAME_TIME )
    assert( node.getInteger() == 0 )
    assert_equal true, util_isEqual
    assert( node.getExponent() == 0 )
    assert( node.getDenominator() == 1 )
    assert( node.getNumerator() == 0 )
    assert_equal true, util_isEqual
    id = node.getId()
    units = node.getUnits()
    assert( (  "s" != id ) == false )
    assert( (  "" != units ) == false )
    assert( node.getParentSBMLObject() == (m) )
    assert( node.getName() == nil )
    assert( node.isName() == 1 )
    url = node.getDefinitionURLString()
    assert( (      "http://www.sbml.org/sbml/symbols/time" != url ) == false )
    assert( node.isConstant() == 0 )
    node = nil
    m = nil
  end

  def test_ASTNode_setType_26
    node = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_DELAY)
    m = LibSBML::Model.new(3,1)
    node.setId( "s")
    node.setParentSBMLObject((m))
    assert( node.getType() == LibSBML::AST_FUNCTION_DELAY )
    assert( node.getInteger() == 0 )
    assert( node.getMantissa() == 0 )
    assert( node.getExponent() == 0 )
    assert( node.getDenominator() == 1 )
    assert( node.getNumerator() == 0 )
    assert_equal true, util_isEqual
    id = node.getId()
    units = node.getUnits()
    assert( (  "s" != id ) == false )
    assert( (  "" != units ) == false )
    assert( node.getParentSBMLObject() == (m) )
    assert( (  "delay" != node.getName() ) == false )
    assert( node.isName() == 0 )
    url = node.getDefinitionURLString()
    assert( (      "http://www.sbml.org/sbml/symbols/delay" != url ) == false )
    node.setType(LibSBML::AST_NAME_TIME)
    assert( node.getType() == LibSBML::AST_NAME_TIME )
    assert( node.getInteger() == 0 )
    assert_equal true, util_isEqual
    assert( node.getExponent() == 0 )
    assert( node.getDenominator() == 1 )
    assert( node.getNumerator() == 0 )
    assert_equal true, util_isEqual
    id = node.getId()
    units = node.getUnits()
    assert( (  "s" != id ) == false )
    assert( (  "" != units ) == false )
    assert( node.getParentSBMLObject() == (m) )
    assert( node.getName() == nil )
    assert( node.isName() == 1 )
    url = node.getDefinitionURLString()
    assert( (      "http://www.sbml.org/sbml/symbols/time" != url ) == false )
    node = nil
    m = nil
  end

  def test_ASTNode_setType_27
    m = LibSBML::Model.new(3,1)
    node = LibSBML::ASTNode.new(LibSBML::AST_PLUS)
    node.setId( "s")
    node.setParentSBMLObject((m))
    c1 = LibSBML::ASTNode.new(LibSBML::AST_NAME)
    c1.setId( "c1")
    c1.setName( "child")
    node.addChild(c1)
    c2 = LibSBML::ASTNode.new(LibSBML::AST_REAL)
    c2.setParentSBMLObject((m))
    c2.setValue(3.2)
    node.addChild(c2)
    assert( node.getType() == LibSBML::AST_PLUS )
    assert( node.getNumChildren() == 2 )
    id = node.getId()
    assert( (  "s" != id ) == false )
    assert( node.getParentSBMLObject() == (m) )
    child = node.getChild(0)
    assert( child.getType() == LibSBML::AST_NAME )
    assert( child.getNumChildren() == 0 )
    id = child.getId()
    assert( (  "c1" != id ) == false )
    assert( child.getParentSBMLObject() == nil )
    assert( (  "child" != child.getName() ) == false )
    child = node.getChild(1)
    assert( child.getType() == LibSBML::AST_REAL )
    assert( child.getNumChildren() == 0 )
    id = child.getId()
    assert( (  "" != id ) == false )
    assert( child.getParentSBMLObject() == (m) )
    assert_equal true, util_isEqual
    node.setType(LibSBML::AST_FUNCTION_COS)
    assert( node.getType() == LibSBML::AST_FUNCTION_COS )
    assert( node.getNumChildren() == 2 )
    id = node.getId()
    assert( (  "s" != id ) == false )
    assert( node.getParentSBMLObject() == (m) )
    child = node.getChild(0)
    assert( child.getType() == LibSBML::AST_NAME )
    assert( child.getNumChildren() == 0 )
    id = child.getId()
    assert( (  "c1" != id ) == false )
    assert( child.getParentSBMLObject() == nil )
    assert( (  "child" != child.getName() ) == false )
    child = node.getChild(1)
    assert( child.getType() == LibSBML::AST_REAL )
    assert( child.getNumChildren() == 0 )
    id = child.getId()
    assert( (  "" != id ) == false )
    assert( child.getParentSBMLObject() == (m) )
    assert_equal true, util_isEqual
    node = nil
    m = nil
  end

  def test_ASTNode_setType_28
    m = LibSBML::Model.new(3,1)
    node = LibSBML::ASTNode.new(LibSBML::AST_DIVIDE)
    node.setId( "s")
    node.setParentSBMLObject((m))
    c1 = LibSBML::ASTNode.new(LibSBML::AST_NAME)
    c1.setId( "c1")
    c1.setName( "child")
    node.addChild(c1)
    c2 = LibSBML::ASTNode.new(LibSBML::AST_REAL)
    c2.setParentSBMLObject((m))
    c2.setValue(3.2)
    node.addChild(c2)
    assert( node.getType() == LibSBML::AST_DIVIDE )
    assert( node.getNumChildren() == 2 )
    id = node.getId()
    assert( (  "s" != id ) == false )
    assert( node.getParentSBMLObject() == (m) )
    child = node.getChild(0)
    assert( child.getType() == LibSBML::AST_NAME )
    assert( child.getNumChildren() == 0 )
    id = child.getId()
    assert( (  "c1" != id ) == false )
    assert( child.getParentSBMLObject() == nil )
    assert( (  "child" != child.getName() ) == false )
    child = node.getChild(1)
    assert( child.getType() == LibSBML::AST_REAL )
    assert( child.getNumChildren() == 0 )
    id = child.getId()
    assert( (  "" != id ) == false )
    assert( child.getParentSBMLObject() == (m) )
    assert_equal true, util_isEqual
    node.setType(LibSBML::AST_RELATIONAL_NEQ)
    assert( node.getType() == LibSBML::AST_RELATIONAL_NEQ )
    assert( node.getNumChildren() == 2 )
    id = node.getId()
    assert( (  "s" != id ) == false )
    assert( node.getParentSBMLObject() == (m) )
    child = node.getChild(0)
    assert( child.getType() == LibSBML::AST_NAME )
    assert( child.getNumChildren() == 0 )
    id = child.getId()
    assert( (  "c1" != id ) == false )
    assert( child.getParentSBMLObject() == nil )
    assert( (  "child" != child.getName() ) == false )
    child = node.getChild(1)
    assert( child.getType() == LibSBML::AST_REAL )
    assert( child.getNumChildren() == 0 )
    id = child.getId()
    assert( (  "" != id ) == false )
    assert( child.getParentSBMLObject() == (m) )
    assert_equal true, util_isEqual
    node = nil
    m = nil
  end

  def test_ASTNode_setType_29
    m = LibSBML::Model.new(3,1)
    node = LibSBML::ASTNode.new(LibSBML::AST_DIVIDE)
    node.setId( "s")
    node.setParentSBMLObject((m))
    c1 = LibSBML::ASTNode.new(LibSBML::AST_NAME)
    c1.setId( "c1")
    c1.setName( "child")
    node.addChild(c1)
    c2 = LibSBML::ASTNode.new(LibSBML::AST_REAL)
    c2.setParentSBMLObject((m))
    c2.setValue(3.2)
    node.addChild(c2)
    assert( node.getType() == LibSBML::AST_DIVIDE )
    assert( node.getNumChildren() == 2 )
    id = node.getId()
    assert( (  "s" != id ) == false )
    assert( node.getParentSBMLObject() == (m) )
    child = node.getChild(0)
    assert( child.getType() == LibSBML::AST_NAME )
    assert( child.getNumChildren() == 0 )
    id = child.getId()
    assert( (  "c1" != id ) == false )
    assert( child.getParentSBMLObject() == nil )
    assert( (  "child" != child.getName() ) == false )
    child = node.getChild(1)
    assert( child.getType() == LibSBML::AST_REAL )
    assert( child.getNumChildren() == 0 )
    id = child.getId()
    assert( (  "" != id ) == false )
    assert( child.getParentSBMLObject() == (m) )
    assert_equal true, util_isEqual
    node.setType(LibSBML::AST_LOGICAL_OR)
    assert( node.getType() == LibSBML::AST_LOGICAL_OR )
    assert( node.getNumChildren() == 2 )
    id = node.getId()
    assert( (  "s" != id ) == false )
    assert( node.getParentSBMLObject() == (m) )
    child = node.getChild(0)
    assert( child.getType() == LibSBML::AST_NAME )
    assert( child.getNumChildren() == 0 )
    id = child.getId()
    assert( (  "c1" != id ) == false )
    assert( child.getParentSBMLObject() == nil )
    assert( (  "child" != child.getName() ) == false )
    child = node.getChild(1)
    assert( child.getType() == LibSBML::AST_REAL )
    assert( child.getNumChildren() == 0 )
    id = child.getId()
    assert( (  "" != id ) == false )
    assert( child.getParentSBMLObject() == (m) )
    assert_equal true, util_isEqual
    node = nil
    m = nil
  end

  def test_ASTNode_setType_3
    node = LibSBML::ASTNode.new(LibSBML::AST_REAL_E)
    m = LibSBML::Model.new(3,1)
    node.setId( "s")
    node.setUnits( "mole")
    node.setValue(2.3,1)
    node.setParentSBMLObject((m))
    assert( node.getType() == LibSBML::AST_REAL_E )
    assert( node.getInteger() == 0 )
    assert_equal true, util_isEqual
    assert( node.getExponent() == 1 )
    assert( node.getDenominator() == 1 )
    assert( node.getNumerator() == 0 )
    assert_equal true, util_isEqual
    id = node.getId()
    units = node.getUnits()
    assert( (  "s" != id ) == false )
    assert( (  "mole" != units ) == false )
    assert( node.getParentSBMLObject() == (m) )
    node.setType(LibSBML::AST_RATIONAL)
    assert( node.getType() == LibSBML::AST_RATIONAL )
    assert( node.getInteger() == 0 )
    assert( node.getMantissa() == 0 )
    assert( node.getExponent() == 0 )
    assert( node.getDenominator() == 1 )
    assert( node.getNumerator() == 0 )
    assert( node.getReal() == 0 )
    id = node.getId()
    units = node.getUnits()
    assert( (  "s" != id ) == false )
    assert( (  "mole" != units ) == false )
    assert( node.getParentSBMLObject() == (m) )
    node = nil
    m = nil
  end

  def test_ASTNode_setType_30
    m = LibSBML::Model.new(3,1)
    node = LibSBML::ASTNode.new(LibSBML::AST_DIVIDE)
    node.setId( "s")
    node.setParentSBMLObject((m))
    c1 = LibSBML::ASTNode.new(LibSBML::AST_NAME)
    c1.setId( "c1")
    c1.setName( "child")
    node.addChild(c1)
    c2 = LibSBML::ASTNode.new(LibSBML::AST_REAL)
    c2.setParentSBMLObject((m))
    c2.setValue(3.2)
    node.addChild(c2)
    assert( node.getType() == LibSBML::AST_DIVIDE )
    assert( node.getNumChildren() == 2 )
    id = node.getId()
    assert( (  "s" != id ) == false )
    assert( node.getParentSBMLObject() == (m) )
    child = node.getChild(0)
    assert( child.getType() == LibSBML::AST_NAME )
    assert( child.getNumChildren() == 0 )
    id = child.getId()
    assert( (  "c1" != id ) == false )
    assert( child.getParentSBMLObject() == nil )
    assert( (  "child" != child.getName() ) == false )
    child = node.getChild(1)
    assert( child.getType() == LibSBML::AST_REAL )
    assert( child.getNumChildren() == 0 )
    id = child.getId()
    assert( (  "" != id ) == false )
    assert( child.getParentSBMLObject() == (m) )
    assert_equal true, util_isEqual
    node.setType(LibSBML::AST_FUNCTION)
    assert( node.getType() == LibSBML::AST_FUNCTION )
    assert( node.getNumChildren() == 2 )
    id = node.getId()
    assert( (  "s" != id ) == false )
    assert( node.getParentSBMLObject() == (m) )
    child = node.getChild(0)
    assert( child.getType() == LibSBML::AST_NAME )
    assert( child.getNumChildren() == 0 )
    id = child.getId()
    assert( (  "c1" != id ) == false )
    assert( child.getParentSBMLObject() == nil )
    assert( (  "child" != child.getName() ) == false )
    child = node.getChild(1)
    assert( child.getType() == LibSBML::AST_REAL )
    assert( child.getNumChildren() == 0 )
    id = child.getId()
    assert( (  "" != id ) == false )
    assert( child.getParentSBMLObject() == (m) )
    assert_equal true, util_isEqual
    node = nil
    m = nil
  end

  def test_ASTNode_setType_31
    m = LibSBML::Model.new(3,1)
    node = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION_DELAY)
    node.setId( "s")
    node.setParentSBMLObject((m))
    c1 = LibSBML::ASTNode.new(LibSBML::AST_NAME)
    c1.setId( "c1")
    c1.setName( "child")
    node.addChild(c1)
    c2 = LibSBML::ASTNode.new(LibSBML::AST_REAL)
    c2.setParentSBMLObject((m))
    c2.setValue(3.2)
    node.addChild(c2)
    assert( node.getType() == LibSBML::AST_FUNCTION_DELAY )
    assert( node.getNumChildren() == 2 )
    id = node.getId()
    assert( (  "s" != id ) == false )
    assert( node.getParentSBMLObject() == (m) )
    assert( (  "delay" != node.getName() ) == false )
    url = node.getDefinitionURLString()
    assert( (      "http://www.sbml.org/sbml/symbols/delay" != url ) == false )
    child = node.getChild(0)
    assert( child.getType() == LibSBML::AST_NAME )
    assert( child.getNumChildren() == 0 )
    id = child.getId()
    assert( (  "c1" != id ) == false )
    assert( child.getParentSBMLObject() == nil )
    assert( (  "child" != child.getName() ) == false )
    child = node.getChild(1)
    assert( child.getType() == LibSBML::AST_REAL )
    assert( child.getNumChildren() == 0 )
    id = child.getId()
    assert( (  "" != id ) == false )
    assert( child.getParentSBMLObject() == (m) )
    assert_equal true, util_isEqual
    node.setType(LibSBML::AST_FUNCTION)
    assert( node.getType() == LibSBML::AST_FUNCTION )
    assert( node.getNumChildren() == 2 )
    id = node.getId()
    assert( (  "s" != id ) == false )
    assert( node.getParentSBMLObject() == (m) )
    assert( node.getName() == nil )
    url = node.getDefinitionURLString()
    assert( (      "http://www.sbml.org/sbml/symbols/delay" != url ) == false )
    child = node.getChild(0)
    assert( child.getType() == LibSBML::AST_NAME )
    assert( child.getNumChildren() == 0 )
    id = child.getId()
    assert( (  "c1" != id ) == false )
    assert( child.getParentSBMLObject() == nil )
    assert( (  "child" != child.getName() ) == false )
    child = node.getChild(1)
    assert( child.getType() == LibSBML::AST_REAL )
    assert( child.getNumChildren() == 0 )
    id = child.getId()
    assert( (  "" != id ) == false )
    assert( child.getParentSBMLObject() == (m) )
    assert_equal true, util_isEqual
    node = nil
    m = nil
  end

  def test_ASTNode_setType_32
    m = LibSBML::Model.new(3,1)
    node = LibSBML::ASTNode.new(LibSBML::AST_DIVIDE)
    node.setId( "s")
    node.setParentSBMLObject((m))
    c1 = LibSBML::ASTNode.new(LibSBML::AST_NAME)
    c1.setId( "c1")
    c1.setName( "child")
    node.addChild(c1)
    c2 = LibSBML::ASTNode.new(LibSBML::AST_REAL)
    c2.setParentSBMLObject((m))
    c2.setValue(3.2)
    node.addChild(c2)
    assert( node.getType() == LibSBML::AST_DIVIDE )
    assert( node.getNumChildren() == 2 )
    id = node.getId()
    assert( (  "s" != id ) == false )
    assert( node.getParentSBMLObject() == (m) )
    child = node.getChild(0)
    assert( child.getType() == LibSBML::AST_NAME )
    assert( child.getNumChildren() == 0 )
    id = child.getId()
    assert( (  "c1" != id ) == false )
    assert( child.getParentSBMLObject() == nil )
    assert( (  "child" != child.getName() ) == false )
    child = node.getChild(1)
    assert( child.getType() == LibSBML::AST_REAL )
    assert( child.getNumChildren() == 0 )
    id = child.getId()
    assert( (  "" != id ) == false )
    assert( child.getParentSBMLObject() == (m) )
    assert_equal true, util_isEqual
    node.setType(LibSBML::AST_LAMBDA)
    assert( node.getType() == LibSBML::AST_LAMBDA )
    assert( node.getNumChildren() == 2 )
    id = node.getId()
    assert( (  "s" != id ) == false )
    assert( node.getParentSBMLObject() == (m) )
    child = node.getChild(0)
    assert( child.getType() == LibSBML::AST_NAME )
    assert( child.getNumChildren() == 0 )
    id = child.getId()
    assert( (  "c1" != id ) == false )
    assert( child.getParentSBMLObject() == nil )
    assert( (  "child" != child.getName() ) == false )
    child = node.getChild(1)
    assert( child.getType() == LibSBML::AST_REAL )
    assert( child.getNumChildren() == 0 )
    id = child.getId()
    assert( (  "" != id ) == false )
    assert( child.getParentSBMLObject() == (m) )
    assert_equal true, util_isEqual
    node = nil
    m = nil
  end

  def test_ASTNode_setType_33
    m = LibSBML::Model.new(3,1)
    node = LibSBML::ASTNode.new(LibSBML::AST_DIVIDE)
    node.setId( "s")
    node.setParentSBMLObject((m))
    c1 = LibSBML::ASTNode.new(LibSBML::AST_NAME)
    c1.setId( "c1")
    c1.setName( "child")
    node.addChild(c1)
    c2 = LibSBML::ASTNode.new(LibSBML::AST_REAL)
    c2.setParentSBMLObject((m))
    c2.setValue(3.2)
    node.addChild(c2)
    assert( node.getType() == LibSBML::AST_DIVIDE )
    assert( node.getNumChildren() == 2 )
    id = node.getId()
    assert( (  "s" != id ) == false )
    assert( node.getParentSBMLObject() == (m) )
    child = node.getChild(0)
    assert( child.getType() == LibSBML::AST_NAME )
    assert( child.getNumChildren() == 0 )
    id = child.getId()
    assert( (  "c1" != id ) == false )
    assert( child.getParentSBMLObject() == nil )
    assert( (  "child" != child.getName() ) == false )
    child = node.getChild(1)
    assert( child.getType() == LibSBML::AST_REAL )
    assert( child.getNumChildren() == 0 )
    id = child.getId()
    assert( (  "" != id ) == false )
    assert( child.getParentSBMLObject() == (m) )
    assert_equal true, util_isEqual
    node.setType(LibSBML::AST_FUNCTION_PIECEWISE)
    assert( node.getType() == LibSBML::AST_FUNCTION_PIECEWISE )
    assert( node.getNumChildren() == 2 )
    id = node.getId()
    assert( (  "s" != id ) == false )
    assert( node.getParentSBMLObject() == (m) )
    child = node.getChild(0)
    assert( child.getType() == LibSBML::AST_NAME )
    assert( child.getNumChildren() == 0 )
    id = child.getId()
    assert( (  "c1" != id ) == false )
    assert( child.getParentSBMLObject() == nil )
    assert( (  "child" != child.getName() ) == false )
    child = node.getChild(1)
    assert( child.getType() == LibSBML::AST_REAL )
    assert( child.getNumChildren() == 0 )
    id = child.getId()
    assert( (  "" != id ) == false )
    assert( child.getParentSBMLObject() == (m) )
    assert_equal true, util_isEqual
    node = nil
    m = nil
  end

  def test_ASTNode_setType_34
    m = LibSBML::Model.new(3,1)
    node = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION)
    node.setId( "s")
    node.setParentSBMLObject((m))
    node.setName( "my_func")
    node.setDefinitionURLString( "my_url")
    c1 = LibSBML::ASTNode.new(LibSBML::AST_NAME)
    c1.setId( "c1")
    c1.setName( "child")
    node.addChild(c1)
    c2 = LibSBML::ASTNode.new(LibSBML::AST_REAL)
    c2.setParentSBMLObject((m))
    c2.setValue(3.2)
    node.addChild(c2)
    assert( node.getType() == LibSBML::AST_FUNCTION )
    assert( node.getNumChildren() == 2 )
    id = node.getId()
    assert( (  "s" != id ) == false )
    assert( node.getParentSBMLObject() == (m) )
    assert( (  "my_func" != node.getName() ) == false )
    url = node.getDefinitionURLString()
    assert( (      "my_url" != url ) == false )
    child = node.getChild(0)
    assert( child.getType() == LibSBML::AST_NAME )
    assert( child.getNumChildren() == 0 )
    id = child.getId()
    assert( (  "c1" != id ) == false )
    assert( child.getParentSBMLObject() == nil )
    assert( (  "child" != child.getName() ) == false )
    child = node.getChild(1)
    assert( child.getType() == LibSBML::AST_REAL )
    assert( child.getNumChildren() == 0 )
    id = child.getId()
    assert( (  "" != id ) == false )
    assert( child.getParentSBMLObject() == (m) )
    assert_equal true, util_isEqual
    node.setType(LibSBML::AST_FUNCTION_DELAY)
    assert( node.getType() == LibSBML::AST_FUNCTION_DELAY )
    assert( node.getNumChildren() == 2 )
    id = node.getId()
    assert( (  "s" != id ) == false )
    assert( node.getParentSBMLObject() == (m) )
    assert( (  "my_func" != node.getName() ) == false )
    url = node.getDefinitionURLString()
    assert( (      "http://www.sbml.org/sbml/symbols/delay" != url ) == false )
    child = node.getChild(0)
    assert( child.getType() == LibSBML::AST_NAME )
    assert( child.getNumChildren() == 0 )
    id = child.getId()
    assert( (  "c1" != id ) == false )
    assert( child.getParentSBMLObject() == nil )
    assert( (  "child" != child.getName() ) == false )
    child = node.getChild(1)
    assert( child.getType() == LibSBML::AST_REAL )
    assert( child.getNumChildren() == 0 )
    id = child.getId()
    assert( (  "" != id ) == false )
    assert( child.getParentSBMLObject() == (m) )
    assert_equal true, util_isEqual
    node = nil
    m = nil
  end

  def test_ASTNode_setType_35
    m = LibSBML::Model.new(3,1)
    node = LibSBML::ASTNode.new(LibSBML::AST_FUNCTION)
    node.setId( "s")
    node.setParentSBMLObject((m))
    node.setName( "my_func")
    node.setDefinitionURLString( "my_url")
    c1 = LibSBML::ASTNode.new(LibSBML::AST_NAME)
    c1.setId( "c1")
    c1.setName( "child")
    node.addChild(c1)
    c2 = LibSBML::ASTNode.new(LibSBML::AST_REAL)
    c2.setParentSBMLObject((m))
    c2.setValue(3.2)
    node.addChild(c2)
    assert( node.getType() == LibSBML::AST_FUNCTION )
    assert( node.getNumChildren() == 2 )
    id = node.getId()
    assert( (  "s" != id ) == false )
    assert( node.getParentSBMLObject() == (m) )
    assert( (  "my_func" != node.getName() ) == false )
    url = node.getDefinitionURLString()
    assert( (      "my_url" != url ) == false )
    child = node.getChild(0)
    assert( child.getType() == LibSBML::AST_NAME )
    assert( child.getNumChildren() == 0 )
    id = child.getId()
    assert( (  "c1" != id ) == false )
    assert( child.getParentSBMLObject() == nil )
    assert( (  "child" != child.getName() ) == false )
    child = node.getChild(1)
    assert( child.getType() == LibSBML::AST_REAL )
    assert( child.getNumChildren() == 0 )
    id = child.getId()
    assert( (  "" != id ) == false )
    assert( child.getParentSBMLObject() == (m) )
    assert_equal true, util_isEqual
    node.setType(LibSBML::AST_LAMBDA)
    assert( node.getType() == LibSBML::AST_LAMBDA )
    assert( node.getNumChildren() == 2 )
    id = node.getId()
    assert( (  "s" != id ) == false )
    assert( node.getParentSBMLObject() == (m) )
    assert( (  "my_func" != node.getName() ) == false )
    url = node.getDefinitionURLString()
    assert( (  "" != url ) == false )
    child = node.getChild(0)
    assert( child.getType() == LibSBML::AST_NAME )
    assert( child.getNumChildren() == 0 )
    id = child.getId()
    assert( (  "c1" != id ) == false )
    assert( child.getParentSBMLObject() == nil )
    assert( (  "child" != child.getName() ) == false )
    child = node.getChild(1)
    assert( child.getType() == LibSBML::AST_REAL )
    assert( child.getNumChildren() == 0 )
    id = child.getId()
    assert( (  "" != id ) == false )
    assert( child.getParentSBMLObject() == (m) )
    assert_equal true, util_isEqual
    node = nil
    m = nil
  end

  def test_ASTNode_setType_36
    m = LibSBML::Model.new(3,2)
    node = LibSBML::ASTNode.new(LibSBML::AST_DIVIDE)
    node.setId( "s")
    node.setParentSBMLObject((m))
    c1 = LibSBML::ASTNode.new(LibSBML::AST_NAME)
    c1.setId( "c1")
    c1.setName( "child")
    node.addChild(c1)
    c2 = LibSBML::ASTNode.new(LibSBML::AST_REAL)
    c2.setParentSBMLObject((m))
    c2.setValue(3.2)
    node.addChild(c2)
    assert( node.getType() == LibSBML::AST_DIVIDE )
    assert( node.getNumChildren() == 2 )
    id = node.getId()
    assert( (  "s" != id ) == false )
    assert( node.getParentSBMLObject() == (m) )
    child = node.getChild(0)
    assert( child.getType() == LibSBML::AST_NAME )
    assert( child.getNumChildren() == 0 )
    id = child.getId()
    assert( (  "c1" != id ) == false )
    assert( child.getParentSBMLObject() == nil )
    assert( (  "child" != child.getName() ) == false )
    child = node.getChild(1)
    assert( child.getType() == LibSBML::AST_REAL )
    assert( child.getNumChildren() == 0 )
    id = child.getId()
    assert( (  "" != id ) == false )
    assert( child.getParentSBMLObject() == (m) )
    assert_equal true, util_isEqual
    node.setType(LibSBML::AST_FUNCTION_MAX)
    assert( node.getType() == LibSBML::AST_FUNCTION_MAX )
    assert( node.getNumChildren() == 2 )
    id = node.getId()
    assert( (  "s" != id ) == false )
    assert( node.getParentSBMLObject() == (m) )
    child = node.getChild(0)
    assert( child.getType() == LibSBML::AST_NAME )
    assert( child.getNumChildren() == 0 )
    id = child.getId()
    assert( (  "c1" != id ) == false )
    assert( child.getParentSBMLObject() == nil )
    assert( (  "child" != child.getName() ) == false )
    child = node.getChild(1)
    assert( child.getType() == LibSBML::AST_REAL )
    assert( child.getNumChildren() == 0 )
    id = child.getId()
    assert( (  "" != id ) == false )
    assert( child.getParentSBMLObject() == (m) )
    assert_equal true, util_isEqual
    node = nil
    m = nil
  end

  def test_ASTNode_setType_4
    node = LibSBML::ASTNode.new(LibSBML::AST_NAME_TIME)
    m = LibSBML::Model.new(3,1)
    node.setId( "s")
    node.setName( "t")
    node.setParentSBMLObject((m))
    assert( node.getType() == LibSBML::AST_NAME_TIME )
    id = node.getId()
    assert( (  "s" != id ) == false )
    assert( (  "t" != node.getName() ) == false )
    assert( node.getParentSBMLObject() == (m) )
    assert( node.isConstant() == 0 )
    assert( node.isName() == 1 )
    assert( node.getReal() == 0 )
    url = node.getDefinitionURLString()
    assert( (                        "http://www.sbml.org/sbml/symbols/time" != url ) == false )
    node.setType(LibSBML::AST_NAME_AVOGADRO)
    assert( node.getType() == LibSBML::AST_NAME_AVOGADRO )
    assert_equal true, util_isEqual
    id = node.getId()
    assert( (  "s" != id ) == false )
    assert( (  "t" != node.getName() ) == false )
    assert( node.getParentSBMLObject() == (m) )
    assert( node.isConstant() == 1 )
    assert( node.isName() == 1 )
    url = node.getDefinitionURLString()
    assert( (                        "http://www.sbml.org/sbml/symbols/avogadro" != url ) == false )
    node = nil
    m = nil
  end

  def test_ASTNode_setType_5
    node = LibSBML::ASTNode.new(LibSBML::AST_CONSTANT_PI)
    m = LibSBML::Model.new(3,1)
    node.setId( "s")
    node.setParentSBMLObject((m))
    assert( node.getType() == LibSBML::AST_CONSTANT_PI )
    id = node.getId()
    assert( (  "s" != id ) == false )
    assert( node.getParentSBMLObject() == (m) )
    assert( node.isConstant() == 1 )
    assert( node.getInteger() == 0 )
    node.setType(LibSBML::AST_INTEGER)
    assert( node.getType() == LibSBML::AST_INTEGER )
    assert( node.getInteger() == 0 )
    id = node.getId()
    assert( (  "s" != id ) == false )
    assert( node.getParentSBMLObject() == (m) )
    assert( node.isConstant() == 0 )
    node = nil
    m = nil
  end

  def test_ASTNode_setType_6
    node = LibSBML::ASTNode.new(LibSBML::AST_NAME)
    m = LibSBML::Model.new(3,1)
    node.setId( "s")
    node.setParentSBMLObject((m))
    node.setDefinitionURLString( "my_url")
    node.setName( "t")
    assert( node.getType() == LibSBML::AST_NAME )
    id = node.getId()
    assert( (  "s" != id ) == false )
    assert( node.getParentSBMLObject() == (m) )
    assert( node.isName() == 1 )
    assert( (  "t" != node.getName() ) == false )
    url = node.getDefinitionURLString()
    assert( (  "my_url" != url ) == false )
    node.setType(LibSBML::AST_INTEGER)
    assert( node.getType() == LibSBML::AST_INTEGER )
    assert( node.getInteger() == 0 )
    id = node.getId()
    assert( (  "s" != id ) == false )
    assert( node.getParentSBMLObject() == (m) )
    assert( node.isName() == 0 )
    assert( node.getName() == nil )
    url = node.getDefinitionURLString()
    assert( (  "" != url ) == false )
    node = nil
    m = nil
  end

  def test_ASTNode_setType_7
    node = LibSBML::ASTNode.new(LibSBML::AST_NAME_TIME)
    m = LibSBML::Model.new(3,1)
    node.setId( "s")
    node.setName( "t")
    node.setParentSBMLObject((m))
    assert( node.getType() == LibSBML::AST_NAME_TIME )
    id = node.getId()
    assert( (  "s" != id ) == false )
    assert( (  "t" != node.getName() ) == false )
    assert( node.getParentSBMLObject() == (m) )
    assert( node.isName() == 1 )
    assert( node.getReal() == 0 )
    url = node.getDefinitionURLString()
    assert( (                        "http://www.sbml.org/sbml/symbols/time" != url ) == false )
    node.setType(LibSBML::AST_REAL)
    assert( node.getType() == LibSBML::AST_REAL )
    id = node.getId()
    assert( (  "s" != id ) == false )
    assert( node.getName() == nil )
    assert( node.getParentSBMLObject() == (m) )
    assert( node.isName() == 0 )
    assert( node.getReal() == 0 )
    url = node.getDefinitionURLString()
    assert( (                        "" != url ) == false )
    node = nil
    m = nil
  end

  def test_ASTNode_setType_8
    node = LibSBML::ASTNode.new(LibSBML::AST_REAL_E)
    m = LibSBML::Model.new(3,1)
    node.setId( "s")
    node.setUnits( "mole")
    node.setValue(2.3,1)
    node.setParentSBMLObject((m))
    assert( node.getType() == LibSBML::AST_REAL_E )
    assert( node.getInteger() == 0 )
    assert_equal true, util_isEqual
    assert( node.getExponent() == 1 )
    assert( node.getDenominator() == 1 )
    assert( node.getNumerator() == 0 )
    assert_equal true, util_isEqual
    id = node.getId()
    units = node.getUnits()
    assert( (  "s" != id ) == false )
    assert( (  "mole" != units ) == false )
    assert( node.getParentSBMLObject() == (m) )
    url = node.getDefinitionURLString()
    assert( (                        "" != url ) == false )
    node.setType(LibSBML::AST_NAME_AVOGADRO)
    assert( node.getType() == LibSBML::AST_NAME_AVOGADRO )
    assert( node.getInteger() == 0 )
    assert_equal true, util_isEqual
    assert( node.getExponent() == 0 )
    assert( node.getDenominator() == 1 )
    assert( node.getNumerator() == 0 )
    assert_equal true, util_isEqual
    id = node.getId()
    units = node.getUnits()
    assert( (  "s" != id ) == false )
    assert( (  "" != units ) == false )
    assert( node.getParentSBMLObject() == (m) )
    url = node.getDefinitionURLString()
    assert( (                        "http://www.sbml.org/sbml/symbols/avogadro" != url ) == false )
    node = nil
    m = nil
  end

  def test_ASTNode_setType_9
    node = LibSBML::ASTNode.new(LibSBML::AST_REAL_E)
    m = LibSBML::Model.new(3,1)
    node.setId( "s")
    node.setUnits( "mole")
    node.setValue(2.3,1)
    node.setParentSBMLObject((m))
    assert( node.getType() == LibSBML::AST_REAL_E )
    assert( node.getInteger() == 0 )
    assert_equal true, util_isEqual
    assert( node.getExponent() == 1 )
    assert( node.getDenominator() == 1 )
    assert( node.getNumerator() == 0 )
    assert_equal true, util_isEqual
    id = node.getId()
    units = node.getUnits()
    assert( (  "s" != id ) == false )
    assert( (  "mole" != units ) == false )
    assert( node.getParentSBMLObject() == (m) )
    node.setType(LibSBML::AST_NAME)
    assert( node.getType() == LibSBML::AST_NAME )
    assert( node.getInteger() == 0 )
    assert( node.getMantissa() == 0 )
    assert( node.getExponent() == 0 )
    assert( node.getDenominator() == 1 )
    assert( node.getNumerator() == 0 )
    assert_equal true, util_isEqual
    id = node.getId()
    units = node.getUnits()
    assert( (  "s" != id ) == false )
    assert( (  "" != units ) == false )
    assert( node.getParentSBMLObject() == (m) )
    node = nil
    m = nil
  end

  def test_ASTNode_style
    n = LibSBML::ASTNode.new()
    i = n.setStyle( "test")
    assert( i == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( n.isSetStyle() == 1 )
    style = n.getStyle()
    assert ((  "test" == style ))
    i = n.unsetStyle()
    assert( i == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( n.isSetStyle() == 0 )
    style = n.getStyle()
    assert ((  "" == style ))
    n = nil
  end

  def test_ASTNode_swapChildren
    node = LibSBML::ASTNode.new()
    c1 = LibSBML::ASTNode.new()
    c2 = LibSBML::ASTNode.new()
    node_1 = LibSBML::ASTNode.new()
    c1_1 = LibSBML::ASTNode.new()
    c2_1 = LibSBML::ASTNode.new()
    i = 0
    node.setType(LibSBML::AST_LOGICAL_AND)
    c1.setName( "a")
    c2.setName( "b")
    node.addChild(c1)
    node.addChild(c2)
    assert( node.getNumChildren() == 2 )
    math = LibSBML::formulaToString(node)
    assert ((  "and(a, b)" == math ))
    node_1.setType(LibSBML::AST_LOGICAL_AND)
    c1_1.setName( "d")
    c2_1.setName( "f")
    node_1.addChild(c1_1)
    node_1.addChild(c2_1)
    assert( node_1.getNumChildren() == 2 )
    math = LibSBML::formulaToString(node_1)
    assert ((  "and(d, f)" == math ))
    i = node.swapChildren(node_1)
    assert( i == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( node.getNumChildren() == 2 )
    math = LibSBML::formulaToString(node)
    assert ((  "and(d, f)" == math ))
    assert( node_1.getNumChildren() == 2 )
    math = LibSBML::formulaToString(node_1)
    assert ((  "and(a, b)" == math ))
    node_1 = nil
    node = nil
  end

  def test_ASTNode_units
    n = LibSBML::ASTNode.new()
    n.setType(LibSBML::AST_REAL)
    n.setValue(1.6)
    i = n.setUnits( "mole")
    assert( i == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( n.isSetUnits() == true )
    units = n.getUnits()
    assert ((  "mole" == units ))
    i = n.unsetUnits()
    assert( i == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( n.isSetUnits() == false )
    units = n.getUnits()
    assert ((  "" == units ))
    i = n.setUnits( "1mole")
    assert( i == LibSBML::LIBSBML_INVALID_ATTRIBUTE_VALUE )
    assert( n.isSetUnits() == false )
    n.setType(LibSBML::AST_FUNCTION)
    i = n.setUnits( "mole")
    assert( i == LibSBML::LIBSBML_UNEXPECTED_ATTRIBUTE )
    assert( n.isSetUnits() == false )
    units = n.getUnits()
    assert ((  "" == units ))
    n = nil
  end

  def test_ASTNode_userData_1
    n = LibSBML::ASTNode.new()
    m = LibSBML::Model.new(3,1)
    assert( n.getUserData() == nil )
    assert( n.isSetUserData() == 0 )
    i = n.setUserData((m))
    assert( i == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( n.getUserData() != nil )
    assert( n.getUserData() == m )
    assert( n.isSetUserData() == 1 )
    i = n.setUserData(nil)
    assert( i == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( n.getUserData() == nil )
    assert( n.isSetUserData() == 0 )
    n = nil
    m = nil
  end

end
