# @file    TestSBMLValidators.rb
# @brief   unit tests for SBMLValidator, SBMLInternalValidator and SBMLExternalValidator
#
# @author  Akiya Jouraku (Ruby conversion)
# @author  Frank Bergmann 
# 
# ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
#
# DO NOT EDIT THIS FILE.
#
# This file was generated automatically by converting the file located at
# src/sbml/test/TestSBMLValidators.cpp
# using the conversion program dev/utilities/translateTests/translateTests.pl.
# Any changes made here will be lost the next time the file is regenerated.
#
# -----------------------------------------------------------------------------
# This file is part of libSBML.  Please visit http://sbml.org for more
# information about SBML, and the latest version of libSBML.
#
# Copyright 2005-2010 California Institute of Technology.
# Copyright 2002-2005 California Institute of Technology and
#                     Japan Science and Technology Corporation.
# 
# This library is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation.  A copy of the license agreement is provided
# in the file named "LICENSE.txt" included with this software distribution
# and also available online as http://sbml.org/software/libsbml/license.html
# -----------------------------------------------------------------------------
require 'test/unit'
require 'libSBML'

class TestSBMLValidators < Test::Unit::TestCase

  def test_SBMLValidators_create
    validator.setDocument(nil)
    assert( validator.getDocument() == nil )
    assert( validator.getModel() == nil )
    assert( validator.getErrorLog() == nil )
    assert( validator.getFailures().size() == 0 )
    validator.logFailure(LibSBML::SBMLError.new())
    assert( validator.getFailures().size() == 1 )
    validator.clearFailures()
    doc = LibSBML::SBMLDocument.new()
    doc.createModel()
    validator.setDocument(doc)
    assert( validator.getDocument() != nil )
    assert( validator.getModel() != nil )
    assert( validator.getErrorLog() != nil )
    assert( validator.getFailures().size() == 0 )
    assert( validator.validate() == 0 )
  end

  def test_SBMLValidators_internal
    validator.setDocument(nil)
    assert( validator.getDocument() == nil )
    assert( validator.getModel() == nil )
    assert( validator.getErrorLog() == nil )
    assert( validator.getFailures().size() == 0 )
    validator.logFailure(LibSBML::SBMLError.new())
    assert( validator.getFailures().size() == 1 )
    validator.clearFailures()
    doc = LibSBML::SBMLDocument.new()
    doc.createModel()
    validator.setDocument(doc)
    assert( validator.getDocument() != nil )
    assert( validator.getModel() != nil )
    assert( validator.getErrorLog() != nil )
    assert( validator.getFailures().size() == 0 )
    assert( validator.validate() == 0 )
  end

end
