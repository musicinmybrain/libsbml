# @file    TestAttributeFunctions.rb
# @brief   Attribute function tests
#
# @author  Akiya Jouraku (Ruby conversion)
# @author  Sarah Keating 
# 
# ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
#
# DO NOT EDIT THIS FILE.
#
# This file was generated automatically by converting the file located at
# src/sbml/test/TestAttributeFunctions.cpp
# using the conversion program dev/utilities/translateTests/translateTests.pl.
# Any changes made here will be lost the next time the file is regenerated.
#
# -----------------------------------------------------------------------------
# This file is part of libSBML.  Please visit http://sbml.org for more
# information about SBML, and the latest version of libSBML.
#
# Copyright 2005-2010 California Institute of Technology.
# Copyright 2002-2005 California Institute of Technology and
#                     Japan Science and Technology Corporation.
# 
# This library is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation.  A copy of the license agreement is provided
# in the file named "LICENSE.txt" included with this software distribution
# and also available online as http://sbml.org/software/libsbml/license.html
# -----------------------------------------------------------------------------
require 'test/unit'
require 'libSBML'

class TestAttributeFunctions < Test::Unit::TestCase

  def setup
    @@s = LibSBML::Model.new(2,4)
    if (@@s == nil)
    end
  end

  def teardown
    @@s = nil
  end

  def test_Attributes_AssignmentRule_variable
    obj = LibSBML::AssignmentRule.new(3,1)
    initialValue =  "string";
    result = obj.setAttribute("variable",initialValue)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.getVariable() == initialValue )
    assert( obj.isSetVariable() == true )
    assert( obj.isSetAttribute("variable") == true )
    result = obj.getAttribute("variable",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == initialValue )
    otherValue = obj.getAttribute < string > "variable"
    assert( otherValue == initialValue )
    result = obj.unsetAttribute("variable")
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.isSetVariable() == false )
    assert( obj.isSetAttribute("variable") == false )
    result = obj.getAttribute("variable",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert_equal true, value.empty()
    obj = nil
  end

  def test_Attributes_Compartment_constant
    obj = LibSBML::Compartment.new(3,1)
    initialValue = true
    result = obj.setAttribute("constant",initialValue)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.getConstant() == initialValue )
    assert( obj.isSetConstant() == true )
    assert( obj.isSetAttribute("constant") == true )
    result = obj.getAttribute("constant",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == initialValue )
    otherValue = obj.getAttribute < bool > "constant"
    assert( otherValue == initialValue )
    result = obj.unsetAttribute("constant")
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.isSetConstant() == false )
    assert( obj.isSetAttribute("constant") == false )
    result = obj.getAttribute("constant",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == true )
    obj = nil
  end

  def test_Attributes_Compartment_size
    obj = LibSBML::Compartment.new(3,1)
    initialValue = 3.6
    result = obj.setAttribute("size",initialValue)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert_equal true, util_isEqual
    assert( obj.isSetSize() == true )
    assert( obj.isSetAttribute("size") == true )
    result = obj.getAttribute("size",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert_equal true, util_isEqual
    otherValue = obj.getAttribute < double > "size"
    assert_equal true, util_isEqual
    result = obj.unsetAttribute("size")
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.isSetSize() == false )
    assert( obj.isSetAttribute("size") == false )
    result = obj.getAttribute("size",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert_equal true, util_isNaN
    obj = nil
  end

  def test_Attributes_Compartment_spatialDimensions
    obj = LibSBML::Compartment.new(3,1)
    initialValue = 2
    result = obj.setAttribute("spatialDimensions",initialValue)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.getSpatialDimensions() == initialValue )
    assert( obj.isSetSpatialDimensions() == true )
    assert( obj.isSetAttribute("spatialDimensions") == true )
    result = obj.getAttribute("spatialDimensions",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == initialValue )
    otherValue = obj.getAttribute < unsignedint > "spatialDimensions"
    assert( otherValue == initialValue )
    result = obj.unsetAttribute("spatialDimensions")
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.isSetSpatialDimensions() == false )
    assert( obj.isSetAttribute("spatialDimensions") == false )
    result = obj.getAttribute("spatialDimensions",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == 0 )
    obj = nil
  end

  def test_Attributes_Compartment_spatialDimensions_double
    obj = LibSBML::Compartment.new(3,1)
    initialValue = 2.7
    result = obj.setAttribute("spatialDimensions",initialValue)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert_equal true, util_isEqual
    assert( obj.isSetSpatialDimensions() == true )
    assert( obj.isSetAttribute("spatialDimensions") == true )
    result = obj.getAttribute("spatialDimensions",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert_equal true, util_isEqual
    otherValue = obj.getAttribute < double > "spatialDimensions"
    assert( otherValue == initialValue )
    result = obj.unsetAttribute("spatialDimensions")
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.isSetSpatialDimensions() == false )
    assert( obj.isSetAttribute("spatialDimensions") == false )
    result = obj.getAttribute("spatialDimensions",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert_equal true, util_isNaN
    obj = nil
  end

  def test_Attributes_Compartment_units
    obj = LibSBML::Compartment.new(3,1)
    initialValue =  "string";
    result = obj.setAttribute("units",initialValue)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.getUnits() == initialValue )
    assert( obj.isSetUnits() == true )
    assert( obj.isSetAttribute("units") == true )
    result = obj.getAttribute("units",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == initialValue )
    otherValue = obj.getAttribute < string > "units"
    assert( otherValue == initialValue )
    result = obj.unsetAttribute("units")
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.isSetUnits() == false )
    assert( obj.isSetAttribute("units") == false )
    result = obj.getAttribute("units",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert_equal true, value.empty()
    obj = nil
  end

  def test_Attributes_EventAssignment_variable
    obj = LibSBML::EventAssignment.new(3,1)
    initialValue =  "string";
    result = obj.setAttribute("variable",initialValue)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.getVariable() == initialValue )
    assert( obj.isSetVariable() == true )
    assert( obj.isSetAttribute("variable") == true )
    result = obj.getAttribute("variable",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == initialValue )
    otherValue = obj.getAttribute < string > "variable"
    assert( otherValue == initialValue )
    result = obj.unsetAttribute("variable")
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.isSetVariable() == false )
    assert( obj.isSetAttribute("variable") == false )
    result = obj.getAttribute("variable",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert_equal true, value.empty()
    obj = nil
  end

  def test_Attributes_Event_timeUnits
    obj = LibSBML::Event.new(3,1)
    initialValue =  "string";
    result = obj.setAttribute("timeUnits",initialValue)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.getTimeUnits() == initialValue )
    assert( obj.isSetTimeUnits() == true )
    assert( obj.isSetAttribute("timeUnits") == true )
    result = obj.getAttribute("timeUnits",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == initialValue )
    otherValue = obj.getAttribute < string > "timeUnits"
    assert( otherValue == initialValue )
    result = obj.unsetAttribute("timeUnits")
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.isSetTimeUnits() == false )
    assert( obj.isSetAttribute("timeUnits") == false )
    result = obj.getAttribute("timeUnits",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert_equal true, value.empty()
    obj = nil
  end

  def test_Attributes_Event_useValuesFromTriggerTime
    obj = LibSBML::Event.new(3,1)
    initialValue = true
    result = obj.setAttribute("useValuesFromTriggerTime",initialValue)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.getUseValuesFromTriggerTime() == initialValue )
    assert( obj.isSetUseValuesFromTriggerTime() == true )
    assert( obj.isSetAttribute("useValuesFromTriggerTime") == true )
    result = obj.getAttribute("useValuesFromTriggerTime",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == initialValue )
    otherValue = obj.getAttribute < bool > "useValuesFromTriggerTime"
    assert( otherValue == initialValue )
    result = obj.unsetAttribute("useValuesFromTriggerTime")
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.isSetUseValuesFromTriggerTime() == false )
    assert( obj.isSetAttribute("useValuesFromTriggerTime") == false )
    result = obj.getAttribute("useValuesFromTriggerTime",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == true )
    obj = nil
  end

  def test_Attributes_FunctionDefinition_sbo
    obj = LibSBML::FunctionDefinition.new(3,1)
    initialValue = 67
    result = obj.setAttribute("sboTerm",initialValue)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.getSBOTerm() == initialValue )
    assert( obj.isSetSBOTerm() == true )
    assert( obj.isSetAttribute("sboTerm") == true )
    result = obj.getAttribute("sboTerm",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == initialValue )
    otherValue = obj.getAttribute < int > "sboTerm"
    assert( otherValue == initialValue )
    result = obj.unsetAttribute("sboTerm")
    assert( obj.isSetSBOTerm() == false )
    assert( obj.isSetAttribute("sboTerm") == false )
    result = obj.getAttribute("sboTerm",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert_equal true, value ==-1
    obj = nil
  end

  def test_Attributes_FunctionDefinition_sbo_string
    obj = LibSBML::FunctionDefinition.new(3,1)
    initialValue =  "SBO:0000067";
    result = obj.setAttribute("sboTerm",initialValue)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.getSBOTermID() == initialValue )
    assert( obj.isSetSBOTerm() == true )
    assert( obj.isSetAttribute("sboTerm") == true )
    result = obj.getAttribute("sboTerm",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == initialValue )
    otherValue = obj.getAttribute < string > "sboTerm"
    assert( otherValue == initialValue )
    result = obj.unsetAttribute("sboTerm")
    assert( obj.isSetSBOTerm() == false )
    assert( obj.isSetAttribute("sboTerm") == false )
    result = obj.getAttribute("sboTerm",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == "" )
    obj = nil
  end

  def test_Attributes_Id
    const std::string& id =  "x12345";
    result = @@s.setAttribute("id",id)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( @@s.getIdAttribute() == id )
    assert( @@s.isSetIdAttribute() == true )
    assert( @@s.isSetAttribute("id") == true )
    result = @@s.getAttribute("id",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == id )
    other_value = S.getAttribute < string > "id"
    assert( other_value == id )
    result = @@s.unsetAttribute("id")
    assert( @@s.isSetIdAttribute() == false )
    assert( @@s.isSetAttribute("id") == false )
    result = @@s.getAttribute("id",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value ==  "" )
  end

  def test_Attributes_InitialAssignment_symbol
    obj = LibSBML::InitialAssignment.new(3,1)
    initialValue =  "string";
    result = obj.setAttribute("symbol",initialValue)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.getSymbol() == initialValue )
    assert( obj.isSetSymbol() == true )
    assert( obj.isSetAttribute("symbol") == true )
    result = obj.getAttribute("symbol",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == initialValue )
    otherValue = obj.getAttribute < string > "symbol"
    assert( otherValue == initialValue )
    result = obj.unsetAttribute("symbol")
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.isSetSymbol() == false )
    assert( obj.isSetAttribute("symbol") == false )
    result = obj.getAttribute("symbol",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert_equal true, value.empty()
    obj = nil
  end

  def test_Attributes_KineticLaw_timeUnits
    obj = LibSBML::KineticLaw.new(2,1)
    initialValue =  "string";
    result = obj.setAttribute("timeUnits",initialValue)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.getTimeUnits() == initialValue )
    assert( obj.isSetTimeUnits() == true )
    assert( obj.isSetAttribute("timeUnits") == true )
    result = obj.getAttribute("timeUnits",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == initialValue )
    otherValue = obj.getAttribute < string > "timeUnits"
    assert( otherValue == initialValue )
    result = obj.unsetAttribute("timeUnits")
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.isSetTimeUnits() == false )
    assert( obj.isSetAttribute("timeUnits") == false )
    result = obj.getAttribute("timeUnits",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert_equal true, value.empty()
    obj = nil
  end

  def test_Attributes_LocalParameter_units
    obj = LocalParameter.new(3,1)
    initialValue =  "string";
    result = obj.setAttribute("units",initialValue)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.getUnits() == initialValue )
    assert( obj.isSetUnits() == true )
    assert( obj.isSetAttribute("units") == true )
    result = obj.getAttribute("units",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == initialValue )
    otherValue = obj.getAttribute < string > "units"
    assert( otherValue == initialValue )
    result = obj.unsetAttribute("units")
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.isSetUnits() == false )
    assert( obj.isSetAttribute("units") == false )
    result = obj.getAttribute("units",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert_equal true, value.empty()
    obj = nil
  end

  def test_Attributes_LocalParameter_value
    obj = LocalParameter.new(3,1)
    initialValue = 3.6
    result = obj.setAttribute("value",initialValue)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert_equal true, util_isEqual
    assert( obj.isSetValue() == true )
    assert( obj.isSetAttribute("value") == true )
    result = obj.getAttribute("value",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert_equal true, util_isEqual
    otherValue = obj.getAttribute < double > "value"
    assert_equal true, util_isEqual
    result = obj.unsetAttribute("value")
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.isSetValue() == false )
    assert( obj.isSetAttribute("value") == false )
    result = obj.getAttribute("value",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert_equal true, util_isNaN
    obj = nil
  end

  def test_Attributes_MetaId
    const std::string& metaid =  "x12345";
    const std::string name =  "metaid";
    result = @@s.setAttribute("metaid",metaid)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( @@s.getMetaId() == metaid )
    assert( @@s.isSetMetaId() == true )
    assert( @@s.isSetAttribute("metaid") == true )
    result = @@s.getAttribute("metaid",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == metaid )
    other_value = S.getAttribute < string > "metaid"
    assert( other_value == metaid )
    result = @@s.unsetAttribute("metaid")
    assert( @@s.isSetMetaId() == false )
    assert( @@s.isSetAttribute("metaid") == false )
    result = @@s.getAttribute("metaid",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value ==  "" )
  end

  def test_Attributes_Model_substanceUnits
    obj = LibSBML::Model.new(3,1)
    initialValue =  "string";
    result = obj.setAttribute("substanceUnits",initialValue)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.getSubstanceUnits() == initialValue )
    assert( obj.isSetSubstanceUnits() == true )
    assert( obj.isSetAttribute("substanceUnits") == true )
    result = obj.getAttribute("substanceUnits",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == initialValue )
    otherValue = obj.getAttribute < string > "substanceUnits"
    assert( otherValue == initialValue )
    result = obj.unsetAttribute("substanceUnits")
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.isSetSubstanceUnits() == false )
    assert( obj.isSetAttribute("substanceUnits") == false )
    result = obj.getAttribute("substanceUnits",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert_equal true, value.empty()
    obj = nil
  end

  def test_Attributes_Parameter_constant
    obj = LibSBML::Parameter.new(3,1)
    initialValue = true
    result = obj.setAttribute("constant",initialValue)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.getConstant() == initialValue )
    assert( obj.isSetConstant() == true )
    assert( obj.isSetAttribute("constant") == true )
    result = obj.getAttribute("constant",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == initialValue )
    otherValue = obj.getAttribute < bool > "constant"
    assert( otherValue == initialValue )
    result = obj.unsetAttribute("constant")
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.isSetConstant() == false )
    assert( obj.isSetAttribute("constant") == false )
    result = obj.getAttribute("constant",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == true )
    obj = nil
  end

  def test_Attributes_Parameter_units
    obj = LibSBML::Parameter.new(3,1)
    initialValue =  "string";
    result = obj.setAttribute("units",initialValue)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.getUnits() == initialValue )
    assert( obj.isSetUnits() == true )
    assert( obj.isSetAttribute("units") == true )
    result = obj.getAttribute("units",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == initialValue )
    otherValue = obj.getAttribute < string > "units"
    assert( otherValue == initialValue )
    result = obj.unsetAttribute("units")
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.isSetUnits() == false )
    assert( obj.isSetAttribute("units") == false )
    result = obj.getAttribute("units",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert_equal true, value.empty()
    obj = nil
  end

  def test_Attributes_Parameter_value
    obj = LibSBML::Parameter.new(3,1)
    initialValue = 3.6
    result = obj.setAttribute("value",initialValue)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert_equal true, util_isEqual
    assert( obj.isSetValue() == true )
    assert( obj.isSetAttribute("value") == true )
    result = obj.getAttribute("value",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert_equal true, util_isEqual
    otherValue = obj.getAttribute < double > "value"
    assert_equal true, util_isEqual
    result = obj.unsetAttribute("value")
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.isSetValue() == false )
    assert( obj.isSetAttribute("value") == false )
    result = obj.getAttribute("value",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert_equal true, util_isNaN
    obj = nil
  end

  def test_Attributes_RateRule_variable
    obj = LibSBML::RateRule.new(3,1)
    initialValue =  "string";
    result = obj.setAttribute("variable",initialValue)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.getVariable() == initialValue )
    assert( obj.isSetVariable() == true )
    assert( obj.isSetAttribute("variable") == true )
    result = obj.getAttribute("variable",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == initialValue )
    otherValue = obj.getAttribute < string > "variable"
    assert( otherValue == initialValue )
    result = obj.unsetAttribute("variable")
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.isSetVariable() == false )
    assert( obj.isSetAttribute("variable") == false )
    result = obj.getAttribute("variable",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert_equal true, value.empty()
    obj = nil
  end

  def test_Attributes_Reaction_compartment
    obj = LibSBML::Reaction.new(3,1)
    initialValue =  "string";
    result = obj.setAttribute("compartment",initialValue)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.getCompartment() == initialValue )
    assert( obj.isSetCompartment() == true )
    assert( obj.isSetAttribute("compartment") == true )
    result = obj.getAttribute("compartment",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == initialValue )
    otherValue = obj.getAttribute < string > "compartment"
    assert( otherValue == initialValue )
    result = obj.unsetAttribute("compartment")
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.isSetCompartment() == false )
    assert( obj.isSetAttribute("compartment") == false )
    result = obj.getAttribute("compartment",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert_equal true, value.empty()
    obj = nil
  end

  def test_Attributes_Reaction_fast
    obj = LibSBML::Reaction.new(3,1)
    initialValue = true
    result = obj.setAttribute("fast",initialValue)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.getFast() == initialValue )
    assert( obj.isSetFast() == true )
    assert( obj.isSetAttribute("fast") == true )
    result = obj.getAttribute("fast",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == initialValue )
    otherValue = obj.getAttribute < bool > "fast"
    assert( otherValue == initialValue )
    result = obj.unsetAttribute("fast")
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.isSetFast() == false )
    assert( obj.isSetAttribute("fast") == false )
    result = obj.getAttribute("fast",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == true )
    obj = nil
  end

  def test_Attributes_SBOTerm
    sboTerm = 5
    result = @@s.setAttribute("sboTerm",sboTerm)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( @@s.getSBOTerm() == sboTerm )
    assert( @@s.isSetSBOTerm() == true )
    assert( @@s.isSetAttribute("sboTerm") == true )
    result = @@s.getAttribute("sboTerm",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == sboTerm )
    other_value = S.getAttribute < int > "sboTerm"
    assert( other_value == sboTerm )
    result = @@s.unsetAttribute("sboTerm")
    assert( @@s.isSetSBOTerm() == false )
    assert( @@s.isSetAttribute("sboTerm") == false )
    result = @@s.getAttribute("sboTerm",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert_equal true, value ==-1
  end

  def test_Attributes_SimpleSpeciesReference_species
    obj = LibSBML::SpeciesReference.new(3,1)
    initialValue =  "string";
    result = obj.setAttribute("species",initialValue)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.getSpecies() == initialValue )
    assert( obj.isSetSpecies() == true )
    assert( obj.isSetAttribute("species") == true )
    result = obj.getAttribute("species",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == initialValue )
    otherValue = obj.getAttribute < string > "species"
    assert( otherValue == initialValue )
    result = obj.unsetAttribute("species")
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.isSetSpecies() == false )
    assert( obj.isSetAttribute("species") == false )
    result = obj.getAttribute("species",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert_equal true, value.empty()
    obj = nil
  end

  def test_Attributes_SpeciesReference_constant
    obj = LibSBML::SpeciesReference.new(3,1)
    initialValue = true
    result = obj.setAttribute("constant",initialValue)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.getConstant() == initialValue )
    assert( obj.isSetConstant() == true )
    assert( obj.isSetAttribute("constant") == true )
    result = obj.getAttribute("constant",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == initialValue )
    otherValue = obj.getAttribute < bool > "constant"
    assert( otherValue == initialValue )
    result = obj.unsetAttribute("constant")
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.isSetConstant() == false )
    assert( obj.isSetAttribute("constant") == false )
    result = obj.getAttribute("constant",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == true )
    obj = nil
  end

  def test_Attributes_SpeciesReference_denominator
    obj = LibSBML::SpeciesReference.new(1,2)
    initialValue = 2
    result = obj.setAttribute("denominator",initialValue)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.getDenominator() == initialValue )
    assert( obj.isSetAttribute("denominator") == true )
    result = obj.getAttribute("denominator",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == initialValue )
    otherValue = obj.getAttribute < int > "denominator"
    assert( otherValue == initialValue )
    result = obj.unsetAttribute("denominator")
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.isSetAttribute("denominator") == true )
    result = obj.getAttribute("denominator",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == 1 )
    obj = nil
  end

  def test_Attributes_SpeciesReference_stoichiometry
    obj = LibSBML::SpeciesReference.new(1,2)
    initialValue = 3
    result = obj.setAttribute("stoichiometry",initialValue)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert_equal true, util_isEqual
    assert( obj.isSetStoichiometry() == true )
    assert( obj.isSetAttribute("stoichiometry") == true )
    result = obj.getAttribute("stoichiometry",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == initialValue )
    otherValue = obj.getAttribute < int > "stoichiometry"
    assert( otherValue == initialValue )
    result = obj.unsetAttribute("stoichiometry")
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.isSetStoichiometry() == true )
    assert( obj.isSetAttribute("stoichiometry") == true )
    result = obj.getAttribute("stoichiometry",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == 1 )
    obj = nil
  end

  def test_Attributes_SpeciesReference_stoichiometry_double
    obj = LibSBML::SpeciesReference.new(3,1)
    initialValue = 3.6
    result = obj.setAttribute("stoichiometry",initialValue)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert_equal true, util_isEqual
    assert( obj.isSetStoichiometry() == true )
    assert( obj.isSetAttribute("stoichiometry") == true )
    result = obj.getAttribute("stoichiometry",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert_equal true, util_isEqual
    otherValue = obj.getAttribute < double > "stoichiometry"
    assert_equal true, util_isEqual
    result = obj.unsetAttribute("stoichiometry")
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.isSetStoichiometry() == false )
    assert( obj.isSetAttribute("stoichiometry") == false )
    result = obj.getAttribute("stoichiometry",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert_equal true, util_isNaN
    obj = nil
  end

  def test_Attributes_Species_charge
    obj = LibSBML::Species.new(2,1)
    initialValue = 2
    result = obj.setAttribute("charge",initialValue)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.getCharge() == initialValue )
    assert( obj.isSetCharge() == true )
    assert( obj.isSetAttribute("charge") == true )
    result = obj.getAttribute("charge",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == initialValue )
    otherValue = obj.getAttribute < int > "charge"
    assert( otherValue == initialValue )
    result = obj.unsetAttribute("charge")
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.isSetCharge() == false )
    assert( obj.isSetAttribute("charge") == false )
    result = obj.getAttribute("charge",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == 0 )
    obj = nil
  end

  def test_Attributes_Species_compartment
    obj = LibSBML::Species.new(3,1)
    initialValue =  "string";
    result = obj.setAttribute("compartment",initialValue)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.getCompartment() == initialValue )
    assert( obj.isSetCompartment() == true )
    assert( obj.isSetAttribute("compartment") == true )
    result = obj.getAttribute("compartment",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == initialValue )
    otherValue = obj.getAttribute < string > "compartment"
    assert( otherValue == initialValue )
    result = obj.unsetAttribute("compartment")
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.isSetCompartment() == false )
    assert( obj.isSetAttribute("compartment") == false )
    result = obj.getAttribute("compartment",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert_equal true, value.empty()
    obj = nil
  end

  def test_Attributes_Species_hasOnlySubstanceUnits
    obj = LibSBML::Species.new(3,1)
    initialValue = true
    result = obj.setAttribute("hasOnlySubstanceUnits",initialValue)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.getHasOnlySubstanceUnits() == initialValue )
    assert( obj.isSetHasOnlySubstanceUnits() == true )
    assert( obj.isSetAttribute("hasOnlySubstanceUnits") == true )
    result = obj.getAttribute("hasOnlySubstanceUnits",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == initialValue )
    otherValue = obj.getAttribute < bool > "hasOnlySubstanceUnits"
    assert( otherValue == initialValue )
    result = obj.unsetAttribute("hasOnlySubstanceUnits")
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.isSetHasOnlySubstanceUnits() == false )
    assert( obj.isSetAttribute("hasOnlySubstanceUnits") == false )
    result = obj.getAttribute("hasOnlySubstanceUnits",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == true )
    obj = nil
  end

  def test_Attributes_Species_initialAmount
    obj = LibSBML::Species.new(3,1)
    initialValue = 3.6
    result = obj.setAttribute("initialAmount",initialValue)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert_equal true, util_isEqual
    assert( obj.isSetInitialAmount() == true )
    assert( obj.isSetAttribute("initialAmount") == true )
    result = obj.getAttribute("initialAmount",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert_equal true, util_isEqual
    otherValue = obj.getAttribute < double > "initialAmount"
    assert_equal true, util_isEqual
    result = obj.unsetAttribute("initialAmount")
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.isSetInitialAmount() == false )
    assert( obj.isSetAttribute("initialAmount") == false )
    result = obj.getAttribute("initialAmount",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert_equal true, util_isNaN
    obj = nil
  end

  def test_Attributes_Trigger_Id
    obj = LibSBML::Trigger.new(3,2)
    const std::string& att_name =  "id";
    id =  "x12345";
    result = obj.setAttribute(att_name,id)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.getId() == id )
    assert( obj.isSetId() == true )
    assert( obj.isSetAttribute(att_name) == true )
    result = obj.getAttribute(att_name,value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == id )
    result = obj.getAttribute(att_name,other_value)
    assert( other_value == id )
    result = obj.unsetAttribute(att_name)
    assert( obj.isSetId() == false )
    assert( obj.isSetAttribute(att_name) == false )
    result = obj.getAttribute(att_name,value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert_equal true, value.empty()
    obj = nil
  end

  def test_Attributes_Trigger_MetaId
    obj = LibSBML::Trigger.new(3,1)
    const std::string& metaid =  "x12345";
    result = obj.setAttribute("metaid",metaid)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.getMetaId() == metaid )
    assert( obj.isSetMetaId() == true )
    assert( obj.isSetAttribute("metaid") == true )
    result = obj.getAttribute("metaid",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == metaid )
    other_value = obj.getAttribute < string > "metaid"
    assert( other_value == metaid )
    result = obj.unsetAttribute("metaid")
    assert( obj.isSetMetaId() == false )
    assert( obj.isSetAttribute("metaid") == false )
    result = obj.getAttribute("metaid",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value ==  "" )
    obj = nil
  end

  def test_Attributes_Trigger_initialValue
    obj = LibSBML::Trigger.new(3,1)
    initialValue = true
    result = obj.setAttribute("initialValue",initialValue)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.getInitialValue() == initialValue )
    assert( obj.isSetInitialValue() == true )
    assert( obj.isSetAttribute("initialValue") == true )
    result = obj.getAttribute("initialValue",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == initialValue )
    otherValue = obj.getAttribute < bool > "initialValue"
    assert( otherValue == initialValue )
    result = obj.getAttribute("initialValue",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == initialValue )
    result = obj.unsetAttribute("initialValue")
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.isSetInitialValue() == false )
    assert( obj.isSetAttribute("initialValue") == false )
    result = obj.getAttribute("initialValue",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == true )
    obj = nil
  end

  def test_Attributes_Unit_exponent
    obj = LibSBML::Unit.new(3,1)
    initialValue = 2
    result = obj.setAttribute("exponent",initialValue)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.getExponent() == initialValue )
    assert( obj.isSetExponent() == true )
    assert( obj.isSetAttribute("exponent") == true )
    result = obj.getAttribute("exponent",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == initialValue )
    otherValue = obj.getAttribute < int > "exponent"
    assert( otherValue == initialValue )
    result = obj.unsetAttribute("exponent")
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.isSetExponent() == false )
    assert( obj.isSetAttribute("exponent") == false )
    result = obj.getAttribute("exponent",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == 0 )
    obj = nil
  end

  def test_Attributes_Unit_exponent_double
    obj = LibSBML::Unit.new(3,1)
    initialValue = 3.6
    result = obj.setAttribute("exponent",initialValue)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert_equal true, util_isEqual
    assert( obj.isSetExponent() == true )
    assert( obj.isSetAttribute("exponent") == true )
    result = obj.getAttribute("exponent",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert_equal true, util_isEqual
    otherValue = obj.getAttribute < double > "exponent"
    assert_equal true, util_isEqual
    result = obj.unsetAttribute("exponent")
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.isSetExponent() == false )
    assert( obj.isSetAttribute("exponent") == false )
    result = obj.getAttribute("exponent",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert_equal true, util_isNaN
    obj = nil
  end

  def test_Attributes_Unit_multiplier
    obj = LibSBML::Unit.new(3,1)
    initialValue = 3.6
    result = obj.setAttribute("multiplier",initialValue)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert_equal true, util_isEqual
    assert( obj.isSetMultiplier() == true )
    assert( obj.isSetAttribute("multiplier") == true )
    result = obj.getAttribute("multiplier",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert_equal true, util_isEqual
    otherValue = obj.getAttribute < double > "multiplier"
    assert_equal true, util_isEqual
    result = obj.unsetAttribute("multiplier")
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.isSetMultiplier() == false )
    assert( obj.isSetAttribute("multiplier") == false )
    result = obj.getAttribute("multiplier",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert_equal true, util_isNaN
    obj = nil
  end

  def test_Attributes_Unit_scale
    obj = LibSBML::Unit.new(3,1)
    initialValue = 2
    result = obj.setAttribute("scale",initialValue)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.getScale() == initialValue )
    assert( obj.isSetScale() == true )
    assert( obj.isSetAttribute("scale") == true )
    result = obj.getAttribute("scale",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == initialValue )
    otherValue = obj.getAttribute < int > "scale"
    assert( otherValue == initialValue )
    result = obj.unsetAttribute("scale")
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( obj.isSetScale() == false )
    assert( obj.isSetAttribute("scale") == false )
    result = obj.getAttribute("scale",value)
    assert( result == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( value == @@SBML_INT_MAX )
    obj = nil
  end

  def test_Elements_Event
    m = LibSBML::Model.new(3,1)
    e = m.createChildObject("event")
    assert( e.getNumEventAssignments() == 0 )
    assert( e.getNumObjects("eventAssignments") == 0 )
    assert( e.isSetTrigger() == false )
    assert( e.getNumObjects("trigger") == 0 )
    t = e.createChildObject("trigger")
    assert( e.isSetTrigger() == true )
    assert( e.getNumObjects("trigger") == 1 )
    t1 = t.clone()
    t1.setPersistent(true)
    t1.setInitialValue(false)
    math = LibSBML::parseFormula("true")
    t1.setMath(math)
    math = nil
    e.unsetTrigger()
    assert( e.isSetTrigger() == false )
    assert( e.getNumObjects("trigger") == 0 )
    assert( e.addChildObject("trigger",t1) == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( e.isSetTrigger() == true )
    assert( e.getNumObjects("trigger") == 1 )
    t1 = nil
    t2 = e.removeChildObject("trigger", "")
    assert( t2 != nil )
    assert( e.isSetTrigger() == false )
    assert( e.getNumObjects("trigger") == 0 )
    t2 = nil
    m = nil
  end

  def test_Elements_Model
    m = LibSBML::Model.new(3,1)
    assert( m.getNumSpecies() == 0 )
    assert( m.getNumObjects("species") == 0 )
    s = m.createChildObject("species")
    s.setId("s1")
    assert( m.getNumSpecies() == 1 )
    assert( m.getNumObjects("species") == 1 )
    s2 = s.clone()
    s2.setId("s2")
    s2.setCompartment("c")
    s2.setHasOnlySubstanceUnits(false)
    s2.setConstant(false)
    s2.setBoundaryCondition(true)
    assert( m.addChildObject("species",s2) == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( m.getNumSpecies() == 2 )
    assert( m.getNumObjects("species") == 2 )
    ss = m.removeChildObject("species", "s1")
    assert( ss != nil )
    assert( ss.getId() ==  "s1" )
    assert( m.getNumSpecies() == 1 )
    assert( m.getNumObjects("species") == 1 )
    s2 = nil
    ss = nil
    m = nil
  end

end
