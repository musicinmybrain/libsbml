# @file    TestReadFromFileL3V2_3.rb
# @brief   Reads test-data/l3v2-empty-lo-2.xml into memory and tests it.
#
# @author  Akiya Jouraku (Ruby conversion)
# @author  Sarah Keating 
# 
# ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
#
# DO NOT EDIT THIS FILE.
#
# This file was generated automatically by converting the file located at
# src/sbml/test/TestReadFromFileL3V2_3.cpp
# using the conversion program dev/utilities/translateTests/translateTests.pl.
# Any changes made here will be lost the next time the file is regenerated.
#
# -----------------------------------------------------------------------------
# This file is part of libSBML.  Please visit http://sbml.org for more
# information about SBML, and the latest version of libSBML.
#
# Copyright 2005-2010 California Institute of Technology.
# Copyright 2002-2005 California Institute of Technology and
#                     Japan Science and Technology Corporation.
# 
# This library is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation.  A copy of the license agreement is provided
# in the file named "LICENSE.txt" included with this software distribution
# and also available online as http://sbml.org/software/libsbml/license.html
# -----------------------------------------------------------------------------
require 'test/unit'
require 'libSBML'

class TestReadFromFileL3V2_3 < Test::Unit::TestCase

  def test_echo_l3v2_empty_lo_2
    expected = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + 
    "<sbml xmlns=\"http://www.sbml.org/sbml/level3/version2/core\" " + 
    "level=\"3\" version=\"2\">\n"  + 
    "  <model substanceUnits=\"mole\" timeUnits=\"second\" volumeUnits=\"litre\" " + 
    "areaUnits=\"metre\" lengthUnits=\"metre\" extentUnits=\"mole\" " + 
    "conversionFactor=\"p\">\n" + 
    "    <listOfUnitDefinitions>\n" + 
    "      <unitDefinition id=\"nonsense\">\n" + 
    "        <listOfUnits metaid=\"dd\"/>\n" + 
    "      </unitDefinition>\n" + 
    "    </listOfUnitDefinitions>\n" + 
    "    <listOfReactions>\n" + 
    "      <reaction id=\"in\" reversible=\"false\" compartment=\"comp\">\n" + 
    "        <listOfReactants id=\"d\"/>\n" + 
    "        <listOfProducts name=\"ss\"/>\n" + 
    "        <listOfModifiers sboTerm=\"SBO:0000002\"/>\n" + 
    "        <kineticLaw>\n" + 
    "          <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\n" + 
    "            <apply>\n" + 
    "              <times/>\n" + 
    "              <ci> k1 </ci>\n" + 
    "              <ci> X0 </ci>\n" + 
    "              <ci> cell </ci>\n" + 
    "            </apply>\n" + 
    "          </math>\n" + 
    "          <listOfLocalParameters>\n" + 
    "            <notes>\n" + 
    "              <body xmlns=\"http://www.w3.org/1999/xhtml\">\n" + 
    "                <center>\n" + 
    "                  <h2>A Simple Mitotic Oscillator</h2>\n" + 
    "                </center>\n" + 
    "                <p>A minimal cascade model for the mitotic oscillator involving cyclin and cdc2 kinase</p>\n" + 
    "              </body>\n" + 
    "            </notes>\n" + 
    "          </listOfLocalParameters>\n" + 
    "        </kineticLaw>\n" + 
    "      </reaction>\n" + 
    "    </listOfReactions>\n" + 
    "    <listOfEvents>\n" + 
    "      <event sboTerm=\"SBO:0000231\" id=\"e1\" useValuesFromTriggerTime=\"true\">\n" + 
    "        <trigger initialValue=\"false\" persistent=\"false\">\n" + 
    "          <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\n" + 
    "            <true/>\n" + 
    "          </math>\n" + 
    "        </trigger>\n" + 
    "        <listOfEventAssignments>\n" + 
    "          <annotation>\n" + 
    "            <rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" " + 
    "xmlns:dc=\"http://purl.org/dc/elements/1.1/\" " + 
    "xmlns:dcterms=\"http://purl.org/dc/terms/\" " + 
    "xmlns:vCard=\"http://www.w3.org/2001/vcard-rdf/3.0#\" " + 
    "xmlns:bqbiol=\"http://biomodels.net/biology-qualifiers/\" " + 
    "xmlns:bqmodel=\"http://biomodels.net/model-qualifiers/\">\n" + 
    "              <rdf:Description rdf:about=\"#_000002\">\n" + 
    "                <bqbiol:is>\n" + 
    "                  <rdf:Bag>\n" + 
    "                    <rdf:li rdf:resource=\"http://www.geneontology.org/#GO:0007274\"/>\n" + 
    "                    <rdf:li rdf:resource=\"http://www.geneontology.org/#GO:0015464\"/>\n" + 
    "                    <rdf:li rdf:resource=\"http://www.genome.jp/kegg/pathway/#hsa04080\"/>\n" + 
    "                    <rdf:li rdf:resource=\"http://www.ncbi.nlm.nih.gov/Taxonomy/#7787\"/>\n" + 
    "                  </rdf:Bag>\n" + 
    "                </bqbiol:is>\n" + 
    "              </rdf:Description>\n" + 
    "            </rdf:RDF>\n" + 
    "          </annotation>\n" + 
    "        </listOfEventAssignments>\n" + 
    "      </event>\n" + 
    "    </listOfEvents>\n" + 
    "  </model>\n" + 
    "</sbml>\n"
    filename = "../../sbml/sbml/test/test-data/"
    filename += "l3v2-empty-lo-2.xml"
    fileout = "../../sbml/sbml/test/test-data/"
    fileout += "tempOut.xml"
    d = LibSBML::readSBML()
    if (d == nil)
    end
    LibSBML::writeSBML(d)
    outD = LibSBML::readSBML()
    m = outd.getModel()
    assert( m != nil )
    assert( m.getNumUnitDefinitions() == 1 )
    assert( m.getNumFunctionDefinitions() == 0 )
    assert( m.getNumCompartments() == 0 )
    assert( m.getNumSpecies() == 0 )
    assert( m.getNumParameters() == 0 )
    assert( m.getNumRules() == 0 )
    assert( m.getNumInitialAssignments() == 0 )
    assert( m.getNumConstraints() == 0 )
    assert( m.getNumReactions() == 1 )
    assert( m.getNumEvents() == 1 )
    ud = m.getUnitDefinition(0)
    assert( ud != nil )
    assert( ud.getNumUnits() == 0 )
    assert( ud.getListOfUnits().isSetMetaId() == true )
    assert( ud.getListOfUnits().getMetaId() ==  "dd" )
    r = m.getReaction(0)
    assert( r != nil )
    assert( r.getNumReactants() == 0 )
    assert( r.getListOfReactants().isSetId() == true )
    assert( r.getListOfReactants().getId() ==  "d" )
    assert( r.getNumProducts() == 0 )
    assert( r.getListOfProducts().isSetName() == true )
    assert( r.getListOfProducts().getName() ==  "ss" )
    assert( r.getNumModifiers() == 0 )
    assert( r.getListOfModifiers().isSetSBOTerm() == true )
    assert( r.getListOfModifiers().getSBOTerm() == 2 )
    kl = r.getKineticLaw()
    assert( kl != nil )
    assert( kl.getNumLocalParameters() == 0 )
    assert( kl.getListOfLocalParameters().isSetNotes() == true )
    assert( kl.getListOfLocalParameters().isSetAnnotation() == false )
    e = m.getEvent(0)
    assert( e != nil )
    assert( e.getNumEventAssignments() == 0 )
    assert( e.getListOfEventAssignments().isSetNotes() == false )
    assert( e.getListOfEventAssignments().isSetAnnotation() == true )
    S = LibSBML::writeSBMLToString(outD)
    assert_equal true, equals(expected,S)
    d = nil
    outD = nil
  end

  def test_read_l3v2_empty_lo_2
    reader = LibSBML::SBMLReader.new()
    filename = "../../sbml/sbml/test/test-data/"
    filename += "l3v2-empty-lo-2.xml"
    d = reader.readSBML(filename)
    if (d == nil)
    end
    assert( d.getLevel() == 3 )
    assert( d.getVersion() == 2 )
    m = d.getModel()
    assert( m != nil )
    assert( m.getNumUnitDefinitions() == 1 )
    assert( m.getNumFunctionDefinitions() == 0 )
    assert( m.getNumCompartments() == 0 )
    assert( m.getNumSpecies() == 0 )
    assert( m.getNumParameters() == 0 )
    assert( m.getNumRules() == 0 )
    assert( m.getNumInitialAssignments() == 0 )
    assert( m.getNumConstraints() == 0 )
    assert( m.getNumReactions() == 1 )
    assert( m.getNumEvents() == 1 )
    ud = m.getUnitDefinition(0)
    assert( ud != nil )
    assert( ud.getNumUnits() == 0 )
    assert( ud.getListOfUnits().hasOptionalAttributes() == true )
    assert( ud.getListOfUnits().hasOptionalElements() == false )
    assert( ud.getListOfUnits().isSetMetaId() == true )
    assert( ud.getListOfUnits().getMetaId() ==  "dd" )
    r = m.getReaction(0)
    assert( r != nil )
    assert( r.getNumReactants() == 0 )
    assert( r.getListOfReactants().hasOptionalAttributes() == true )
    assert( r.getListOfReactants().hasOptionalElements() == false )
    assert( r.getListOfReactants().isSetId() == true )
    assert( r.getListOfReactants().getId() ==  "d" )
    assert( r.getNumProducts() == 0 )
    assert( r.getListOfProducts().isSetName() == true )
    assert( r.getListOfProducts().getName() ==  "ss" )
    assert( r.getNumModifiers() == 0 )
    assert( r.getListOfModifiers().isSetSBOTerm() == true )
    assert( r.getListOfModifiers().getSBOTerm() == 2 )
    kl = r.getKineticLaw()
    assert( kl != nil )
    assert( kl.getNumLocalParameters() == 0 )
    assert( kl.getListOfLocalParameters().hasOptionalAttributes() == false )
    assert( kl.getListOfLocalParameters().hasOptionalElements() == true )
    assert( kl.getListOfLocalParameters().isSetNotes() == true )
    assert( kl.getListOfLocalParameters().isSetAnnotation() == false )
    e = m.getEvent(0)
    assert( e != nil )
    assert( e.getNumEventAssignments() == 0 )
    assert( e.getListOfEventAssignments().hasOptionalAttributes() == false )
    assert( e.getListOfEventAssignments().hasOptionalElements() == true )
    assert( e.getListOfEventAssignments().isSetNotes() == false )
    assert( e.getListOfEventAssignments().isSetAnnotation() == true )
    d = nil
  end

end
