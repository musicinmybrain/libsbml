# @file    TestSBMLConvert.rb
# @brief   SBMLConvert unit tests
#
# @author  Akiya Jouraku (Ruby conversion)
# @author  Ben Bornstein 
# 
# ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
#
# DO NOT EDIT THIS FILE.
#
# This file was generated automatically by converting the file located at
# src/sbml/test/TestSBMLConvert.c
# using the conversion program dev/utilities/translateTests/translateTests.pl.
# Any changes made here will be lost the next time the file is regenerated.
#
# -----------------------------------------------------------------------------
# This file is part of libSBML.  Please visit http://sbml.org for more
# information about SBML, and the latest version of libSBML.
#
# Copyright 2005-2010 California Institute of Technology.
# Copyright 2002-2005 California Institute of Technology and
#                     Japan Science and Technology Corporation.
# 
# This library is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation.  A copy of the license agreement is provided
# in the file named "LICENSE.txt" included with this software distribution
# and also available online as http://sbml.org/software/libsbml/license.html
# -----------------------------------------------------------------------------
require 'test/unit'
require 'libSBML'

class TestSBMLConvert < Test::Unit::TestCase

  def test_SBMLConvert_convertFromL1V1
    d = LibSBML::SBMLDocument.new(1,1)
    d.createModel()
    assert( d.setLevelAndVersion(1,1,false) == true )
    assert( d.setLevelAndVersion(1,2,false) == true )
    d = nil
    d = LibSBML::SBMLDocument.new(1,1)
    d.createModel()
    assert( d.setLevelAndVersion(2,1,false) == true )
    d = nil
    d = LibSBML::SBMLDocument.new(1,1)
    d.createModel()
    assert( d.setLevelAndVersion(2,2,false) == true )
    d = nil
    d = LibSBML::SBMLDocument.new(1,1)
    d.createModel()
    assert( d.setLevelAndVersion(2,3,false) == true )
    d = nil
    d = LibSBML::SBMLDocument.new(1,1)
    d.createModel()
    assert( d.setLevelAndVersion(2,4,false) == true )
    d = nil
    d = LibSBML::SBMLDocument.new(1,1)
    d.createModel()
    assert( d.setLevelAndVersion(3,1,false) == true )
    d = nil
  end

  def test_SBMLConvert_convertFromL1V2
    d = LibSBML::SBMLDocument.new(1,2)
    m = d.createModel()
    (void) m
    assert( d.setLevelAndVersion(1,1,false) == false )
    assert( d.setLevelAndVersion(1,2,false) == true )
    assert( d.setLevelAndVersion(1,2,false) == true )
    assert( d.setLevelAndVersion(2,1,false) == true )
    assert( d.setLevelAndVersion(1,2,false) == true )
    assert( d.setLevelAndVersion(2,2,false) == true )
    assert( d.setLevelAndVersion(1,2,false) == true )
    assert( d.setLevelAndVersion(2,3,false) == true )
    assert( d.setLevelAndVersion(1,2,false) == true )
    assert( d.setLevelAndVersion(2,4,false) == true )
    assert( d.setLevelAndVersion(1,2,false) == true )
    assert( d.setLevelAndVersion(3,1,false) == true )
    d = nil
  end

  def test_SBMLConvert_convertFromL1_addModifiersToReaction
    d = LibSBML::SBMLDocument.new(1,2)
    m = d.createModel()
    r = m.createReaction()
    kl = r.createKineticLaw()
    kl.setFormula( "k1*S1*S2*S3*S4*S5")
    s1 = m.createSpecies()
    s1.setId( "S1" )
    s2 = m.createSpecies()
    s2.setId( "S2")
    s3 = m.createSpecies()
    s3.setId( "S3")
    s4 = m.createSpecies()
    s4.setId( "S4")
    s5 = m.createSpecies()
    s5.setId( "S5")
    sr1 = r.createReactant()
    sr2 = r.createReactant()
    sr3 = r.createProduct()
    sr1.setSpecies( "S1")
    sr2.setSpecies( "S2")
    sr3.setSpecies( "S5")
    assert( r.getNumModifiers() == 0 )
    assert( d.setLevelAndVersion(2,1,false) == true )
    assert( d.getLevel() == 2 )
    assert( d.getVersion() == 1 )
    assert( m.getReaction(0).getNumModifiers() == 2 )
    ssr1 = m.getReaction(0).getModifier(0)
    ssr2 = m.getReaction(0).getModifier(1)
    assert ((  "S3" == ssr1.getSpecies() ))
    assert ((  "S4" == ssr2.getSpecies() ))
    d = nil
  end

  def test_SBMLConvert_convertFromL1_varyingComp
    d = LibSBML::SBMLDocument.new(1,2)
    m = d.createModel()
    c = m.createCompartment()
    r = m.createAssignmentRule()
    c.setName( "c")
    r.setVariable( "c")
    r.setFormula( "1*2")
    assert( d.setLevelAndVersion(2,1,false) == true )
    assert( d.getLevel() == 2 )
    assert( d.getVersion() == 1 )
    assert( m.getCompartment(0).getConstant() == false )
    d = nil
  end

  def test_SBMLConvert_convertFromL1_varyingParam
    d = LibSBML::SBMLDocument.new(1,2)
    m = d.createModel()
    p = m.createParameter()
    r = m.createAssignmentRule()
    p.setName( "c")
    r.setVariable( "c")
    r.setFormula( "1*2")
    assert( d.setLevelAndVersion(2,1,false) == true )
    assert( d.getLevel() == 2 )
    assert( d.getVersion() == 1 )
    assert( m.getParameter(0).getConstant() == false )
    d = nil
  end

  def test_SBMLConvert_convertFromL2V1
    d = LibSBML::SBMLDocument.new(2,1)
    m = d.createModel()
    (void) m
    assert( d.setLevelAndVersion(1,1,false) == false )
    assert( d.setLevelAndVersion(1,2,false) == true )
    assert( d.setLevelAndVersion(2,1,false) == true )
    assert( d.setLevelAndVersion(2,1,false) == true )
    assert( d.setLevelAndVersion(2,1,false) == true )
    assert( d.setLevelAndVersion(2,2,false) == true )
    assert( d.setLevelAndVersion(2,1,false) == true )
    assert( d.setLevelAndVersion(2,3,false) == true )
    assert( d.setLevelAndVersion(2,1,false) == true )
    assert( d.setLevelAndVersion(2,4,false) == true )
    assert( d.setLevelAndVersion(2,1,false) == true )
    assert( d.setLevelAndVersion(3,1,false) == true )
    d = nil
  end

  def test_SBMLConvert_convertFromL2V2
    d = LibSBML::SBMLDocument.new(2,2)
    m = d.createModel()
    (void) m
    assert( d.setLevelAndVersion(1,1,false) == false )
    assert( d.setLevelAndVersion(1,2,false) == true )
    assert( d.setLevelAndVersion(2,2,false) == true )
    assert( d.setLevelAndVersion(2,1,false) == true )
    assert( d.setLevelAndVersion(2,2,false) == true )
    assert( d.setLevelAndVersion(2,2,false) == true )
    assert( d.setLevelAndVersion(2,2,false) == true )
    assert( d.setLevelAndVersion(2,3,false) == true )
    assert( d.setLevelAndVersion(2,2,false) == true )
    assert( d.setLevelAndVersion(2,4,false) == true )
    assert( d.setLevelAndVersion(2,2,false) == true )
    assert( d.setLevelAndVersion(3,1,false) == true )
    d = nil
  end

  def test_SBMLConvert_convertFromL2V3
    d = LibSBML::SBMLDocument.new(2,3)
    m = d.createModel()
    (void) m
    assert( d.setLevelAndVersion(1,1,false) == false )
    assert( d.setLevelAndVersion(1,2,false) == true )
    assert( d.setLevelAndVersion(2,3,false) == true )
    assert( d.setLevelAndVersion(2,1,false) == true )
    assert( d.setLevelAndVersion(2,3,false) == true )
    assert( d.setLevelAndVersion(2,2,false) == true )
    assert( d.setLevelAndVersion(2,3,false) == true )
    assert( d.setLevelAndVersion(2,3,false) == true )
    assert( d.setLevelAndVersion(2,3,false) == true )
    assert( d.setLevelAndVersion(2,4,false) == true )
    assert( d.setLevelAndVersion(2,3,false) == true )
    assert( d.setLevelAndVersion(3,1,false) == true )
    d = nil
  end

  def test_SBMLConvert_convertFromL2V4
    d = LibSBML::SBMLDocument.new(2,4)
    m = d.createModel()
    (void) m
    assert( d.setLevelAndVersion(1,1,false) == false )
    assert( d.setLevelAndVersion(1,2,false) == true )
    assert( d.setLevelAndVersion(2,4,false) == true )
    assert( d.setLevelAndVersion(2,1,false) == true )
    assert( d.setLevelAndVersion(2,4,false) == true )
    assert( d.setLevelAndVersion(2,2,false) == true )
    assert( d.setLevelAndVersion(2,4,false) == true )
    assert( d.setLevelAndVersion(2,3,false) == true )
    assert( d.setLevelAndVersion(2,4,false) == true )
    assert( d.setLevelAndVersion(2,4,false) == true )
    assert( d.setLevelAndVersion(2,4,false) == true )
    assert( d.setLevelAndVersion(3,1,false) == true )
    d = nil
  end

  def test_SBMLConvert_convertFromL3V1
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    (void) m
    assert( d.setLevelAndVersion(1,1,false) == false )
    assert( d.setLevelAndVersion(1,2,false) == true )
    d = nil
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    assert( d.setLevelAndVersion(2,1,false) == true )
    d = nil
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    assert( d.setLevelAndVersion(2,2,false) == true )
    d = nil
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    assert( d.setLevelAndVersion(2,3,false) == true )
    d = nil
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    assert( d.setLevelAndVersion(2,4,false) == true )
    d = nil
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    assert( d.setLevelAndVersion(3,1,false) == true )
    d = nil
  end

  def test_SBMLConvert_convertFromL3_Comp
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    sid =  "C";
    c = m.createCompartment()
    c.setId(sid)
    c.setSize(1.2)
    c.setConstant(true)
    c.setSpatialDimensions(3.4)
    assert( d.setLevelAndVersion(1,1,true) == false )
    assert( d.setLevelAndVersion(1,2,true) == false )
    assert( d.setLevelAndVersion(2,1,true) == false )
    assert( d.setLevelAndVersion(2,2,true) == false )
    assert( d.setLevelAndVersion(2,3,true) == false )
    assert( d.setLevelAndVersion(2,4,true) == false )
    assert( d.setLevelAndVersion(3,1,true) == true )
    d = nil
  end

  def test_SBMLConvert_convertFromL3_compartment_defaultValues
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    sid =  "C";
    c = m.createCompartment()
    c.setId(sid)
    assert( c.isSetConstant() == false )
    assert( c.getConstant() == true )
    assert( c.isSetSpatialDimensions() == 0 )
    assert( util_isNaN == 1 )
    assert( d.setLevelAndVersion(2,4,false) == true )
    assert( c.isSetConstant() == true )
    assert( c.getConstant() == true )
    assert( c.isSetSpatialDimensions() == 1 )
    assert( c.getSpatialDimensions() == 3 )
    d = nil
  end

  def test_SBMLConvert_convertFromL3_compartment_defaultValues_1
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    sid =  "C";
    c = m.createCompartment()
    c.setId(sid)
    c.setConstant(false)
    assert( c.isSetConstant() == true )
    assert( c.getConstant() == false )
    assert( c.isSetSpatialDimensions() == 0 )
    assert( util_isNaN == 1 )
    assert( d.setLevelAndVersion(2,4,false) == true )
    assert( c.isSetConstant() == true )
    assert( c.getConstant() == false )
    assert( c.isSetSpatialDimensions() == 1 )
    assert( c.getSpatialDimensions() == 3 )
    d = nil
  end

  def test_SBMLConvert_convertFromL3_conversionFactor
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    sid =  "P";
    m.setConversionFactor(sid)
    c = m.createParameter()
    c.setId(sid)
    c.setConstant(true)
    assert( d.setLevelAndVersion(1,1,true) == false )
    assert( d.setLevelAndVersion(1,2,true) == false )
    assert( d.setLevelAndVersion(2,1,true) == false )
    assert( d.setLevelAndVersion(2,2,true) == false )
    assert( d.setLevelAndVersion(2,3,true) == false )
    assert( d.setLevelAndVersion(2,4,true) == false )
    assert( d.setLevelAndVersion(3,1,true) == true )
    d = nil
  end

  def test_SBMLConvert_convertFromL3_event_defaultValues
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    e = m.createEvent()
    (void) e
    assert( e.isSetUseValuesFromTriggerTime() == false )
    assert( e.getUseValuesFromTriggerTime() == true )
    assert( d.setLevelAndVersion(2,4,false) == true )
    e1 = m.getEvent(0)
    assert( e1.isSetUseValuesFromTriggerTime() == true )
    assert( e1.getUseValuesFromTriggerTime() == true )
    d = nil
  end

  def test_SBMLConvert_convertFromL3_event_defaultValues_1
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    e = m.createEvent()
    e.setUseValuesFromTriggerTime(false)
    assert( e.isSetUseValuesFromTriggerTime() == true )
    assert( e.getUseValuesFromTriggerTime() == false )
    assert( d.setLevelAndVersion(2,4,false) == true )
    e1 = m.getEvent(0)
    assert( e1.isSetUseValuesFromTriggerTime() == true )
    assert( e1.getUseValuesFromTriggerTime() == false )
    d = nil
  end

  def test_SBMLConvert_convertFromL3_initialValue
    d = 2 = nil
    m = d.createModel()
    e = m.createEvent()
    t = e.createTrigger()
    t.setInitialValue(0)
    assert( d.setLevelAndVersion(1,1,false) == false )
    d2 = d.clone()
    assert( d2.setLevelAndVersion(1,2,false) == true )
    d2 = nil
    d2 = d.clone()
    assert( d2.setLevelAndVersion(2,1,false) == true )
    d2 = nil
    d2 = d.clone()
    assert( d2.setLevelAndVersion(2,2,false) == true )
    d2 = nil
    d2 = d.clone()
    assert( d2.setLevelAndVersion(2,3,false) == true )
    d2 = nil
    d2 = d.clone()
    assert( d2.setLevelAndVersion(2,4,false) == true )
    d2 = nil
    assert( d.setLevelAndVersion(3,1,false) == true )
    d = nil
  end

  def test_SBMLConvert_convertFromL3_localParameters
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    c.setSpatialDimensions(3)
    s = m.createSpecies()
    s.setId( "s")
    r = m.createReaction()
    sr = r.createReactant()
    sr.setSpecies( "s")
    kl = r.createKineticLaw()
    math = LibSBML::parseFormula("k")
    kl.setMath(math)
    math = nil
    lp = kl.createLocalParameter()
    lp.setId( "k")
    assert( kl.getNumLocalParameters() == 1 )
    assert( kl.getNumParameters() == 1 )
    assert( d.setLevelAndVersion(1,1,false) == false )
    d2 = d.clone()
    assert( d2.setLevelAndVersion(1,2,false) == true )
    m = d2.getModel()
    kl = m.getReaction(0).getKineticLaw()
    assert( kl.getNumLocalParameters() == 0 )
    assert( kl.getNumParameters() == 1 )
    d2 = nil
    assert( d.setLevelAndVersion(2,1,false) == true )
    m = d.getModel()
    kl = m.getReaction(0).getKineticLaw()
    assert( kl.getNumLocalParameters() == 0 )
    assert( kl.getNumParameters() == 1 )
    d = nil
  end

  def test_SBMLConvert_convertFromL3_localParameters_defaultValues
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c" )
    c.setConstant(true)
    s = m.createSpecies()
    s.setId( "s")
    s.setCompartment( "c")
    s.setBoundaryCondition(false)
    s.setConstant(false)
    s.setHasOnlySubstanceUnits(false)
    r = m.createReaction()
    r.setReversible(false)
    sr = r.createReactant()
    sr.setSpecies( "s")
    sr.setConstant(true)
    kl = r.createKineticLaw()
    math = LibSBML::parseFormula("s*k")
    kl.setMath(math)
    math = nil
    p = kl.createLocalParameter()
    p.setId( "k")
    assert( kl.getNumLocalParameters() == 1 )
    assert( d.setLevelAndVersion(2,4,false) == true )
    m = d.getModel()
    r = m.getReaction(0)
    kl = r.getKineticLaw()
    assert( kl.getNumParameters() == 1 )
    lp = kl.getParameter(0)
    assert( lp.isSetConstant() == true )
    assert( lp.getConstant() == true )
    d = nil
  end

  def test_SBMLConvert_convertFromL3_modelUnits
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    m.setVolumeUnits( "litre")
    assert( m.getNumUnitDefinitions() == 0 )
    assert( d.setLevelAndVersion(2,4,false) == true )
    m = d.getModel()
    assert( m.getNumUnitDefinitions() == 1 )
    ud = m.getUnitDefinition(0)
    assert ((  "volume" == ud.getId() ))
    assert( ud.getNumUnits() == 1 )
    assert( ud.getUnit(0).getKind() == LibSBML::UNIT_KIND_LITRE )
    d = nil
  end

  def test_SBMLConvert_convertFromL3_modelUnits1
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    m.setSubstanceUnits( "foo")
    ud = m.createUnitDefinition()
    ud.setId( "foo")
    u = ud.createUnit()
    u.initDefaults()
    u.setKind(LibSBML::UNIT_KIND_MOLE)
    u.setScale(-6)
    ud1 = m.createUnitDefinition()
    ud1.setId( "substance")
    u1 = ud1.createUnit()
    u1.initDefaults()
    u1.setKind(LibSBML::UNIT_KIND_MOLE)
    u1.setScale(-3)
    p = m.createParameter()
    p.setId( "p")
    p.setUnits( "substance")
    assert( m.getNumUnitDefinitions() == 2 )
    assert( d.setLevelAndVersion(2,4,false) == true )
    m = d.getModel()
    assert( m.getNumUnitDefinitions() == 3 )
    ud2 = m.getUnitDefinition(0)
    assert ((  "foo" == ud2.getId() ))
    assert( ud2.getNumUnits() == 1 )
    assert( ud2.getUnit(0).getKind() == LibSBML::UNIT_KIND_MOLE )
    assert( ud2.getUnit(0).getScale() == -6 )
    ud2 = m.getUnitDefinition(1)
    assert ((  "substanceFromOriginal" == ud2.getId() ))
    assert( ud2.getNumUnits() == 1 )
    assert( ud2.getUnit(0).getKind() == LibSBML::UNIT_KIND_MOLE )
    assert( ud2.getUnit(0).getScale() == -3 )
    ud2 = m.getUnitDefinition(2)
    assert ((  "substance" == ud2.getId() ))
    assert( ud2.getNumUnits() == 1 )
    assert( ud2.getUnit(0).getKind() == LibSBML::UNIT_KIND_MOLE )
    assert( ud2.getUnit(0).getScale() == -6 )
    p1 = m.getParameter(0)
    assert ((  "substanceFromOriginal" == p1.getUnits() ))
    d = nil
  end

  def test_SBMLConvert_convertFromL3_parameter_defaultValues
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    sid =  "C";
    p = m.createParameter()
    p.setId(sid)
    assert( p.isSetConstant() == false )
    assert( p.getConstant() == true )
    assert( d.setLevelAndVersion(2,4,false) == true )
    p1 = m.getParameter(0)
    assert( p1.isSetConstant() == true )
    assert( p1.getConstant() == true )
    d = nil
  end

  def test_SBMLConvert_convertFromL3_persistent
    d = 2 = nil
    m = d.createModel()
    e = m.createEvent()
    t = e.createTrigger()
    t.setPersistent(0)
    assert( d.setLevelAndVersion(1,1,false) == false )
    d2 = d.clone()
    assert( d2.setLevelAndVersion(1,2,false) == true )
    d2 = nil
    d2 = d.clone()
    assert( d2.setLevelAndVersion(2,1,false) == true )
    d2 = nil
    d2 = d.clone()
    assert( d2.setLevelAndVersion(2,2,false) == true )
    d2 = nil
    d2 = d.clone()
    assert( d2.setLevelAndVersion(2,3,false) == true )
    d2 = nil
    d2 = d.clone()
    assert( d2.setLevelAndVersion(2,4,false) == true )
    d2 = nil
    assert( d.setLevelAndVersion(3,1,false) == true )
    d = nil
  end

  def test_SBMLConvert_convertFromL3_priority1
    d = 2 = nil
    m = d.createModel()
    e = m.createEvent()
    p = e.createPriority()
    (void) p
    assert( d.setLevelAndVersion(1,1,false) == false )
    d2 = d.clone()
    assert( d2.setLevelAndVersion(1,2,false) == true )
    d2 = nil
    d2 = d.clone()
    assert( d2.setLevelAndVersion(2,1,false) == true )
    d2 = nil
    d2 = d.clone()
    assert( d2.setLevelAndVersion(2,2,false) == true )
    d2 = nil
    d2 = d.clone()
    assert( d2.setLevelAndVersion(2,3,false) == true )
    d2 = nil
    d2 = d.clone()
    assert( d2.setLevelAndVersion(2,4,false) == true )
    d2 = nil
    assert( d.setLevelAndVersion(2,4,false) == true )
    d = nil
  end

  def test_SBMLConvert_convertFromL3_reaction_defaultValues
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    sid =  "C";
    r = m.createReaction()
    r.setId(sid)
    assert( r.isSetReversible() == false )
    assert( r.getReversible() == true )
    assert( d.setLevelAndVersion(2,4,false) == true )
    r1 = m.getReaction(0)
    assert( r1.isSetReversible() == true )
    assert( r1.getReversible() == true )
    d = nil
  end

  def test_SBMLConvert_convertFromL3_reaction_defaultValues_1
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    sid =  "C";
    r = m.createReaction()
    r.setId(sid)
    r.setReversible(false)
    assert( r.isSetReversible() == true )
    assert( r.getReversible() == false )
    assert( d.setLevelAndVersion(2,4,false) == true )
    r1 = m.getReaction(0)
    assert( r1.isSetReversible() == true )
    assert( r1.getReversible() == false )
    d = nil
  end

  def test_SBMLConvert_convertFromL3_spRef_defaultValues
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    r = m.createReaction()
    sr = r.createReactant()
    sr.setSpecies( "s" )
    sr.setStoichiometry(2.0)
    assert( sr.isSetConstant() == false )
    assert( sr.getConstant() == false )
    assert( sr.isSetStoichiometry() == 1 )
    assert( util_isEqual == 1 )
    assert( d.setLevelAndVersion(2,4,false) == true )
    sr1 = m.getReaction(0).getReactant(0)
    assert( sr1.isSetConstant() == false )
    assert( sr1.getConstant() == false )
    assert( sr1.isSetStoichiometry() == 1 )
    assert( util_isEqual == 1 )
    d = nil
  end

  def test_SBMLConvert_convertFromL3_species_defaultValues
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    sid =  "C";
    s = m.createSpecies()
    s.setId(sid)
    s.setCompartment( "comp")
    assert( s.isSetConstant() == false )
    assert( s.getConstant() == false )
    assert( s.isSetBoundaryCondition() == false )
    assert( s.getBoundaryCondition() == false )
    assert( s.isSetHasOnlySubstanceUnits() == false )
    assert( s.getHasOnlySubstanceUnits() == false )
    assert( d.setLevelAndVersion(2,4,false) == true )
    s1 = m.getSpecies(0)
    assert( s1.isSetConstant() == true )
    assert( s1.getConstant() == false )
    assert( s1.isSetBoundaryCondition() == true )
    assert( s1.getBoundaryCondition() == false )
    assert( s1.isSetHasOnlySubstanceUnits() == true )
    assert( s1.getHasOnlySubstanceUnits() == false )
    d = nil
  end

  def test_SBMLConvert_convertFromL3_species_defaultValues_1
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    sid =  "C";
    s = m.createSpecies()
    s.setId(sid)
    s.setCompartment( "comp")
    s.setConstant(true)
    assert( s.isSetConstant() == true )
    assert( s.getConstant() == true )
    assert( s.isSetBoundaryCondition() == false )
    assert( s.getBoundaryCondition() == false )
    assert( s.isSetHasOnlySubstanceUnits() == false )
    assert( s.getHasOnlySubstanceUnits() == false )
    assert( d.setLevelAndVersion(2,4,false) == true )
    s1 = m.getSpecies(0)
    assert( s1.isSetConstant() == true )
    assert( s1.getConstant() == true )
    assert( s1.isSetBoundaryCondition() == true )
    assert( s1.getBoundaryCondition() == false )
    assert( s1.isSetHasOnlySubstanceUnits() == true )
    assert( s1.getHasOnlySubstanceUnits() == false )
    d = nil
  end

  def test_SBMLConvert_convertFromL3_species_defaultValues_2
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    sid =  "C";
    s = m.createSpecies()
    s.setId(sid)
    s.setCompartment( "comp")
    s.setBoundaryCondition(true)
    assert( s.isSetConstant() == false )
    assert( s.getConstant() == false )
    assert( s.isSetBoundaryCondition() == true )
    assert( s.getBoundaryCondition() == true )
    assert( s.isSetHasOnlySubstanceUnits() == false )
    assert( s.getHasOnlySubstanceUnits() == false )
    assert( d.setLevelAndVersion(2,4,false) == true )
    s1 = m.getSpecies(0)
    assert( s1.isSetConstant() == true )
    assert( s1.getConstant() == false )
    assert( s1.isSetBoundaryCondition() == true )
    assert( s1.getBoundaryCondition() == true )
    assert( s1.isSetHasOnlySubstanceUnits() == true )
    assert( s1.getHasOnlySubstanceUnits() == false )
    d = nil
  end

  def test_SBMLConvert_convertFromL3_species_defaultValues_3
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    sid =  "C";
    s = m.createSpecies()
    s.setId(sid)
    s.setCompartment( "comp")
    s.setHasOnlySubstanceUnits(true)
    assert( s.isSetConstant() == false )
    assert( s.getConstant() == false )
    assert( s.isSetBoundaryCondition() == false )
    assert( s.getBoundaryCondition() == false )
    assert( s.isSetHasOnlySubstanceUnits() == true )
    assert( s.getHasOnlySubstanceUnits() == true )
    assert( d.setLevelAndVersion(2,4,false) == true )
    s1 = m.getSpecies(0)
    assert( s1.isSetConstant() == true )
    assert( s1.getConstant() == false )
    assert( s1.isSetBoundaryCondition() == true )
    assert( s1.getBoundaryCondition() == false )
    assert( s1.isSetHasOnlySubstanceUnits() == true )
    assert( s1.getHasOnlySubstanceUnits() == true )
    d = nil
  end

  def test_SBMLConvert_convertFromL3_stoichMath1
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    c.setSpatialDimensions(3)
    s = m.createSpecies()
    s.setId( "s")
    r = m.createReaction()
    sr = r.createReactant()
    sr.setId( "XREF")
    sr.setSpecies( "s")
    rule = LibSBML::RateRule.new(3,1)
    rule.setVariable( "XREF")
    math = LibSBML::parseFormula("0.001")
    rule.setMath(math)
    math = nil
    m.addRule(rule)
    assert( d.setLevelAndVersion(1,1,false) == false )
    d2 = d.clone()
    assert( d2.setLevelAndVersion(1,2,false) == true )
    d2 = nil
    assert( d.setLevelAndVersion(2,1,false) == true )
    m = d.getModel()
    assert( m.getNumParameters() == 1 )
    assert ((  "parameterId_0" == m.getRule(0).getVariable() ))
    r = m.getReaction(0)
    assert( r.getReactant(0).isSetStoichiometryMath() == 1 )
    d = nil
    rule = nil
  end

  def test_SBMLConvert_convertFromL3_stoichMath2
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    c.setSpatialDimensions(3)
    s = m.createSpecies()
    s.setId( "s")
    r = m.createReaction()
    sr = r.createReactant()
    sr.setId( "XREF")
    sr.setSpecies( "s")
    rule = LibSBML::RateRule.new(3,1)
    rule.setVariable( "XREF")
    math = LibSBML::parseFormula("0.001")
    rule.setMath(math)
    math = nil
    m.addRule(rule)
    assert( d.setLevelAndVersion(2,2,false) == true )
    m = d.getModel()
    assert( m.getNumParameters() == 1 )
    assert ((  "parameterId_0" == m.getRule(0).getVariable() ))
    r = m.getReaction(0)
    assert( r.getReactant(0).isSetStoichiometryMath() == 1 )
    d = nil
    rule = nil
  end

  def test_SBMLConvert_convertFromL3_stoichMath3
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    c.setSpatialDimensions(3)
    s = m.createSpecies()
    s.setId( "s")
    r = m.createReaction()
    sr = r.createReactant()
    sr.setId( "XREF")
    sr.setSpecies( "s")
    rule = LibSBML::RateRule.new(3,1)
    rule.setVariable( "XREF")
    math = LibSBML::parseFormula("0.001")
    rule.setMath(math)
    math = nil
    m.addRule(rule)
    assert( d.setLevelAndVersion(2,3,false) == true )
    m = d.getModel()
    assert( m.getNumParameters() == 1 )
    assert ((  "parameterId_0" == m.getRule(0).getVariable() ))
    r = m.getReaction(0)
    assert( r.getReactant(0).isSetStoichiometryMath() == 1 )
    d = nil
    rule = nil
  end

  def test_SBMLConvert_convertFromL3_stoichMath4
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    c.setSpatialDimensions(3)
    s = m.createSpecies()
    s.setId( "s")
    r = m.createReaction()
    sr = r.createReactant()
    sr.setId( "XREF")
    sr.setSpecies( "s")
    rule = LibSBML::RateRule.new(3,1)
    rule.setVariable( "XREF")
    math = LibSBML::parseFormula("0.001")
    rule.setMath(math)
    math = nil
    m.addRule(rule)
    assert( d.setLevelAndVersion(2,4,false) == true )
    m = d.getModel()
    assert( m.getNumParameters() == 1 )
    assert ((  "parameterId_0" == m.getRule(0).getVariable() ))
    r = m.getReaction(0)
    assert( r.getReactant(0).isSetStoichiometryMath() == 1 )
    d = nil
    rule = nil
  end

  def test_SBMLConvert_convertFromL3_stoichMath5
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    c.setSpatialDimensions(3)
    s = m.createSpecies()
    s.setId( "s")
    r = m.createReaction()
    sr = r.createReactant()
    sr.setId( "XREF")
    sr.setSpecies( "s")
    rule = LibSBML::RateRule.new(3,1)
    rule.setVariable( "XREF")
    math = LibSBML::parseFormula("0.001")
    rule.setMath(math)
    math = nil
    m.addRule(rule)
    assert( d.setLevelAndVersion(3,1,false) == true )
    d = nil
    rule = nil
  end

  def test_SBMLConvert_convertFromL3_unit_defaultValues
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    sid =  "C";
    ud = m.createUnitDefinition()
    ud.setId(sid)
    u = ud.createUnit()
    u.setKind(LibSBML::UNIT_KIND_MOLE)
    assert( u.isSetExponent() == 0 )
    assert( util_isNaN == 1 )
    assert( u.isSetMultiplier() == 0 )
    assert( util_isNaN == 1 )
    assert( u.isSetScale() == 0 )
    assert( u.getScale() == @@SBML_INT_MAX )
    assert( d.setLevelAndVersion(2,4,false) == true )
    u1 = m.getUnitDefinition(0).getUnit(0)
    assert( u1.isSetExponent() == 1 )
    assert( u1.getExponent() == 1 )
    assert( u1.isSetMultiplier() == 1 )
    assert( util_isEqual == 1 )
    assert( u1.isSetScale() == 1 )
    assert( u1.getScale() == 0 )
    d = nil
  end

  def test_SBMLConvert_convertFromL3_unit_defaultValues_1
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    sid =  "C";
    ud = m.createUnitDefinition()
    ud.setId(sid)
    u = ud.createUnit()
    u.setKind(LibSBML::UNIT_KIND_MOLE)
    u.setExponent(2)
    assert( u.isSetExponent() == 1 )
    assert( util_isEqual == 1 )
    assert( u.isSetMultiplier() == 0 )
    assert( util_isNaN == 1 )
    assert( u.isSetScale() == 0 )
    assert( u.getScale() == @@SBML_INT_MAX )
    assert( d.setLevelAndVersion(2,4,false) == true )
    u1 = m.getUnitDefinition(0).getUnit(0)
    assert( u1.isSetExponent() == 1 )
    assert( u1.getExponent() == 2 )
    assert( u1.isSetMultiplier() == 1 )
    assert( util_isEqual == 1 )
    assert( u1.isSetScale() == 1 )
    assert( u1.getScale() == 0 )
    d = nil
  end

  def test_SBMLConvert_convertFromL3_unit_defaultValues_2
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    sid =  "C";
    ud = m.createUnitDefinition()
    ud.setId(sid)
    u = ud.createUnit()
    u.setKind(LibSBML::UNIT_KIND_MOLE)
    u.setMultiplier(2.0)
    assert( u.isSetExponent() == 0 )
    assert( util_isNaN == 1 )
    assert( u.isSetMultiplier() == 1 )
    assert( util_isEqual == 1 )
    assert( u.isSetScale() == 0 )
    assert( u.getScale() == @@SBML_INT_MAX )
    assert( d.setLevelAndVersion(2,4,false) == true )
    u1 = m.getUnitDefinition(0).getUnit(0)
    assert( u1.isSetExponent() == 1 )
    assert( u1.getExponent() == 1 )
    assert( u1.isSetMultiplier() == 1 )
    assert( util_isEqual == 1 )
    assert( u1.isSetScale() == 1 )
    assert( u1.getScale() == 0 )
    d = nil
  end

  def test_SBMLConvert_convertFromL3_unit_defaultValues_3
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    sid =  "C";
    ud = m.createUnitDefinition()
    ud.setId(sid)
    u = ud.createUnit()
    u.setKind(LibSBML::UNIT_KIND_MOLE)
    assert( u.isSetExponent() == 0 )
    assert( u.isSetMultiplier() == 0 )
    assert( u.isSetScale() == 0 )
    assert( d.setLevelAndVersion(2,1,false) == true )
    u1 = m.getUnitDefinition(0).getUnit(0)
    assert( u1.isSetExponent() == 1 )
    assert( u1.getExponent() == 1 )
    assert( u1.isSetMultiplier() == 1 )
    assert( util_isEqual == 1 )
    assert( u1.isSetScale() == 1 )
    assert( u1.getScale() == 0 )
    assert( u1.isSetOffset() == 1 )
    assert( util_isEqual == 1 )
    d = nil
  end

  def test_SBMLConvert_convertToL1_SBMLDocument
    d = LibSBML::SBMLDocument.new(2,1)
    assert( d.setLevelAndVersion(1,2,false) == true )
    assert( d.getLevel() == 1 )
    assert( d.getVersion() == 2 )
    d = nil
  end

  def test_SBMLConvert_convertToL1_Species_Amount
    d = LibSBML::SBMLDocument.new(2,4)
    m = d.createModel()
    sid =  "C";
    c = LibSBML::Compartment.new(2,4)
    s = LibSBML::Species.new(2,4)
    c.setId(sid)
    m.addCompartment(c)
    s.setCompartment(sid)
    s.setInitialAmount(2.34)
    m.addSpecies(s)
    assert( d.setLevelAndVersion(1,2,true) == true )
    assert( s.getInitialAmount() == 2.34 )
    d = nil
    c = nil
    s = nil
  end

  def test_SBMLConvert_convertToL1_Species_Concentration
    d = LibSBML::SBMLDocument.new(2,1)
    m = d.createModel()
    sid =  "C";
    c = LibSBML::Compartment.new(2,1)
    s = LibSBML::Species.new(2,1)
    c.setId(sid)
    c.setSize(1.2)
    m.addCompartment(c)
    s.setId( "s"  )
    s.setCompartment(sid)
    s.setInitialConcentration(2.34)
    m.addSpecies(s)
    assert( d.setLevelAndVersion(1,2,true) == true )
    assert_equal true, util_isEqual(
    m.getSpecies(0).getInitialAmount()2.808))
    s1 = m.getSpecies(0)
    assert( s1 != nil )
    assert ((  "C" == s1.getCompartment() ))
    assert( m.getCompartment( "C").getSize() == 1.2 )
    assert( s1.getInitialConcentration() == 2.34 )
    assert( s1.isSetInitialConcentration() == true )
    d = nil
    c = nil
    s = nil
  end

  def test_SBMLConvert_convertToL1_noCompartment
    d = LibSBML::SBMLDocument.new(2,4)
    m = d.createModel()
    c = m.createParameter()
    c.setId( "p" )
    assert( m.getNumCompartments() == 0 )
    assert( d.setLevelAndVersion(1,2,true) == true )
    assert( m.getNumCompartments() == 1 )
    d = nil
  end

  def test_SBMLConvert_convertToL2_SBMLDocument
    d = LibSBML::SBMLDocument.new(1,2)
    assert( d.setLevelAndVersion(2,1,false) == true )
    assert( d.getLevel() == 2 )
    assert( d.getVersion() == 1 )
    d = nil
    d = LibSBML::SBMLDocument.new(1,2)
    assert( d.setLevelAndVersion(2,2,false) == true )
    assert( d.getLevel() == 2 )
    assert( d.getVersion() == 2 )
    d = nil
    d = LibSBML::SBMLDocument.new(1,2)
    assert( d.setLevelAndVersion(2,3,false) == true )
    assert( d.getLevel() == 2 )
    assert( d.getVersion() == 3 )
    d = nil
    d = LibSBML::SBMLDocument.new(1,2)
    assert( d.setLevelAndVersion(2,4,false) == true )
    assert( d.getLevel() == 2 )
    assert( d.getVersion() == 4 )
    d = nil
  end

  def test_SBMLConvert_convertToL2v4_DuplicateAnnotations_doc
    d = LibSBML::SBMLDocument.new(2,1)
    d.createModel()
    annotation =  "<rdf/>\n<rdf/>";
    i = (d).setAnnotation(annotation)
    assert( i == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( d.getLevel() == 2 )
    assert( d.getVersion() == 1 )
    assert( (d).getAnnotation().getNumChildren() == 2 )
    assert( d.setLevelAndVersion(2,4,true) == true )
    assert( d.getLevel() == 2 )
    assert( d.getVersion() == 4 )
    assert( (d).getAnnotation().getNumChildren() == 1 )
    d = nil
  end

  def test_SBMLConvert_convertToL2v4_DuplicateAnnotations_model
    d = LibSBML::SBMLDocument.new(2,1)
    m = d.createModel()
    annotation =  "<rdf/>\n<rdf/>";
    i = (m).setAnnotation(annotation)
    assert( i == LibSBML::LIBSBML_OPERATION_SUCCESS )
    assert( d.getLevel() == 2 )
    assert( d.getVersion() == 1 )
    assert( (m).getAnnotation().getNumChildren() == 2 )
    assert( d.setLevelAndVersion(2,4,true) == true )
    assert( d.getLevel() == 2 )
    assert( d.getVersion() == 4 )
    m = d.getModel()
    assert( (m).getAnnotation().getNumChildren() == 1 )
    d = nil
  end

  def test_SBMLConvert_convertToL3_compartment
    d = LibSBML::SBMLDocument.new(2,2)
    m = d.createModel()
    sid =  "C";
    c = m.createCompartment()
    c.setId(sid)
    assert( d.setLevelAndVersion(3,1,false) == true )
    c1 = m.getCompartment(0)
    assert( c1.hasRequiredAttributes() == 1 )
    d = nil
  end

  def test_SBMLConvert_convertToL3_defaultUnits
    d = LibSBML::SBMLDocument.new(1,2)
    m = d.createModel()
    sid =  "C";
    c = m.createCompartment()
    c.setId(sid)
    c.setSize(1.2)
    c.setUnits( "volume")
    assert( m.getNumUnitDefinitions() == 0 )
    assert( d.setLevelAndVersion(3,1,true) == true )
    assert( m.getNumUnitDefinitions() == 2 )
    ud = m.getUnitDefinition(0)
    assert( ud != nil )
    assert ((  "volume" == ud.getId() ))
    assert( ud.getNumUnits() == 1 )
    u = ud.getUnit(0)
    assert( u.getKind() == LibSBML::UNIT_KIND_LITRE )
    assert( u.getExponent() == 1 )
    assert( u.getMultiplier() == 1 )
    assert( u.getScale() == 0 )
    ud = m.getUnitDefinition(1)
    assert( ud != nil )
    assert ((  "area" == ud.getId() ))
    assert( ud.getNumUnits() == 1 )
    u = ud.getUnit(0)
    assert( u.getKind() == LibSBML::UNIT_KIND_METRE )
    assert( u.getExponent() == 2 )
    assert( u.getMultiplier() == 1 )
    assert( u.getScale() == 0 )
    assert( m.isSetSubstanceUnits() == 1 )
    assert( m.isSetTimeUnits() == 1 )
    assert( m.isSetVolumeUnits() == 1 )
    assert( m.isSetAreaUnits() == 1 )
    assert( m.isSetLengthUnits() == 1 )
    assert( m.isSetExtentUnits() == 1 )
    assert ((  "mole" == m.getSubstanceUnits() ))
    assert ((  "second" == m.getTimeUnits() ))
    assert ((  "volume" == m.getVolumeUnits() ))
    assert ((  "area" == m.getAreaUnits() ))
    assert ((  "metre" == m.getLengthUnits() ))
    assert ((  "mole" == m.getExtentUnits() ))
    d = nil
  end

  def test_SBMLConvert_convertToL3_defaultUnits1
    d = LibSBML::SBMLDocument.new(1,2)
    m = d.createModel()
    sid =  "C";
    c = m.createCompartment()
    c.setId(sid)
    ud = m.createUnitDefinition()
    ud.setId( "substance" )
    u = ud.createUnit()
    u.setKind(LibSBML::UNIT_KIND_MOLE)
    assert( m.getNumUnitDefinitions() == 1 )
    assert( c.isSetUnits() == false )
    assert( d.setLevelAndVersion(3,1,true) == true )
    assert( m.getNumUnitDefinitions() == 3 )
    ud = m.getUnitDefinition(0)
    assert( ud != nil )
    assert ((  "substance" == ud.getId() ))
    assert( ud.getNumUnits() == 1 )
    u = ud.getUnit(0)
    assert( u.getKind() == LibSBML::UNIT_KIND_MOLE )
    assert( u.getExponent() == 1 )
    assert( u.getMultiplier() == 1 )
    assert( u.getScale() == 0 )
    ud = m.getUnitDefinition(1)
    assert( ud != nil )
    assert ((  "volume" == ud.getId() ))
    assert( ud.getNumUnits() == 1 )
    u = ud.getUnit(0)
    assert( u.getKind() == LibSBML::UNIT_KIND_LITRE )
    assert( u.getExponent() == 1 )
    assert( u.getMultiplier() == 1 )
    assert( u.getScale() == 0 )
    ud = m.getUnitDefinition(2)
    assert( ud != nil )
    assert ((  "area" == ud.getId() ))
    assert( ud.getNumUnits() == 1 )
    u = ud.getUnit(0)
    assert( u.getKind() == LibSBML::UNIT_KIND_METRE )
    assert( u.getExponent() == 2 )
    assert( u.getMultiplier() == 1 )
    assert( u.getScale() == 0 )
    assert( c.isSetUnits() == true )
    assert ((  "volume" == c.getUnits() ))
    assert( m.isSetSubstanceUnits() == 1 )
    assert( m.isSetTimeUnits() == 1 )
    assert( m.isSetVolumeUnits() == 1 )
    assert( m.isSetAreaUnits() == 1 )
    assert( m.isSetLengthUnits() == 1 )
    assert( m.isSetExtentUnits() == 1 )
    assert ((  "substance" == m.getSubstanceUnits() ))
    assert ((  "second" == m.getTimeUnits() ))
    assert ((  "volume" == m.getVolumeUnits() ))
    assert ((  "area" == m.getAreaUnits() ))
    assert ((  "metre" == m.getLengthUnits() ))
    assert ((  "substance" == m.getExtentUnits() ))
    d = nil
  end

  def test_SBMLConvert_convertToL3_event
    d = LibSBML::SBMLDocument.new(2,2)
    m = d.createModel()
    e = m.createEvent()
    (void) e
    assert( d.setLevelAndVersion(3,1,false) == true )
    e1 = m.getEvent(0)
    assert( e1.hasRequiredAttributes() == 1 )
    d = nil
  end

  def test_SBMLConvert_convertToL3_localParameters
    d = LibSBML::SBMLDocument.new(1,2)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c" )
    s = m.createSpecies()
    s.setId( "s")
    s.setCompartment( "c")
    r = m.createReaction()
    sr = r.createReactant()
    sr.setSpecies( "s")
    kl = r.createKineticLaw()
    kl.setFormula( "s*k")
    p = kl.createParameter()
    p.setId( "k")
    assert( kl.getNumLocalParameters() == 0 )
    assert( d.setLevelAndVersion(3,1,false) == true )
    m = d.getModel()
    r = m.getReaction(0)
    kl = r.getKineticLaw()
    assert( kl.getNumLocalParameters() == 1 )
    lp = kl.getLocalParameter(0)
    (void) lp
    d = nil
  end

  def test_SBMLConvert_convertToL3_parameter
    d = LibSBML::SBMLDocument.new(2,2)
    m = d.createModel()
    sid =  "C";
    p = m.createParameter()
    p.setId(sid)
    assert( d.setLevelAndVersion(3,1,false) == true )
    p1 = m.getParameter(0)
    assert( p1.hasRequiredAttributes() == 1 )
    d = nil
  end

  def test_SBMLConvert_convertToL3_product
    d = LibSBML::SBMLDocument.new(2,2)
    m = d.createModel()
    r = m.createReaction()
    sr = r.createProduct()
    sr.setSpecies( "s" )
    assert( d.setLevelAndVersion(3,1,false) == true )
    sr1 = m.getReaction(0).getProduct(0)
    assert( sr1.hasRequiredAttributes() == 1 )
    d = nil
  end

  def test_SBMLConvert_convertToL3_reactant
    d = LibSBML::SBMLDocument.new(2,2)
    m = d.createModel()
    r = m.createReaction()
    sr = r.createReactant()
    sr.setSpecies( "s" )
    assert( d.setLevelAndVersion(3,1,false) == true )
    sr1 = m.getReaction(0).getReactant(0)
    assert( sr1.hasRequiredAttributes() == 1 )
    d = nil
  end

  def test_SBMLConvert_convertToL3_reaction
    d = LibSBML::SBMLDocument.new(2,2)
    m = d.createModel()
    sid =  "C";
    r = m.createReaction()
    r.setId(sid)
    assert( d.setLevelAndVersion(3,1,false) == true )
    r1 = m.getReaction(0)
    assert( r1.hasRequiredAttributes() == 1 )
    d = nil
  end

  def test_SBMLConvert_convertToL3_species
    d = LibSBML::SBMLDocument.new(2,2)
    m = d.createModel()
    sid =  "C";
    s = m.createSpecies()
    s.setId(sid)
    s.setCompartment( "comp")
    assert( d.setLevelAndVersion(3,1,false) == true )
    s1 = m.getSpecies(0)
    assert( s1.hasRequiredAttributes() == 1 )
    d = nil
  end

  def test_SBMLConvert_convertToL3_stoichiometryMath
    d = LibSBML::SBMLDocument.new(2,1)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c" )
    s = m.createSpecies()
    s.setId( "s")
    s.setCompartment( "c")
    r = m.createReaction()
    sr = r.createReactant()
    sr.setSpecies( "s")
    sm = sr.createStoichiometryMath()
    ast = LibSBML::parseFormula("c*2")
    sm.setMath(ast)
    ast = nil
    assert( m.getNumRules() == 0 )
    assert( sr.isSetId() == false )
    assert( d.setLevelAndVersion(3,1,false) == true )
    m = d.getModel()
    r = m.getReaction(0)
    sr = r.getReactant(0)
    assert( m.getNumRules() == 1 )
    assert( sr.isSetId() == true )
    rule = m.getRule(0)
    assert( ( rule.getVariable() != sr.getId() ) == false )
    d = nil
  end

  def test_SBMLConvert_convertToL3_trigger
    d = LibSBML::SBMLDocument.new(2,2)
    m = d.createModel()
    e = m.createEvent()
    t = e.createTrigger()
    (void) t
    assert( d.setLevelAndVersion(3,1,false) == true )
    t1 = m.getEvent(0).getTrigger()
    assert( t1.hasRequiredAttributes() == 1 )
    d = nil
  end

  def test_SBMLConvert_convertToL3_unit
    d = LibSBML::SBMLDocument.new(2,2)
    m = d.createModel()
    sid =  "C";
    ud = m.createUnitDefinition()
    ud.setId(sid)
    u = ud.createUnit()
    u.setKind(LibSBML::UNIT_KIND_MOLE)
    assert( d.setLevelAndVersion(3,1,false) == true )
    u1 = m.getUnitDefinition(0).getUnit(0)
    assert_equal true, util_isEqual
    assert( u1.getScale() == 0 )
    assert_equal true, util_isEqual
    assert( u1.hasRequiredAttributes() == 1 )
    d = nil
  end

  def test_SBMLConvert_invalidLevelVersion
    d = LibSBML::SBMLDocument.new(2,1)
    m = d.createModel()
    sid =  "C";
    c = m.createCompartment()
    c.setId(sid)
    c.setSize(1.2)
    c.setUnits( "volume")
    assert( d.setLevelAndVersion(1,3,true) == false )
    assert( d.setLevelAndVersion(2,7,true) == false )
    assert( d.setLevelAndVersion(3,4,true) == false )
    assert( d.setLevelAndVersion(4,1,true) == false )
    d = nil
  end

end
