# @file    TestSBMLConvertStrict.rb
# @brief   SBMLConvert unit tests for strict conversion
#
# @author  Akiya Jouraku (Ruby conversion)
# @author  Sarah Keating 
# 
# ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
#
# DO NOT EDIT THIS FILE.
#
# This file was generated automatically by converting the file located at
# src/sbml/test/TestSBMLConvertStrict.cpp
# using the conversion program dev/utilities/translateTests/translateTests.pl.
# Any changes made here will be lost the next time the file is regenerated.
#
# -----------------------------------------------------------------------------
# This file is part of libSBML.  Please visit http://sbml.org for more
# information about SBML, and the latest version of libSBML.
#
# Copyright 2005-2010 California Institute of Technology.
# Copyright 2002-2005 California Institute of Technology and
#                     Japan Science and Technology Corporation.
# 
# This library is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation.  A copy of the license agreement is provided
# in the file named "LICENSE.txt" included with this software distribution
# and also available online as http://sbml.org/software/libsbml/license.html
# -----------------------------------------------------------------------------
require 'test/unit'
require 'libSBML'

class TestSBMLConvertStrict < Test::Unit::TestCase

  def test_SBMLConvertStrict_convertFromL1_L2_stoich
    d = LibSBML::SBMLDocument.new(1,2)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    s = m.createSpecies()
    s.setId( "s")
    s.setCompartment( "c")
    r = m.createReaction()
    r.setId( "r")
    sr = r.createReactant()
    sr.setSpecies( "s")
    sr.setStoichiometry(3)
    sr.setDenominator(2)
    assert( d.setLevelAndVersion(2,4,true) == true )
    m = d.getModel()
    sr = m.getReaction(0).getReactant(0)
    assert( sr.isSetStoichiometryMath() == 1 )
    math = LibSBML::formulaToString(sr.getStoichiometryMath().getMath())
    assert( (  "(3/2)" != math ) == false )
    assert( sr.getStoichiometry() == 1 )
    assert( sr.getDenominator() == 1 )
    d = nil
  end

  def test_SBMLConvertStrict_convertFromL1_L2_stoich1
    d = LibSBML::SBMLDocument.new(1,2)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    s = m.createSpecies()
    s.setId( "s")
    s.setCompartment( "c")
    r = m.createReaction()
    r.setId( "r")
    sr = r.createReactant()
    sr.setSpecies( "s")
    sr.setStoichiometry(3)
    assert( d.setLevelAndVersion(2,4,true) == true )
    m = d.getModel()
    sr = m.getReaction(0).getReactant(0)
    assert( sr.isSetStoichiometryMath() == 0 )
    assert( sr.getStoichiometry() == 3 )
    d = nil
  end

  def test_SBMLConvertStrict_convertFromL1_L3_localParameters
    d = LibSBML::SBMLDocument.new(1,2)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    s = m.createSpecies()
    s.setId( "s")
    s.setCompartment( "c")
    r = m.createReaction()
    r.setId( "r")
    sr = r.createReactant()
    sr.setSpecies( "s")
    sr.setStoichiometry(1)
    kl = r.createKineticLaw()
    kl.setFormula( "1*2")
    p = kl.createParameter()
    p.setName( "p1")
    assert( d.setLevelAndVersion(3,1,true) == true )
    m = d.getModel()
    r = m.getReaction(0)
    kl = r.getKineticLaw()
    lp = kl.getLocalParameter(0)
    assert( lp.isSetId() == true )
    d = nil
  end

  def test_SBMLConvertStrict_convertFromL1_L3_stoich
    d = LibSBML::SBMLDocument.new(1,2)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    s = m.createSpecies()
    s.setId( "s")
    s.setCompartment( "c")
    r = m.createReaction()
    r.setId( "r")
    sr = r.createReactant()
    sr.setSpecies( "s")
    sr.setStoichiometry(3)
    sr.setDenominator(2)
    assert( d.setLevelAndVersion(3,1,true) == true )
    m = d.getModel()
    sr = m.getReaction(0).getReactant(0)
    assert( sr.isSetId() == true )
    math = LibSBML::formulaToString(m.getInitialAssignment(0).getMath())
    assert( (  "(3/2)" != math ) == false )
    assert( ( m.getInitialAssignment(0).getSymbol() != sr.getId() ) == false )
    assert( sr.getDenominator() == 1 )
    d = nil
  end

  def test_SBMLConvertStrict_convertFromL1_L3_stoich1
    d = LibSBML::SBMLDocument.new(1,2)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    s = m.createSpecies()
    s.setId( "s")
    s.setCompartment( "c")
    r = m.createReaction()
    r.setId( "r")
    sr = r.createReactant()
    sr.setSpecies( "s")
    sr.setStoichiometry(3)
    assert( d.setLevelAndVersion(3,1,true) == true )
    m = d.getModel()
    sr = m.getReaction(0).getReactant(0)
    assert( sr.isSetId() == false )
    assert( sr.getStoichiometry() == 3 )
    assert( sr.getDenominator() == 1 )
    d = nil
  end

  def test_SBMLConvertStrict_convertFromL2_L1_stoich
    d = LibSBML::SBMLDocument.new(2,2)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    s = m.createSpecies()
    s.setId( "s")
    s.setCompartment( "c")
    r = m.createReaction()
    r.setId( "r")
    sr = r.createReactant()
    sr.setSpecies( "s")
    sr.setStoichiometry(2)
    assert( d.setLevelAndVersion(1,2,true) == true )
    m = d.getModel()
    sr = m.getReaction(0).getReactant(0)
    assert( sr.getStoichiometry() == 2 )
    assert( sr.getDenominator() == 1 )
    d = nil
  end

  def test_SBMLConvertStrict_convertFromL2_L1_stoich1
    d = LibSBML::SBMLDocument.new(2,2)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    s = m.createSpecies()
    s.setId( "s")
    s.setCompartment( "c")
    r = m.createReaction()
    r.setId( "r")
    sr = r.createReactant()
    sr.setSpecies( "s")
    sm = sr.createStoichiometryMath()
    ast = LibSBML::ASTNode.new()
    ast.setValue(5,2)
    sm.setMath(ast)
    assert( d.setLevelAndVersion(1,2,true) == true )
    m = d.getModel()
    sr = m.getReaction(0).getReactant(0)
    assert( sr.isSetStoichiometryMath() == 0 )
    assert( sr.getStoichiometry() == 5 )
    assert( sr.getDenominator() == 2 )
    d = nil
    ast = nil
  end

  def test_SBMLConvertStrict_convertFromL2_L1_stoich2
    d = LibSBML::SBMLDocument.new(2,2)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    s = m.createSpecies()
    s.setId( "s")
    s.setCompartment( "c")
    r = m.createReaction()
    r.setId( "r")
    sr = r.createReactant()
    sr.setSpecies( "s")
    sr.setStoichiometry(2.5)
    assert( d.setLevelAndVersion(1,2,true) == false )
    d = nil
  end

  def test_SBMLConvertStrict_convertFromL2_L1_stoich3
    d = LibSBML::SBMLDocument.new(2,2)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    s = m.createSpecies()
    s.setId( "s")
    s.setCompartment( "c")
    r = m.createReaction()
    r.setId( "r")
    sr = r.createReactant()
    sr.setSpecies( "s")
    sm = sr.createStoichiometryMath()
    ast = LibSBML::ASTNode.new()
    ast.setValue(5)
    sm.setMath(ast)
    assert( d.setLevelAndVersion(1,2,true) == true )
    m = d.getModel()
    sr = m.getReaction(0).getReactant(0)
    assert( sr.isSetStoichiometryMath() == 0 )
    assert( sr.getStoichiometry() == 5 )
    assert( sr.getDenominator() == 1 )
    d = nil
    ast = nil
  end

  def test_SBMLConvertStrict_convertFromL2_L1_stoich4
    d = LibSBML::SBMLDocument.new(2,2)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    s = m.createSpecies()
    s.setId( "s")
    s.setCompartment( "c")
    r = m.createReaction()
    r.setId( "r")
    sr = r.createReactant()
    sr.setSpecies( "s")
    sm = sr.createStoichiometryMath()
    math = LibSBML::parseFormula("5/2")
    sm.setMath(math)
    math = nil
    assert( d.setLevelAndVersion(1,2,true) == false )
    d = nil
  end

  def test_SBMLConvertStrict_convertFromL2_L3_stoich
    d = LibSBML::SBMLDocument.new(2,4)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    c.setSpatialDimensions(3)
    c.setConstant(true)
    s = m.createSpecies()
    s.setId( "s")
    s.setCompartment( "c")
    s.setHasOnlySubstanceUnits(false)
    s.setBoundaryCondition(false)
    s.setConstant(false)
    r = m.createReaction()
    r.setId( "r")
    r.setReversible(false)
    r.setFast(false)
    sr = r.createReactant()
    sr.setSpecies( "s")
    sr.setId( "XREF")
    sr.setStoichiometry(3.2)
    assert( d.setLevelAndVersion(3,1,true) == true )
    assert( d.getLevel() == 3 )
    assert( d.getVersion() == 1 )
    m = d.getModel()
    sr = m.getReaction(0).getReactant(0)
    assert( sr.getStoichiometry() == 3.2 )
    d = nil
  end

  def test_SBMLConvertStrict_convertFromL2_L3_stoich1
    d = LibSBML::SBMLDocument.new(2,4)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    c.setSpatialDimensions(3)
    c.setConstant(true)
    s = m.createSpecies()
    s.setId( "s")
    s.setCompartment( "c")
    s.setHasOnlySubstanceUnits(false)
    s.setBoundaryCondition(false)
    s.setConstant(false)
    p = m.createParameter()
    p.setId( "p")
    r = m.createReaction()
    r.setId( "r")
    r.setReversible(false)
    r.setFast(false)
    sr = r.createReactant()
    sr.setSpecies( "s")
    sr.setId( "XREF")
    sm = sr.createStoichiometryMath()
    math = LibSBML::parseFormula("p")
    sm.setMath(math)
    math = nil
    assert( m.getNumRules() == 0 )
    assert( d.setLevelAndVersion(3,1,true) == true )
    assert( d.getLevel() == 3 )
    assert( d.getVersion() == 1 )
    m = d.getModel()
    assert( m.getNumRules() == 1 )
    assert( (  "XREF" != m.getRule(0).getVariable() ) == false )
    sr = m.getReaction(0).getReactant(0)
    assert( sr.isSetStoichiometry() == 0 )
    d = nil
  end

  def test_SBMLConvertStrict_convertFromL2_L3_stoich2
    d = LibSBML::SBMLDocument.new(2,4)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    c.setSpatialDimensions(3)
    c.setConstant(true)
    s = m.createSpecies()
    s.setId( "s")
    s.setCompartment( "c")
    s.setHasOnlySubstanceUnits(false)
    s.setBoundaryCondition(false)
    s.setConstant(false)
    p = m.createParameter()
    p.setId( "p")
    r = m.createReaction()
    r.setId( "r")
    r.setReversible(false)
    r.setFast(false)
    sr = r.createReactant()
    sr.setSpecies( "s")
    sm = sr.createStoichiometryMath()
    math = LibSBML::parseFormula("p")
    sm.setMath(math)
    math = nil
    assert( m.getNumRules() == 0 )
    assert( sr.isSetId() == false )
    assert( d.setLevelAndVersion(3,1,true) == true )
    assert( d.getLevel() == 3 )
    assert( d.getVersion() == 1 )
    m = d.getModel()
    sr = m.getReaction(0).getReactant(0)
    assert( m.getNumRules() == 1 )
    assert( ( sr.getId() != m.getRule(0).getVariable() ) == false )
    assert( sr.isSetId() == true )
    assert( sr.isSetStoichiometry() == 0 )
    d = nil
  end

  def test_SBMLConvertStrict_convertFromL2_L3_stoichMath1
    d = LibSBML::SBMLDocument.new(2,5)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    c.setSpatialDimensions(3)
    c.setConstant(true)
    s = m.createSpecies()
    s.setId( "s")
    s.setCompartment( "c")
    s.setHasOnlySubstanceUnits(false)
    s.setBoundaryCondition(false)
    s.setConstant(false)
    r = m.createReaction()
    r.setId( "r")
    r.setReversible(false)
    r.setFast(false)
    sr = r.createReactant()
    sr.setId( "XREF")
    sr.setSpecies( "s")
    sr.setConstant(false)
    sm = sr.createStoichiometryMath()
    math = LibSBML::ASTNode.new(LibSBML::AST_RATIONAL)
    math.setValue((long)(3),(long)(2))
    sm.setMath(math)
    math = nil
    out = writeSBMLToStdString
    doc = LibSBML::readSBMLFromString()
    assert( doc.setLevelAndVersion(3,1,true) == true )
    sr1 = doc.getModel().getReaction(0).getReactant(0)
    assert_equal true, util_isEqual
    d = nil
    doc = nil
  end

  def test_SBMLConvertStrict_convertFromL3_L1_stoichMath1
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    c.setSpatialDimensions(3)
    c.setConstant(true)
    s = m.createSpecies()
    s.setId( "s")
    s.setCompartment( "c")
    s.setHasOnlySubstanceUnits(false)
    s.setBoundaryCondition(false)
    s.setConstant(false)
    r = m.createReaction()
    r.setId( "r")
    r.setReversible(false)
    r.setFast(false)
    sr = r.createReactant()
    sr.setId( "XREF")
    sr.setSpecies( "s")
    sr.setConstant(false)
    rule = LibSBML::RateRule.new(3,1)
    rule.setVariable( "XREF")
    math = LibSBML::parseFormula("0.001")
    rule.setMath(math)
    math = nil
    m.addRule(rule)
    assert( d.setLevelAndVersion(1,2,true) == false )
    d = nil
    rule = nil
  end

  def test_SBMLConvertStrict_convertFromL3_L1_stoichMath2
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    c.setSpatialDimensions(3)
    c.setConstant(true)
    s = m.createSpecies()
    s.setId( "s")
    s.setCompartment( "c")
    s.setHasOnlySubstanceUnits(false)
    s.setBoundaryCondition(false)
    s.setConstant(false)
    r = m.createReaction()
    r.setId( "r")
    r.setReversible(false)
    r.setFast(false)
    sr = r.createReactant()
    sr.setId( "XREF")
    sr.setSpecies( "s")
    sr.setConstant(false)
    sr.setStoichiometry(1.0)
    rule = LibSBML::RateRule.new(3,1)
    rule.setVariable( "XREF")
    math = LibSBML::parseFormula("0.001")
    rule.setMath(math)
    math = nil
    m.addRule(rule)
    assert( d.setLevelAndVersion(1,2,true) == false )
    d = nil
    rule = nil
  end

  def test_SBMLConvertStrict_convertFromL3_L1_stoichMath3
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    c.setSpatialDimensions(3)
    c.setConstant(true)
    s = m.createSpecies()
    s.setId( "s")
    s.setCompartment( "c")
    s.setHasOnlySubstanceUnits(false)
    s.setBoundaryCondition(false)
    s.setConstant(false)
    r = m.createReaction()
    r.setId( "r")
    r.setReversible(false)
    r.setFast(false)
    sr = r.createReactant()
    sr.setSpecies( "s")
    sr.setConstant(true)
    sr.setStoichiometry(1.0)
    assert( d.setLevelAndVersion(1,2,true) == true )
    m = d.getModel()
    sr = m.getReaction(0).getReactant(0)
    assert( sr.isSetStoichiometryMath() == 0 )
    assert( sr.getStoichiometry() == 1 )
    assert( sr.getDenominator() == 1 )
    d = nil
  end

  def test_SBMLConvertStrict_convertFromL3_L1_stoichMath4
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    c.setSpatialDimensions(3)
    c.setConstant(true)
    s = m.createSpecies()
    s.setId( "s")
    s.setCompartment( "c")
    s.setHasOnlySubstanceUnits(false)
    s.setBoundaryCondition(false)
    s.setConstant(false)
    r = m.createReaction()
    r.setId( "r")
    r.setReversible(false)
    r.setFast(false)
    sr = r.createReactant()
    sr.setSpecies( "s")
    sr.setConstant(true)
    assert( d.setLevelAndVersion(1,2,true) == false )
    d = nil
  end

  def test_SBMLConvertStrict_convertFromL3_L1_stoichMath5
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    c.setSpatialDimensions(3)
    c.setConstant(true)
    s = m.createSpecies()
    s.setId( "s")
    s.setCompartment( "c")
    s.setHasOnlySubstanceUnits(false)
    s.setBoundaryCondition(false)
    s.setConstant(false)
    r = m.createReaction()
    r.setId( "r")
    r.setReversible(false)
    r.setFast(false)
    sr = r.createReactant()
    sr.setId( "XREF")
    sr.setSpecies( "s")
    sr.setConstant(false)
    rule = LibSBML::AssignmentRule.new(3,1)
    rule.setVariable( "XREF")
    math = LibSBML::parseFormula("0.001")
    rule.setMath(math)
    math = nil
    m.addRule(rule)
    assert( d.setLevelAndVersion(1,2,true) == false )
    d = nil
    rule = nil
  end

  def test_SBMLConvertStrict_convertFromL3_L1_stoichMath6
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    c.setSpatialDimensions(3)
    c.setConstant(true)
    s = m.createSpecies()
    s.setId( "s")
    s.setCompartment( "c")
    s.setHasOnlySubstanceUnits(false)
    s.setBoundaryCondition(false)
    s.setConstant(false)
    r = m.createReaction()
    r.setId( "r")
    r.setReversible(false)
    r.setFast(false)
    sr = r.createReactant()
    sr.setId( "XREF")
    sr.setSpecies( "s")
    sr.setConstant(false)
    sr.setStoichiometry(1.0)
    rule = LibSBML::AssignmentRule.new(3,1)
    rule.setVariable( "XREF")
    math = LibSBML::parseFormula("0.001")
    rule.setMath(math)
    math = nil
    m.addRule(rule)
    assert( d.setLevelAndVersion(1,2,true) == false )
    d = nil
    rule = nil
  end

  def test_SBMLConvertStrict_convertFromL3_L1_stoichMath7
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    c.setSpatialDimensions(3)
    c.setConstant(true)
    s = m.createSpecies()
    s.setId( "s")
    s.setCompartment( "c")
    s.setHasOnlySubstanceUnits(false)
    s.setBoundaryCondition(false)
    s.setConstant(false)
    r = m.createReaction()
    r.setId( "r")
    r.setReversible(false)
    r.setFast(false)
    sr = r.createReactant()
    sr.setId( "XREF")
    sr.setSpecies( "s")
    sr.setConstant(false)
    ia = m.createInitialAssignment()
    ia.setSymbol( "XREF")
    math = LibSBML::parseFormula("0.001")
    ia.setMath(math)
    math = nil
    assert( d.setLevelAndVersion(1,2,true) == false )
    d = nil
  end

  def test_SBMLConvertStrict_convertFromL3_L1_stoichMath8
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    c.setSpatialDimensions(3)
    c.setConstant(true)
    s = m.createSpecies()
    s.setId( "s")
    s.setCompartment( "c")
    s.setHasOnlySubstanceUnits(false)
    s.setBoundaryCondition(false)
    s.setConstant(false)
    r = m.createReaction()
    r.setId( "r")
    r.setReversible(false)
    r.setFast(false)
    sr = r.createReactant()
    sr.setId( "XREF")
    sr.setSpecies( "s")
    sr.setConstant(false)
    sr.setStoichiometry(1.0)
    ia = m.createInitialAssignment()
    ia.setSymbol( "XREF")
    math = LibSBML::parseFormula("0.001")
    ia.setMath(math)
    math = nil
    assert( d.setLevelAndVersion(1,2,true) == false )
    d = nil
  end

  def test_SBMLConvertStrict_convertFromL3_L1_stoichMath9
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    c.setSpatialDimensions(3)
    c.setConstant(true)
    s = m.createSpecies()
    s.setId( "s")
    s.setCompartment( "c")
    s.setHasOnlySubstanceUnits(false)
    s.setBoundaryCondition(false)
    s.setConstant(false)
    r = m.createReaction()
    r.setId( "r")
    r.setReversible(false)
    r.setFast(false)
    sr = r.createReactant()
    sr.setSpecies( "s")
    sr.setConstant(true)
    sr.setId( "XREF")
    assert( d.setLevelAndVersion(1,2,true) == false )
    d = nil
  end

  def test_SBMLConvertStrict_convertFromL3_doubleExponent
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    c = m.createUnitDefinition()
    c.setId( "ud")
    u = c.createUnit()
    u.setKind(LibSBML::UnitKind_forName("mole"))
    u.setExponent(1.5)
    u.setScale(0)
    u.setMultiplier(1.0)
    assert( d.setLevelAndVersion(2,4,true) == false )
    d = nil
  end

  def test_SBMLConvertStrict_convertFromL3_fast
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    c.setSpatialDimensions(3)
    c.setConstant(true)
    s = m.createSpecies()
    s.setId( "s")
    s.setCompartment( "c")
    s.setHasOnlySubstanceUnits(false)
    s.setBoundaryCondition(false)
    s.setConstant(false)
    r = m.createReaction()
    r.setId( "r")
    r.setReversible(false)
    r.setFast(true)
    sr = r.createReactant()
    sr.setSpecies( "s")
    sr.setConstant(false)
    assert( d.setLevelAndVersion(2,4,true) == true )
    m = d.getModel()
    r = m.getReaction(0)
    assert( r.isSetFast() == true )
    assert( r.getFast() == true )
    d = nil
  end

  def test_SBMLConvertStrict_convertFromL3_spatialDim1
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    c.setSpatialDimensions(3)
    c.setConstant(true)
    assert( d.setLevelAndVersion(2,4,true) == true )
    m = d.getModel()
    p = m.getCompartment(0)
    assert ((  "c" == p.getId() ))
    assert( p.getConstant() == true )
    assert( p.getSpatialDimensions() == 3 )
    d = nil
  end

  def test_SBMLConvertStrict_convertFromL3_spatialDim2
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    c.setSpatialDimensions(2)
    c.setConstant(true)
    assert( d.setLevelAndVersion(2,4,true) == true )
    m = d.getModel()
    p = m.getCompartment(0)
    assert ((  "c" == p.getId() ))
    assert( p.getConstant() == true )
    assert( p.getSpatialDimensions() == 2 )
    d = nil
  end

  def test_SBMLConvertStrict_convertFromL3_spatialDim3
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    c.setSpatialDimensions(1)
    c.setConstant(true)
    assert( d.setLevelAndVersion(2,4,true) == true )
    m = d.getModel()
    p = m.getCompartment(0)
    assert ((  "c" == p.getId() ))
    assert( p.getConstant() == true )
    assert( p.getSpatialDimensions() == 1 )
    d = nil
  end

  def test_SBMLConvertStrict_convertFromL3_spatialDim4
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    c.setSpatialDimensions(0)
    c.setConstant(true)
    assert( d.setLevelAndVersion(2,4,true) == true )
    m = d.getModel()
    p = m.getCompartment(0)
    assert ((  "c" == p.getId() ))
    assert( p.getConstant() == true )
    assert( p.getSpatialDimensions() == 0 )
    d = nil
  end

  def test_SBMLConvertStrict_convertFromL3_spatialDim5
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    c.setSpatialDimensions(3.2)
    c.setConstant(true)
    assert( d.setLevelAndVersion(2,4,true) == false )
    d = nil
  end

  def test_SBMLConvertStrict_convertFromL3_stoichMath1
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    c.setSpatialDimensions(3)
    c.setConstant(true)
    s = m.createSpecies()
    s.setId( "s")
    s.setCompartment( "c")
    s.setHasOnlySubstanceUnits(false)
    s.setBoundaryCondition(false)
    s.setConstant(false)
    r = m.createReaction()
    r.setId( "r")
    r.setReversible(false)
    r.setFast(false)
    sr = r.createReactant()
    sr.setId( "XREF")
    sr.setSpecies( "s")
    sr.setConstant(false)
    rule = LibSBML::RateRule.new(3,1)
    rule.setVariable( "XREF")
    math = LibSBML::parseFormula("0.001")
    rule.setMath(math)
    math = nil
    m.addRule(rule)
    assert( d.setLevelAndVersion(2,4,true) == true )
    m = d.getModel()
    assert( m.getNumParameters() == 1 )
    p = m.getParameter(0)
    assert ((  "parameterId_0" == p.getId() ))
    assert( p.getConstant() == false )
    assert ((  "parameterId_0" == m.getRule(0).getVariable() ))
    sr = m.getReaction(0).getReactant(0)
    assert( sr.isSetStoichiometryMath() == 1 )
    mathstr = LibSBML::formulaToString(sr.getStoichiometryMath().getMath())
    assert ((  "parameterId_0" == mathstr ))
    d = nil
    rule = nil
  end

  def test_SBMLConvertStrict_convertFromL3_stoichMath10
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    c.setSpatialDimensions(3)
    c.setConstant(true)
    s = m.createSpecies()
    s.setId( "s")
    s.setCompartment( "c")
    s.setHasOnlySubstanceUnits(false)
    s.setBoundaryCondition(false)
    s.setConstant(false)
    r = m.createReaction()
    r.setId( "r")
    r.setReversible(false)
    r.setFast(false)
    sr = r.createReactant()
    sr.setId( "XREF")
    sr.setSpecies( "s")
    sr.setConstant(false)
    sr.setStoichiometry(4.0)
    ia = m.createInitialAssignment()
    ia.setSymbol( "XREF")
    math = LibSBML::parseFormula("0.001")
    ia.setMath(math)
    math = nil
    math1 = LibSBML::parseFormula("1")
    rr = m.createRateRule()
    rr.setVariable( "XREF")
    rr.setMath(math1)
    math1 = nil
    assert( d.setLevelAndVersion(2,1,true) == true )
    m = d.getModel()
    assert( m.getNumInitialAssignments() == 0 )
    assert( m.getNumRules() == 1 )
    assert( m.getNumParameters() == 1 )
    sr = m.getReaction(0).getReactant(0)
    assert( sr.isSetStoichiometryMath() == 1 )
    mathstr = LibSBML::formulaToString(sr.getStoichiometryMath().getMath())
    assert ((  "parameterId_0" == mathstr ))
    p = m.getParameter(0)
    assert ((  "parameterId_0" == p.getId() ))
    assert_equal true, util_isEqual
    rr = m.getRule(0)
    assert ((  "parameterId_0" == rr.getVariable() ))
    mathstr = LibSBML::formulaToString(rr.getMath())
    assert ((  "1" == mathstr ))
    d = nil
  end

  def test_SBMLConvertStrict_convertFromL3_stoichMath11
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    c.setSpatialDimensions(3)
    c.setConstant(true)
    s = m.createSpecies()
    s.setId( "s")
    s.setCompartment( "c")
    s.setHasOnlySubstanceUnits(false)
    s.setBoundaryCondition(false)
    s.setConstant(false)
    r = m.createReaction()
    r.setId( "r")
    r.setReversible(false)
    r.setFast(false)
    sr = r.createReactant()
    sr.setId( "XREF")
    sr.setSpecies( "s")
    sr.setConstant(false)
    sr.setStoichiometry(4.0)
    ia = m.createInitialAssignment()
    ia.setSymbol( "XREF")
    math = LibSBML::parseFormula("0.001")
    ia.setMath(math)
    math = nil
    math1 = LibSBML::parseFormula("1")
    rr = m.createRateRule()
    rr.setVariable( "XREF")
    rr.setMath(math1)
    math1 = nil
    assert( d.setLevelAndVersion(2,4,true) == true )
    m = d.getModel()
    assert( m.getNumInitialAssignments() == 1 )
    assert( m.getNumRules() == 1 )
    assert( m.getNumParameters() == 1 )
    sr = m.getReaction(0).getReactant(0)
    assert( sr.isSetStoichiometryMath() == 1 )
    mathstr = LibSBML::formulaToString(sr.getStoichiometryMath().getMath())
    assert ((  "parameterId_0" == mathstr ))
    p = m.getParameter(0)
    assert ((  "parameterId_0" == p.getId() ))
    assert_equal true, util_isEqual
    rr = m.getRule(0)
    assert ((  "parameterId_0" == rr.getVariable() ))
    mathstr = LibSBML::formulaToString(rr.getMath())
    assert ((  "1" == mathstr ))
    ia = m.getInitialAssignment(0)
    assert ((  "parameterId_0" == ia.getSymbol() ))
    mathstr = LibSBML::formulaToString(ia.getMath())
    assert ((  "0.001" == mathstr ))
    d = nil
  end

  def test_SBMLConvertStrict_convertFromL3_stoichMath2
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    c.setSpatialDimensions(3)
    c.setConstant(true)
    s = m.createSpecies()
    s.setId( "s")
    s.setCompartment( "c")
    s.setHasOnlySubstanceUnits(false)
    s.setBoundaryCondition(false)
    s.setConstant(false)
    r = m.createReaction()
    r.setId( "r")
    r.setReversible(false)
    r.setFast(false)
    sr = r.createReactant()
    sr.setId( "XREF")
    sr.setSpecies( "s")
    sr.setConstant(false)
    sr.setStoichiometry(1.0)
    rule = LibSBML::RateRule.new(3,1)
    rule.setVariable( "XREF")
    math = LibSBML::parseFormula("0.001")
    rule.setMath(math)
    math = nil
    m.addRule(rule)
    assert( d.setLevelAndVersion(2,4,true) == true )
    m = d.getModel()
    assert( m.getNumParameters() == 1 )
    p = m.getParameter(0)
    assert ((  "parameterId_0" == p.getId() ))
    assert( p.getConstant() == false )
    assert ((  "parameterId_0" == m.getRule(0).getVariable() ))
    sr = m.getReaction(0).getReactant(0)
    assert( sr.isSetStoichiometryMath() == 1 )
    mathstr = LibSBML::formulaToString(sr.getStoichiometryMath().getMath())
    assert ((  "parameterId_0" == mathstr ))
    d = nil
    rule = nil
  end

  def test_SBMLConvertStrict_convertFromL3_stoichMath3
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    c.setSpatialDimensions(3)
    c.setConstant(true)
    s = m.createSpecies()
    s.setId( "s")
    s.setCompartment( "c")
    s.setHasOnlySubstanceUnits(false)
    s.setBoundaryCondition(false)
    s.setConstant(false)
    r = m.createReaction()
    r.setId( "r")
    r.setReversible(false)
    r.setFast(false)
    sr = r.createReactant()
    sr.setSpecies( "s")
    sr.setConstant(false)
    sr.setStoichiometry(1.0)
    assert( d.setLevelAndVersion(2,4,true) == true )
    m = d.getModel()
    assert( m.getNumParameters() == 0 )
    r = m.getReaction(0)
    assert( r.getReactant(0).isSetStoichiometryMath() == 0 )
    d = nil
  end

  def test_SBMLConvertStrict_convertFromL3_stoichMath4
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    c.setSpatialDimensions(3)
    c.setConstant(true)
    s = m.createSpecies()
    s.setId( "s")
    s.setCompartment( "c")
    s.setHasOnlySubstanceUnits(false)
    s.setBoundaryCondition(false)
    s.setConstant(false)
    r = m.createReaction()
    r.setId( "r")
    r.setReversible(false)
    r.setFast(false)
    sr = r.createReactant()
    sr.setSpecies( "s")
    sr.setConstant(false)
    assert( d.setLevelAndVersion(2,4,true) == true )
    m = d.getModel()
    assert( m.getNumParameters() == 1 )
    p = m.getParameter(0)
    assert ((  "parameterId_0" == p.getId() ))
    assert( p.getConstant() == false )
    sr = m.getReaction(0).getReactant(0)
    assert( sr.isSetStoichiometryMath() == 1 )
    mathstr = LibSBML::formulaToString(sr.getStoichiometryMath().getMath())
    assert ((  "parameterId_0" == mathstr ))
    d = nil
  end

  def test_SBMLConvertStrict_convertFromL3_stoichMath5
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    c.setSpatialDimensions(3)
    c.setConstant(true)
    s = m.createSpecies()
    s.setId( "s")
    s.setCompartment( "c")
    s.setHasOnlySubstanceUnits(false)
    s.setBoundaryCondition(false)
    s.setConstant(false)
    r = m.createReaction()
    r.setId( "r")
    r.setReversible(false)
    r.setFast(false)
    sr = r.createReactant()
    sr.setId( "XREF")
    sr.setSpecies( "s")
    sr.setConstant(false)
    rule = LibSBML::AssignmentRule.new(3,1)
    rule.setVariable( "XREF")
    math = LibSBML::parseFormula("0.001")
    rule.setMath(math)
    math = nil
    m.addRule(rule)
    assert( d.setLevelAndVersion(2,4,true) == true )
    m = d.getModel()
    assert( m.getNumRules() == 0 )
    sr = m.getReaction(0).getReactant(0)
    assert( sr.isSetStoichiometryMath() == 1 )
    mathstr = LibSBML::formulaToString(sr.getStoichiometryMath().getMath())
    assert ((  "0.001" == mathstr ))
    d = nil
    rule = nil
  end

  def test_SBMLConvertStrict_convertFromL3_stoichMath6
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    c.setSpatialDimensions(3)
    c.setConstant(true)
    s = m.createSpecies()
    s.setId( "s")
    s.setCompartment( "c")
    s.setHasOnlySubstanceUnits(false)
    s.setBoundaryCondition(false)
    s.setConstant(false)
    r = m.createReaction()
    r.setId( "r")
    r.setReversible(false)
    r.setFast(false)
    sr = r.createReactant()
    sr.setId( "XREF")
    sr.setSpecies( "s")
    sr.setConstant(false)
    sr.setStoichiometry(1.0)
    rule = LibSBML::AssignmentRule.new(3,1)
    rule.setVariable( "XREF")
    math = LibSBML::parseFormula("0.001")
    rule.setMath(math)
    math = nil
    m.addRule(rule)
    assert( d.setLevelAndVersion(2,4,true) == true )
    m = d.getModel()
    assert( m.getNumRules() == 0 )
    sr = m.getReaction(0).getReactant(0)
    assert( sr.isSetStoichiometryMath() == 1 )
    mathstr = LibSBML::formulaToString(sr.getStoichiometryMath().getMath())
    assert ((  "0.001" == mathstr ))
    d = nil
    rule = nil
  end

  def test_SBMLConvertStrict_convertFromL3_stoichMath7
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    c.setSpatialDimensions(3)
    c.setConstant(true)
    s = m.createSpecies()
    s.setId( "s")
    s.setCompartment( "c")
    s.setHasOnlySubstanceUnits(false)
    s.setBoundaryCondition(false)
    s.setConstant(false)
    r = m.createReaction()
    r.setId( "r")
    r.setReversible(false)
    r.setFast(false)
    sr = r.createReactant()
    sr.setId( "XREF")
    sr.setSpecies( "s")
    sr.setConstant(false)
    ia = m.createInitialAssignment()
    ia.setSymbol( "XREF")
    math = LibSBML::parseFormula("0.001")
    ia.setMath(math)
    math = nil
    assert( d.setLevelAndVersion(2,4,true) == true )
    m = d.getModel()
    assert( m.getNumInitialAssignments() == 0 )
    sr = m.getReaction(0).getReactant(0)
    assert( sr.isSetStoichiometryMath() == 1 )
    mathstr = LibSBML::formulaToString(sr.getStoichiometryMath().getMath())
    assert ((  "0.001" == mathstr ))
    d = nil
  end

  def test_SBMLConvertStrict_convertFromL3_stoichMath8
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    c.setSpatialDimensions(3)
    c.setConstant(true)
    s = m.createSpecies()
    s.setId( "s")
    s.setCompartment( "c")
    s.setHasOnlySubstanceUnits(false)
    s.setBoundaryCondition(false)
    s.setConstant(false)
    r = m.createReaction()
    r.setId( "r")
    r.setReversible(false)
    r.setFast(false)
    sr = r.createReactant()
    sr.setId( "XREF")
    sr.setSpecies( "s")
    sr.setConstant(false)
    sr.setStoichiometry(1.0)
    ia = m.createInitialAssignment()
    ia.setSymbol( "XREF")
    math = LibSBML::parseFormula("0.001")
    ia.setMath(math)
    math = nil
    assert( d.setLevelAndVersion(2,4,true) == true )
    m = d.getModel()
    assert( m.getNumInitialAssignments() == 0 )
    sr = m.getReaction(0).getReactant(0)
    assert( sr.isSetStoichiometryMath() == 1 )
    mathstr = LibSBML::formulaToString(sr.getStoichiometryMath().getMath())
    assert ((  "0.001" == mathstr ))
    d = nil
  end

  def test_SBMLConvertStrict_convertFromL3_stoichMath9
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    c.setSpatialDimensions(3)
    c.setConstant(true)
    s = m.createSpecies()
    s.setId( "s")
    s.setCompartment( "c")
    s.setHasOnlySubstanceUnits(false)
    s.setBoundaryCondition(false)
    s.setConstant(false)
    r = m.createReaction()
    r.setId( "r")
    r.setReversible(false)
    r.setFast(false)
    sr = r.createReactant()
    sr.setSpecies( "s")
    sr.setConstant(false)
    sr.setId( "XREF")
    assert( d.setLevelAndVersion(2,4,true) == true )
    m = d.getModel()
    assert( m.getNumParameters() == 1 )
    p = m.getParameter(0)
    assert ((  "parameterId_0" == p.getId() ))
    assert( p.getConstant() == false )
    sr = m.getReaction(0).getReactant(0)
    assert( sr.isSetStoichiometryMath() == 1 )
    math = LibSBML::formulaToString(sr.getStoichiometryMath().getMath())
    assert ((  "parameterId_0" == math ))
    d = nil
  end

  def test_SBMLConvertStrict_convertFrom_L3V2_fast
    d = LibSBML::SBMLDocument.new(3,2)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    c.setSpatialDimensions(3)
    c.setConstant(true)
    s = m.createSpecies()
    s.setId( "s")
    s.setCompartment( "c")
    s.setHasOnlySubstanceUnits(false)
    s.setBoundaryCondition(false)
    s.setConstant(false)
    r = m.createReaction()
    r.setId( "r")
    r.setReversible(false)
    sr = r.createReactant()
    sr.setId( "XREF")
    sr.setSpecies( "s")
    sr.setConstant(false)
    out = writeSBMLToStdString
    doc = LibSBML::readSBMLFromString()
    r1 = doc.getModel().getReaction(0)
    assert( r1.isSetFast() == false )
    assert( doc.setLevelAndVersion(3,1,true) == true )
    r1 = doc.getModel().getReaction(0)
    assert( r1.isSetFast() == true )
    d = nil
    doc = nil
  end

  def test_SBMLConvertStrict_convertFuncDefsInInitialAssignmentToL1
    d = LibSBML::SBMLDocument.new(2,2)
    m = d.createModel()
    fd = m.createFunctionDefinition()
    fd.setId( "fd")
    math = LibSBML::parseFormula("lambda(x, x+2)")
    fd.setMath(math)
    p = m.createParameter()
    p.setId( "p")
    p.setConstant(false)
    ia = m.createInitialAssignment()
    math1 = LibSBML::parseFormula("fd(3)")
    ia.setMath(math1)
    ia.setSymbol( "p")
    assert( m.getNumFunctionDefinitions() == 1 )
    assert( m.getNumInitialAssignments() == 1 )
    assert( p.isSetValue() == false )
    assert( d.setLevelAndVersion(1,2,true) == true )
    assert( d.getLevel() == 1 )
    assert( d.getVersion() == 2 )
    m1 = d.getModel()
    p1 = m.getParameter(0)
    assert( m1.getNumFunctionDefinitions() == 0 )
    assert( m1.getNumInitialAssignments() == 0 )
    assert( p1.isSetValue() == true )
    assert_equal true, util_isEqual
    d = nil
    math = nil
    math1 = nil
  end

  def test_SBMLConvertStrict_convertFuncDefsToL1
    d = LibSBML::SBMLDocument.new(2,2)
    m = d.createModel()
    fd = m.createFunctionDefinition()
    fd.setId( "fd")
    math = LibSBML::parseFormula("lambda(x, x+2)")
    fd.setMath(math)
    c = m.createCompartment()
    c.setId( "c")
    c.setConstant(false)
    c.setSize(1)
    ar = m.createAssignmentRule()
    math1 = LibSBML::parseFormula("fd(3)")
    ar.setMath(math1)
    ar.setVariable( "c")
    assert( m.getNumFunctionDefinitions() == 1 )
    assert( d.setLevelAndVersion(1,2,true) == true )
    assert( d.getLevel() == 1 )
    assert( d.getVersion() == 2 )
    m1 = d.getModel()
    assert( m1.getNumFunctionDefinitions() == 0 )
    ar1 = m1.getRule(0)
    assert ((  "3 + 2" == ar1.getFormula() ))
    d = nil
    math = nil
    math1 = nil
  end

  def test_SBMLConvertStrict_convertInitialAssignmentsToL1
    d = LibSBML::SBMLDocument.new(2,2)
    m = d.createModel()
    p1 = m.createParameter()
    p1.setId( "p1")
    p1.setValue(1)
    p2 = m.createParameter()
    p2.setId( "p2")
    p2.setValue(4.6)
    p3 = m.createParameter()
    p3.setId( "p3")
    ia1 = m.createInitialAssignment()
    ia1.setSymbol( "p1")
    math = LibSBML::parseFormula("3/3")
    ia1.setMath(math)
    ia2 = m.createInitialAssignment()
    ia2.setSymbol( "p2")
    math1 = LibSBML::parseFormula("3 + 2")
    ia2.setMath(math1)
    ia3 = m.createInitialAssignment()
    ia3.setSymbol( "p3")
    math2 = LibSBML::parseFormula("pow(2,3)")
    ia3.setMath(math2)
    assert( m.getNumInitialAssignments() == 3 )
    assert( m.getParameter(0).getValue() == 1 )
    assert( m.getParameter(1).getValue() == 4.6 )
    assert( m.getParameter(2).isSetValue() == false )
    assert( d.setLevelAndVersion(1,2,true) == true )
    assert( d.getLevel() == 1 )
    assert( d.getVersion() == 2 )
    m1 = d.getModel()
    assert( m1.getNumInitialAssignments() == 0 )
    assert( m1.getParameter(0).getValue() == 1 )
    assert( m1.getParameter(1).getValue() == 5 )
    assert( m1.getParameter(2).isSetValue() == true )
    assert( m1.getParameter(2).getValue() == 8 )
    d = nil
    math = nil
    math1 = nil
    math2 = nil
  end

  def test_SBMLConvertStrict_convertInitialAssignmentsToL2
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    p1 = m.createParameter()
    p1.setId( "p1")
    p1.setConstant(true)
    p1.setValue(1)
    p2 = m.createParameter()
    p2.setId( "p2")
    p2.setConstant(true)
    p2.setValue(4.6)
    p3 = m.createParameter()
    p3.setId( "p3")
    p3.setConstant(true)
    p4 = m.createParameter()
    p4.setId( "p4")
    p4.setConstant(true)
    p5 = m.createParameter()
    p5.setId( "p5")
    p5.setConstant(true)
    p6 = m.createParameter()
    p6.setId( "p6")
    p6.setConstant(true)
    ia1 = m.createInitialAssignment()
    ia1.setSymbol( "p1")
    math = LibSBML::parseFormula("piecewise(1, and(), 0)")
    ia1.setMath(math)
    ia2 = m.createInitialAssignment()
    ia2.setSymbol( "p2")
    math1 = LibSBML::parseFormula("piecewise(1, or(), 0)")
    ia2.setMath(math1)
    ia3 = m.createInitialAssignment()
    ia3.setSymbol( "p3")
    math2 = LibSBML::parseFormula("piecewise(1, xor(),  0)")
    ia3.setMath(math2)
    ia4 = m.createInitialAssignment()
    ia4.setSymbol( "p4")
    math3 = LibSBML::parseFormula("piecewise(1, and(true), 0)")
    ia4.setMath(math3)
    ia5 = m.createInitialAssignment()
    ia5.setSymbol( "p5")
    math4 = LibSBML::parseFormula("piecewise(1, or(false), 0)")
    ia5.setMath(math4)
    ia6 = m.createInitialAssignment()
    ia6.setSymbol( "p6")
    math5 = LibSBML::parseFormula("piecewise(1, xor(true),  0)")
    ia6.setMath(math5)
    assert( m.getNumInitialAssignments() == 6 )
    assert( d.setLevelAndVersion(2,1,true) == true )
    assert( d.getLevel() == 2 )
    assert( d.getVersion() == 1 )
    m1 = d.getModel()
    assert( m1.getNumInitialAssignments() == 0 )
    assert( m1.getParameter(0).getValue() == 1 )
    assert( m1.getParameter(1).getValue() == 0 )
    assert( m1.getParameter(2).isSetValue() == true )
    assert( m1.getParameter(2).getValue() == 0 )
    assert( m1.getParameter(3).getValue() == 1 )
    assert( m1.getParameter(4).getValue() == 0 )
    assert( m1.getParameter(5).getValue() == 1 )
    d = nil
    math = nil
    math1 = nil
    math2 = nil
    math3 = nil
    math4 = nil
    math5 = nil
  end

  def test_SBMLConvertStrict_convertInitialAssignmentsUsingRnId
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    c.setSpatialDimensions(3)
    c.setConstant(true)
    s = m.createSpecies()
    s.setId( "s")
    s.setCompartment( "c")
    s.setHasOnlySubstanceUnits(false)
    s.setBoundaryCondition(false)
    s.setConstant(false)
    r = m.createReaction()
    r.setId( "r")
    r.setReversible(false)
    r.setFast(false)
    sr = r.createReactant()
    sr.setSpecies( "s")
    sr.setConstant(true)
    sr.setStoichiometry(1)
    kl = r.createKineticLaw()
    math = LibSBML::parseFormula("3")
    kl.setMath(math)
    p = m.createParameter()
    p.setId( "p")
    p.setConstant(false)
    ia1 = m.createInitialAssignment()
    ia1.setSymbol( "p")
    math1 = LibSBML::parseFormula("3/r")
    ia1.setMath(math1)
    assert( m.getNumInitialAssignments() == 1 )
    assert( m.getParameter(0).isSetValue() == false )
    assert( d.setLevelAndVersion(1,2,true) == true )
    assert( d.getLevel() == 1 )
    assert( d.getVersion() == 2 )
    m1 = d.getModel()
    assert( m1.getNumInitialAssignments() == 0 )
    assert( m1.getParameter(0).isSetValue() == true )
    assert_equal true, util_isEqual
    d = nil
    math = nil
    math1 = nil
  end

  def test_SBMLConvertStrict_convertL1ParamRule
    d = LibSBML::SBMLDocument.new(1,2)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    p = m.createParameter()
    p.setId( "p")
    p1 = m.createParameter()
    p1.setId( "p1")
    math = LibSBML::parseFormula("p")
    ar = m.createAssignmentRule()
    ar.setVariable( "p1")
    ar.setMath(math)
    ar.setUnits( "mole")
    assert( d.setLevelAndVersion(2,1,true) == true )
    assert( d.getLevel() == 2 )
    assert( d.getVersion() == 1 )
    r1 = d.getModel().getRule(0)
    assert( r1.getUnits() == "" )
    d = nil
    math = nil
  end

  def test_SBMLConvertStrict_convertNonStrictSBO1
    d = LibSBML::SBMLDocument.new(2,4)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    c.setConstant(false)
    (c).setSBOTerm(64)
    assert( d.setLevelAndVersion(2,3,true) == false )
    assert( d.getLevel() == 2 )
    assert( d.getVersion() == 4 )
    assert( d.setLevelAndVersion(2,2,true) == false )
    assert( d.getLevel() == 2 )
    assert( d.getVersion() == 4 )
    assert( d.setLevelAndVersion(2,1,true) == true )
    assert( d.getLevel() == 2 )
    assert( d.getVersion() == 1 )
    c1 = d.getModel().getCompartment(0)
    assert( (c1).getSBOTerm() == -1 )
    d = nil
  end

  def test_SBMLConvertStrict_convertNonStrictSBO2
    d = LibSBML::SBMLDocument.new(2,4)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    c.setConstant(false)
    (c).setSBOTerm(64)
    assert( d.setLevelAndVersion(1,2,true) == true )
    assert( d.getLevel() == 1 )
    assert( d.getVersion() == 2 )
    c2 = d.getModel().getCompartment(0)
    assert( (c2).getSBOTerm() == -1 )
    d = nil
  end

  def test_SBMLConvertStrict_convertNonStrictUnits
    d = LibSBML::SBMLDocument.new(2,4)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    c.setConstant(false)
    p = m.createParameter()
    p.setId( "p")
    p.setUnits( "mole")
    math = LibSBML::parseFormula("p")
    ar = m.createAssignmentRule()
    ar.setVariable( "c")
    ar.setMath(math)
    assert( d.setLevelAndVersion(2,1,true) == false )
    assert( d.getLevel() == 2 )
    assert( d.getVersion() == 4 )
    assert( d.setLevelAndVersion(2,2,true) == false )
    assert( d.getLevel() == 2 )
    assert( d.getVersion() == 4 )
    assert( d.setLevelAndVersion(2,3,true) == false )
    assert( d.getLevel() == 2 )
    assert( d.getVersion() == 4 )
    assert( d.setLevelAndVersion(1,2,true) == false )
    assert( d.getLevel() == 2 )
    assert( d.getVersion() == 4 )
    d = nil
    math = nil
  end

  def test_SBMLConvertStrict_convertSBO1
    d = LibSBML::SBMLDocument.new(2,4)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    (c).setSBOTerm(240)
    assert( d.setLevelAndVersion(2,3,true) == true )
    assert( d.getLevel() == 2 )
    assert( d.getVersion() == 3 )
    c1 = d.getModel().getCompartment(0)
    assert( (c1).getSBOTerm() == 240 )
    d = nil
  end

  def test_SBMLConvertStrict_convertSBO2
    d = LibSBML::SBMLDocument.new(2,4)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    (c).setSBOTerm(240)
    assert( d.setLevelAndVersion(2,2,true) == true )
    assert( d.getLevel() == 2 )
    assert( d.getVersion() == 2 )
    c1 = d.getModel().getCompartment(0)
    assert( (c1).getSBOTerm() == -1 )
    d = nil
  end

  def test_SBMLConvertStrict_convertSpeciesReferenceIdsUsedInMath
    d = LibSBML::SBMLDocument.new(3,1)
    m = d.createModel()
    c = m.createCompartment()
    c.setId( "c")
    c.setSpatialDimensions(3)
    c.setConstant(true)
    s = m.createSpecies()
    s.setId( "s")
    s.setCompartment( "c")
    s.setHasOnlySubstanceUnits(false)
    s.setBoundaryCondition(false)
    s.setConstant(false)
    r = m.createReaction()
    r.setId( "r")
    r.setReversible(false)
    r.setFast(false)
    sr = r.createReactant()
    sr.setId( "XREF")
    sr.setSpecies( "s")
    sr.setConstant(false)
    sr.setStoichiometry(1.0)
    ia = m.createInitialAssignment()
    ia.setSymbol( "c")
    math = LibSBML::parseFormula("XREF*2")
    ia.setMath(math)
    math = nil
    assert( d.setLevelAndVersion(1,2,true) == false )
    assert( d.setLevelAndVersion(2,1,true) == false )
    assert( d.setLevelAndVersion(2,2,true) == false )
    assert( d.setLevelAndVersion(2,3,true) == false )
    assert( d.setLevelAndVersion(2,4,true) == false )
    assert( d.setLevelAndVersion(2,5,true) == false )
    d = nil
  end

  def test_SBMLConvertStrict_convertToL1
    d = LibSBML::SBMLDocument.new(2,2)
    m = d.createModel()
    (m).setMetaId( "_m")
    c = m.createCompartment()
    c.setId( "c")
    (c).setSBOTerm(240)
    s = m.createSpecies()
    s.setId( "s")
    s.setCompartment( "c")
    assert( d.setLevelAndVersion(1,2,true) == true )
    assert( d.getLevel() == 1 )
    assert( d.getVersion() == 2 )
    m1 = d.getModel()
    assert( (m1).getMetaId() == "" )
    c1 = m1.getCompartment(0)
    assert( (c1).getSBOTerm() == -1 )
    d = nil
  end

end
