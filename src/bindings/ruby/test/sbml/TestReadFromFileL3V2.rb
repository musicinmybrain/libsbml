# @file    TestReadFromFileL3V2.rb
# @brief   Reads test-data/l3v2-all.xml into memory and tests it.
#
# @author  Akiya Jouraku (Ruby conversion)
# @author  Sarah Keating 
# 
# ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
#
# DO NOT EDIT THIS FILE.
#
# This file was generated automatically by converting the file located at
# src/sbml/test/TestReadFromFileL3V2.cpp
# using the conversion program dev/utilities/translateTests/translateTests.pl.
# Any changes made here will be lost the next time the file is regenerated.
#
# -----------------------------------------------------------------------------
# This file is part of libSBML.  Please visit http://sbml.org for more
# information about SBML, and the latest version of libSBML.
#
# Copyright 2005-2010 California Institute of Technology.
# Copyright 2002-2005 California Institute of Technology and
#                     Japan Science and Technology Corporation.
# 
# This library is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation.  A copy of the license agreement is provided
# in the file named "LICENSE.txt" included with this software distribution
# and also available online as http://sbml.org/software/libsbml/license.html
# -----------------------------------------------------------------------------
require 'test/unit'
require 'libSBML'

class TestReadFromFileL3V2 < Test::Unit::TestCase

  def test_echo_l3v2_all
    filename = "../../sbml/sbml/test/test-data/"
    filename += "l3v2-all.xml"
    fileout = "../../sbml/sbml/test/test-data/"
    fileout += "tempOut.xml"
    d = LibSBML::readSBML()
    if (d == nil)
    end
    LibSBML::writeSBML(d)
    outD = LibSBML::readSBML()
    doc = d.toSBML()
    out = outd.toSBML()
    assert( ( out != doc ) == false )
    d = nil
    outD = nil
  end

  def test_read_l3v2_all
    reader = LibSBML::SBMLReader.new()
    filename = "../../sbml/sbml/test/test-data/"
    filename += "l3v2-all.xml"
    d = reader.readSBML(filename)
    if (d == nil)
    end
    assert( d.getLevel() == 3 )
    assert( d.getVersion() == 2 )
    m = d.getModel()
    assert( m != nil )
    assert_equal true, m.isSetSubstanceUnits()
    assert_equal true, m.isSetTimeUnits()
    assert_equal true, m.isSetVolumeUnits()
    assert_equal true, m.isSetLengthUnits()
    assert_equal true, m.isSetAreaUnits()
    assert_equal true, m.isSetExtentUnits()
    assert_equal true, m.isSetConversionFactor()
    assert( m.getSubstanceUnits() ==  "mole" )
    assert( m.getTimeUnits() ==  "second" )
    assert( m.getVolumeUnits() ==  "litre" )
    assert( m.getLengthUnits() ==  "metre" )
    assert( m.getAreaUnits() ==  "metre" )
    assert( m.getExtentUnits() ==  "mole" )
    assert( m.getConversionFactor() ==  "p" )
    assert( m.getNumUnitDefinitions() == 1 )
    ud = m.getUnitDefinition(0)
    assert( ud.getNumUnits() == 3 )
    u = ud.getUnit(0)
    assert_equal true, u.isSetExponent()
    assert_equal true, u.isSetScale()
    assert_equal true, u.isSetMultiplier()
    assert( u.getExponent() == -1 )
    assert( u.getExponentAsDouble() == -1 )
    assert( u.getScale() == 2 )
    assert( u.getMultiplier() == 1.3 )
    u = ud.getUnit(1)
    assert_equal true, u.isSetExponent()
    assert_equal true, u.isSetScale()
    assert_equal true, u.isSetMultiplier()
    assert( u.getExponentAsDouble() == 1.5 )
    assert( u.getScale() == 10 )
    assert( u.getMultiplier() == 0.5 )
    u = ud.getUnit(2)
    assert_equal true, u.isSetExponent()
    assert_equal true, u.isSetScale()
    assert_equal true, u.isSetMultiplier()
    assert( u.getExponent() == 1 )
    assert( u.getScale() == 0 )
    assert( u.getMultiplier() == 1 )
    assert( m.getNumCompartments() == 2 )
    c = m.getCompartment(0)
    assert_equal true, c.isSetSize()
    assert_equal true, c.isSetSpatialDimensions()
    assert_equal true, c.isSetConstant()
    assert( c.getId() ==  "cell" )
    assert( c.getSize() == 1e-14 )
    assert( c.getSpatialDimensions() == 3 )
    assert( c.getSpatialDimensionsAsDouble() == 3 )
    assert( c.getUnits() ==  "litre" )
    assert( c.getConstant() == true )
    c = m.getCompartment(1)
    assert_equal false, c.isSetSize()
    assert_equal true, c.isSetSpatialDimensions()
    assert_equal true, c.isSetConstant()
    assert( c.getId() ==  "comp" )
    assert( c.getSpatialDimensionsAsDouble() == 4.6 )
    assert( m.getNumConstraints() == 1 )
    con = m.getConstraint(0)
    assert( con != nil )
    ast = con.getMath()
    formula = LibSBML::formulaToString(ast)
    assert ((  "lt(x, 3)" == formula ))
    assert( m.getNumEvents() == 1 )
    e = m.getEvent(0)
    assert( e != nil )
    assert( e.getId() ==  "e1" )
    assert( e.getSBOTerm() == 231 )
    assert( e.getSBOTermID() ==  "SBO:0000231" )
    assert_equal true, e.isSetDelay()
    delay = e.getDelay()
    assert( delay != nil )
    assert( delay.getSBOTerm() == 64 )
    assert( delay.getSBOTermID() ==  "SBO:0000064" )
    ast = delay.getMath()
    formula = LibSBML::formulaToString(ast)
    assert ((  "p + 3" == formula ))
    assert_equal true, e.isSetPriority()
    prior = e.getPriority()
    assert( prior != nil )
    assert( prior.getSBOTerm() == 64 )
    assert( prior.getSBOTermID() ==  "SBO:0000064" )
    ast = prior.getMath()
    formula = LibSBML::formulaToString(ast)
    assert ((  "1" == formula ))
    assert_equal true, e.isSetTrigger()
    trigger = e.getTrigger()
    assert( trigger != nil )
    ast = trigger.getMath()
    formula = LibSBML::formulaToString(ast)
    assert ((  "true" == formula ))
    loe = m.getListOfEvents()
    e1 = loe.get(0)
    assert( e1 == e )
    e1 = loe.get("e1")
    assert( e1 == e )
    assert( e.getNumEventAssignments() == 1 )
    ea = e.getEventAssignment(0)
    assert( ea != nil )
    assert( ea.getVariable() ==  "Keq" )
    assert( ea.getSBOTerm() == 64 )
    assert( ea.getSBOTermID() ==  "SBO:0000064" )
    ast = ea.getMath()
    formula = LibSBML::formulaToString(ast)
    assert ((  "X0 * p" == formula ))
    loea = e.getListOfEventAssignments()
    ea1 = loea.get(0)
    assert( ea1 == ea )
    ea1 = loea.get("Keq")
    assert( ea1 == ea )
    assert( m.getNumFunctionDefinitions() == 1 )
    fd = m.getFunctionDefinition(0)
    assert( fd != nil )
    assert( fd.getId() ==  "fd" )
    assert( fd.getSBOTerm() == 64 )
    assert( fd.getSBOTermID() ==  "SBO:0000064" )
    ast = fd.getMath()
    formula = LibSBML::formulaToString(ast)
    assert ((  "lambda(x, pow(x, 3))" == formula ))
    lofd = m.getListOfFunctionDefinitions()
    fd1 = lofd.get(0)
    assert( fd1 == fd )
    fd1 = lofd.get("fd")
    assert( fd1 == fd )
    assert( m.getNumInitialAssignments() == 1 )
    ia = m.getInitialAssignment(0)
    assert( ia != nil )
    assert( ia.getSymbol() ==  "p1" )
    ast = ia.getMath()
    formula = LibSBML::formulaToString(ast)
    assert ((  "x * p3" == formula ))
    assert( m.getNumRules() == 3 )
    alg = m.getRule(0)
    assert( alg != nil )
    assert( alg.getSBOTerm() == 64 )
    assert( alg.getSBOTermID() ==  "SBO:0000064" )
    ast = alg.getMath()
    formula = LibSBML::formulaToString(ast)
    assert ((  "pow(x, 3)" == formula ))
    ar = m.getRule(1)
    assert( ar != nil )
    assert( ar.getVariable() ==  "p2" )
    assert( ar.getSBOTerm() == 64 )
    assert( ar.getSBOTermID() ==  "SBO:0000064" )
    ast = ar.getMath()
    formula = LibSBML::formulaToString(ast)
    assert ((  "x * p3" == formula ))
    rr = m.getRule(2)
    assert( rr != nil )
    assert( rr.getVariable() ==  "p3" )
    assert( rr.getSBOTerm() == 64 )
    assert( rr.getSBOTermID() ==  "SBO:0000064" )
    ast = rr.getMath()
    formula = LibSBML::formulaToString(ast)
    assert ((  "p1 / p" == formula ))
    assert( m.getNumSpecies() == 2 )
    s = m.getSpecies(0)
    assert( s != nil )
    assert( s.getId() ==  "X0" )
    assert( s.getCompartment() ==  "comp" )
    assert_equal true, s.isSetConversionFactor()
    assert( s.getConversionFactor() ==  "p" )
    assert_equal true, s.isSetBoundaryCondition()
    assert( s.getBoundaryCondition() == false )
    assert_equal true, s.isSetHasOnlySubstanceUnits()
    assert( s.getHasOnlySubstanceUnits() == false )
    assert_equal true, s.isSetSubstanceUnits()
    assert( s.getSubstanceUnits() ==  "mole" )
    assert_equal true, s.isSetConstant()
    assert( s.getConstant() == false )
    assert_equal true, s.isSetInitialAmount()
    assert( s.getInitialAmount() == 0 )
    assert_equal false, s.isSetInitialConcentration()
    assert_equal true, util_isNaN
    assert( m.getNumReactions() == 1 )
    r = m.getReaction(0)
    assert_equal false, r.isSetFast()
    assert( r.getFast() == false )
    assert_equal true, r.isSetReversible()
    assert( r.getReversible() == false )
    assert_equal true, r.isSetCompartment()
    assert( r.getCompartment() ==  "comp" )
    sr = r.getReactant(0)
    assert_equal true, sr.isSetConstant()
    assert( sr.getConstant() == true )
    assert_equal true, sr.isSetStoichiometry()
    assert( sr.getStoichiometry() == 1 )
    sr = r.getProduct(0)
    assert_equal true, sr.isSetConstant()
    assert( sr.getConstant() == false )
    assert_equal false, sr.isSetStoichiometry()
    assert_equal true, util_isNaN
    kl = r.getKineticLaw()
    assert( kl.getNumLocalParameters() == 2 )
    assert( kl.getNumParameters() == 2 )
    p = kl.getParameter(0)
    assert_equal true, p.isSetUnits()
    assert( p.getUnits() ==  "per_second" )
    assert_equal true, p.isSetValue()
    assert( p.getValue() == 0.1 )
    lp = kl.getLocalParameter(0)
    assert_equal true, lp.isSetUnits()
    assert( lp.getUnits() ==  "per_second" )
    assert_equal true, lp.isSetValue()
    assert( lp.getValue() == 0.1 )
    lp = kl.getLocalParameter(1)
    assert_equal false, lp.isSetUnits()
    assert( lp.getUnits() ==  "" )
    assert_equal false, lp.isSetValue()
    assert_equal true, util_isNaN
    d = nil
  end

end
