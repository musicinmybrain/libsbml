# @file    TestWriteL3V2SBML.rb
# @brief   Write SBML unit tests
#
# @author  Akiya Jouraku (Ruby conversion)
# @author  Sarah Keating 
# 
# ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
#
# DO NOT EDIT THIS FILE.
#
# This file was generated automatically by converting the file located at
# src/sbml/test/TestWriteL3V2SBML.cpp
# using the conversion program dev/utilities/translateTests/translateTests.pl.
# Any changes made here will be lost the next time the file is regenerated.
#
# -----------------------------------------------------------------------------
# This file is part of libSBML.  Please visit http://sbml.org for more
# information about SBML, and the latest version of libSBML.
#
# Copyright 2005-2010 California Institute of Technology.
# Copyright 2002-2005 California Institute of Technology and
#                     Japan Science and Technology Corporation.
# 
# This library is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation.  A copy of the license agreement is provided
# in the file named "LICENSE.txt" included with this software distribution
# and also available online as http://sbml.org/software/libsbml/license.html
# -----------------------------------------------------------------------------
require 'test/unit'
require 'libSBML'

class TestWriteL3V2SBML < Test::Unit::TestCase

  def LV_L3v2
    return "level=\"3\" version=\"2\">\n"
  end

  def LV_L3v2_noEnd
    return "level=\"3\" version=\"2\""
  end

  def NS_EXTRA
    return "xmlns:extra=\"http://www.sbml.org/sbml/level3/version1/extra/version1\" "
  end

  def NS_L3v2
    return "xmlns=\"http://www.sbml.org/sbml/level3/version2/core\" "
  end

  def REQD_EXTRA
    return " extra:required=\"false\">\n"
  end

  def SBML_END
    return "</sbml>\n"
  end

  def SBML_START
    return "<sbml "
  end

  def XML_START
    return "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
  end

  def wrapSBML_L3v2(s)
    r = XML_START()
    r += SBML_START()
    r += NS_L3v2()
    r += LV_L3v2()
    r += s
    r += SBML_END()
    return r
  end

  def wrapSBML_extra(s)
    r = XML_START()
    r += SBML_START()
    r += NS_L3v2()
    r += NS_EXTRA()
    r += LV_L3v2_noEnd()
    r += REQD_EXTRA()
    r += s
    r += SBML_END()
    return r
  end

  def wrapXML(s)
    r = XML_START()
    r += s
    return r
  end

  def setup
    @@d = LibSBML::SBMLDocument.new()
    @@d.setLevelAndVersion(3,2,false)
  end

  def teardown
    @@d = nil
  end

  def test_WriteL3V2SBML_LO_ann
    expected = wrapSBML_L3v2("  <model>\n" + 
    "    <listOfCompartments>\n" + 
    "      <annotation>test</annotation>\n" + 
    "    </listOfCompartments>\n" + 
    "  </model>\n")
    m = @@d.createModel("")
    ann = LibSBML::XMLNode.convertStringToXMLNode("test")
    (SBase*)(m.getListOfCompartments())).setAnnotation(ann
    ann = nil
    S = writeSBMLToStdString
    assert_equal true, equals(expected,)
  end

  def test_WriteL3V2SBML_Model
    expected = wrapSBML_L3v2("  <model/>\n"  
    )
    m = @@d.createModel("")
    (void) m
    S = writeSBMLToStdString
    assert_equal true, equals(expected,)
  end

  def test_WriteL3V2SBML_SBMLDocument_L3v1
    expected = wrapXML("<sbml xmlns=\"http://www.sbml.org/sbml/level3/version2/core\" " + "level=\"3\" version=\"2\"/>\n")
    S = writeSBMLToStdString
    assert_equal true, equals(expected,)
  end

  def test_WriteL3V2SBML_emptyMath
    expected = wrapSBML_L3v2("  <model>\n" + 
    "    <listOfInitialAssignments>\n" + 
    "      <initialAssignment/>\n" + 
    "    </listOfInitialAssignments>\n" + 
    "  </model>\n")
    m = @@d.createModel("")
    m.createInitialAssignment()
    S = writeSBMLToStdString
    assert_equal true, equals(expected,)
  end

  def test_WriteL3V2SBML_roundtrip
    expected = wrapSBML_extra("  <model>\n" + 
    "    <listOfInitialAssignments extra:foo=\"bar\"/>\n" + 
    "  </model>\n")
    filename = "../../sbml/sbml/test/test-data/l3v2-extra.xml"
    d = LibSBML::readSBML(filename)
    S = writeSBMLToStdString
    d = nil
    assert_equal true, equals(expected,)
  end

end
