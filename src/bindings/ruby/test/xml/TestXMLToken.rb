# @file    TestXMLToken.rb
# @brief   XMLToken unit tests
#
# @author  Akiya Jouraku (Ruby conversion)
# @author  Michael Hucka <mhucka@caltech.edu> 
# 
# ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
#
# DO NOT EDIT THIS FILE.
#
# This file was generated automatically by converting the file located at
# src/sbml/test/TestXMLToken.c
# using the conversion program dev/utilities/translateTests/translateTests.pl.
# Any changes made here will be lost the next time the file is regenerated.
#
# -----------------------------------------------------------------------------
# This file is part of libSBML.  Please visit http://sbml.org for more
# information about SBML, and the latest version of libSBML.
#
# Copyright 2005-2010 California Institute of Technology.
# Copyright 2002-2005 California Institute of Technology and
#                     Japan Science and Technology Corporation.
# 
# This library is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation.  A copy of the license agreement is provided
# in the file named "LICENSE.txt" included with this software distribution
# and also available online as http://sbml.org/software/libsbml/license.html
# -----------------------------------------------------------------------------
require 'test/unit'
require 'libSBML'

class TestXMLToken < Test::Unit::TestCase

  def test_XMLToken_accessWithNULL
    assert( nil.addAttr(nil,nil) == LibSBML::LIBSBML_INVALID_OBJECT )
    assert( nil.addAttr(nil,nil,nil,nil) == LibSBML::LIBSBML_INVALID_OBJECT )
    assert( nil.addAttr(nil,nil) == LibSBML::LIBSBML_INVALID_OBJECT )
    assert( nil.addNamespace(nil,nil) == LibSBML::LIBSBML_INVALID_OBJECT )
    assert( nil.append(nil) == LibSBML::LIBSBML_OPERATION_FAILED )
    assert( nil.clearAttributes() == LibSBML::LIBSBML_INVALID_OBJECT )
    assert( nil.clearNamespaces() == LibSBML::LIBSBML_INVALID_OBJECT )
    assert( nil.clone() == nil )
    assert( LibSBML::XMLToken.new(nil) == nil )
    assert( LibSBML::XMLToken.new(nil,nil) == nil )
    assert( LibSBML::XMLToken.new(nil,nil,nil) == nil )
    assert( nil.getAttributes() == nil )
    assert( nil.getAttributesLength() == 0 )
    assert( nil.getAttrIndex(nil,nil) == -1 )
    assert( nil.getAttrIndex(nil) == -1 )
    assert( nil.getAttrName(0) == nil )
    assert( nil.getAttrPrefix(0) == "" )
    assert( nil.getAttrPrefixedName(0) == "" )
    assert( nil.getAttrURI(0) == "" )
    assert( nil.getAttrValue(0) == "" )
    assert( nil.getAttrValue(nil) == "" )
    assert( nil.getAttrValue(nil,nil) == "" )
    assert( nil.getAttrValue(nil) == "" )
    assert( nil.getCharacters() == nil )
    assert( nil.getColumn() == 0 )
    assert( nil.getLine() == 0 )
    assert( nil.getName() == "" )
    assert( nil.getNamespaceIndex(nil) == -1 )
    assert( nil.getNamespaceIndexByPrefix(nil) == -1 )
    assert( nil.getNamespacePrefix(0) == "" )
    assert( nil.getNamespacePrefix(nil) == "" )
    assert( nil.getNamespaces() == nil )
    assert( nil.getNamespacesLength() == 0 )
    assert( nil.getNamespaceURI(0) == "" )
    assert( nil.getNamespaceURI(nil) == "" )
    assert( nil.getPrefix() == "" )
    assert( nil.getURI() == "" )
    assert( nil.hasAttr(0) == false )
    assert( nil.hasAttr(nil) == false )
    assert( nil.hasAttr(nil,nil) == false )
    assert( nil.hasAttr(nil) == false )
    assert( nil.hasNamespaceNS(nil,nil) == false )
    assert( nil.hasNamespacePrefix(nil) == false )
    assert( nil.hasNamespaceURI(nil) == false )
    assert( nil.isAttributesEmpty() == false )
    assert( nil.isElement() == false )
    assert( nil.isEnd() == false )
    assert( nil.isEndFor(nil) == false )
    assert( nil.isEOF() == false )
    assert( nil.isNamespacesEmpty() == false )
    assert( nil.isStart() == false )
    assert( nil.isText() == false )
    assert( nil.removeAttr(0) == LibSBML::LIBSBML_INVALID_OBJECT )
    assert( nil.removeAttr(nil) == LibSBML::LIBSBML_INVALID_OBJECT )
    assert( nil.removeAttr(nil,nil) == LibSBML::LIBSBML_INVALID_OBJECT )
    assert( nil.removeAttr(nil) == LibSBML::LIBSBML_INVALID_OBJECT )
    assert( nil.removeNamespace(0) == LibSBML::LIBSBML_INVALID_OBJECT )
    assert( nil.removeNamespace(nil) == LibSBML::LIBSBML_INVALID_OBJECT )
    assert( nil.setAttributes(nil) == LibSBML::LIBSBML_INVALID_OBJECT )
    assert( nil.setEnd() == LibSBML::LIBSBML_INVALID_OBJECT )
    assert( nil.setEOF() == LibSBML::LIBSBML_INVALID_OBJECT )
    assert( nil.setNamespaces(nil) == LibSBML::LIBSBML_INVALID_OBJECT )
    assert( nil.setTriple(nil) == LibSBML::LIBSBML_INVALID_OBJECT )
    assert( nil.unsetEnd() == LibSBML::LIBSBML_INVALID_OBJECT )
  end

  def test_XMLToken_attribute_add_remove
    triple = LibSBML::XMLTriple.new("test","","")
    attr = LibSBML::XMLAttributes.new()
    token = LibSBML::XMLToken.new(triple,attr)
    xt1 = LibSBML::XMLTriple.new("name1", "http://name1.org/", "p1")
    xt2 = LibSBML::XMLTriple.new("name2", "http://name2.org/", "p2")
    xt3 = LibSBML::XMLTriple.new("name3", "http://name3.org/", "p3")
    xt1a = LibSBML::XMLTriple.new("name1", "http://name1a.org/", "p1a")
    xt2a = LibSBML::XMLTriple.new("name2", "http://name2a.org/", "p2a")
    token.addAttr( "name1", "val1", "http://name1.org/", "p1")
    token.addAttr(xt2, "val2")
    assert( token.getAttributesLength() == 2 )
    assert( token.isAttributesEmpty() == false )
    test = token.getAttrName(0)
    assert( (  "name1" != test ) == false )
    test = nil
    test = token.getAttrValue(0)
    assert( (  "val1"  != test ) == false )
    test = nil
    test = token.getAttrURI(0)
    assert( (  "http://name1.org/" != test ) == false )
    test = nil
    test = token.getAttrPrefix(0)
    assert( (  "p1"    != test ) == false )
    test = nil
    test = token.getAttrName(1)
    assert( (  "name2" != test ) == false )
    test = nil
    test = token.getAttrValue(1)
    assert( (  "val2"  != test ) == false )
    test = nil
    test = token.getAttrURI(1)
    assert( (  "http://name2.org/" != test ) == false )
    test = nil
    test = token.getAttrPrefix(1)
    assert( (  "p2"    != test ) == false )
    test = nil
    assert( token.getAttrValue( "name1") == "" )
    assert( token.getAttrValue( "name2") == "" )
    test = token.getAttrValue( "name1", "http://name1.org/")
    assert( (  "val1"  != test ) == false )
    test = nil
    test = token.getAttrValue( "name2", "http://name2.org/")
    assert( (  "val2"  != test ) == false )
    test = nil
    test = token.getAttrValue(xt1)
    assert( (  "val1"  != test ) == false )
    test = nil
    test = token.getAttrValue(xt2)
    assert( (  "val2"  != test ) == false )
    test = nil
    assert( token.hasAttr(-1) == false )
    assert( token.hasAttr(2) == false )
    assert( token.hasAttr(0) == true )
    assert( token.hasAttr( "name1", "http://name1.org/") == true )
    assert( token.hasAttr( "name2", "http://name2.org/") == true )
    assert( token.hasAttr( "name3", "http://name3.org/") == false )
    assert( token.hasAttr(xt1) == true )
    assert( token.hasAttr(xt2) == true )
    assert( token.hasAttr(xt3) == false )
    token.addAttr( "noprefix", "val3")
    assert( token.getAttributesLength() == 3 )
    assert( token.isAttributesEmpty() == false )
    test = token.getAttrName(2)
    assert( (  "noprefix" != test ) == false )
    test = nil
    test = token.getAttrValue(2)
    assert( (  "val3"     != test ) == false )
    test = nil
    assert( token.getAttrURI(2) == "" )
    assert( token.getAttrPrefix(2) == "" )
    test = token.getAttrValue( "noprefix")
    assert( (      "val3"  != test ) == false )
    test = nil
    test = token.getAttrValue( "noprefix", "")
    assert( (  "val3"  != test ) == false )
    test = nil
    assert( token.hasAttr( "noprefix"    ) == true )
    assert( token.hasAttr( "noprefix", "") == true )
    token.addAttr(xt1, "mval1")
    token.addAttr( "name2", "mval2", "http://name2.org/", "p2")
    assert( token.getAttributesLength() == 3 )
    assert( token.isAttributesEmpty() == false )
    test = token.getAttrName(0)
    assert( (  "name1" != test ) == false )
    test = nil
    test = token.getAttrValue(0)
    assert( (  "mval1" != test ) == false )
    test = nil
    test = token.getAttrURI(0)
    assert( (  "http://name1.org/" != test ) == false )
    test = nil
    test = token.getAttrPrefix(0)
    assert( (  "p1"    != test ) == false )
    test = nil
    test = token.getAttrName(1)
    assert( (  "name2" != test ) == false )
    test = nil
    test = token.getAttrValue(1)
    assert( (  "mval2" != test ) == false )
    test = nil
    test = token.getAttrURI(1)
    assert( (  "http://name2.org/" != test ) == false )
    test = nil
    test = token.getAttrPrefix(1)
    assert( (  "p2"    != test ) == false )
    test = nil
    assert( token.hasAttr(xt1) == true )
    assert( token.hasAttr( "name1", "http://name1.org/") == true )
    token.addAttr( "noprefix", "mval3")
    assert( token.getAttributesLength() == 3 )
    assert( token.isAttributesEmpty() == false )
    test = token.getAttrName(2)
    assert( (  "noprefix" != test ) == false )
    test = nil
    test = token.getAttrValue(2)
    assert( (  "mval3"    != test ) == false )
    test = nil
    assert( token.getAttrURI(2) == "" )
    assert( token.getAttrPrefix(2) == "" )
    assert( token.hasAttr( "noprefix") == true )
    assert( token.hasAttr( "noprefix", "") == true )
    token.addAttr(xt1a, "val1a")
    token.addAttr(xt2a, "val2a")
    assert( token.getAttributesLength() == 5 )
    test = token.getAttrName(3)
    assert( (  "name1" != test ) == false )
    test = nil
    test = token.getAttrValue(3)
    assert( (  "val1a" != test ) == false )
    test = nil
    test = token.getAttrURI(3)
    assert( (  "http://name1a.org/" != test ) == false )
    test = nil
    test = token.getAttrPrefix(3)
    assert( (  "p1a" != test ) == false )
    test = nil
    test = token.getAttrName(4)
    assert( (  "name2" != test ) == false )
    test = nil
    test = token.getAttrValue(4)
    assert( (  "val2a" != test ) == false )
    test = nil
    test = token.getAttrURI(4)
    assert( (  "http://name2a.org/" != test ) == false )
    test = nil
    test = token.getAttrPrefix(4)
    assert( (  "p2a" != test ) == false )
    test = nil
    test = token.getAttrValue( "name1", "http://name1a.org/")
    assert( (  "val1a"  != test ) == false )
    test = nil
    test = token.getAttrValue( "name2", "http://name2a.org/")
    assert( (  "val2a"  != test ) == false )
    test = nil
    test = token.getAttrValue(xt1a)
    assert( (  "val1a"  != test ) == false )
    test = nil
    test = token.getAttrValue(xt2a)
    assert( (  "val2a"  != test ) == false )
    test = nil
    token.removeAttr(xt1a)
    token.removeAttr(xt2a)
    assert( token.getAttributesLength() == 3 )
    token.removeAttr( "name1", "http://name1.org/")
    assert( token.getAttributesLength() == 2 )
    assert( token.isAttributesEmpty() == false )
    test = token.getAttrName(0)
    assert( (  "name2" != test ) == false )
    test = nil
    test = token.getAttrValue(0)
    assert( (  "mval2" != test ) == false )
    test = nil
    test = token.getAttrURI(0)
    assert( (  "http://name2.org/" != test ) == false )
    test = nil
    test = token.getAttrPrefix(0)
    assert( (  "p2" != test ) == false )
    test = nil
    test = token.getAttrName(1)
    assert( (  "noprefix" != test ) == false )
    test = nil
    test = token.getAttrValue(1)
    assert( (  "mval3" != test ) == false )
    test = nil
    assert( token.getAttrURI(1) == "" )
    assert( token.getAttrPrefix(1) == "" )
    assert( token.hasAttr( "name1", "http://name1.org/") == false )
    token.removeAttr(xt2)
    assert( token.getAttributesLength() == 1 )
    assert( token.isAttributesEmpty() == false )
    test = token.getAttrName(0)
    assert( (  "noprefix" != test ) == false )
    test = nil
    test = token.getAttrValue(0)
    assert( (  "mval3" != test ) == false )
    test = nil
    assert( token.getAttrURI(0) == "" )
    assert( token.getAttrPrefix(0) == "" )
    assert( token.hasAttr(xt2) == false )
    assert( token.hasAttr( "name2", "http://name2.org/") == false )
    token.removeAttr( "noprefix")
    assert( token.getAttributesLength() == 0 )
    assert( token.isAttributesEmpty() == true )
    assert( token.hasAttr( "noprefix"    ) == false )
    assert( token.hasAttr( "noprefix", "") == false )
    token = nil
    xt1 = nil
    xt2 = nil
    xt3 = nil
    xt1a = nil
    xt2a = nil
    triple = nil
    attr = nil
  end

  def test_XMLToken_attribute_set_clear
    triple = LibSBML::XMLTriple.new("test","","")
    attr = LibSBML::XMLAttributes.new()
    token = LibSBML::XMLToken.new(triple,attr)
    nattr = LibSBML::XMLAttributes.new()
    xt1 = LibSBML::XMLTriple.new("name1", "http://name1.org/", "p1")
    xt2 = LibSBML::XMLTriple.new("name2", "http://name2.org/", "p2")
    xt3 = LibSBML::XMLTriple.new("name3", "http://name3.org/", "p3")
    xt4 = LibSBML::XMLTriple.new("name4", "http://name4.org/", "p4")
    xt5 = LibSBML::XMLTriple.new("name5", "http://name5.org/", "p5")
    nattr.add(xt1, "val1")
    nattr.add(xt2, "val2")
    nattr.add(xt3, "val3")
    nattr.add(xt4, "val4")
    nattr.add(xt5, "val5")
    token.setAttributes(nattr)
    assert( token.getAttributesLength() == 5 )
    assert( token.isAttributesEmpty() == false )
    test = token.getAttrName(0)
    assert( (  "name1" != test ) == false )
    test = token.getAttrValue(0)
    assert( (  "val1"  != test ) == false )
    test = token.getAttrURI(0)
    assert( (  "http://name1.org/" != test ) == false )
    test = token.getAttrPrefix(0)
    assert( (  "p1"    != test ) == false )
    test = token.getAttrName(1)
    assert( (  "name2" != test ) == false )
    test = token.getAttrValue(1)
    assert( (  "val2"  != test ) == false )
    test = token.getAttrURI(1)
    assert( (  "http://name2.org/" != test ) == false )
    test = token.getAttrPrefix(1)
    assert( (  "p2"    != test ) == false )
    test = token.getAttrName(2)
    assert( (  "name3" != test ) == false )
    test = token.getAttrValue(2)
    assert( (  "val3"  != test ) == false )
    test = token.getAttrURI(2)
    assert( (  "http://name3.org/" != test ) == false )
    test = token.getAttrPrefix(2)
    assert( (  "p3"    != test ) == false )
    test = token.getAttrName(3)
    assert( (  "name4" != test ) == false )
    test = token.getAttrValue(3)
    assert( (  "val4"  != test ) == false )
    test = token.getAttrURI(3)
    assert( (  "http://name4.org/" != test ) == false )
    test = token.getAttrPrefix(3)
    assert( (  "p4"    != test ) == false )
    test = token.getAttrName(4)
    assert( (  "name5" != test ) == false )
    test = token.getAttrValue(4)
    assert( (  "val5"  != test ) == false )
    test = token.getAttrURI(4)
    assert( (  "http://name5.org/" != test ) == false )
    test = token.getAttrPrefix(4)
    assert( (  "p5"    != test ) == false )
    ntriple = LibSBML::XMLTriple.new("test2","http://test2.org/","p2")
    token.setTriple(ntriple)
    test1 = token.getName()
    assert( (    "test2" != test1 ) == false )
    test1 = token.getURI()
    assert( (     "http://test2.org/" != test1 ) == false )
    test1 = token.getPrefix()
    assert( (  "p2" != test1 ) == false )
    token.clearAttributes()
    assert( token.getAttributesLength() == 0 )
    assert( token.isAttributesEmpty() != false )
    nattr = nil
    triple = nil
    ntriple = nil
    attr = nil
    token = nil
    xt1 = nil
    xt2 = nil
    xt3 = nil
    xt4 = nil
    xt5 = nil
  end

  def test_XMLToken_chars
    token = LibSBML::XMLToken.new("This is text")
    assert( token.isElement() == false )
    assert( token.isEnd() == false )
    assert( token.isStart() == false )
    assert( token.isText() == true )
    assert( token.isEOF() == false )
    assert( (  "This is text" != token.getCharacters() ) == false )
    assert( token.append( " and more text") == 0 )
    assert( (  "This is text and more text" != token.getCharacters() ) == false )
    assert( token.setCharacters( "This is text too.") == 0 )
    assert( (  "This is text too." != token.getCharacters() ) == false )
    token = nil
  end

  def test_XMLToken_create
    token = LibSBML::XMLToken.new()
    assert( token != nil )
    token = nil
    triple = LibSBML::XMLTriple.new("attr", "uri", "prefix")
    token = LibSBML::XMLToken.new(triple)
    assert( token != nil )
    assert( (  "attr" != token.getName() ) == false )
    assert( (  "prefix" != token.getPrefix() ) == false )
    assert( (  "uri" != token.getURI() ) == false )
    token = nil
    attr = LibSBML::XMLAttributes.new()
    assert( attr != nil )
    attr.add( "attr2", "value")
    token = LibSBML::XMLToken.new(triple,attr)
    assert( token != nil )
    returnattr = token.getAttributes()
    name = returnattr.getName(0)
    assert( (  "attr2" != name ) == false )
    name = nil
    token = nil
    triple = nil
    attr = nil
  end

  def test_XMLToken_fields
    triple = LibSBML::XMLTriple.new("attr", "uri", "prefix")
    token = LibSBML::XMLToken.new(triple)
    assert( token.isElement() == true )
    assert( token.isEnd() == true )
    assert( token.isStart() == false )
    assert( token.isText() == false )
    assert( token.isEOF() == false )
    assert( (  "attr" != token.getName() ) == false )
    assert( (  "uri" != token.getURI() ) == false )
    assert( (  "prefix" != token.getPrefix() ) == false )
    token = nil
    triple = nil
  end

  def test_XMLToken_namespace_add
    triple = LibSBML::XMLTriple.new("test","","")
    attr = LibSBML::XMLAttributes.new()
    token = LibSBML::XMLToken.new(triple,attr)
    assert( token.getNamespacesLength() == 0 )
    assert( token.isNamespacesEmpty() == true )
    token.addNamespace( "http://test1.org/", "test1")
    assert( token.getNamespacesLength() == 1 )
    assert( token.isNamespacesEmpty() == false )
    token.addNamespace( "http://test2.org/", "test2")
    assert( token.getNamespacesLength() == 2 )
    assert( token.isNamespacesEmpty() == false )
    token.addNamespace( "http://test1.org/", "test1a")
    assert( token.getNamespacesLength() == 3 )
    assert( token.isNamespacesEmpty() == false )
    token.addNamespace( "http://test1.org/", "test1a")
    assert( token.getNamespacesLength() == 3 )
    assert( token.isNamespacesEmpty() == false )
    assert( !( token.getNamespaceIndex( "http://test1.org/") == -1) )
    token = nil
    triple = nil
    attr = nil
  end

  def test_XMLToken_namespace_get
    triple = LibSBML::XMLTriple.new("test","","")
    attr = LibSBML::XMLAttributes.new()
    token = LibSBML::XMLToken.new(triple,attr)
    token.addNamespace( "http://test1.org/", "test1")
    token.addNamespace( "http://test2.org/", "test2")
    token.addNamespace( "http://test3.org/", "test3")
    token.addNamespace( "http://test4.org/", "test4")
    token.addNamespace( "http://test5.org/", "test5")
    token.addNamespace( "http://test6.org/", "test6")
    token.addNamespace( "http://test7.org/", "test7")
    token.addNamespace( "http://test8.org/", "test8")
    token.addNamespace( "http://test9.org/", "test9")
    assert( token.getNamespacesLength() == 9 )
    assert( token.getNamespaceIndex( "http://test1.org/") == 0 )
    test = token.getNamespacePrefix(1)
    assert( (  "test2" != test ) == false )
    test = nil
    test = token.getNamespacePrefix( "http://test1.org/")
    assert( (  "test1" != test ) == false )
    test = nil
    test = token.getNamespaceURI(1)
    assert( (  "http://test2.org/" != test ) == false )
    test = nil
    test = token.getNamespaceURI( "test2")
    assert( (  "http://test2.org/" != test ) == false )
    test = nil
    assert( token.getNamespaceIndex( "http://test1.org/") == 0 )
    assert( token.getNamespaceIndex( "http://test2.org/") == 1 )
    assert( token.getNamespaceIndex( "http://test5.org/") == 4 )
    assert( token.getNamespaceIndex( "http://test9.org/") == 8 )
    assert( token.getNamespaceIndex( "http://testX.org/") == -1 )
    assert( token.hasNamespaceURI( "http://test1.org/") != false )
    assert( token.hasNamespaceURI( "http://test2.org/") != false )
    assert( token.hasNamespaceURI( "http://test5.org/") != false )
    assert( token.hasNamespaceURI( "http://test9.org/") != false )
    assert( token.hasNamespaceURI( "http://testX.org/") == false )
    assert( token.getNamespaceIndexByPrefix( "test1") == 0 )
    assert( token.getNamespaceIndexByPrefix( "test5") == 4 )
    assert( token.getNamespaceIndexByPrefix( "test9") == 8 )
    assert( token.getNamespaceIndexByPrefix( "testX") == -1 )
    assert( token.hasNamespacePrefix( "test1") != false )
    assert( token.hasNamespacePrefix( "test5") != false )
    assert( token.hasNamespacePrefix( "test9") != false )
    assert( token.hasNamespacePrefix( "testX") == false )
    assert( token.hasNamespaceNS( "http://test1.org/", "test1") != false )
    assert( token.hasNamespaceNS( "http://test5.org/", "test5") != false )
    assert( token.hasNamespaceNS( "http://test9.org/", "test9") != false )
    assert( token.hasNamespaceNS( "http://testX.org/", "testX") == false )
    token = nil
    triple = nil
    attr = nil
  end

  def test_XMLToken_namespace_remove
    triple = LibSBML::XMLTriple.new("test","","")
    attr = LibSBML::XMLAttributes.new()
    token = LibSBML::XMLToken.new(triple,attr)
    token.addNamespace( "http://test1.org/", "test1")
    token.addNamespace( "http://test2.org/", "test2")
    token.addNamespace( "http://test3.org/", "test3")
    token.addNamespace( "http://test4.org/", "test4")
    token.addNamespace( "http://test5.org/", "test5")
    assert( token.getNamespacesLength() == 5 )
    token.removeNamespace(4)
    assert( token.getNamespacesLength() == 4 )
    token.removeNamespace(3)
    assert( token.getNamespacesLength() == 3 )
    token.removeNamespace(2)
    assert( token.getNamespacesLength() == 2 )
    token.removeNamespace(1)
    assert( token.getNamespacesLength() == 1 )
    token.removeNamespace(0)
    assert( token.getNamespacesLength() == 0 )
    token.addNamespace( "http://test1.org/", "test1")
    token.addNamespace( "http://test2.org/", "test2")
    token.addNamespace( "http://test3.org/", "test3")
    token.addNamespace( "http://test4.org/", "test4")
    token.addNamespace( "http://test5.org/", "test5")
    assert( token.getNamespacesLength() == 5 )
    token.removeNamespace(0)
    assert( token.getNamespacesLength() == 4 )
    token.removeNamespace(0)
    assert( token.getNamespacesLength() == 3 )
    token.removeNamespace(0)
    assert( token.getNamespacesLength() == 2 )
    token.removeNamespace(0)
    assert( token.getNamespacesLength() == 1 )
    token.removeNamespace(0)
    assert( token.getNamespacesLength() == 0 )
    token = nil
    triple = nil
    attr = nil
  end

  def test_XMLToken_namespace_remove_by_prefix
    triple = LibSBML::XMLTriple.new("test","","")
    attr = LibSBML::XMLAttributes.new()
    token = LibSBML::XMLToken.new(triple,attr)
    token.addNamespace( "http://test1.org/", "test1")
    token.addNamespace( "http://test2.org/", "test2")
    token.addNamespace( "http://test3.org/", "test3")
    token.addNamespace( "http://test4.org/", "test4")
    token.addNamespace( "http://test5.org/", "test5")
    assert( token.getNamespacesLength() == 5 )
    token.removeNamespace( "test1")
    assert( token.getNamespacesLength() == 4 )
    token.removeNamespace( "test2")
    assert( token.getNamespacesLength() == 3 )
    token.removeNamespace( "test3")
    assert( token.getNamespacesLength() == 2 )
    token.removeNamespace( "test4")
    assert( token.getNamespacesLength() == 1 )
    token.removeNamespace( "test5")
    assert( token.getNamespacesLength() == 0 )
    token.addNamespace( "http://test1.org/", "test1")
    token.addNamespace( "http://test2.org/", "test2")
    token.addNamespace( "http://test3.org/", "test3")
    token.addNamespace( "http://test4.org/", "test4")
    token.addNamespace( "http://test5.org/", "test5")
    assert( token.getNamespacesLength() == 5 )
    token.removeNamespace( "test5")
    assert( token.getNamespacesLength() == 4 )
    token.removeNamespace( "test4")
    assert( token.getNamespacesLength() == 3 )
    token.removeNamespace( "test3")
    assert( token.getNamespacesLength() == 2 )
    token.removeNamespace( "test2")
    assert( token.getNamespacesLength() == 1 )
    token.removeNamespace( "test1")
    assert( token.getNamespacesLength() == 0 )
    token.addNamespace( "http://test1.org/", "test1")
    token.addNamespace( "http://test2.org/", "test2")
    token.addNamespace( "http://test3.org/", "test3")
    token.addNamespace( "http://test4.org/", "test4")
    token.addNamespace( "http://test5.org/", "test5")
    assert( token.getNamespacesLength() == 5 )
    token.removeNamespace( "test3")
    assert( token.getNamespacesLength() == 4 )
    token.removeNamespace( "test1")
    assert( token.getNamespacesLength() == 3 )
    token.removeNamespace( "test4")
    assert( token.getNamespacesLength() == 2 )
    token.removeNamespace( "test5")
    assert( token.getNamespacesLength() == 1 )
    token.removeNamespace( "test2")
    assert( token.getNamespacesLength() == 0 )
    token = nil
    triple = nil
    attr = nil
  end

  def test_XMLToken_namespace_set_clear
    triple = LibSBML::XMLTriple.new("test","","")
    attr = LibSBML::XMLAttributes.new()
    token = LibSBML::XMLToken.new(triple,attr)
    ns = LibSBML::XMLNamespaces.new()
    assert( token.getNamespacesLength() == 0 )
    assert( token.isNamespacesEmpty() == true )
    ns.add( "http://test1.org/", "test1")
    ns.add( "http://test2.org/", "test2")
    ns.add( "http://test3.org/", "test3")
    ns.add( "http://test4.org/", "test4")
    ns.add( "http://test5.org/", "test5")
    token.setNamespaces(ns)
    assert( token.getNamespacesLength() == 5 )
    assert( token.isNamespacesEmpty() == false )
    test = token.getNamespacePrefix(0)
    assert( (  "test1" != test ) == false )
    test = nil
    test = token.getNamespacePrefix(1)
    assert( (  "test2" != test ) == false )
    test = nil
    test = token.getNamespacePrefix(2)
    assert( (  "test3" != test ) == false )
    test = nil
    test = token.getNamespacePrefix(3)
    assert( (  "test4" != test ) == false )
    test = nil
    test = token.getNamespacePrefix(4)
    assert( (  "test5" != test ) == false )
    test = nil
    test = token.getNamespaceURI(0)
    assert( (  "http://test1.org/" != test ) == false )
    test = nil
    test = token.getNamespaceURI(1)
    assert( (  "http://test2.org/" != test ) == false )
    test = nil
    test = token.getNamespaceURI(2)
    assert( (  "http://test3.org/" != test ) == false )
    test = nil
    test = token.getNamespaceURI(3)
    assert( (  "http://test4.org/" != test ) == false )
    test = nil
    test = token.getNamespaceURI(4)
    assert( (  "http://test5.org/" != test ) == false )
    test = nil
    token.clearNamespaces()
    assert( token.getNamespacesLength() == 0 )
    ns = nil
    token = nil
    triple = nil
    attr = nil
  end

end
