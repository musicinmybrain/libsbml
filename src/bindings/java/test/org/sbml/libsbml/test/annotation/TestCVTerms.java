/*
 * @file    TestCVTerms.java
 * @brief   CVTerms unit tests
 *
 * @author  Akiya Jouraku (Java conversion)
 * @author  Sarah Keating 
 * 
 * ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
 *
 * DO NOT EDIT THIS FILE.
 *
 * This file was generated automatically by converting the file located at
 * src/sbml/test/TestCVTerms.c
 * using the conversion program dev/utilities/translateTests/translateTests.pl.
 * Any changes made here will be lost the next time the file is regenerated.
 *
 * -----------------------------------------------------------------------------
 * This file is part of libSBML.  Please visit http://sbml.org for more
 * information about SBML, and the latest version of libSBML.
 *
 * Copyright 2005-2010 California Institute of Technology.
 * Copyright 2002-2005 California Institute of Technology and
 *                     Japan Science and Technology Corporation.
 * 
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation.  A copy of the license agreement is provided
 * in the file named "LICENSE.txt" included with this software distribution
 * and also available online as http://sbml.org/software/libsbml/license.html
 * -----------------------------------------------------------------------------
 */

package org.sbml.libsbml.test.annotation;

import org.sbml.libsbml.*;

import java.io.File;
import java.lang.AssertionError;

public class TestCVTerms {

  static void assertTrue(boolean condition) throws AssertionError
  {
    if (condition == true)
    {
      return;
    }
    throw new AssertionError();
  }

  static void assertEquals(Object a, Object b) throws AssertionError
  {
    if ( (a == null) && (b == null) )
    {
      return;
    }
    else if ( (a == null) || (b == null) )
    {
      throw new AssertionError();
    }
    else if (a.equals(b))
    {
      return;
    }

    throw new AssertionError();
  }

  static void assertNotEquals(Object a, Object b) throws AssertionError
  {
    if ( (a == null) && (b == null) )
    {
      throw new AssertionError();
    }
    else if ( (a == null) || (b == null) )
    {
      return;
    }
    else if (a.equals(b))
    {
      throw new AssertionError();
    }
  }

  static void assertEquals(boolean a, boolean b) throws AssertionError
  {
    if ( a == b )
    {
      return;
    }
    throw new AssertionError();
  }

  static void assertNotEquals(boolean a, boolean b) throws AssertionError
  {
    if ( a != b )
    {
      return;
    }
    throw new AssertionError();
  }

  static void assertEquals(int a, int b) throws AssertionError
  {
    if ( a == b )
    {
      return;
    }
    throw new AssertionError();
  }

  static void assertNotEquals(int a, int b) throws AssertionError
  {
    if ( a != b )
    {
      return;
    }
    throw new AssertionError();
  }

  public void test_CVTerm_accessWithNULL()
  {
    assertTrue( null.addResource(null) == libsbml.LIBSBML_OPERATION_FAILED );
    assertTrue( null.clone() == null );
    assertTrue( new  CVTerm(null) == null );
    assertTrue( null.getBiologicalQualifierType() == libsbml.BQB_UNKNOWN );
    assertTrue( null.getModelQualifierType() == libsbml.BQM_UNKNOWN );
    assertTrue( null.getNumResources() == SBML_INT_MAX );
    assertTrue( null.getQualifierType() == UNKNOWN_QUALIFIER );
    assertTrue( null.getResources() == null );
    assertTrue( null.getResourceURI(0) == null );
    assertTrue( null.hasRequiredAttributes() == 0 );
    assertTrue( null.removeResource(null) == libsbml.LIBSBML_INVALID_OBJECT );
    assertTrue( null.setBiologicalQualifierType(libsbml.BQB_UNKNOWN) == libsbml.LIBSBML_INVALID_OBJECT );
    assertTrue( null.setBiologicalQualifierType(null) == libsbml.LIBSBML_INVALID_OBJECT );
    assertTrue( null.setModelQualifierType(libsbml.BQM_UNKNOWN) == libsbml.LIBSBML_INVALID_OBJECT );
    assertTrue( null.setModelQualifierType(null) == libsbml.LIBSBML_INVALID_OBJECT );
    assertTrue( null.setQualifierType(UNKNOWN_QUALIFIER) == libsbml.LIBSBML_INVALID_OBJECT );
    assertTrue( null.fromString() == libsbml.BQM_UNKNOWN );
    assertTrue( null.fromString() == libsbml.BQB_UNKNOWN );
  }

  public void test_CVTerm_addNestedCVTerm()
  {
    CVTerm term = new  CVTerm(libsbml.MODEL_QUALIFIER);
    String resource =  "GO6666";
    CVTerm term1 = new  CVTerm(libsbml.MODEL_QUALIFIER);
    String resource1 =  "nested";
    XMLAttributes xa;
    term.setModelQualifierType(libsbml.BQM_IS);
    term.addResource(resource);
    term1.setModelQualifierType(libsbml.BQM_IS);
    term1.addResource(resource1);
    int i = term.addNestedCVTerm(term1);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( term.getNumNestedCVTerms() == 1 );
    CVTerm nested = term.getNestedCVTerm(0);
    assertTrue( nested != null );
    xa = nested.getResources();
    assertTrue( xa.getLength() == 1 );
    String name = xa.getName(0);
    String value = xa.getValue(0);
    assertTrue(name.equals( "rdf:resource"));
    assertTrue(value.equals( "nested"));
    name = null;
    value = null;
    term1 = null;
    term = null;
  }

  public void test_CVTerm_addResource()
  {
    CVTerm term = new  CVTerm(libsbml.MODEL_QUALIFIER);
    String resource =  "GO6666";
    XMLAttributes xa;
    assertTrue( term != null );
    assertTrue( term.getQualifierType() == libsbml.MODEL_QUALIFIER );
    term.addResource(resource);
    xa = term.getResources();
    assertTrue( xa.getLength() == 1 );
    String name = xa.getName(0);
    String value = xa.getValue(0);
    assertTrue(name.equals( "rdf:resource"));
    assertTrue(value.equals( "GO6666"));
    name = null;
    value = null;
    term = null;
  }

  public void test_CVTerm_create()
  {
    CVTerm term = new  CVTerm(libsbml.MODEL_QUALIFIER);
    assertTrue( term != null );
    assertTrue( term.getQualifierType() == libsbml.MODEL_QUALIFIER );
    term = null;
  }

  public void test_CVTerm_createFromNode()
  {
    XMLAttributes xa;
    XMLTriple qual_triple = new  XMLTriple("is", "", "bqbiol");
    XMLTriple bag_triple = new  XMLTriple();
    XMLTriple li_triple = new  XMLTriple();
    XMLAttributes att = new  XMLAttributes();
    att.add( "", "This is my resource");
    XMLAttributes att1 = new  XMLAttributes();
    XMLToken li_token = new  XMLToken(li_triple,att);
    XMLToken bag_token = new  XMLToken(bag_triple,att1);
    XMLToken qual_token = new  XMLToken(qual_triple,att1);
    XMLNode li = new XMLNode(li_token);
    XMLNode bag = new XMLNode(bag_token);
    XMLNode node = new XMLNode(qual_token);
    bag.addChild(li);
    node.addChild(bag);
    CVTerm term = new  CVTerm(node);
    assertTrue( term != null );
    assertTrue( term.getQualifierType() == libsbml.BIOLOGICAL_QUALIFIER );
    assertTrue( term.getBiologicalQualifierType() == libsbml.BQB_IS );
    xa = term.getResources();
    assertTrue( xa.getLength() == 1 );
    String name = xa.getName(0);
    String value = xa.getValue(0);
    assertTrue(name.equals( "rdf:resource"));
    assertTrue(value.equals( "This is my resource"));
    name = null;
    value = null;
    qual_triple = null;
    bag_triple = null;
    li_triple = null;
    li_token = null;
    bag_token = null;
    qual_token = null;
    att = null;
    att1 = null;
    term = null;
    node = null;
    bag = null;
    li = null;
  }

  public void test_CVTerm_createFromNode_Nested()
  {
    XMLAttributes xa;
    XMLTriple qual_triple = new  XMLTriple("is", "", "bqbiol");
    XMLTriple bag_triple = new  XMLTriple();
    XMLTriple li_triple = new  XMLTriple();
    XMLAttributes att = new  XMLAttributes();
    att.add( "", "This is my resource");
    XMLAttributes att1 = new  XMLAttributes();
    XMLTriple nested_qual_triple = new  XMLTriple("hasPart", "", "bqbiol");
    XMLTriple nested_bag_triple = new  XMLTriple();
    XMLTriple nested_li_triple = new  XMLTriple();
    XMLAttributes nested_att = new  XMLAttributes();
    nested_att.add( "", "This is my nested resource");
    XMLToken li_token = new  XMLToken(li_triple,att);
    XMLToken bag_token = new  XMLToken(bag_triple,att1);
    XMLToken qual_token = new  XMLToken(qual_triple,att1);
    XMLToken nested_li_token = new  XMLToken(nested_li_triple,nested_att);
    XMLToken nested_bag_token = new  XMLToken(nested_bag_triple,att1);
    XMLToken nested_qual_token = new  XMLToken(nested_qual_triple,att1);
    XMLNode li = new XMLNode(li_token);
    XMLNode bag = new XMLNode(bag_token);
    XMLNode node = new XMLNode(qual_token);
    XMLNode nested_li = new XMLNode(nested_li_token);
    XMLNode nested_bag = new XMLNode(nested_bag_token);
    XMLNode nested_node = new XMLNode(nested_qual_token);
    nested_bag.addChild(nested_li);
    nested_node.addChild(nested_bag);
    bag.addChild(li);
    bag.addChild(nested_node);
    node.addChild(bag);
    CVTerm term = new  CVTerm(node);
    assertTrue( term != null );
    assertTrue( term.getQualifierType() == libsbml.BIOLOGICAL_QUALIFIER );
    assertTrue( term.getBiologicalQualifierType() == libsbml.BQB_IS );
    xa = term.getResources();
    assertTrue( xa.getLength() == 1 );
    String name = xa.getName(0);
    String value = xa.getValue(0);
    assertTrue(name.equals( "rdf:resource"));
    assertTrue(value.equals( "This is my resource"));
    name = null;
    value = null;
    assertTrue( term.getNumNestedCVTerms() == 1 );
    CVTerm nestedTerm = (const CVTerm_t*)(term).getNestedCVTerm(0);
    assertTrue( nestedTerm != null );
    assertTrue( nestedTerm.getQualifierType() == libsbml.BIOLOGICAL_QUALIFIER );
    assertTrue( nestedTerm.getBiologicalQualifierType() == libsbml.BQB_HAS_PART );
    xa = nestedTerm.getResources();
    assertTrue( xa.getLength() == 1 );
    name = xa.getName(0);
    value = xa.getValue(0);
    assertTrue(name.equals( "rdf:resource"));
    assertTrue(value.equals( "This is my nested resource"));
    name = null;
    value = null;
    assertTrue( nestedTerm.getNumNestedCVTerms() == 0 );
    qual_triple = null;
    bag_triple = null;
    li_triple = null;
    li_token = null;
    bag_token = null;
    qual_token = null;
    att = null;
    att1 = null;
    term = null;
    node = null;
    bag = null;
    li = null;
    nested_qual_triple = null;
    nested_bag_triple = null;
    nested_li_triple = null;
    nested_li_token = null;
    nested_bag_token = null;
    nested_qual_token = null;
    nested_att = null;
    nested_node = null;
    nested_bag = null;
    nested_li = null;
  }

  public void test_CVTerm_getListNestedCVTerms()
  {
    CVTerm term = new  CVTerm(libsbml.MODEL_QUALIFIER);
    String resource =  "GO6666";
    CVTerm term1 = new  CVTerm(libsbml.MODEL_QUALIFIER);
    String resource1 =  "nested";
    term.setModelQualifierType(libsbml.BQM_IS);
    term.addResource(resource);
    term1.setModelQualifierType(libsbml.BQM_IS);
    term1.addResource(resource1);
    int i = term.addNestedCVTerm(term1);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( term.getNumNestedCVTerms() == 1 );
    List nested = term.getListNestedCVTerms();
    assertTrue( nested != null );
    assertTrue( nested.size() == 1 );
    term = null;
    term1 = null;
  }

  public void test_CVTerm_getResources()
  {
    CVTerm term = new  CVTerm(libsbml.MODEL_QUALIFIER);
    String resource =  "GO6666";
    String resource1 =  "OtherURI";
    long number;
    term.addResource(resource);
    term.addResource(resource1);
    number = term.getNumResources();
    assertTrue( number == 2 );
    String res1 = term.getResourceURI(0);
    String res2 = term.getResourceURI(1);
    assertTrue(res1.equals( "GO6666"));
    assertTrue(res2.equals( "OtherURI"));
    res1 = null;
    res2 = null;
    term = null;
  }

  public void test_CVTerm_get_biol_qualifiers()
  {
    assertTrue( "is".fromString() == libsbml.BQB_IS );
    assertTrue( "hasPart".fromString() == libsbml.BQB_HAS_PART );
    assertTrue( "isPartOf".fromString() == libsbml.BQB_IS_PART_OF );
    assertTrue( "isVersionOf".fromString() == libsbml.BQB_IS_VERSION_OF );
    assertTrue( "hasVersion".fromString() == libsbml.BQB_HAS_VERSION );
    assertTrue( "isHomologTo".fromString() == libsbml.BQB_IS_HOMOLOG_TO );
    assertTrue( "isDescribedBy".fromString() == libsbml.BQB_IS_DESCRIBED_BY );
    assertTrue( "isEncodedBy".fromString() == libsbml.BQB_IS_ENCODED_BY );
    assertTrue( "encodes".fromString() == libsbml.BQB_ENCODES );
    assertTrue( "occursIn".fromString() == libsbml.BQB_OCCURS_IN );
    assertTrue( "hasProperty".fromString() == libsbml.BQB_HAS_PROPERTY );
    assertTrue( "isPropertyOf".fromString() == libsbml.BQB_IS_PROPERTY_OF );
    assertTrue( "hasTaxon".fromString() == libsbml.BQB_HAS_TAXON );
    assertTrue( "isUnknown".fromString() == libsbml.BQB_UNKNOWN );
    assertTrue( "xxx".fromString() == libsbml.BQB_UNKNOWN );
    assertTrue( !libsbml.BQB_IS.toString().equals( "is") == false );
    assertTrue( !libsbml.BQB_HAS_PART.toString().equals( "hasPart") == false );
    assertTrue( !libsbml.BQB_IS_PART_OF.toString().equals( "isPartOf") == false );
    assertTrue( !libsbml.BQB_IS_VERSION_OF.toString().equals( "isVersionOf") == false );
    assertTrue( !libsbml.BQB_HAS_VERSION.toString().equals( "hasVersion") == false );
    assertTrue( !libsbml.BQB_IS_HOMOLOG_TO.toString().equals( "isHomologTo") == false );
    assertTrue( !libsbml.BQB_IS_DESCRIBED_BY.toString().equals( "isDescribedBy") == false );
    assertTrue( !libsbml.BQB_IS_ENCODED_BY.toString().equals( "isEncodedBy") == false );
    assertTrue( !libsbml.BQB_ENCODES.toString().equals( "encodes") == false );
    assertTrue( !libsbml.BQB_OCCURS_IN.toString().equals( "occursIn") == false );
    assertTrue( !libsbml.BQB_HAS_PROPERTY.toString().equals( "hasProperty") == false );
    assertTrue( !libsbml.BQB_IS_PROPERTY_OF.toString().equals( "isPropertyOf") == false );
    assertTrue( !libsbml.BQB_HAS_TAXON.toString().equals( "hasTaxon") == false );
    assertTrue( libsbml.BQB_UNKNOWN.toString() == null );
  }

  public void test_CVTerm_get_model_qualifiers()
  {
    assertTrue( "is".fromString() == libsbml.BQM_IS );
    assertTrue( "isDescribedBy".fromString() == libsbml.BQM_IS_DESCRIBED_BY );
    assertTrue( "isDerivedFrom".fromString() == libsbml.BQM_IS_DERIVED_FROM );
    assertTrue( "isUnknown".fromString() == libsbml.BQM_UNKNOWN );
    assertTrue( "xxx".fromString() == libsbml.BQM_UNKNOWN );
    assertTrue( !libsbml.BQM_IS.toString().equals( "is") == false );
    assertTrue( !libsbml.BQM_IS_DESCRIBED_BY.toString().equals( "isDescribedBy") == false );
    assertTrue( !libsbml.BQM_IS_DERIVED_FROM.toString().equals( "isDerivedFrom") == false );
    assertTrue( libsbml.BQM_UNKNOWN.toString() == null );
  }

  public void test_CVTerm_removeNestedCVTerm()
  {
    CVTerm term = new  CVTerm(libsbml.MODEL_QUALIFIER);
    String resource =  "GO6666";
    CVTerm term1 = new  CVTerm(libsbml.MODEL_QUALIFIER);
    String resource1 =  "nested";
    XMLAttributes xa;
    term.setModelQualifierType(libsbml.BQM_IS);
    term.addResource(resource);
    term1.setModelQualifierType(libsbml.BQM_IS);
    term1.addResource(resource1);
    int i = term.addNestedCVTerm(term1);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( term.getNumNestedCVTerms() == 1 );
    CVTerm removed = term.removeNestedCVTerm(0);
    assertTrue( removed != null );
    assertTrue( term.getNumNestedCVTerms() == 0 );
    xa = removed.getResources();
    assertTrue( xa.getLength() == 1 );
    String name = xa.getName(0);
    String value = xa.getValue(0);
    assertTrue(name.equals( "rdf:resource"));
    assertTrue(value.equals( "nested"));
    name = null;
    value = null;
    term = null;
    term1 = null;
    removed = null;
  }

  public void test_CVTerm_set_get()
  {
    CVTerm term = new  CVTerm(libsbml.MODEL_QUALIFIER);
    assertTrue( term != null );
    assertTrue( term.getQualifierType() == libsbml.MODEL_QUALIFIER );
    term.setModelQualifierType(libsbml.BQM_IS);
    assertTrue( term != null );
    assertTrue( term.getQualifierType() == libsbml.MODEL_QUALIFIER );
    assertTrue( term.getModelQualifierType() == libsbml.BQM_IS );
    assertTrue( !term.getModelQualifierType().toString().equals( "is" ) == false );
    term.setModelQualifierType( "isDerivedFrom");
    assertTrue( term.getModelQualifierType() == libsbml.BQM_IS_DERIVED_FROM );
    term.setModelQualifierType(null);
    assertTrue( term.getModelQualifierType() == libsbml.BQM_UNKNOWN );
    term.setQualifierType(libsbml.BIOLOGICAL_QUALIFIER);
    term.setBiologicalQualifierType(libsbml.BQB_IS);
    assertTrue( term.getQualifierType() == libsbml.BIOLOGICAL_QUALIFIER );
    assertTrue( term.getBiologicalQualifierType() == libsbml.BQB_IS );
    assertTrue( !term.getBiologicalQualifierType().toString().equals( "is" ) == false );
    term.setBiologicalQualifierType( "encodes");
    assertTrue( term.getBiologicalQualifierType() == libsbml.BQB_ENCODES );
    term.setBiologicalQualifierType(null);
    assertTrue( term.getBiologicalQualifierType() == libsbml.BQB_UNKNOWN );
    term = null;
  }

  /**
   * Loads the SWIG-generated libSBML Java module when this class is
   * loaded, or reports a sensible diagnostic message about why it failed.
   */
  static
  {
    String varname;
    String shlibname;

    if (System.getProperty("mrj.version") != null)
    {
      varname = "DYLD_LIBRARY_PATH";    // We're on a Mac.
      shlibname = "libsbmlj.jnilib and/or libsbml.dylib";
    }
    else
    {
      varname = "LD_LIBRARY_PATH";      // We're not on a Mac.
      shlibname = "libsbmlj.so and/or libsbml.so";
    }

    try
    {
      System.loadLibrary("sbmlj");
      // For extra safety, check that the jar file is in the classpath.
      Class.forName("org.sbml.libsbml.libsbml");
    }
    catch (SecurityException e)
    {
      e.printStackTrace();
      System.err.println("Could not load the libSBML library files due to a"+
                         " security exception.\n");
      System.exit(1);
    }
    catch (UnsatisfiedLinkError e)
    {
      e.printStackTrace();
      System.err.println("Error: could not link with the libSBML library files."+
                         " It is likely\nyour " + varname +
                         " environment variable does not include the directories\n"+
                         "containing the " + shlibname + " library files.\n");
      System.exit(1);
    }
    catch (ClassNotFoundException e)
    {
      e.printStackTrace();
      System.err.println("Error: unable to load the file libsbmlj.jar."+
                         " It is likely\nyour -classpath option and CLASSPATH" +
                         " environment variable\n"+
                         "do not include the path to libsbmlj.jar.\n");
      System.exit(1);
    }
  }
}
