/*
 * @file    TestRemoveFromParent.java
 * @brief   RemoveFromParent unit tests
 *
 * @author  Akiya Jouraku (Java conversion)
 * @author  Lucian Smith 
 * 
 * ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
 *
 * DO NOT EDIT THIS FILE.
 *
 * This file was generated automatically by converting the file located at
 * src/sbml/test/TestRemoveFromParent.cpp
 * using the conversion program dev/utilities/translateTests/translateTests.pl.
 * Any changes made here will be lost the next time the file is regenerated.
 *
 * -----------------------------------------------------------------------------
 * This file is part of libSBML.  Please visit http://sbml.org for more
 * information about SBML, and the latest version of libSBML.
 *
 * Copyright 2005-2010 California Institute of Technology.
 * Copyright 2002-2005 California Institute of Technology and
 *                     Japan Science and Technology Corporation.
 * 
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation.  A copy of the license agreement is provided
 * in the file named "LICENSE.txt" included with this software distribution
 * and also available online as http://sbml.org/software/libsbml/license.html
 * -----------------------------------------------------------------------------
 */

package org.sbml.libsbml.test.sbml;

import org.sbml.libsbml.*;

import java.io.File;
import java.lang.AssertionError;

public class TestRemoveFromParent {

  static void assertTrue(boolean condition) throws AssertionError
  {
    if (condition == true)
    {
      return;
    }
    throw new AssertionError();
  }

  static void assertEquals(Object a, Object b) throws AssertionError
  {
    if ( (a == null) && (b == null) )
    {
      return;
    }
    else if ( (a == null) || (b == null) )
    {
      throw new AssertionError();
    }
    else if (a.equals(b))
    {
      return;
    }

    throw new AssertionError();
  }

  static void assertNotEquals(Object a, Object b) throws AssertionError
  {
    if ( (a == null) && (b == null) )
    {
      throw new AssertionError();
    }
    else if ( (a == null) || (b == null) )
    {
      return;
    }
    else if (a.equals(b))
    {
      throw new AssertionError();
    }
  }

  static void assertEquals(boolean a, boolean b) throws AssertionError
  {
    if ( a == b )
    {
      return;
    }
    throw new AssertionError();
  }

  static void assertNotEquals(boolean a, boolean b) throws AssertionError
  {
    if ( a != b )
    {
      return;
    }
    throw new AssertionError();
  }

  static void assertEquals(int a, int b) throws AssertionError
  {
    if ( a == b )
    {
      return;
    }
    throw new AssertionError();
  }

  static void assertNotEquals(int a, int b) throws AssertionError
  {
    if ( a != b )
    {
      return;
    }
    throw new AssertionError();
  }

  public void test_RemoveFromParent_alreadyRemoved()
  {
    SBMLReader reader = new SBMLReader();
    SBMLDocument d;
    String filename = new String( "../../sbml/sbml/test/test-data/" );
    filename += "multiple-ids.xml";
    d = reader.readSBML(filename);
    if (d == null);
    {
    }
    SBase obj;
    obj = d.getElementByMetaId("meta20");
    assertTrue( obj != null );
    assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
    obj = d.getElementByMetaId("meta20");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta21");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta30");
    assertTrue( obj != null );
    assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
    obj = d.getElementByMetaId("meta30");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta32");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta31");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta3");
    assertTrue( obj != null );
    assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
    obj = d.getElementByMetaId("meta3");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta4");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta5");
    assertTrue( obj != null );
    assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
    obj = d.getElementByMetaId("meta5");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta6");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta11");
    assertTrue( obj != null );
    assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
    obj = d.getElementByMetaId("meta11");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta28");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta27");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta34");
    assertTrue( obj != null );
    assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
    obj = d.getElementByMetaId("meta34");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta35");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta8");
    assertTrue( obj != null );
    assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
    obj = d.getElementByMetaId("meta8");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta10");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta9");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta33");
    assertTrue( obj != null );
    assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
    obj = d.getElementByMetaId("meta33");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta18");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta15");
    assertTrue( obj != null );
    assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
    obj = d.getElementByMetaId("meta15");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta16");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta13");
    assertTrue( obj != null );
    assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
    obj = d.getElementByMetaId("meta13");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta14");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta17");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta19");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta22");
    assertTrue( obj != null );
    assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
    obj = d.getElementByMetaId("meta22");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta23");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta24");
    assertTrue( obj != null );
    assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
    obj = d.getElementByMetaId("meta24");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta25");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta26");
    assertTrue( obj == null );
    d = null;
  }

  public void test_RemoveFromParent_successfulRemoves()
  {
    SBMLReader reader = new SBMLReader();
    SBMLDocument d;
    String filename = new String( "../../sbml/sbml/test/test-data/" );
    filename += "multiple-ids.xml";
    d = reader.readSBML(filename);
    if (d == null);
    {
    }
    SBase obj;
    obj = d.getElementByMetaId("meta1");
    assertTrue( obj != null );
    assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_FAILED );
    obj = d.getElementByMetaId("meta21");
    assertTrue( obj != null );
    assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
    obj = d.getElementByMetaId("meta21");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta20");
    assertTrue( obj != null );
    assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
    obj = d.getElementByMetaId("meta20");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta32");
    assertTrue( obj != null );
    assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
    obj = d.getElementByMetaId("meta32");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta31");
    assertTrue( obj != null );
    assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
    obj = d.getElementByMetaId("meta31");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta30");
    assertTrue( obj != null );
    assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
    obj = d.getElementByMetaId("meta30");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta29");
    assertTrue( obj != null );
    assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
    obj = d.getElementByMetaId("meta29");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta4");
    assertTrue( obj != null );
    assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
    obj = d.getElementByMetaId("meta4");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta3");
    assertTrue( obj != null );
    assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
    obj = d.getElementByMetaId("meta3");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta6");
    assertTrue( obj != null );
    assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
    obj = d.getElementByMetaId("meta6");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta5");
    assertTrue( obj != null );
    assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
    obj = d.getElementByMetaId("meta5");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta28");
    assertTrue( obj != null );
    assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
    obj = d.getElementByMetaId("meta28");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta27");
    assertTrue( obj != null );
    assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
    obj = d.getElementByMetaId("meta27");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta11");
    assertTrue( obj != null );
    assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
    obj = d.getElementByMetaId("meta11");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta10");
    assertTrue( obj != null );
    assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
    obj = d.getElementByMetaId("meta10");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta9");
    assertTrue( obj != null );
    assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
    obj = d.getElementByMetaId("meta9");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta35");
    assertTrue( obj != null );
    assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
    obj = d.getElementByMetaId("meta35");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta34");
    assertTrue( obj != null );
    assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
    obj = d.getElementByMetaId("meta34");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta8");
    assertTrue( obj != null );
    assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
    obj = d.getElementByMetaId("meta8");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta7");
    assertTrue( obj != null );
    assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
    obj = d.getElementByMetaId("meta7");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta18");
    assertTrue( obj != null );
    assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
    obj = d.getElementByMetaId("meta18");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta33");
    assertTrue( obj != null );
    assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
    obj = d.getElementByMetaId("meta33");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta14");
    assertTrue( obj != null );
    assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
    obj = d.getElementByMetaId("meta14");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta16");
    assertTrue( obj != null );
    assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
    obj = d.getElementByMetaId("meta16");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta15");
    assertTrue( obj != null );
    assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
    obj = d.getElementByMetaId("meta15");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta17");
    assertTrue( obj != null );
    assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
    obj = d.getElementByMetaId("meta17");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta19");
    assertTrue( obj != null );
    assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
    obj = d.getElementByMetaId("meta19");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta13");
    assertTrue( obj != null );
    assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
    obj = d.getElementByMetaId("meta13");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta12");
    assertTrue( obj != null );
    assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
    obj = d.getElementByMetaId("meta12");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta23");
    assertTrue( obj != null );
    assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
    obj = d.getElementByMetaId("meta23");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta22");
    assertTrue( obj != null );
    assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
    obj = d.getElementByMetaId("meta22");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta25");
    assertTrue( obj != null );
    assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
    obj = d.getElementByMetaId("meta25");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta26");
    assertTrue( obj != null );
    assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
    obj = d.getElementByMetaId("meta26");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta24");
    assertTrue( obj != null );
    assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
    obj = d.getElementByMetaId("meta24");
    assertTrue( obj == null );
    obj = d.getElementByMetaId("meta2");
    assertTrue( obj != null );
    assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
    obj = d.getElementByMetaId("meta2");
    assertTrue( obj == null );
    d = null;
  }

  /**
   * Loads the SWIG-generated libSBML Java module when this class is
   * loaded, or reports a sensible diagnostic message about why it failed.
   */
  static
  {
    String varname;
    String shlibname;

    if (System.getProperty("mrj.version") != null)
    {
      varname = "DYLD_LIBRARY_PATH";    // We're on a Mac.
      shlibname = "libsbmlj.jnilib and/or libsbml.dylib";
    }
    else
    {
      varname = "LD_LIBRARY_PATH";      // We're not on a Mac.
      shlibname = "libsbmlj.so and/or libsbml.so";
    }

    try
    {
      System.loadLibrary("sbmlj");
      // For extra safety, check that the jar file is in the classpath.
      Class.forName("org.sbml.libsbml.libsbml");
    }
    catch (SecurityException e)
    {
      e.printStackTrace();
      System.err.println("Could not load the libSBML library files due to a"+
                         " security exception.\n");
      System.exit(1);
    }
    catch (UnsatisfiedLinkError e)
    {
      e.printStackTrace();
      System.err.println("Error: could not link with the libSBML library files."+
                         " It is likely\nyour " + varname +
                         " environment variable does not include the directories\n"+
                         "containing the " + shlibname + " library files.\n");
      System.exit(1);
    }
    catch (ClassNotFoundException e)
    {
      e.printStackTrace();
      System.err.println("Error: unable to load the file libsbmlj.jar."+
                         " It is likely\nyour -classpath option and CLASSPATH" +
                         " environment variable\n"+
                         "do not include the path to libsbmlj.jar.\n");
      System.exit(1);
    }
  }
}
