/*
 * @file    TestReadFromFileL3V2_5.java
 * @brief   Reads test-data/l3v2-empty-lo-2.xml into memory and tests it.
 *
 * @author  Akiya Jouraku (Java conversion)
 * @author  Sarah Keating 
 * 
 * ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
 *
 * DO NOT EDIT THIS FILE.
 *
 * This file was generated automatically by converting the file located at
 * src/sbml/test/TestReadFromFileL3V2_5.cpp
 * using the conversion program dev/utilities/translateTests/translateTests.pl.
 * Any changes made here will be lost the next time the file is regenerated.
 *
 * -----------------------------------------------------------------------------
 * This file is part of libSBML.  Please visit http://sbml.org for more
 * information about SBML, and the latest version of libSBML.
 *
 * Copyright 2005-2010 California Institute of Technology.
 * Copyright 2002-2005 California Institute of Technology and
 *                     Japan Science and Technology Corporation.
 * 
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation.  A copy of the license agreement is provided
 * in the file named "LICENSE.txt" included with this software distribution
 * and also available online as http://sbml.org/software/libsbml/license.html
 * -----------------------------------------------------------------------------
 */

package org.sbml.libsbml.test.sbml;

import org.sbml.libsbml.*;

import java.io.File;
import java.lang.AssertionError;

public class TestReadFromFileL3V2_5 {

  static void assertTrue(boolean condition) throws AssertionError
  {
    if (condition == true)
    {
      return;
    }
    throw new AssertionError();
  }

  static void assertEquals(Object a, Object b) throws AssertionError
  {
    if ( (a == null) && (b == null) )
    {
      return;
    }
    else if ( (a == null) || (b == null) )
    {
      throw new AssertionError();
    }
    else if (a.equals(b))
    {
      return;
    }

    throw new AssertionError();
  }

  static void assertNotEquals(Object a, Object b) throws AssertionError
  {
    if ( (a == null) && (b == null) )
    {
      throw new AssertionError();
    }
    else if ( (a == null) || (b == null) )
    {
      return;
    }
    else if (a.equals(b))
    {
      throw new AssertionError();
    }
  }

  static void assertEquals(boolean a, boolean b) throws AssertionError
  {
    if ( a == b )
    {
      return;
    }
    throw new AssertionError();
  }

  static void assertNotEquals(boolean a, boolean b) throws AssertionError
  {
    if ( a != b )
    {
      return;
    }
    throw new AssertionError();
  }

  static void assertEquals(int a, int b) throws AssertionError
  {
    if ( a == b )
    {
      return;
    }
    throw new AssertionError();
  }

  static void assertNotEquals(int a, int b) throws AssertionError
  {
    if ( a != b )
    {
      return;
    }
    throw new AssertionError();
  }

  public void test_echo_l3v2_empty_event()
  {
    String expected = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + 
    "<sbml xmlns=\"http://www.sbml.org/sbml/level3/version2/core\" " + 
    "level=\"3\" version=\"2\">\n"  + 
    "  <model>\n" + 
    "    <listOfParameters>\n" + 
    "      <parameter id=\"p\" value=\"1\" units=\"dimensionless\" constant=\"true\"/>\n" + 
    "    </listOfParameters>\n" + 
    "    <listOfEvents>\n" + 
    "      <event id=\"e\" useValuesFromTriggerTime=\"true\">\n" + 
    "        <trigger initialValue=\"true\" persistent=\"true\"/>\n" + 
    "        <delay/>\n" + 
    "        <priority/>\n" + 
    "        <listOfEventAssignments>\n" + 
    "          <eventAssignment variable=\"c\"/>\n" + 
    "        </listOfEventAssignments>\n" + 
    "      </event>\n" + 
    "    </listOfEvents>\n" + 
    "  </model>\n" + 
    "</sbml>\n";
    String filename = new String( "../../sbml/sbml/test/test-data/" );
    filename += "l3v2-empty-event.xml";
    String fileout = new String( "../../sbml/sbml/test/test-data/" );
    fileout += "tempOut.xml";
    SBMLDocument d = libsbml.readSBML();
    if (d == null);
    {
    }
    libsbml.writeSBML(d);
    SBMLDocument outD = libsbml.readSBML();
    Model m = outD.getModel();
    assertTrue( m != null );
    assertTrue( m.getNumUnitDefinitions() == 0 );
    assertTrue( m.getNumFunctionDefinitions() == 0 );
    assertTrue( m.getNumCompartments() == 0 );
    assertTrue( m.getNumSpecies() == 0 );
    assertTrue( m.getNumParameters() == 1 );
    assertTrue( m.getNumRules() == 0 );
    assertTrue( m.getNumInitialAssignments() == 0 );
    assertTrue( m.getNumConstraints() == 0 );
    assertTrue( m.getNumReactions() == 0 );
    assertTrue( m.getNumEvents() == 1 );
    Event e = m.getEvent(0);
    assertTrue( e != null );
    assertTrue( e.isSetTrigger() == true );
    assertTrue( e.isSetPriority() == true );
    assertTrue( e.isSetDelay() == true );
    assertTrue( e.getNumEventAssignments() == 1 );
    Trigger t = e.getTrigger();
    assertTrue( t != null );
    assertTrue( t.isSetMath() == false );
    Delay dl = e.getDelay();
    assertTrue( dl != null );
    assertTrue( dl.isSetMath() == false );
    Priority p = e.getPriority();
    assertTrue( p != null );
    assertTrue( p.isSetMath() == false );
    EventAssignment ea = e.getEventAssignment(0);
    assertTrue( ea != null );
    assertTrue( ea.isSetMath() == false );
    String S = libsbml.writeSBMLToString(outD);
    assertEquals( true, equals(expected,S) );
    d = null;
    outD = null;
  }

  public void test_read_l3v2_empty_event()
  {
    SBMLReader reader = new SBMLReader();
    SBMLDocument d;
    Model m;
    String filename = new String( "../../sbml/sbml/test/test-data/" );
    filename += "l3v2-empty-event.xml";
    d = reader.readSBML(filename);
    if (d == null);
    {
    }
    assertTrue( d.getLevel() == 3 );
    assertTrue( d.getVersion() == 2 );
    m = d.getModel();
    assertTrue( m != null );
    assertTrue( m.getNumUnitDefinitions() == 0 );
    assertTrue( m.getNumFunctionDefinitions() == 0 );
    assertTrue( m.getNumCompartments() == 0 );
    assertTrue( m.getNumSpecies() == 0 );
    assertTrue( m.getNumParameters() == 1 );
    assertTrue( m.getNumRules() == 0 );
    assertTrue( m.getNumInitialAssignments() == 0 );
    assertTrue( m.getNumConstraints() == 0 );
    assertTrue( m.getNumReactions() == 0 );
    assertTrue( m.getNumEvents() == 1 );
    Event e = m.getEvent(0);
    assertTrue( e != null );
    assertTrue( e.isSetTrigger() == true );
    assertTrue( e.isSetPriority() == true );
    assertTrue( e.isSetDelay() == true );
    assertTrue( e.getNumEventAssignments() == 1 );
    Trigger t = e.getTrigger();
    assertTrue( t != null );
    assertTrue( t.isSetMath() == false );
    Delay dl = e.getDelay();
    assertTrue( dl != null );
    assertTrue( dl.isSetMath() == false );
    Priority p = e.getPriority();
    assertTrue( p != null );
    assertTrue( p.isSetMath() == false );
    EventAssignment ea = e.getEventAssignment(0);
    assertTrue( ea != null );
    assertTrue( ea.isSetMath() == false );
    d = null;
  }

  /**
   * Loads the SWIG-generated libSBML Java module when this class is
   * loaded, or reports a sensible diagnostic message about why it failed.
   */
  static
  {
    String varname;
    String shlibname;

    if (System.getProperty("mrj.version") != null)
    {
      varname = "DYLD_LIBRARY_PATH";    // We're on a Mac.
      shlibname = "libsbmlj.jnilib and/or libsbml.dylib";
    }
    else
    {
      varname = "LD_LIBRARY_PATH";      // We're not on a Mac.
      shlibname = "libsbmlj.so and/or libsbml.so";
    }

    try
    {
      System.loadLibrary("sbmlj");
      // For extra safety, check that the jar file is in the classpath.
      Class.forName("org.sbml.libsbml.libsbml");
    }
    catch (SecurityException e)
    {
      e.printStackTrace();
      System.err.println("Could not load the libSBML library files due to a"+
                         " security exception.\n");
      System.exit(1);
    }
    catch (UnsatisfiedLinkError e)
    {
      e.printStackTrace();
      System.err.println("Error: could not link with the libSBML library files."+
                         " It is likely\nyour " + varname +
                         " environment variable does not include the directories\n"+
                         "containing the " + shlibname + " library files.\n");
      System.exit(1);
    }
    catch (ClassNotFoundException e)
    {
      e.printStackTrace();
      System.err.println("Error: unable to load the file libsbmlj.jar."+
                         " It is likely\nyour -classpath option and CLASSPATH" +
                         " environment variable\n"+
                         "do not include the path to libsbmlj.jar.\n");
      System.exit(1);
    }
  }
}
