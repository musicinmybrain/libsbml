/*
 * @file    TestRenameIDs.java
 * @brief   RenameIDs unit tests
 *
 * @author  Akiya Jouraku (Java conversion)
 * @author  Lucian Smith 
 * 
 * ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
 *
 * DO NOT EDIT THIS FILE.
 *
 * This file was generated automatically by converting the file located at
 * src/sbml/test/TestRenameIDs.cpp
 * using the conversion program dev/utilities/translateTests/translateTests.pl.
 * Any changes made here will be lost the next time the file is regenerated.
 *
 * -----------------------------------------------------------------------------
 * This file is part of libSBML.  Please visit http://sbml.org for more
 * information about SBML, and the latest version of libSBML.
 *
 * Copyright 2005-2010 California Institute of Technology.
 * Copyright 2002-2005 California Institute of Technology and
 *                     Japan Science and Technology Corporation.
 * 
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation.  A copy of the license agreement is provided
 * in the file named "LICENSE.txt" included with this software distribution
 * and also available online as http://sbml.org/software/libsbml/license.html
 * -----------------------------------------------------------------------------
 */

package org.sbml.libsbml.test.sbml;

import org.sbml.libsbml.*;

import java.io.File;
import java.lang.AssertionError;

public class TestRenameIDs {

  static void assertTrue(boolean condition) throws AssertionError
  {
    if (condition == true)
    {
      return;
    }
    throw new AssertionError();
  }

  static void assertEquals(Object a, Object b) throws AssertionError
  {
    if ( (a == null) && (b == null) )
    {
      return;
    }
    else if ( (a == null) || (b == null) )
    {
      throw new AssertionError();
    }
    else if (a.equals(b))
    {
      return;
    }

    throw new AssertionError();
  }

  static void assertNotEquals(Object a, Object b) throws AssertionError
  {
    if ( (a == null) && (b == null) )
    {
      throw new AssertionError();
    }
    else if ( (a == null) || (b == null) )
    {
      return;
    }
    else if (a.equals(b))
    {
      throw new AssertionError();
    }
  }

  static void assertEquals(boolean a, boolean b) throws AssertionError
  {
    if ( a == b )
    {
      return;
    }
    throw new AssertionError();
  }

  static void assertNotEquals(boolean a, boolean b) throws AssertionError
  {
    if ( a != b )
    {
      return;
    }
    throw new AssertionError();
  }

  static void assertEquals(int a, int b) throws AssertionError
  {
    if ( a == b )
    {
      return;
    }
    throw new AssertionError();
  }

  static void assertNotEquals(int a, int b) throws AssertionError
  {
    if ( a != b )
    {
      return;
    }
    throw new AssertionError();
  }

  public void test_RenameIDs()
  {
    SBMLReader reader = new SBMLReader();
    SBMLDocument d;
    String filename = new String( "../../sbml/sbml/test/test-data/" );
    filename += "multiple-ids.xml";
    d = reader.readSBML(filename);
    if (d == NULL || d.getModel() == null);
    {
    }
    SBase obj;
    List allElements = d.getAllElements();
    assertTrue( obj != null );
    obj.renameSIdRefs("comp", "comp_new");
    obj.renameSIdRefs("C", "C_new");
    obj.renameSIdRefs("conv", "conv_new");
    obj.renameSIdRefs("b", "b_new");
    obj.renameSIdRefs("b2", "b2_new");
    obj.renameSIdRefs("x", "x_new");
    obj.renameSIdRefs("y"_COMMA_ "y_new"); //The 'y' here in the function definition not actually an SIdso this should have no effect.obj.renameUnitSIdRefs("volume"_COMMA_ "volume_new");
    obj.renameUnitSIdRefs("substance", "substance_new");
    obj.renameUnitSIdRefs("item", "item_new");
    obj.renameUnitSIdRefs("second", "second_new");
    obj.renameUnitSIdRefs("litre", "litre_new");
    obj.renameUnitSIdRefs("candela", "candela_new");
    obj.renameUnitSIdRefs("farad", "farad_new");
    obj.renameUnitSIdRefs("coulomb", "coulomb_new");
  }
  obj = d.getElementByMetaId("meta21");
  assertTrue( obj != null );
  String xml = obj.toSBML();
  assertTrue( xmlstr.find("y_new").equals(string::npos) );
  assertTrue( !xmlstr.find("volume_new").equals(string::npos) );
  obj = d.getElementByMetaId("meta4");
  assertTrue( obj != null );
  Compartment compartment = (Compartment) obj;
  assertTrue( compartment.getUnits().equals( "volume_new") );
  obj = d.getElementByMetaId("meta6");
  assertTrue( obj != null );
  Species sp = (Species) obj;
  assertTrue( sp.getSubstanceUnits().equals( "substance_new") );
  assertTrue( sp.getConversionFactor().equals( "conv_new") );
  assertTrue( sp.getCompartment().equals( "comp_new") );
  obj = d.getElementByMetaId("meta11");
  assertTrue( obj != null );
  xml = obj.toSBML();
  xmlstr = xml;
  assertTrue( xmlstr.find("x_new").equals(string::npos) );
  assertTrue( !xmlstr.find("b_new").equals(string::npos) );
  assertTrue( !xmlstr.find("b2_new").equals(string::npos) );
  assertTrue( !xmlstr.find("volume_new").equals(string::npos) );
  obj = d.getElementByMetaId("meta28");
  assertTrue( obj != null );
  LocalParameter lp = (LocalParameter) obj;
  assertTrue( lp.getUnits().equals( "volume_new") );
  obj = d.getElementByMetaId("meta10");
  assertTrue( obj != null );
  SpeciesReference sr = (SpeciesReference) obj;
  assertTrue( sr.getSpecies().equals( "b_new") );
  obj = d.getElementByMetaId("meta10");
  assertTrue( obj != null );
  ModifierSpeciesReference msr = (ModifierSpeciesReference) obj;
  assertTrue( msr.getSpecies().equals( "b_new") );
  obj = d.getElementByMetaId("meta8");
  assertTrue( obj != null );
  Reaction rxn = (Reaction) obj;
  assertTrue( rxn.getCompartment().equals( "comp_new") );
  obj = d.getElementByMetaId("meta18");
  assertTrue( obj != null );
  Parameter p = (Parameter) obj;
  assertTrue( p.getUnits().equals( "volume_new") );
  obj = d.getElementByMetaId("meta14");
  assertTrue( obj != null );
  xml = obj.toSBML();
  xmlstr = xml;
  assertTrue( !xmlstr.find("b_new").equals(string::npos) );
  assertTrue( !xmlstr.find("volume_new").equals(string::npos) );
  obj = d.getElementByMetaId("meta16");
  assertTrue( obj != null );
  xml = obj.toSBML();
  xmlstr = xml;
  assertTrue( !xmlstr.find("b_new").equals(string::npos) );
  assertTrue( !xmlstr.find("volume_new").equals(string::npos) );
  EventAssignment ea = (EventAssignment) obj;
  assertTrue( ea.getVariable().equals( "b_new") );
  obj = d.getElementByMetaId("meta17");
  assertTrue( obj != null );
  xml = obj.toSBML();
  xmlstr = xml;
  assertTrue( !xmlstr.find("b_new").equals(string::npos) );
  assertTrue( !xmlstr.find("volume_new").equals(string::npos) );
  obj = d.getElementByMetaId("meta19");
  assertTrue( obj != null );
  xml = obj.toSBML();
  xmlstr = xml;
  assertTrue( !xmlstr.find("b_new").equals(string::npos) );
  assertTrue( !xmlstr.find("volume_new").equals(string::npos) );
  obj = d.getElementByMetaId("meta23");
  assertTrue( obj != null );
  xml = obj.toSBML();
  xmlstr = xml;
  assertTrue( !xmlstr.find("x_new").equals(string::npos) );
  assertTrue( !xmlstr.find("volume_new").equals(string::npos) );
  InitialAssignment ia = (InitialAssignment) obj;
  assertTrue( ia.getSymbol().equals( "b_new") );
  obj = d.getElementByMetaId("meta25");
  assertTrue( obj != null );
  xml = obj.toSBML();
  xmlstr = xml;
  assertTrue( !xmlstr.find("b_new").equals(string::npos) );
  assertTrue( !xmlstr.find("volume_new").equals(string::npos) );
  RateRule rr = (RateRule) obj;
  assertTrue( rr.getVariable().equals( "x_new") );
  obj = d.getElementByMetaId("meta26");
  assertTrue( obj != null );
  xml = obj.toSBML();
  xmlstr = xml;
  assertTrue( !xmlstr.find("b_new").equals(string::npos) );
  assertTrue( !xmlstr.find("volume_new").equals(string::npos) );
  AssignmentRule ar = (AssignmentRule) obj;
  assertTrue( ar.getVariable().equals( "C_new") );
  obj = d.getElementByMetaId("meta2");
  assertTrue( obj != null );
  Model mod = (Model) obj;
  assertTrue( mod.getConversionFactor().equals( "conv_new") );
  assertTrue( mod.getSubstanceUnits().equals( "item_new") );
  assertTrue( mod.getTimeUnits().equals( "second_new") );
  assertTrue( mod.getVolumeUnits().equals( "litre_new") );
  assertTrue( mod.getAreaUnits().equals( "candela_new") );
  assertTrue( mod.getLengthUnits().equals( "farad_new") );
  assertTrue( mod.getExtentUnits().equals( "coulomb_new") );
  d = null;
  allElements = null;
}

  /**
   * Loads the SWIG-generated libSBML Java module when this class is
   * loaded, or reports a sensible diagnostic message about why it failed.
   */
  static
  {
    String varname;
    String shlibname;

    if (System.getProperty("mrj.version") != null)
    {
      varname = "DYLD_LIBRARY_PATH";    // We're on a Mac.
      shlibname = "libsbmlj.jnilib and/or libsbml.dylib";
    }
    else
    {
      varname = "LD_LIBRARY_PATH";      // We're not on a Mac.
      shlibname = "libsbmlj.so and/or libsbml.so";
    }

    try
    {
      System.loadLibrary("sbmlj");
      // For extra safety, check that the jar file is in the classpath.
      Class.forName("org.sbml.libsbml.libsbml");
    }
    catch (SecurityException e)
    {
      e.printStackTrace();
      System.err.println("Could not load the libSBML library files due to a"+
                         " security exception.\n");
      System.exit(1);
    }
    catch (UnsatisfiedLinkError e)
    {
      e.printStackTrace();
      System.err.println("Error: could not link with the libSBML library files."+
                         " It is likely\nyour " + varname +
                         " environment variable does not include the directories\n"+
                         "containing the " + shlibname + " library files.\n");
      System.exit(1);
    }
    catch (ClassNotFoundException e)
    {
      e.printStackTrace();
      System.err.println("Error: unable to load the file libsbmlj.jar."+
                         " It is likely\nyour -classpath option and CLASSPATH" +
                         " environment variable\n"+
                         "do not include the path to libsbmlj.jar.\n");
      System.exit(1);
    }
  }
}
