/*
 * @file    TestSBMLConvert.java
 * @brief   SBMLConvert unit tests
 *
 * @author  Akiya Jouraku (Java conversion)
 * @author  Ben Bornstein 
 * 
 * ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
 *
 * DO NOT EDIT THIS FILE.
 *
 * This file was generated automatically by converting the file located at
 * src/sbml/test/TestSBMLConvert.c
 * using the conversion program dev/utilities/translateTests/translateTests.pl.
 * Any changes made here will be lost the next time the file is regenerated.
 *
 * -----------------------------------------------------------------------------
 * This file is part of libSBML.  Please visit http://sbml.org for more
 * information about SBML, and the latest version of libSBML.
 *
 * Copyright 2005-2010 California Institute of Technology.
 * Copyright 2002-2005 California Institute of Technology and
 *                     Japan Science and Technology Corporation.
 * 
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation.  A copy of the license agreement is provided
 * in the file named "LICENSE.txt" included with this software distribution
 * and also available online as http://sbml.org/software/libsbml/license.html
 * -----------------------------------------------------------------------------
 */

package org.sbml.libsbml.test.sbml;

import org.sbml.libsbml.*;

import java.io.File;
import java.lang.AssertionError;

public class TestSBMLConvert {

  static void assertTrue(boolean condition) throws AssertionError
  {
    if (condition == true)
    {
      return;
    }
    throw new AssertionError();
  }

  static void assertEquals(Object a, Object b) throws AssertionError
  {
    if ( (a == null) && (b == null) )
    {
      return;
    }
    else if ( (a == null) || (b == null) )
    {
      throw new AssertionError();
    }
    else if (a.equals(b))
    {
      return;
    }

    throw new AssertionError();
  }

  static void assertNotEquals(Object a, Object b) throws AssertionError
  {
    if ( (a == null) && (b == null) )
    {
      throw new AssertionError();
    }
    else if ( (a == null) || (b == null) )
    {
      return;
    }
    else if (a.equals(b))
    {
      throw new AssertionError();
    }
  }

  static void assertEquals(boolean a, boolean b) throws AssertionError
  {
    if ( a == b )
    {
      return;
    }
    throw new AssertionError();
  }

  static void assertNotEquals(boolean a, boolean b) throws AssertionError
  {
    if ( a != b )
    {
      return;
    }
    throw new AssertionError();
  }

  static void assertEquals(int a, int b) throws AssertionError
  {
    if ( a == b )
    {
      return;
    }
    throw new AssertionError();
  }

  static void assertNotEquals(int a, int b) throws AssertionError
  {
    if ( a != b )
    {
      return;
    }
    throw new AssertionError();
  }

  public void test_SBMLConvert_convertFromL1V1()
  {
    SBMLDocument d = new  SBMLDocument(1,1);
    d.createModel();
    assertTrue( d.setLevelAndVersion(1,1,false) == true );
    assertTrue( d.setLevelAndVersion(1,2,false) == true );
    d = null;
    d = new  SBMLDocument(1,1);
    d.createModel();
    assertTrue( d.setLevelAndVersion(2,1,false) == true );
    d = null;
    d = new  SBMLDocument(1,1);
    d.createModel();
    assertTrue( d.setLevelAndVersion(2,2,false) == true );
    d = null;
    d = new  SBMLDocument(1,1);
    d.createModel();
    assertTrue( d.setLevelAndVersion(2,3,false) == true );
    d = null;
    d = new  SBMLDocument(1,1);
    d.createModel();
    assertTrue( d.setLevelAndVersion(2,4,false) == true );
    d = null;
    d = new  SBMLDocument(1,1);
    d.createModel();
    assertTrue( d.setLevelAndVersion(3,1,false) == true );
    d = null;
  }

  public void test_SBMLConvert_convertFromL1V2()
  {
    SBMLDocument d = new  SBMLDocument(1,2);
    Model m = d.createModel();
    (void) m;
    assertTrue( d.setLevelAndVersion(1,1,false) == false );
    assertTrue( d.setLevelAndVersion(1,2,false) == true );
    assertTrue( d.setLevelAndVersion(1,2,false) == true );
    assertTrue( d.setLevelAndVersion(2,1,false) == true );
    assertTrue( d.setLevelAndVersion(1,2,false) == true );
    assertTrue( d.setLevelAndVersion(2,2,false) == true );
    assertTrue( d.setLevelAndVersion(1,2,false) == true );
    assertTrue( d.setLevelAndVersion(2,3,false) == true );
    assertTrue( d.setLevelAndVersion(1,2,false) == true );
    assertTrue( d.setLevelAndVersion(2,4,false) == true );
    assertTrue( d.setLevelAndVersion(1,2,false) == true );
    assertTrue( d.setLevelAndVersion(3,1,false) == true );
    d = null;
  }

  public void test_SBMLConvert_convertFromL1_addModifiersToReaction()
  {
    SBMLDocument d = new  SBMLDocument(1,2);
    Model m = d.createModel();
    Reaction r = m.createReaction();
    KineticLaw kl = r.createKineticLaw();
    kl.setFormula( "k1*S1*S2*S3*S4*S5");
    SimpleSpeciesReference ssr1;
    SimpleSpeciesReference ssr2;
    Species s1 = m.createSpecies();
    s1.setId( "S1" );
    Species s2 = m.createSpecies();
    s2.setId( "S2");
    Species s3 = m.createSpecies();
    s3.setId( "S3");
    Species s4 = m.createSpecies();
    s4.setId( "S4");
    Species s5 = m.createSpecies();
    s5.setId( "S5");
    SpeciesReference sr1 = r.createReactant();
    SpeciesReference sr2 = r.createReactant();
    SpeciesReference sr3 = r.createProduct();
    sr1.setSpecies( "S1");
    sr2.setSpecies( "S2");
    sr3.setSpecies( "S5");
    assertTrue( r.getNumModifiers() == 0 );
    assertTrue( d.setLevelAndVersion(2,1,false) == true );
    assertTrue( d.getLevel() == 2 );
    assertTrue( d.getVersion() == 1 );
    assertTrue( m.getReaction(0).getNumModifiers() == 2 );
    ssr1 = m.getReaction(0).getModifier(0);
    ssr2 = m.getReaction(0).getModifier(1);
    assertTrue(ssr1.getSpecies().equals( "S3"));
    assertTrue(ssr2.getSpecies().equals( "S4"));
    d = null;
  }

  public void test_SBMLConvert_convertFromL1_varyingComp()
  {
    SBMLDocument d = new  SBMLDocument(1,2);
    Model m = d.createModel();
    Compartment c = m.createCompartment();
    Rule r = m.createAssignmentRule();
    c.setName( "c");
    r.setVariable( "c");
    r.setFormula( "1*2");
    assertTrue( d.setLevelAndVersion(2,1,false) == true );
    assertTrue( d.getLevel() == 2 );
    assertTrue( d.getVersion() == 1 );
    assertTrue( m.getCompartment(0).getConstant() == false );
    d = null;
  }

  public void test_SBMLConvert_convertFromL1_varyingParam()
  {
    SBMLDocument d = new  SBMLDocument(1,2);
    Model m = d.createModel();
    Parameter p = m.createParameter();
    Rule r = m.createAssignmentRule();
    p.setName( "c");
    r.setVariable( "c");
    r.setFormula( "1*2");
    assertTrue( d.setLevelAndVersion(2,1,false) == true );
    assertTrue( d.getLevel() == 2 );
    assertTrue( d.getVersion() == 1 );
    assertTrue( m.getParameter(0).getConstant() == false );
    d = null;
  }

  public void test_SBMLConvert_convertFromL2V1()
  {
    SBMLDocument d = new  SBMLDocument(2,1);
    Model m = d.createModel();
    (void) m;
    assertTrue( d.setLevelAndVersion(1,1,false) == false );
    assertTrue( d.setLevelAndVersion(1,2,false) == true );
    assertTrue( d.setLevelAndVersion(2,1,false) == true );
    assertTrue( d.setLevelAndVersion(2,1,false) == true );
    assertTrue( d.setLevelAndVersion(2,1,false) == true );
    assertTrue( d.setLevelAndVersion(2,2,false) == true );
    assertTrue( d.setLevelAndVersion(2,1,false) == true );
    assertTrue( d.setLevelAndVersion(2,3,false) == true );
    assertTrue( d.setLevelAndVersion(2,1,false) == true );
    assertTrue( d.setLevelAndVersion(2,4,false) == true );
    assertTrue( d.setLevelAndVersion(2,1,false) == true );
    assertTrue( d.setLevelAndVersion(3,1,false) == true );
    d = null;
  }

  public void test_SBMLConvert_convertFromL2V2()
  {
    SBMLDocument d = new  SBMLDocument(2,2);
    Model m = d.createModel();
    (void) m;
    assertTrue( d.setLevelAndVersion(1,1,false) == false );
    assertTrue( d.setLevelAndVersion(1,2,false) == true );
    assertTrue( d.setLevelAndVersion(2,2,false) == true );
    assertTrue( d.setLevelAndVersion(2,1,false) == true );
    assertTrue( d.setLevelAndVersion(2,2,false) == true );
    assertTrue( d.setLevelAndVersion(2,2,false) == true );
    assertTrue( d.setLevelAndVersion(2,2,false) == true );
    assertTrue( d.setLevelAndVersion(2,3,false) == true );
    assertTrue( d.setLevelAndVersion(2,2,false) == true );
    assertTrue( d.setLevelAndVersion(2,4,false) == true );
    assertTrue( d.setLevelAndVersion(2,2,false) == true );
    assertTrue( d.setLevelAndVersion(3,1,false) == true );
    d = null;
  }

  public void test_SBMLConvert_convertFromL2V3()
  {
    SBMLDocument d = new  SBMLDocument(2,3);
    Model m = d.createModel();
    (void) m;
    assertTrue( d.setLevelAndVersion(1,1,false) == false );
    assertTrue( d.setLevelAndVersion(1,2,false) == true );
    assertTrue( d.setLevelAndVersion(2,3,false) == true );
    assertTrue( d.setLevelAndVersion(2,1,false) == true );
    assertTrue( d.setLevelAndVersion(2,3,false) == true );
    assertTrue( d.setLevelAndVersion(2,2,false) == true );
    assertTrue( d.setLevelAndVersion(2,3,false) == true );
    assertTrue( d.setLevelAndVersion(2,3,false) == true );
    assertTrue( d.setLevelAndVersion(2,3,false) == true );
    assertTrue( d.setLevelAndVersion(2,4,false) == true );
    assertTrue( d.setLevelAndVersion(2,3,false) == true );
    assertTrue( d.setLevelAndVersion(3,1,false) == true );
    d = null;
  }

  public void test_SBMLConvert_convertFromL2V4()
  {
    SBMLDocument d = new  SBMLDocument(2,4);
    Model m = d.createModel();
    (void) m;
    assertTrue( d.setLevelAndVersion(1,1,false) == false );
    assertTrue( d.setLevelAndVersion(1,2,false) == true );
    assertTrue( d.setLevelAndVersion(2,4,false) == true );
    assertTrue( d.setLevelAndVersion(2,1,false) == true );
    assertTrue( d.setLevelAndVersion(2,4,false) == true );
    assertTrue( d.setLevelAndVersion(2,2,false) == true );
    assertTrue( d.setLevelAndVersion(2,4,false) == true );
    assertTrue( d.setLevelAndVersion(2,3,false) == true );
    assertTrue( d.setLevelAndVersion(2,4,false) == true );
    assertTrue( d.setLevelAndVersion(2,4,false) == true );
    assertTrue( d.setLevelAndVersion(2,4,false) == true );
    assertTrue( d.setLevelAndVersion(3,1,false) == true );
    d = null;
  }

  public void test_SBMLConvert_convertFromL3V1()
  {
    SBMLDocument d = new  SBMLDocument(3,1);
    Model m = d.createModel();
    (void) m;
    assertTrue( d.setLevelAndVersion(1,1,false) == false );
    assertTrue( d.setLevelAndVersion(1,2,false) == true );
    d = null;
    d = new  SBMLDocument(3,1);
    m = d.createModel();
    assertTrue( d.setLevelAndVersion(2,1,false) == true );
    d = null;
    d = new  SBMLDocument(3,1);
    m = d.createModel();
    assertTrue( d.setLevelAndVersion(2,2,false) == true );
    d = null;
    d = new  SBMLDocument(3,1);
    m = d.createModel();
    assertTrue( d.setLevelAndVersion(2,3,false) == true );
    d = null;
    d = new  SBMLDocument(3,1);
    m = d.createModel();
    assertTrue( d.setLevelAndVersion(2,4,false) == true );
    d = null;
    d = new  SBMLDocument(3,1);
    m = d.createModel();
    assertTrue( d.setLevelAndVersion(3,1,false) == true );
    d = null;
  }

  public void test_SBMLConvert_convertFromL3_Comp()
  {
    SBMLDocument d = new  SBMLDocument(3,1);
    Model m = d.createModel();
    String sid =  "C";
    Compartment c = m.createCompartment();
    c.setId(sid);
    c.setSize(1.2);
    c.setConstant(true);
    c.setSpatialDimensions(3.4);
    assertTrue( d.setLevelAndVersion(1,1,true) == false );
    assertTrue( d.setLevelAndVersion(1,2,true) == false );
    assertTrue( d.setLevelAndVersion(2,1,true) == false );
    assertTrue( d.setLevelAndVersion(2,2,true) == false );
    assertTrue( d.setLevelAndVersion(2,3,true) == false );
    assertTrue( d.setLevelAndVersion(2,4,true) == false );
    assertTrue( d.setLevelAndVersion(3,1,true) == true );
    d = null;
  }

  public void test_SBMLConvert_convertFromL3_compartment_defaultValues()
  {
    SBMLDocument d = new  SBMLDocument(3,1);
    Model m = d.createModel();
    String sid =  "C";
    Compartment c = m.createCompartment();
    c.setId(sid);
    assertTrue( c.isSetConstant() == false );
    assertTrue( c.getConstant() == true );
    assertTrue( c.isSetSpatialDimensions() == 0 );
    assertTrue( util_isNaN == 1 );
    assertTrue( d.setLevelAndVersion(2,4,false) == true );
    assertTrue( c.isSetConstant() == true );
    assertTrue( c.getConstant() == true );
    assertTrue( c.isSetSpatialDimensions() == 1 );
    assertTrue( c.getSpatialDimensions() == 3 );
    d = null;
  }

  public void test_SBMLConvert_convertFromL3_compartment_defaultValues_1()
  {
    SBMLDocument d = new  SBMLDocument(3,1);
    Model m = d.createModel();
    String sid =  "C";
    Compartment c = m.createCompartment();
    c.setId(sid);
    c.setConstant(false);
    assertTrue( c.isSetConstant() == true );
    assertTrue( c.getConstant() == false );
    assertTrue( c.isSetSpatialDimensions() == 0 );
    assertTrue( util_isNaN == 1 );
    assertTrue( d.setLevelAndVersion(2,4,false) == true );
    assertTrue( c.isSetConstant() == true );
    assertTrue( c.getConstant() == false );
    assertTrue( c.isSetSpatialDimensions() == 1 );
    assertTrue( c.getSpatialDimensions() == 3 );
    d = null;
  }

  public void test_SBMLConvert_convertFromL3_conversionFactor()
  {
    SBMLDocument d = new  SBMLDocument(3,1);
    Model m = d.createModel();
    String sid =  "P";
    m.setConversionFactor(sid);
    Parameter c = m.createParameter();
    c.setId(sid);
    c.setConstant(true);
    assertTrue( d.setLevelAndVersion(1,1,true) == false );
    assertTrue( d.setLevelAndVersion(1,2,true) == false );
    assertTrue( d.setLevelAndVersion(2,1,true) == false );
    assertTrue( d.setLevelAndVersion(2,2,true) == false );
    assertTrue( d.setLevelAndVersion(2,3,true) == false );
    assertTrue( d.setLevelAndVersion(2,4,true) == false );
    assertTrue( d.setLevelAndVersion(3,1,true) == true );
    d = null;
  }

  public void test_SBMLConvert_convertFromL3_event_defaultValues()
  {
    SBMLDocument d = new  SBMLDocument(3,1);
    Model m = d.createModel();
    Event e = m.createEvent();
    Event e1;
    (void) e;
    assertTrue( e.isSetUseValuesFromTriggerTime() == false );
    assertTrue( e.getUseValuesFromTriggerTime() == true );
    assertTrue( d.setLevelAndVersion(2,4,false) == true );
    e1 = m.getEvent(0);
    assertTrue( e1.isSetUseValuesFromTriggerTime() == true );
    assertTrue( e1.getUseValuesFromTriggerTime() == true );
    d = null;
  }

  public void test_SBMLConvert_convertFromL3_event_defaultValues_1()
  {
    SBMLDocument d = new  SBMLDocument(3,1);
    Model m = d.createModel();
    Event e = m.createEvent();
    Event e1;
    e.setUseValuesFromTriggerTime(false);
    assertTrue( e.isSetUseValuesFromTriggerTime() == true );
    assertTrue( e.getUseValuesFromTriggerTime() == false );
    assertTrue( d.setLevelAndVersion(2,4,false) == true );
    e1 = m.getEvent(0);
    assertTrue( e1.isSetUseValuesFromTriggerTime() == true );
    assertTrue( e1.getUseValuesFromTriggerTime() == false );
    d = null;
  }

  public void test_SBMLConvert_convertFromL3_initialValue()
  {
    SBMLDocument d = 2 = null;
    Model m = d.createModel();
    Event e = m.createEvent();
    Trigger t = e.createTrigger();
    t.setInitialValue(0);
    assertTrue( d.setLevelAndVersion(1,1,false) == false );
    d2 = d.clone();
    assertTrue( d2.setLevelAndVersion(1,2,false) == true );
    d2 = null;
    d2 = d.clone();
    assertTrue( d2.setLevelAndVersion(2,1,false) == true );
    d2 = null;
    d2 = d.clone();
    assertTrue( d2.setLevelAndVersion(2,2,false) == true );
    d2 = null;
    d2 = d.clone();
    assertTrue( d2.setLevelAndVersion(2,3,false) == true );
    d2 = null;
    d2 = d.clone();
    assertTrue( d2.setLevelAndVersion(2,4,false) == true );
    d2 = null;
    assertTrue( d.setLevelAndVersion(3,1,false) == true );
    d = null;
  }

  public void test_SBMLConvert_convertFromL3_localParameters()
  {
    SBMLDocument d = new  SBMLDocument(3,1);
    Model m = d.createModel();
    Compartment c = m.createCompartment();
    c.setId( "c");
    c.setSpatialDimensions(3);
    Species s = m.createSpecies();
    s.setId( "s");
    Reaction r = m.createReaction();
    SpeciesReference sr = r.createReactant();
    sr.setSpecies( "s");
    KineticLaw kl = r.createKineticLaw();
    ASTNode math = libsbml.parseFormula("k");
    kl.setMath(math);
    math = null;
    LocalParameter lp = kl.createLocalParameter();
    lp.setId( "k");
    assertTrue( kl.getNumLocalParameters() == 1 );
    assertTrue( kl.getNumParameters() == 1 );
    assertTrue( d.setLevelAndVersion(1,1,false) == false );
    SBMLDocument d2 = d.clone();
    assertTrue( d2.setLevelAndVersion(1,2,false) == true );
    m = d2.getModel();
    kl = m.getReaction(0).getKineticLaw();
    assertTrue( kl.getNumLocalParameters() == 0 );
    assertTrue( kl.getNumParameters() == 1 );
    d2 = null;
    assertTrue( d.setLevelAndVersion(2,1,false) == true );
    m = d.getModel();
    kl = m.getReaction(0).getKineticLaw();
    assertTrue( kl.getNumLocalParameters() == 0 );
    assertTrue( kl.getNumParameters() == 1 );
    d = null;
  }

  public void test_SBMLConvert_convertFromL3_localParameters_defaultValues()
  {
    SBMLDocument d = new  SBMLDocument(3,1);
    Model m = d.createModel();
    Compartment c = m.createCompartment();
    c.setId( "c" );
    c.setConstant(true);
    Species s = m.createSpecies();
    s.setId( "s");
    s.setCompartment( "c");
    s.setBoundaryCondition(false);
    s.setConstant(false);
    s.setHasOnlySubstanceUnits(false);
    Reaction r = m.createReaction();
    r.setReversible(false);
    SpeciesReference sr = r.createReactant();
    sr.setSpecies( "s");
    sr.setConstant(true);
    KineticLaw kl = r.createKineticLaw();
    ASTNode math = libsbml.parseFormula("s*k");
    kl.setMath(math);
    math = null;
    LocalParameter p = kl.createLocalParameter();
    p.setId( "k");
    assertTrue( kl.getNumLocalParameters() == 1 );
    assertTrue( d.setLevelAndVersion(2,4,false) == true );
    m = d.getModel();
    r = m.getReaction(0);
    kl = r.getKineticLaw();
    assertTrue( kl.getNumParameters() == 1 );
    Parameter lp = kl.getParameter(0);
    assertTrue( lp.isSetConstant() == true );
    assertTrue( lp.getConstant() == true );
    d = null;
  }

  public void test_SBMLConvert_convertFromL3_modelUnits()
  {
    UnitDefinition ud;
    SBMLDocument d = new  SBMLDocument(3,1);
    Model m = d.createModel();
    m.setVolumeUnits( "litre");
    assertTrue( m.getNumUnitDefinitions() == 0 );
    assertTrue( d.setLevelAndVersion(2,4,false) == true );
    m = d.getModel();
    assertTrue( m.getNumUnitDefinitions() == 1 );
    ud = m.getUnitDefinition(0);
    assertTrue(ud.getId().equals( "volume"));
    assertTrue( ud.getNumUnits() == 1 );
    assertTrue( ud.getUnit(0).getKind() == libsbml.UNIT_KIND_LITRE );
    d = null;
  }

  public void test_SBMLConvert_convertFromL3_modelUnits1()
  {
    UnitDefinition ud2;
    SBMLDocument d = new  SBMLDocument(3,1);
    Model m = d.createModel();
    m.setSubstanceUnits( "foo");
    UnitDefinition ud = m.createUnitDefinition();
    ud.setId( "foo");
    Unit u = ud.createUnit();
    u.initDefaults();
    u.setKind(libsbml.UNIT_KIND_MOLE);
    u.setScale(-6);
    UnitDefinition ud1 = m.createUnitDefinition();
    ud1.setId( "substance");
    Unit u1 = ud1.createUnit();
    u1.initDefaults();
    u1.setKind(libsbml.UNIT_KIND_MOLE);
    u1.setScale(-3);
    Parameter p = m.createParameter();
    p.setId( "p");
    p.setUnits( "substance");
    assertTrue( m.getNumUnitDefinitions() == 2 );
    assertTrue( d.setLevelAndVersion(2,4,false) == true );
    m = d.getModel();
    assertTrue( m.getNumUnitDefinitions() == 3 );
    ud2 = m.getUnitDefinition(0);
    assertTrue(ud2.getId().equals( "foo"));
    assertTrue( ud2.getNumUnits() == 1 );
    assertTrue( ud2.getUnit(0).getKind() == libsbml.UNIT_KIND_MOLE );
    assertTrue( ud2.getUnit(0).getScale() == -6 );
    ud2 = m.getUnitDefinition(1);
    assertTrue(ud2.getId().equals( "substanceFromOriginal"));
    assertTrue( ud2.getNumUnits() == 1 );
    assertTrue( ud2.getUnit(0).getKind() == libsbml.UNIT_KIND_MOLE );
    assertTrue( ud2.getUnit(0).getScale() == -3 );
    ud2 = m.getUnitDefinition(2);
    assertTrue(ud2.getId().equals( "substance"));
    assertTrue( ud2.getNumUnits() == 1 );
    assertTrue( ud2.getUnit(0).getKind() == libsbml.UNIT_KIND_MOLE );
    assertTrue( ud2.getUnit(0).getScale() == -6 );
    Parameter p1 = m.getParameter(0);
    assertTrue(p1.getUnits().equals( "substanceFromOriginal"));
    d = null;
  }

  public void test_SBMLConvert_convertFromL3_parameter_defaultValues()
  {
    SBMLDocument d = new  SBMLDocument(3,1);
    Model m = d.createModel();
    String sid =  "C";
    Parameter p = m.createParameter();
    Parameter p1;
    p.setId(sid);
    assertTrue( p.isSetConstant() == false );
    assertTrue( p.getConstant() == true );
    assertTrue( d.setLevelAndVersion(2,4,false) == true );
    p1 = m.getParameter(0);
    assertTrue( p1.isSetConstant() == true );
    assertTrue( p1.getConstant() == true );
    d = null;
  }

  public void test_SBMLConvert_convertFromL3_persistent()
  {
    SBMLDocument d = 2 = null;
    Model m = d.createModel();
    Event e = m.createEvent();
    Trigger t = e.createTrigger();
    t.setPersistent(0);
    assertTrue( d.setLevelAndVersion(1,1,false) == false );
    d2 = d.clone();
    assertTrue( d2.setLevelAndVersion(1,2,false) == true );
    d2 = null;
    d2 = d.clone();
    assertTrue( d2.setLevelAndVersion(2,1,false) == true );
    d2 = null;
    d2 = d.clone();
    assertTrue( d2.setLevelAndVersion(2,2,false) == true );
    d2 = null;
    d2 = d.clone();
    assertTrue( d2.setLevelAndVersion(2,3,false) == true );
    d2 = null;
    d2 = d.clone();
    assertTrue( d2.setLevelAndVersion(2,4,false) == true );
    d2 = null;
    assertTrue( d.setLevelAndVersion(3,1,false) == true );
    d = null;
  }

  public void test_SBMLConvert_convertFromL3_priority1()
  {
    SBMLDocument d = 2 = null;
    Model m = d.createModel();
    Event e = m.createEvent();
    Priority p = e.createPriority();
    (void) p;
    assertTrue( d.setLevelAndVersion(1,1,false) == false );
    d2 = d.clone();
    assertTrue( d2.setLevelAndVersion(1,2,false) == true );
    d2 = null;
    d2 = d.clone();
    assertTrue( d2.setLevelAndVersion(2,1,false) == true );
    d2 = null;
    d2 = d.clone();
    assertTrue( d2.setLevelAndVersion(2,2,false) == true );
    d2 = null;
    d2 = d.clone();
    assertTrue( d2.setLevelAndVersion(2,3,false) == true );
    d2 = null;
    d2 = d.clone();
    assertTrue( d2.setLevelAndVersion(2,4,false) == true );
    d2 = null;
    assertTrue( d.setLevelAndVersion(2,4,false) == true );
    d = null;
  }

  public void test_SBMLConvert_convertFromL3_reaction_defaultValues()
  {
    SBMLDocument d = new  SBMLDocument(3,1);
    Model m = d.createModel();
    String sid =  "C";
    Reaction r = m.createReaction();
    r.setId(sid);
    assertTrue( r.isSetReversible() == false );
    assertTrue( r.getReversible() == true );
    assertTrue( d.setLevelAndVersion(2,4,false) == true );
    Reaction r1 = m.getReaction(0);
    assertTrue( r1.isSetReversible() == true );
    assertTrue( r1.getReversible() == true );
    d = null;
  }

  public void test_SBMLConvert_convertFromL3_reaction_defaultValues_1()
  {
    SBMLDocument d = new  SBMLDocument(3,1);
    Model m = d.createModel();
    String sid =  "C";
    Reaction r = m.createReaction();
    r.setId(sid);
    r.setReversible(false);
    assertTrue( r.isSetReversible() == true );
    assertTrue( r.getReversible() == false );
    assertTrue( d.setLevelAndVersion(2,4,false) == true );
    Reaction r1 = m.getReaction(0);
    assertTrue( r1.isSetReversible() == true );
    assertTrue( r1.getReversible() == false );
    d = null;
  }

  public void test_SBMLConvert_convertFromL3_spRef_defaultValues()
  {
    SBMLDocument d = new  SBMLDocument(3,1);
    Model m = d.createModel();
    Reaction r = m.createReaction();
    SpeciesReference sr = r.createReactant();
    SpeciesReference sr1;
    sr.setSpecies( "s" );
    sr.setStoichiometry(2.0);
    assertTrue( sr.isSetConstant() == false );
    assertTrue( sr.getConstant() == false );
    assertTrue( sr.isSetStoichiometry() == 1 );
    assertTrue( util_isEqual == 1 );
    assertTrue( d.setLevelAndVersion(2,4,false) == true );
    sr1 = m.getReaction(0).getReactant(0);
    assertTrue( sr1.isSetConstant() == false );
    assertTrue( sr1.getConstant() == false );
    assertTrue( sr1.isSetStoichiometry() == 1 );
    assertTrue( util_isEqual == 1 );
    d = null;
  }

  public void test_SBMLConvert_convertFromL3_species_defaultValues()
  {
    SBMLDocument d = new  SBMLDocument(3,1);
    Model m = d.createModel();
    String sid =  "C";
    Species s = m.createSpecies();
    Species s1;
    s.setId(sid);
    s.setCompartment( "comp");
    assertTrue( s.isSetConstant() == false );
    assertTrue( s.getConstant() == false );
    assertTrue( s.isSetBoundaryCondition() == false );
    assertTrue( s.getBoundaryCondition() == false );
    assertTrue( s.isSetHasOnlySubstanceUnits() == false );
    assertTrue( s.getHasOnlySubstanceUnits() == false );
    assertTrue( d.setLevelAndVersion(2,4,false) == true );
    s1 = m.getSpecies(0);
    assertTrue( s1.isSetConstant() == true );
    assertTrue( s1.getConstant() == false );
    assertTrue( s1.isSetBoundaryCondition() == true );
    assertTrue( s1.getBoundaryCondition() == false );
    assertTrue( s1.isSetHasOnlySubstanceUnits() == true );
    assertTrue( s1.getHasOnlySubstanceUnits() == false );
    d = null;
  }

  public void test_SBMLConvert_convertFromL3_species_defaultValues_1()
  {
    SBMLDocument d = new  SBMLDocument(3,1);
    Model m = d.createModel();
    String sid =  "C";
    Species s = m.createSpecies();
    Species s1;
    s.setId(sid);
    s.setCompartment( "comp");
    s.setConstant(true);
    assertTrue( s.isSetConstant() == true );
    assertTrue( s.getConstant() == true );
    assertTrue( s.isSetBoundaryCondition() == false );
    assertTrue( s.getBoundaryCondition() == false );
    assertTrue( s.isSetHasOnlySubstanceUnits() == false );
    assertTrue( s.getHasOnlySubstanceUnits() == false );
    assertTrue( d.setLevelAndVersion(2,4,false) == true );
    s1 = m.getSpecies(0);
    assertTrue( s1.isSetConstant() == true );
    assertTrue( s1.getConstant() == true );
    assertTrue( s1.isSetBoundaryCondition() == true );
    assertTrue( s1.getBoundaryCondition() == false );
    assertTrue( s1.isSetHasOnlySubstanceUnits() == true );
    assertTrue( s1.getHasOnlySubstanceUnits() == false );
    d = null;
  }

  public void test_SBMLConvert_convertFromL3_species_defaultValues_2()
  {
    SBMLDocument d = new  SBMLDocument(3,1);
    Model m = d.createModel();
    String sid =  "C";
    Species s = m.createSpecies();
    Species s1;
    s.setId(sid);
    s.setCompartment( "comp");
    s.setBoundaryCondition(true);
    assertTrue( s.isSetConstant() == false );
    assertTrue( s.getConstant() == false );
    assertTrue( s.isSetBoundaryCondition() == true );
    assertTrue( s.getBoundaryCondition() == true );
    assertTrue( s.isSetHasOnlySubstanceUnits() == false );
    assertTrue( s.getHasOnlySubstanceUnits() == false );
    assertTrue( d.setLevelAndVersion(2,4,false) == true );
    s1 = m.getSpecies(0);
    assertTrue( s1.isSetConstant() == true );
    assertTrue( s1.getConstant() == false );
    assertTrue( s1.isSetBoundaryCondition() == true );
    assertTrue( s1.getBoundaryCondition() == true );
    assertTrue( s1.isSetHasOnlySubstanceUnits() == true );
    assertTrue( s1.getHasOnlySubstanceUnits() == false );
    d = null;
  }

  public void test_SBMLConvert_convertFromL3_species_defaultValues_3()
  {
    SBMLDocument d = new  SBMLDocument(3,1);
    Model m = d.createModel();
    String sid =  "C";
    Species s = m.createSpecies();
    Species s1;
    s.setId(sid);
    s.setCompartment( "comp");
    s.setHasOnlySubstanceUnits(true);
    assertTrue( s.isSetConstant() == false );
    assertTrue( s.getConstant() == false );
    assertTrue( s.isSetBoundaryCondition() == false );
    assertTrue( s.getBoundaryCondition() == false );
    assertTrue( s.isSetHasOnlySubstanceUnits() == true );
    assertTrue( s.getHasOnlySubstanceUnits() == true );
    assertTrue( d.setLevelAndVersion(2,4,false) == true );
    s1 = m.getSpecies(0);
    assertTrue( s1.isSetConstant() == true );
    assertTrue( s1.getConstant() == false );
    assertTrue( s1.isSetBoundaryCondition() == true );
    assertTrue( s1.getBoundaryCondition() == false );
    assertTrue( s1.isSetHasOnlySubstanceUnits() == true );
    assertTrue( s1.getHasOnlySubstanceUnits() == true );
    d = null;
  }

  public void test_SBMLConvert_convertFromL3_stoichMath1()
  {
    SBMLDocument d = new  SBMLDocument(3,1);
    Model m = d.createModel();
    Compartment c = m.createCompartment();
    c.setId( "c");
    c.setSpatialDimensions(3);
    Species s = m.createSpecies();
    s.setId( "s");
    Reaction r = m.createReaction();
    SpeciesReference sr = r.createReactant();
    sr.setId( "XREF");
    sr.setSpecies( "s");
    Rule rule = new  RateRule(3,1);
    rule.setVariable( "XREF");
    ASTNode math = libsbml.parseFormula("0.001");
    rule.setMath(math);
    math = null;
    m.addRule(rule);
    assertTrue( d.setLevelAndVersion(1,1,false) == false );
    SBMLDocument d2 = d.clone();
    assertTrue( d2.setLevelAndVersion(1,2,false) == true );
    d2 = null;
    assertTrue( d.setLevelAndVersion(2,1,false) == true );
    m = d.getModel();
    assertTrue( m.getNumParameters() == 1 );
    assertTrue(m.getRule(0).getVariable().equals( "parameterId_0"));
    r = m.getReaction(0);
    assertTrue( r.getReactant(0).isSetStoichiometryMath() == 1 );
    d = null;
    rule = null;
  }

  public void test_SBMLConvert_convertFromL3_stoichMath2()
  {
    SBMLDocument d = new  SBMLDocument(3,1);
    Model m = d.createModel();
    Compartment c = m.createCompartment();
    c.setId( "c");
    c.setSpatialDimensions(3);
    Species s = m.createSpecies();
    s.setId( "s");
    Reaction r = m.createReaction();
    SpeciesReference sr = r.createReactant();
    sr.setId( "XREF");
    sr.setSpecies( "s");
    Rule rule = new  RateRule(3,1);
    rule.setVariable( "XREF");
    ASTNode math = libsbml.parseFormula("0.001");
    rule.setMath(math);
    math = null;
    m.addRule(rule);
    assertTrue( d.setLevelAndVersion(2,2,false) == true );
    m = d.getModel();
    assertTrue( m.getNumParameters() == 1 );
    assertTrue(m.getRule(0).getVariable().equals( "parameterId_0"));
    r = m.getReaction(0);
    assertTrue( r.getReactant(0).isSetStoichiometryMath() == 1 );
    d = null;
    rule = null;
  }

  public void test_SBMLConvert_convertFromL3_stoichMath3()
  {
    SBMLDocument d = new  SBMLDocument(3,1);
    Model m = d.createModel();
    Compartment c = m.createCompartment();
    c.setId( "c");
    c.setSpatialDimensions(3);
    Species s = m.createSpecies();
    s.setId( "s");
    Reaction r = m.createReaction();
    SpeciesReference sr = r.createReactant();
    sr.setId( "XREF");
    sr.setSpecies( "s");
    Rule rule = new  RateRule(3,1);
    rule.setVariable( "XREF");
    ASTNode math = libsbml.parseFormula("0.001");
    rule.setMath(math);
    math = null;
    m.addRule(rule);
    assertTrue( d.setLevelAndVersion(2,3,false) == true );
    m = d.getModel();
    assertTrue( m.getNumParameters() == 1 );
    assertTrue(m.getRule(0).getVariable().equals( "parameterId_0"));
    r = m.getReaction(0);
    assertTrue( r.getReactant(0).isSetStoichiometryMath() == 1 );
    d = null;
    rule = null;
  }

  public void test_SBMLConvert_convertFromL3_stoichMath4()
  {
    SBMLDocument d = new  SBMLDocument(3,1);
    Model m = d.createModel();
    Compartment c = m.createCompartment();
    c.setId( "c");
    c.setSpatialDimensions(3);
    Species s = m.createSpecies();
    s.setId( "s");
    Reaction r = m.createReaction();
    SpeciesReference sr = r.createReactant();
    sr.setId( "XREF");
    sr.setSpecies( "s");
    Rule rule = new  RateRule(3,1);
    rule.setVariable( "XREF");
    ASTNode math = libsbml.parseFormula("0.001");
    rule.setMath(math);
    math = null;
    m.addRule(rule);
    assertTrue( d.setLevelAndVersion(2,4,false) == true );
    m = d.getModel();
    assertTrue( m.getNumParameters() == 1 );
    assertTrue(m.getRule(0).getVariable().equals( "parameterId_0"));
    r = m.getReaction(0);
    assertTrue( r.getReactant(0).isSetStoichiometryMath() == 1 );
    d = null;
    rule = null;
  }

  public void test_SBMLConvert_convertFromL3_stoichMath5()
  {
    SBMLDocument d = new  SBMLDocument(3,1);
    Model m = d.createModel();
    Compartment c = m.createCompartment();
    c.setId( "c");
    c.setSpatialDimensions(3);
    Species s = m.createSpecies();
    s.setId( "s");
    Reaction r = m.createReaction();
    SpeciesReference sr = r.createReactant();
    sr.setId( "XREF");
    sr.setSpecies( "s");
    Rule rule = new  RateRule(3,1);
    rule.setVariable( "XREF");
    ASTNode math = libsbml.parseFormula("0.001");
    rule.setMath(math);
    math = null;
    m.addRule(rule);
    assertTrue( d.setLevelAndVersion(3,1,false) == true );
    d = null;
    rule = null;
  }

  public void test_SBMLConvert_convertFromL3_unit_defaultValues()
  {
    SBMLDocument d = new  SBMLDocument(3,1);
    Model m = d.createModel();
    String sid =  "C";
    UnitDefinition ud = m.createUnitDefinition();
    ud.setId(sid);
    Unit u = ud.createUnit();
    u.setKind(libsbml.UNIT_KIND_MOLE);
    assertTrue( u.isSetExponent() == 0 );
    assertTrue( util_isNaN == 1 );
    assertTrue( u.isSetMultiplier() == 0 );
    assertTrue( util_isNaN == 1 );
    assertTrue( u.isSetScale() == 0 );
    assertTrue( u.getScale() == SBML_INT_MAX );
    assertTrue( d.setLevelAndVersion(2,4,false) == true );
    Unit u1 = m.getUnitDefinition(0).getUnit(0);
    assertTrue( u1.isSetExponent() == 1 );
    assertTrue( u1.getExponent() == 1 );
    assertTrue( u1.isSetMultiplier() == 1 );
    assertTrue( util_isEqual == 1 );
    assertTrue( u1.isSetScale() == 1 );
    assertTrue( u1.getScale() == 0 );
    d = null;
  }

  public void test_SBMLConvert_convertFromL3_unit_defaultValues_1()
  {
    SBMLDocument d = new  SBMLDocument(3,1);
    Model m = d.createModel();
    String sid =  "C";
    UnitDefinition ud = m.createUnitDefinition();
    ud.setId(sid);
    Unit u = ud.createUnit();
    u.setKind(libsbml.UNIT_KIND_MOLE);
    u.setExponent(2);
    assertTrue( u.isSetExponent() == 1 );
    assertTrue( util_isEqual == 1 );
    assertTrue( u.isSetMultiplier() == 0 );
    assertTrue( util_isNaN == 1 );
    assertTrue( u.isSetScale() == 0 );
    assertTrue( u.getScale() == SBML_INT_MAX );
    assertTrue( d.setLevelAndVersion(2,4,false) == true );
    Unit u1 = m.getUnitDefinition(0).getUnit(0);
    assertTrue( u1.isSetExponent() == 1 );
    assertTrue( u1.getExponent() == 2 );
    assertTrue( u1.isSetMultiplier() == 1 );
    assertTrue( util_isEqual == 1 );
    assertTrue( u1.isSetScale() == 1 );
    assertTrue( u1.getScale() == 0 );
    d = null;
  }

  public void test_SBMLConvert_convertFromL3_unit_defaultValues_2()
  {
    SBMLDocument d = new  SBMLDocument(3,1);
    Model m = d.createModel();
    String sid =  "C";
    UnitDefinition ud = m.createUnitDefinition();
    ud.setId(sid);
    Unit u = ud.createUnit();
    u.setKind(libsbml.UNIT_KIND_MOLE);
    u.setMultiplier(2.0);
    assertTrue( u.isSetExponent() == 0 );
    assertTrue( util_isNaN == 1 );
    assertTrue( u.isSetMultiplier() == 1 );
    assertTrue( util_isEqual == 1 );
    assertTrue( u.isSetScale() == 0 );
    assertTrue( u.getScale() == SBML_INT_MAX );
    assertTrue( d.setLevelAndVersion(2,4,false) == true );
    Unit u1 = m.getUnitDefinition(0).getUnit(0);
    assertTrue( u1.isSetExponent() == 1 );
    assertTrue( u1.getExponent() == 1 );
    assertTrue( u1.isSetMultiplier() == 1 );
    assertTrue( util_isEqual == 1 );
    assertTrue( u1.isSetScale() == 1 );
    assertTrue( u1.getScale() == 0 );
    d = null;
  }

  public void test_SBMLConvert_convertFromL3_unit_defaultValues_3()
  {
    SBMLDocument d = new  SBMLDocument(3,1);
    Model m = d.createModel();
    String sid =  "C";
    UnitDefinition ud = m.createUnitDefinition();
    ud.setId(sid);
    Unit u = ud.createUnit();
    u.setKind(libsbml.UNIT_KIND_MOLE);
    assertTrue( u.isSetExponent() == 0 );
    assertTrue( u.isSetMultiplier() == 0 );
    assertTrue( u.isSetScale() == 0 );
    assertTrue( d.setLevelAndVersion(2,1,false) == true );
    Unit u1 = m.getUnitDefinition(0).getUnit(0);
    assertTrue( u1.isSetExponent() == 1 );
    assertTrue( u1.getExponent() == 1 );
    assertTrue( u1.isSetMultiplier() == 1 );
    assertTrue( util_isEqual == 1 );
    assertTrue( u1.isSetScale() == 1 );
    assertTrue( u1.getScale() == 0 );
    assertTrue( u1.isSetOffset() == 1 );
    assertTrue( util_isEqual == 1 );
    d = null;
  }

  public void test_SBMLConvert_convertToL1_SBMLDocument()
  {
    SBMLDocument d = new  SBMLDocument(2,1);
    assertTrue( d.setLevelAndVersion(1,2,false) == true );
    assertTrue( d.getLevel() == 1 );
    assertTrue( d.getVersion() == 2 );
    d = null;
  }

  public void test_SBMLConvert_convertToL1_Species_Amount()
  {
    SBMLDocument d = new  SBMLDocument(2,4);
    Model m = d.createModel();
    String sid =  "C";
    Compartment c = new  Compartment(2,4);
    Species s = new  Species(2,4);
    c.setId(sid);
    m.addCompartment(c);
    s.setCompartment(sid);
    s.setInitialAmount(2.34);
    m.addSpecies(s);
    assertTrue( d.setLevelAndVersion(1,2,true) == true );
    assertTrue( s.getInitialAmount() == 2.34 );
    d = null;
    c = null;
    s = null;
  }

  public void test_SBMLConvert_convertToL1_Species_Concentration()
  {
    SBMLDocument d = new  SBMLDocument(2,1);
    Model m = d.createModel();
    String sid =  "C";
    Compartment c = new  Compartment(2,1);
    Species s = new  Species(2,1);
    c.setId(sid);
    c.setSize(1.2);
    m.addCompartment(c);
    s.setId( "s"  );
    s.setCompartment(sid);
    s.setInitialConcentration(2.34);
    m.addSpecies(s);
    assertTrue( d.setLevelAndVersion(1,2,true) == true );
    assertEquals( true, util_isEqual( );
    m.getSpecies(0).getInitialAmount()2.808));
    Species s1 = m.getSpecies(0);
    assertTrue( s1 != null );
    assertTrue(s1.getCompartment().equals( "C"));
    assertTrue( m.getCompartment( "C").getSize() == 1.2 );
    assertTrue( s1.getInitialConcentration() == 2.34 );
    assertTrue( s1.isSetInitialConcentration() == true );
    d = null;
    c = null;
    s = null;
  }

  public void test_SBMLConvert_convertToL1_noCompartment()
  {
    SBMLDocument d = new  SBMLDocument(2,4);
    Model m = d.createModel();
    Parameter c = m.createParameter();
    c.setId( "p" );
    assertTrue( m.getNumCompartments() == 0 );
    assertTrue( d.setLevelAndVersion(1,2,true) == true );
    assertTrue( m.getNumCompartments() == 1 );
    d = null;
  }

  public void test_SBMLConvert_convertToL2_SBMLDocument()
  {
    SBMLDocument d = new  SBMLDocument(1,2);
    assertTrue( d.setLevelAndVersion(2,1,false) == true );
    assertTrue( d.getLevel() == 2 );
    assertTrue( d.getVersion() == 1 );
    d = null;
    d = new  SBMLDocument(1,2);
    assertTrue( d.setLevelAndVersion(2,2,false) == true );
    assertTrue( d.getLevel() == 2 );
    assertTrue( d.getVersion() == 2 );
    d = null;
    d = new  SBMLDocument(1,2);
    assertTrue( d.setLevelAndVersion(2,3,false) == true );
    assertTrue( d.getLevel() == 2 );
    assertTrue( d.getVersion() == 3 );
    d = null;
    d = new  SBMLDocument(1,2);
    assertTrue( d.setLevelAndVersion(2,4,false) == true );
    assertTrue( d.getLevel() == 2 );
    assertTrue( d.getVersion() == 4 );
    d = null;
  }

  public void test_SBMLConvert_convertToL2v4_DuplicateAnnotations_doc()
  {
    SBMLDocument d = new  SBMLDocument(2,1);
    d.createModel();
    String annotation =  "<rdf/>\n<rdf/>";
    int i = (d).setAnnotation(annotation);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( d.getLevel() == 2 );
    assertTrue( d.getVersion() == 1 );
    assertTrue( (d).getAnnotation().getNumChildren() == 2 );
    assertTrue( d.setLevelAndVersion(2,4,true) == true );
    assertTrue( d.getLevel() == 2 );
    assertTrue( d.getVersion() == 4 );
    assertTrue( (d).getAnnotation().getNumChildren() == 1 );
    d = null;
  }

  public void test_SBMLConvert_convertToL2v4_DuplicateAnnotations_model()
  {
    SBMLDocument d = new  SBMLDocument(2,1);
    Model m = d.createModel();
    String annotation =  "<rdf/>\n<rdf/>";
    int i = (m).setAnnotation(annotation);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( d.getLevel() == 2 );
    assertTrue( d.getVersion() == 1 );
    assertTrue( (m).getAnnotation().getNumChildren() == 2 );
    assertTrue( d.setLevelAndVersion(2,4,true) == true );
    assertTrue( d.getLevel() == 2 );
    assertTrue( d.getVersion() == 4 );
    m = d.getModel();
    assertTrue( (m).getAnnotation().getNumChildren() == 1 );
    d = null;
  }

  public void test_SBMLConvert_convertToL3_compartment()
  {
    SBMLDocument d = new  SBMLDocument(2,2);
    Model m = d.createModel();
    String sid =  "C";
    Compartment c = m.createCompartment();
    Compartment c1;
    c.setId(sid);
    assertTrue( d.setLevelAndVersion(3,1,false) == true );
    c1 = m.getCompartment(0);
    assertTrue( c1.hasRequiredAttributes() == 1 );
    d = null;
  }

  public void test_SBMLConvert_convertToL3_defaultUnits()
  {
    SBMLDocument d = new  SBMLDocument(1,2);
    Model m = d.createModel();
    String sid =  "C";
    Compartment c = m.createCompartment();
    c.setId(sid);
    c.setSize(1.2);
    c.setUnits( "volume");
    assertTrue( m.getNumUnitDefinitions() == 0 );
    assertTrue( d.setLevelAndVersion(3,1,true) == true );
    assertTrue( m.getNumUnitDefinitions() == 2 );
    UnitDefinition ud = m.getUnitDefinition(0);
    assertTrue( ud != null );
    assertTrue(ud.getId().equals( "volume"));
    assertTrue( ud.getNumUnits() == 1 );
    Unit u = ud.getUnit(0);
    assertTrue( u.getKind() == libsbml.UNIT_KIND_LITRE );
    assertTrue( u.getExponent() == 1 );
    assertTrue( u.getMultiplier() == 1 );
    assertTrue( u.getScale() == 0 );
    ud = m.getUnitDefinition(1);
    assertTrue( ud != null );
    assertTrue(ud.getId().equals( "area"));
    assertTrue( ud.getNumUnits() == 1 );
    u = ud.getUnit(0);
    assertTrue( u.getKind() == libsbml.UNIT_KIND_METRE );
    assertTrue( u.getExponent() == 2 );
    assertTrue( u.getMultiplier() == 1 );
    assertTrue( u.getScale() == 0 );
    assertTrue( m.isSetSubstanceUnits() == 1 );
    assertTrue( m.isSetTimeUnits() == 1 );
    assertTrue( m.isSetVolumeUnits() == 1 );
    assertTrue( m.isSetAreaUnits() == 1 );
    assertTrue( m.isSetLengthUnits() == 1 );
    assertTrue( m.isSetExtentUnits() == 1 );
    assertTrue(m.getSubstanceUnits().equals( "mole"));
    assertTrue(m.getTimeUnits().equals( "second"));
    assertTrue(m.getVolumeUnits().equals( "volume"));
    assertTrue(m.getAreaUnits().equals( "area"));
    assertTrue(m.getLengthUnits().equals( "metre"));
    assertTrue(m.getExtentUnits().equals( "mole"));
    d = null;
  }

  public void test_SBMLConvert_convertToL3_defaultUnits1()
  {
    SBMLDocument d = new  SBMLDocument(1,2);
    Model m = d.createModel();
    String sid =  "C";
    Compartment c = m.createCompartment();
    c.setId(sid);
    UnitDefinition ud = m.createUnitDefinition();
    ud.setId( "substance" );
    Unit u = ud.createUnit();
    u.setKind(libsbml.UNIT_KIND_MOLE);
    assertTrue( m.getNumUnitDefinitions() == 1 );
    assertTrue( c.isSetUnits() == false );
    assertTrue( d.setLevelAndVersion(3,1,true) == true );
    assertTrue( m.getNumUnitDefinitions() == 3 );
    ud = m.getUnitDefinition(0);
    assertTrue( ud != null );
    assertTrue(ud.getId().equals( "substance"));
    assertTrue( ud.getNumUnits() == 1 );
    u = ud.getUnit(0);
    assertTrue( u.getKind() == libsbml.UNIT_KIND_MOLE );
    assertTrue( u.getExponent() == 1 );
    assertTrue( u.getMultiplier() == 1 );
    assertTrue( u.getScale() == 0 );
    ud = m.getUnitDefinition(1);
    assertTrue( ud != null );
    assertTrue(ud.getId().equals( "volume"));
    assertTrue( ud.getNumUnits() == 1 );
    u = ud.getUnit(0);
    assertTrue( u.getKind() == libsbml.UNIT_KIND_LITRE );
    assertTrue( u.getExponent() == 1 );
    assertTrue( u.getMultiplier() == 1 );
    assertTrue( u.getScale() == 0 );
    ud = m.getUnitDefinition(2);
    assertTrue( ud != null );
    assertTrue(ud.getId().equals( "area"));
    assertTrue( ud.getNumUnits() == 1 );
    u = ud.getUnit(0);
    assertTrue( u.getKind() == libsbml.UNIT_KIND_METRE );
    assertTrue( u.getExponent() == 2 );
    assertTrue( u.getMultiplier() == 1 );
    assertTrue( u.getScale() == 0 );
    assertTrue( c.isSetUnits() == true );
    assertTrue(c.getUnits().equals( "volume"));
    assertTrue( m.isSetSubstanceUnits() == 1 );
    assertTrue( m.isSetTimeUnits() == 1 );
    assertTrue( m.isSetVolumeUnits() == 1 );
    assertTrue( m.isSetAreaUnits() == 1 );
    assertTrue( m.isSetLengthUnits() == 1 );
    assertTrue( m.isSetExtentUnits() == 1 );
    assertTrue(m.getSubstanceUnits().equals( "substance"));
    assertTrue(m.getTimeUnits().equals( "second"));
    assertTrue(m.getVolumeUnits().equals( "volume"));
    assertTrue(m.getAreaUnits().equals( "area"));
    assertTrue(m.getLengthUnits().equals( "metre"));
    assertTrue(m.getExtentUnits().equals( "substance"));
    d = null;
  }

  public void test_SBMLConvert_convertToL3_event()
  {
    SBMLDocument d = new  SBMLDocument(2,2);
    Model m = d.createModel();
    Event e = m.createEvent();
    Event e1;
    (void) e;
    assertTrue( d.setLevelAndVersion(3,1,false) == true );
    e1 = m.getEvent(0);
    assertTrue( e1.hasRequiredAttributes() == 1 );
    d = null;
  }

  public void test_SBMLConvert_convertToL3_localParameters()
  {
    SBMLDocument d = new  SBMLDocument(1,2);
    Model m = d.createModel();
    Compartment c = m.createCompartment();
    c.setId( "c" );
    Species s = m.createSpecies();
    s.setId( "s");
    s.setCompartment( "c");
    Reaction r = m.createReaction();
    SpeciesReference sr = r.createReactant();
    sr.setSpecies( "s");
    KineticLaw kl = r.createKineticLaw();
    kl.setFormula( "s*k");
    Parameter p = kl.createParameter();
    p.setId( "k");
    assertTrue( kl.getNumLocalParameters() == 0 );
    assertTrue( d.setLevelAndVersion(3,1,false) == true );
    m = d.getModel();
    r = m.getReaction(0);
    kl = r.getKineticLaw();
    assertTrue( kl.getNumLocalParameters() == 1 );
    LocalParameter lp = kl.getLocalParameter(0);
    (void) lp;
    d = null;
  }

  public void test_SBMLConvert_convertToL3_parameter()
  {
    SBMLDocument d = new  SBMLDocument(2,2);
    Model m = d.createModel();
    String sid =  "C";
    Parameter p = m.createParameter();
    Parameter p1;
    p.setId(sid);
    assertTrue( d.setLevelAndVersion(3,1,false) == true );
    p1 = m.getParameter(0);
    assertTrue( p1.hasRequiredAttributes() == 1 );
    d = null;
  }

  public void test_SBMLConvert_convertToL3_product()
  {
    SBMLDocument d = new  SBMLDocument(2,2);
    Model m = d.createModel();
    Reaction r = m.createReaction();
    SpeciesReference sr = r.createProduct();
    SpeciesReference sr1;
    sr.setSpecies( "s" );
    assertTrue( d.setLevelAndVersion(3,1,false) == true );
    sr1 = m.getReaction(0).getProduct(0);
    assertTrue( sr1.hasRequiredAttributes() == 1 );
    d = null;
  }

  public void test_SBMLConvert_convertToL3_reactant()
  {
    SBMLDocument d = new  SBMLDocument(2,2);
    Model m = d.createModel();
    Reaction r = m.createReaction();
    SpeciesReference sr = r.createReactant();
    SpeciesReference sr1;
    sr.setSpecies( "s" );
    assertTrue( d.setLevelAndVersion(3,1,false) == true );
    sr1 = m.getReaction(0).getReactant(0);
    assertTrue( sr1.hasRequiredAttributes() == 1 );
    d = null;
  }

  public void test_SBMLConvert_convertToL3_reaction()
  {
    SBMLDocument d = new  SBMLDocument(2,2);
    Model m = d.createModel();
    String sid =  "C";
    Reaction r = m.createReaction();
    r.setId(sid);
    assertTrue( d.setLevelAndVersion(3,1,false) == true );
    Reaction r1 = m.getReaction(0);
    assertTrue( r1.hasRequiredAttributes() == 1 );
    d = null;
  }

  public void test_SBMLConvert_convertToL3_species()
  {
    SBMLDocument d = new  SBMLDocument(2,2);
    Model m = d.createModel();
    String sid =  "C";
    Species s = m.createSpecies();
    Species s1;
    s.setId(sid);
    s.setCompartment( "comp");
    assertTrue( d.setLevelAndVersion(3,1,false) == true );
    s1 = m.getSpecies(0);
    assertTrue( s1.hasRequiredAttributes() == 1 );
    d = null;
  }

  public void test_SBMLConvert_convertToL3_stoichiometryMath()
  {
    SBMLDocument d = new  SBMLDocument(2,1);
    Model m = d.createModel();
    Compartment c = m.createCompartment();
    c.setId( "c" );
    Species s = m.createSpecies();
    s.setId( "s");
    s.setCompartment( "c");
    Reaction r = m.createReaction();
    SpeciesReference sr = r.createReactant();
    sr.setSpecies( "s");
    StoichiometryMath sm = sr.createStoichiometryMath();
    ASTNode ast = libsbml.parseFormula("c*2");
    sm.setMath(ast);
    ast = null;
    assertTrue( m.getNumRules() == 0 );
    assertTrue( sr.isSetId() == false );
    assertTrue( d.setLevelAndVersion(3,1,false) == true );
    m = d.getModel();
    r = m.getReaction(0);
    sr = r.getReactant(0);
    assertTrue( m.getNumRules() == 1 );
    assertTrue( sr.isSetId() == true );
    Rule rule = m.getRule(0);
    assertTrue( !sr.getId().equals(rule.getVariable()) == false );
    d = null;
  }

  public void test_SBMLConvert_convertToL3_trigger()
  {
    SBMLDocument d = new  SBMLDocument(2,2);
    Model m = d.createModel();
    Event e = m.createEvent();
    Trigger t = e.createTrigger();
    (void) t;
    Trigger t1;
    assertTrue( d.setLevelAndVersion(3,1,false) == true );
    t1 = m.getEvent(0).getTrigger();
    assertTrue( t1.hasRequiredAttributes() == 1 );
    d = null;
  }

  public void test_SBMLConvert_convertToL3_unit()
  {
    SBMLDocument d = new  SBMLDocument(2,2);
    Model m = d.createModel();
    String sid =  "C";
    UnitDefinition ud = m.createUnitDefinition();
    ud.setId(sid);
    Unit u = ud.createUnit();
    u.setKind(libsbml.UNIT_KIND_MOLE);
    assertTrue( d.setLevelAndVersion(3,1,false) == true );
    Unit u1 = m.getUnitDefinition(0).getUnit(0);
    assertEquals( true, util_isEqual );
    assertTrue( u1.getScale() == 0 );
    assertEquals( true, util_isEqual );
    assertTrue( u1.hasRequiredAttributes() == 1 );
    d = null;
  }

  public void test_SBMLConvert_invalidLevelVersion()
  {
    SBMLDocument d = new  SBMLDocument(2,1);
    Model m = d.createModel();
    String sid =  "C";
    Compartment c = m.createCompartment();
    c.setId(sid);
    c.setSize(1.2);
    c.setUnits( "volume");
    assertTrue( d.setLevelAndVersion(1,3,true) == false );
    assertTrue( d.setLevelAndVersion(2,7,true) == false );
    assertTrue( d.setLevelAndVersion(3,4,true) == false );
    assertTrue( d.setLevelAndVersion(4,1,true) == false );
    d = null;
  }

  /**
   * Loads the SWIG-generated libSBML Java module when this class is
   * loaded, or reports a sensible diagnostic message about why it failed.
   */
  static
  {
    String varname;
    String shlibname;

    if (System.getProperty("mrj.version") != null)
    {
      varname = "DYLD_LIBRARY_PATH";    // We're on a Mac.
      shlibname = "libsbmlj.jnilib and/or libsbml.dylib";
    }
    else
    {
      varname = "LD_LIBRARY_PATH";      // We're not on a Mac.
      shlibname = "libsbmlj.so and/or libsbml.so";
    }

    try
    {
      System.loadLibrary("sbmlj");
      // For extra safety, check that the jar file is in the classpath.
      Class.forName("org.sbml.libsbml.libsbml");
    }
    catch (SecurityException e)
    {
      e.printStackTrace();
      System.err.println("Could not load the libSBML library files due to a"+
                         " security exception.\n");
      System.exit(1);
    }
    catch (UnsatisfiedLinkError e)
    {
      e.printStackTrace();
      System.err.println("Error: could not link with the libSBML library files."+
                         " It is likely\nyour " + varname +
                         " environment variable does not include the directories\n"+
                         "containing the " + shlibname + " library files.\n");
      System.exit(1);
    }
    catch (ClassNotFoundException e)
    {
      e.printStackTrace();
      System.err.println("Error: unable to load the file libsbmlj.jar."+
                         " It is likely\nyour -classpath option and CLASSPATH" +
                         " environment variable\n"+
                         "do not include the path to libsbmlj.jar.\n");
      System.exit(1);
    }
  }
}
