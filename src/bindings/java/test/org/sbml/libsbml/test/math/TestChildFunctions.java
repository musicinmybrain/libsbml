/*
 * @file    TestChildFunctions.java
 * @brief   MathML unit tests for child manipulation functions
 *
 * @author  Akiya Jouraku (Java conversion)
 * @author  Sarah Keating 
 * 
 * ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
 *
 * DO NOT EDIT THIS FILE.
 *
 * This file was generated automatically by converting the file located at
 * src/sbml/test/TestChildFunctions.cpp
 * using the conversion program dev/utilities/translateTests/translateTests.pl.
 * Any changes made here will be lost the next time the file is regenerated.
 *
 * -----------------------------------------------------------------------------
 * This file is part of libSBML.  Please visit http://sbml.org for more
 * information about SBML, and the latest version of libSBML.
 *
 * Copyright 2005-2010 California Institute of Technology.
 * Copyright 2002-2005 California Institute of Technology and
 *                     Japan Science and Technology Corporation.
 * 
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation.  A copy of the license agreement is provided
 * in the file named "LICENSE.txt" included with this software distribution
 * and also available online as http://sbml.org/software/libsbml/license.html
 * -----------------------------------------------------------------------------
 */

package org.sbml.libsbml.test.math;

import org.sbml.libsbml.*;

import java.io.File;
import java.lang.AssertionError;

public class TestChildFunctions {

  static void assertTrue(boolean condition) throws AssertionError
  {
    if (condition == true)
    {
      return;
    }
    throw new AssertionError();
  }

  static void assertEquals(Object a, Object b) throws AssertionError
  {
    if ( (a == null) && (b == null) )
    {
      return;
    }
    else if ( (a == null) || (b == null) )
    {
      throw new AssertionError();
    }
    else if (a.equals(b))
    {
      return;
    }

    throw new AssertionError();
  }

  static void assertNotEquals(Object a, Object b) throws AssertionError
  {
    if ( (a == null) && (b == null) )
    {
      throw new AssertionError();
    }
    else if ( (a == null) || (b == null) )
    {
      return;
    }
    else if (a.equals(b))
    {
      throw new AssertionError();
    }
  }

  static void assertEquals(boolean a, boolean b) throws AssertionError
  {
    if ( a == b )
    {
      return;
    }
    throw new AssertionError();
  }

  static void assertNotEquals(boolean a, boolean b) throws AssertionError
  {
    if ( a != b )
    {
      return;
    }
    throw new AssertionError();
  }

  static void assertEquals(int a, int b) throws AssertionError
  {
    if ( a == b )
    {
      return;
    }
    throw new AssertionError();
  }

  static void assertNotEquals(int a, int b) throws AssertionError
  {
    if ( a != b )
    {
      return;
    }
    throw new AssertionError();
  }
  private String S;
  private ASTNode N;

  public String MATHML_FOOTER()
  {
    return "</math>";
  }

  public String MATHML_HEADER()
  {
    return "<math xmlns=\"http://www.w3.org/1998/Math/MathML\">\n";
  }

  public String MATHML_HEADER_UNITS()
  {
    return "<math xmlns=\"http://www.w3.org/1998/Math/MathML\"";
  }

  public String MATHML_HEADER_UNITS2()
  {
    return " xmlns:sbml=\"http://www.sbml.org/sbml/level3/version2/core\">\n";
  }

  public String XML_HEADER()
  {
    return "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
  }

  public String wrapMathML(String s)
  {
    String r = XML_HEADER();
    r += MATHML_HEADER();
    r += s;
    r += MATHML_FOOTER();
    return r;
  }

  public String wrapMathMLUnits(String s)
  {
    String r = XML_HEADER();
    r += MATHML_HEADER_UNITS();
    r += MATHML_HEADER_UNITS2();
    r += s;
    r += MATHML_FOOTER();
    return r;
  }

  protected void setUp() throws Exception
  {
    N = null;
    S = null;
  }

  protected void tearDown() throws Exception
  {
    S = null;
  }

  public void test_ChildFunctions_addToLambda_1()
  {
    String expected = wrapMathML("  <lambda>\n" + 
    "    <bvar>\n" + 
    "      <ci> x </ci>\n" + 
    "    </bvar>\n" + 
    "    <bvar>\n" + 
    "      <ci> y </ci>\n" + 
    "    </bvar>\n" + 
    "    <ci> newChild </ci>\n" + 
    "  </lambda>\n");
    String original = wrapMathML("<lambda>" + 
    "  <bvar> <ci>x</ci> </bvar>" + 
    "  <ci>y</ci>" + 
    "</lambda>");
    N = libsbml.readMathMLFromString(original);
    assertTrue( N.getNumChildren() == 2 );
    assertTrue( N.getChild(0).representsBvar() == true );
    assertTrue( N.getChild(1).representsBvar() == false );
    ASTNode newChild = new ASTNode(libsbml.AST_NAME);
    newChild.setName("newChild");
    int i = N.addChild(newChild);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.getNumChildren() == 3 );
    assertTrue( N.getChild(0).representsBvar() == true );
    assertTrue( N.getChild(1).representsBvar() == true );
    assertTrue( N.getChild(2).representsBvar() == false );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_ChildFunctions_addToLog_1()
  {
    String expected = wrapMathML("  <apply>\n" + 
    "    <log/>\n" + 
    "    <logbase>\n" + 
    "      <cn type=\"integer\"> 3 </cn>\n" + 
    "    </logbase>\n" + 
    "    <ci> newChild </ci>\n" + 
    "  </apply>\n");
    String original = wrapMathML("<apply> <log/> <logbase> <cn type='integer'> 3 </cn> </logbase>" + 
    "               <ci> x </ci>" + 
    "</apply>");
    N = libsbml.readMathMLFromString(original);
    assertTrue( N.getNumChildren() == 2 );
    ASTNode newChild = new ASTNode(libsbml.AST_NAME);
    newChild.setName("newChild");
    int i = N.addChild(newChild);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.getNumChildren() == 3 );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_ChildFunctions_addToLog_2()
  {
    String expected = wrapMathMLUnits("  <apply>\n" + 
    "    <log/>\n" + 
    "    <logbase>\n" + 
    "      <cn sbml:units=\"dimensionless\" type=\"integer\"> 10 </cn>\n" + 
    "    </logbase>\n" + 
    "    <ci> newChild </ci>\n" + 
    "  </apply>\n");
    String original = wrapMathML("<apply> <log/> " + 
    "               <ci> x </ci>" + 
    "</apply>");
    N = libsbml.readMathMLFromString(original);
    assertTrue( N.getNumChildren() == 2 );
    ASTNode newChild = new ASTNode(libsbml.AST_NAME);
    newChild.setName("newChild");
    int i = N.addChild(newChild);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.getNumChildren() == 3 );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_ChildFunctions_addToLog_3()
  {
    String expected = wrapMathML("  <apply>\n" + 
    "    <log/>\n" + 
    "  </apply>\n");
    N = new ASTNode(libsbml.AST_FUNCTION_LOG);
    ASTNode newChild = new ASTNode(libsbml.AST_NAME);
    newChild.setName("newChild");
    int i = N.addChild(newChild);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.getNumChildren() == 1 );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_ChildFunctions_addToPiecewise_1()
  {
    String expected = wrapMathML("  <piecewise>\n" + 
    "    <piece>\n" + 
    "      <cn> 0 </cn>\n" + 
    "      <apply>\n" + 
    "        <eq/>\n" + 
    "        <ci> x </ci>\n" + 
    "        <cn> 0 </cn>\n" + 
    "      </apply>\n" + 
    "    </piece>\n" + 
    "    <otherwise>\n" + 
    "      <ci> newChild </ci>\n" + 
    "    </otherwise>\n" + 
    "  </piecewise>\n");
    String original = wrapMathML("<piecewise>" + 
    "  <piece>" + 
    "    <cn>0</cn>" + 
    "    <apply> <eq/> <ci>x</ci> <cn>0</cn> </apply>" + 
    "  </piece>" + 
    "</piecewise>");
    N = libsbml.readMathMLFromString(original);
    assertTrue( N.getNumChildren() == 2 );
    ASTNode newChild = new ASTNode(libsbml.AST_NAME);
    newChild.setName("newChild");
    int i = N.addChild(newChild);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.getNumChildren() == 3 );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_ChildFunctions_addToPiecewise_2()
  {
    String expected = wrapMathML("  <piecewise>\n" + 
    "    <piece>\n" + 
    "      <cn> 0 </cn>\n" + 
    "      <apply>\n" + 
    "        <eq/>\n" + 
    "        <ci> x </ci>\n" + 
    "        <cn> 0 </cn>\n" + 
    "      </apply>\n" + 
    "    </piece>\n" + 
    "    <piece>\n" + 
    "      <ci> newChild </ci>\n" + 
    "      <ci> newChild1 </ci>\n" + 
    "    </piece>\n" + 
    "  </piecewise>\n");
    String original = wrapMathML("<piecewise>" + 
    "  <piece>" + 
    "    <cn>0</cn>" + 
    "    <apply> <eq/> <ci>x</ci> <cn>0</cn> </apply>" + 
    "  </piece>" + 
    "</piecewise>");
    N = libsbml.readMathMLFromString(original);
    assertTrue( N.getNumChildren() == 2 );
    ASTNode newChild = new ASTNode(libsbml.AST_NAME);
    newChild.setName("newChild");
    ASTNode newChild1 = new ASTNode(libsbml.AST_NAME);
    newChild1.setName("newChild1");
    int i = N.addChild(newChild);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.getNumChildren() == 3 );
    i = N.addChild(newChild1);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.getNumChildren() == 4 );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_ChildFunctions_addToPiecewise_3()
  {
    String expected = wrapMathML("  <piecewise>\n" + 
    "    <piece>\n" + 
    "      <cn> 0 </cn>\n" + 
    "      <true/>\n" + 
    "    </piece>\n" + 
    "  </piecewise>\n");
    String original = wrapMathML("<piecewise>" + 
    "  <piece>" + 
    "    <cn>0</cn>" + 
    "  </piece>" + 
    "</piecewise>");
    N = libsbml.readMathMLFromString(original);
    assertTrue( N.getNumChildren() == 1 );
    ASTNode newChild = new ASTNode(libsbml.AST_CONSTANT_TRUE);
    int i = N.addChild(newChild);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.getNumChildren() == 2 );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_ChildFunctions_addToRoot_1()
  {
    String expected = wrapMathML("  <apply>\n" + 
    "    <root/>\n" + 
    "    <degree>\n" + 
    "      <cn type=\"integer\"> 3 </cn>\n" + 
    "    </degree>\n" + 
    "    <ci> newChild </ci>\n" + 
    "  </apply>\n");
    String original = wrapMathML("<apply> <root/> <degree> <cn type='integer'> 3 </cn> </degree>" + 
    "               <ci> x </ci>" + 
    "</apply>");
    N = libsbml.readMathMLFromString(original);
    assertTrue( N.getNumChildren() == 2 );
    ASTNode newChild = new ASTNode(libsbml.AST_NAME);
    newChild.setName("newChild");
    int i = N.addChild(newChild);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.getNumChildren() == 3 );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_ChildFunctions_addToRoot_2()
  {
    String expected = wrapMathMLUnits("  <apply>\n" + 
    "    <root/>\n" + 
    "    <degree>\n" + 
    "      <cn sbml:units=\"dimensionless\" type=\"integer\"> 2 </cn>\n" + 
    "    </degree>\n" + 
    "    <ci> newChild </ci>\n" + 
    "  </apply>\n");
    String original = wrapMathML("<apply> <root/> " + 
    "               <ci> x </ci>" + 
    "</apply>");
    N = libsbml.readMathMLFromString(original);
    assertTrue( N.getNumChildren() == 2 );
    ASTNode newChild = new ASTNode(libsbml.AST_NAME);
    newChild.setName("newChild");
    int i = N.addChild(newChild);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.getNumChildren() == 3 );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_ChildFunctions_addToRoot_3()
  {
    String expected = wrapMathML("  <apply>\n" + 
    "    <root/>\n" + 
    "    <ci> newChild </ci>\n" + 
    "  </apply>\n");
    N = new ASTNode(libsbml.AST_FUNCTION_ROOT);
    ASTNode newChild = new ASTNode(libsbml.AST_NAME);
    newChild.setName("newChild");
    int i = N.addChild(newChild);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.getNumChildren() == 1 );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_ChildFunctions_getChild()
  {
    N = new ASTNode(libsbml.AST_TIMES);
    ASTNode c1 = new ASTNode(libsbml.AST_NAME);
    c1.setName("c1");
    N.addChild(c1);
    ASTNode c2 = new ASTNode(libsbml.AST_NAME);
    c2.setName("c2");
    N.addChild(c2);
    assertTrue( N.getNumChildren() == 2 );
    ASTNode child = N.getChild(2);
    assertTrue( child == null );
    child = N.getChild(3);
    assertTrue( child == null );
    child = N.getChild(1);
    assertTrue( child.getType() == libsbml.AST_NAME );
    assertTrue( !child.getName().equals( "c2") == false );
  }

  public void test_ChildFunctions_getChildFromLambda_1()
  {
    String original = wrapMathML("<lambda>" + 
    "  <bvar> <ci>x</ci> </bvar>" + 
    "  <apply> <cos/><ci>x</ci></apply>" + 
    "</lambda>");
    N = libsbml.readMathMLFromString(original);
    assertTrue( N.getNumChildren() == 2 );
    ASTNode child = N.getChild(3);
    assertTrue( child == null );
    child = N.getChild(2);
    assertTrue( child == null );
    child = N.getChild(0);
    assertTrue( child.getType() == libsbml.AST_NAME );
    assertTrue( !child.getName().equals( "x") == false );
    assertTrue( child.representsBvar() == true );
    child = N.getChild(1);
    assertTrue( child.getType() == libsbml.AST_FUNCTION_COS );
    assertTrue( child.getNumChildren() == 1 );
    assertTrue( child.representsBvar() == false );
    ASTNode child1 = child.getChild(0);
    assertTrue( child1.getType() == libsbml.AST_NAME );
    assertTrue( !child1.getName().equals( "x") == false );
  }

  public void test_ChildFunctions_getChildFromLambda_2()
  {
    N = new ASTNode(libsbml.AST_LAMBDA);
    ASTNode c1 = new ASTNode(libsbml.AST_NAME);
    c1.setName("y");
    N.addChild(c1);
    ASTNode c2 = new ASTNode(libsbml.AST_FUNCTION_ABS);
    ASTNode c3 = new ASTNode(libsbml.AST_NAME);
    c3.setName("y");
    c2.addChild(c3);
    N.addChild(c2);
    assertTrue( N.getNumChildren() == 2 );
    ASTNode child = N.getChild(3);
    assertTrue( child == null );
    child = N.getChild(2);
    assertTrue( child == null );
    child = N.getChild(0);
    assertTrue( child.getType() == libsbml.AST_NAME );
    assertTrue( !child.getName().equals( "y") == false );
    assertTrue( child.representsBvar() == true );
    child = N.getChild(1);
    assertTrue( child.representsBvar() == false );
    assertTrue( child.getType() == libsbml.AST_FUNCTION_ABS );
    assertTrue( child.getNumChildren() == 1 );
    ASTNode child1 = child.getChild(0);
    assertTrue( child1.getType() == libsbml.AST_NAME );
    assertTrue( !child1.getName().equals( "y") == false );
  }

  public void test_ChildFunctions_getChildFromLog_1()
  {
    String original = wrapMathML("<apply> <log/> " + 
    "               <ci> x </ci>" + 
    "</apply>");
    N = libsbml.readMathMLFromString(original);
    assertTrue( N.getNumChildren() == 2 );
    ASTNode child = N.getChild(0);
    assertTrue( child.getType() == libsbml.AST_INTEGER );
    assertTrue( child.getInteger() == 10 );
    child = N.getChild(1);
    assertTrue( child.getType() == libsbml.AST_NAME );
    assertTrue( !child.getName().equals( "x") == false );
  }

  public void test_ChildFunctions_getChildFromLog_2()
  {
    String original = wrapMathML("<apply> <log/> <logbase> <cn type='integer'> 3 </cn> </logbase>" + 
    "               <ci> x </ci>" + 
    "</apply>");
    N = libsbml.readMathMLFromString(original);
    assertTrue( N.getNumChildren() == 2 );
    ASTNode child = N.getChild(0);
    assertTrue( child.getType() == libsbml.AST_INTEGER );
    assertTrue( child.getInteger() == 3 );
    child = N.getChild(1);
    assertTrue( child.getType() == libsbml.AST_NAME );
    assertTrue( !child.getName().equals( "x") == false );
  }

  public void test_ChildFunctions_getChildFromPiecewise_1()
  {
    String original = wrapMathML("<piecewise>" + 
    "  <piece>" + 
    "    <ci>y</ci>" + 
    "    <apply> <eq/> <ci>x</ci> <cn>0</cn> </apply>" + 
    "  </piece>" + 
    "    <otherwise>\n" + 
    "      <ci> x </ci>\n" + 
    "    </otherwise>\n" + 
    "</piecewise>");
    N = libsbml.readMathMLFromString(original);
    assertTrue( N.getNumChildren() == 3 );
    ASTNode child = N.getChild(4);
    assertTrue( child == null );
    child = N.getChild(3);
    assertTrue( child == null );
    child = N.getChild(2);
    assertTrue( child.getType() == libsbml.AST_NAME );
    assertTrue( !child.getName().equals( "x") == false );
    child = N.getChild(1);
    assertTrue( child.getType() == libsbml.AST_RELATIONAL_EQ );
    child = N.getChild(0);
    assertTrue( child.getType() == libsbml.AST_NAME );
    assertTrue( !child.getName().equals( "y") == false );
  }

  public void test_ChildFunctions_getChildFromPiecewise_2()
  {
    N = new ASTNode(libsbml.AST_FUNCTION_PIECEWISE);
    ASTNode c1 = new ASTNode(libsbml.AST_NAME);
    c1.setName("y");
    N.addChild(c1);
    ASTNode c2 = new ASTNode(libsbml.AST_CONSTANT_TRUE);
    N.addChild(c2);
    ASTNode c3 = new ASTNode(libsbml.AST_NAME);
    c3.setName("x");
    N.addChild(c3);
    assertTrue( N.getNumChildren() == 3 );
    ASTNode child = N.getChild(4);
    assertTrue( child == null );
    child = N.getChild(3);
    assertTrue( child == null );
    child = N.getChild(2);
    assertTrue( child.getType() == libsbml.AST_NAME );
    assertTrue( !child.getName().equals( "x") == false );
    child = N.getChild(1);
    assertTrue( child.getType() == libsbml.AST_CONSTANT_TRUE );
    child = N.getChild(0);
    assertTrue( child.getType() == libsbml.AST_NAME );
    assertTrue( !child.getName().equals( "y") == false );
  }

  public void test_ChildFunctions_getChildFromRoot_1()
  {
    String original = wrapMathML("<apply> <root/> " + 
    "               <ci> x </ci>" + 
    "</apply>");
    N = libsbml.readMathMLFromString(original);
    assertTrue( N.getNumChildren() == 2 );
    ASTNode child = N.getChild(0);
    assertTrue( child.getType() == libsbml.AST_INTEGER );
    assertTrue( child.getInteger() == 2 );
    child = N.getChild(1);
    assertTrue( child.getType() == libsbml.AST_NAME );
    assertTrue( !child.getName().equals( "x") == false );
  }

  public void test_ChildFunctions_getChildFromRoot_2()
  {
    String original = wrapMathML("<apply> <root/> <degree> <cn type='integer'> 3 </cn> </degree>" + 
    "               <ci> x </ci>" + 
    "</apply>");
    N = libsbml.readMathMLFromString(original);
    assertTrue( N.getNumChildren() == 2 );
    ASTNode child = N.getChild(0);
    assertTrue( child.getType() == libsbml.AST_INTEGER );
    assertTrue( child.getInteger() == 3 );
    child = N.getChild(1);
    assertTrue( child.getType() == libsbml.AST_NAME );
    assertTrue( !child.getName().equals( "x") == false );
  }

  public void test_ChildFunctions_insert()
  {
    N = new ASTNode(libsbml.AST_TIMES);
    ASTNode c1 = new ASTNode(libsbml.AST_NAME);
    c1.setName("c1");
    N.addChild(c1);
    ASTNode c2 = new ASTNode(libsbml.AST_NAME);
    c2.setName("c2");
    N.addChild(c2);
    ASTNode newChild = new ASTNode(libsbml.AST_NAME);
    newChild.setName("newChild");
    ASTNode newChild1 = new ASTNode(libsbml.AST_NAME);
    newChild1.setName("newChild1");
    assertTrue( N.getNumChildren() == 2 );
    int i = N.insertChild(3,newChild);
    assertTrue( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE );
    assertTrue( N.getNumChildren() == 2 );
    i = N.insertChild(2,newChild);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.getNumChildren() == 3 );
    String math = libsbml.formulaToString(N);
    assertTrue( !math.equals( "c1 * c2 * newChild") == false );
    i = N.insertChild(1,newChild1);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.getNumChildren() == 4 );
    math = libsbml.formulaToString(N);
    assertTrue( !math.equals( "c1 * newChild1 * c2 * newChild") == false );
    ASTNode child = N.getChild(1);
    assertTrue( child.getType() == libsbml.AST_NAME );
    assertTrue( !child.getName().equals( "newChild1") == false );
  }

  public void test_ChildFunctions_insertIntoLambda_1()
  {
    String expected = wrapMathML("  <lambda>\n" + 
    "    <bvar>\n" + 
    "      <ci> x </ci>\n" + 
    "    </bvar>\n" + 
    "    <bvar>\n" + 
    "      <ci> y </ci>\n" + 
    "    </bvar>\n" + 
    "    <ci> newChild </ci>\n" + 
    "  </lambda>\n");
    String original = wrapMathML("<lambda>" + 
    "    <bvar> <ci>x</ci> </bvar>" + 
    "    <ci>y</ci>" + 
    "</lambda>");
    N = libsbml.readMathMLFromString(original);
    assertTrue( N.getNumChildren() == 2 );
    assertTrue( N.getNumBvars() == 1 );
    assertTrue( N.getChild(0).representsBvar() == true );
    assertTrue( N.getChild(1).representsBvar() == false );
    ASTNode newChild = new ASTNode(libsbml.AST_NAME);
    newChild.setName("newChild");
    int i = N.insertChild(3,newChild);
    assertTrue( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE );
    assertTrue( N.getNumChildren() == 2 );
    i = N.insertChild(2,newChild);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.getNumChildren() == 3 );
    assertTrue( N.getNumBvars() == 2 );
    assertTrue( N.getChild(0).representsBvar() == true );
    assertTrue( N.getChild(1).representsBvar() == true );
    assertTrue( N.getChild(2).representsBvar() == false );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_ChildFunctions_insertIntoLambda_2()
  {
    String expected = wrapMathML("  <lambda>\n" + 
    "    <bvar>\n" + 
    "      <ci> x </ci>\n" + 
    "    </bvar>\n" + 
    "    <bvar>\n" + 
    "      <ci> newChild </ci>\n" + 
    "    </bvar>\n" + 
    "    <apply>\n" + 
    "      <plus/>\n" + 
    "      <ci> x </ci>\n" + 
    "      <ci> y </ci>\n" + 
    "    </apply>\n" + 
    "  </lambda>\n");
    String original = wrapMathML("<lambda>" + 
    "    <bvar> <ci>x</ci> </bvar>" + 
    "    <apply> <plus/> <ci>x</ci> <ci>y</ci> </apply>" + 
    "</lambda>");
    N = libsbml.readMathMLFromString(original);
    assertTrue( N.getNumChildren() == 2 );
    assertTrue( N.getNumBvars() == 1 );
    assertTrue( N.getChild(0).representsBvar() == true );
    assertTrue( N.getChild(1).representsBvar() == false );
    ASTNode newChild = new ASTNode(libsbml.AST_NAME);
    newChild.setName("newChild");
    int i = N.insertChild(1,newChild);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.getNumChildren() == 3 );
    assertTrue( N.getNumBvars() == 2 );
    assertTrue( N.getChild(0).representsBvar() == true );
    assertTrue( N.getChild(1).representsBvar() == true );
    assertTrue( N.getChild(2).representsBvar() == false );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_ChildFunctions_insertIntoLambda_3()
  {
    String expected = wrapMathML("  <lambda>\n" + 
    "    <bvar>\n" + 
    "      <ci> newChild </ci>\n" + 
    "    </bvar>\n" + 
    "    <bvar>\n" + 
    "      <ci> x </ci>\n" + 
    "    </bvar>\n" + 
    "    <apply>\n" + 
    "      <plus/>\n" + 
    "      <ci> x </ci>\n" + 
    "      <ci> y </ci>\n" + 
    "    </apply>\n" + 
    "  </lambda>\n");
    String original = wrapMathML("<lambda>" + 
    "    <bvar> <ci>x</ci> </bvar>" + 
    "    <apply> <plus/> <ci>x</ci> <ci>y</ci> </apply>" + 
    "</lambda>");
    N = libsbml.readMathMLFromString(original);
    assertTrue( N.getNumChildren() == 2 );
    assertTrue( N.getNumBvars() == 1 );
    assertTrue( N.getChild(0).representsBvar() == true );
    assertTrue( N.getChild(1).representsBvar() == false );
    ASTNode newChild = new ASTNode(libsbml.AST_NAME);
    newChild.setName("newChild");
    int i = N.insertChild(0,newChild);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.getNumChildren() == 3 );
    assertTrue( N.getNumBvars() == 2 );
    assertTrue( N.getChild(0).representsBvar() == true );
    assertTrue( N.getChild(1).representsBvar() == true );
    assertTrue( N.getChild(2).representsBvar() == false );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_ChildFunctions_insertIntoLog_1()
  {
    String expected = wrapMathML("  <apply>\n" + 
    "    <log/>\n" + 
    "    <logbase>\n" + 
    "      <cn type=\"integer\"> 3 </cn>\n" + 
    "    </logbase>\n" + 
    "    <ci> newChild </ci>\n" + 
    "  </apply>\n");
    String original = wrapMathML("<apply> <log/> <logbase> <cn type='integer'> 3 </cn> </logbase>" + 
    "               <ci> x </ci>" + 
    "</apply>");
    N = libsbml.readMathMLFromString(original);
    assertTrue( N.getNumChildren() == 2 );
    ASTNode newChild = new ASTNode(libsbml.AST_NAME);
    newChild.setName("newChild");
    int i = N.insertChild(3,newChild);
    assertTrue( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE );
    assertTrue( N.getNumChildren() == 2 );
    i = N.insertChild(2,newChild);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.getNumChildren() == 3 );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_ChildFunctions_insertIntoLog_2()
  {
    String expected = wrapMathML("  <apply>\n" + 
    "    <log/>\n" + 
    "    <logbase>\n" + 
    "      <cn type=\"integer\"> 3 </cn>\n" + 
    "    </logbase>\n" + 
    "    <ci> x </ci>\n" + 
    "  </apply>\n");
    String original = wrapMathML("<apply> <log/> <logbase> <cn type='integer'> 3 </cn> </logbase>" + 
    "               <ci> x </ci>" + 
    "</apply>");
    N = libsbml.readMathMLFromString(original);
    assertTrue( N.getNumChildren() == 2 );
    ASTNode newChild = new ASTNode(libsbml.AST_NAME);
    newChild.setName("newChild");
    int i = N.insertChild(1,newChild);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.getNumChildren() == 3 );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_ChildFunctions_insertIntoLog_3()
  {
    String expected = wrapMathML("  <apply>\n" + 
    "    <log/>\n" + 
    "    <logbase>\n" + 
    "      <ci> newChild </ci>\n" + 
    "    </logbase>\n" + 
    "    <ci> x </ci>\n" + 
    "  </apply>\n");
    String original = wrapMathML("<apply> <log/> <logbase> <cn type='integer'> 3 </cn> </logbase>" + 
    "               <ci> x </ci>" + 
    "</apply>");
    N = libsbml.readMathMLFromString(original);
    assertTrue( N.getNumChildren() == 2 );
    ASTNode newChild = new ASTNode(libsbml.AST_NAME);
    newChild.setName("newChild");
    int i = N.insertChild(0,newChild);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.getNumChildren() == 3 );
    S = libsbml.writeMathMLToString(N);
    ASTNode child = N.getChild(1);
    assertTrue( child.getType() == libsbml.AST_INTEGER );
    assertEquals( true, equals(expected,S) );
  }

  public void test_ChildFunctions_insertIntoPiecewise_1()
  {
    String expected = wrapMathML("  <piecewise>\n" + 
    "    <piece>\n" + 
    "      <cn> 0 </cn>\n" + 
    "      <apply>\n" + 
    "        <eq/>\n" + 
    "        <ci> x </ci>\n" + 
    "        <cn> 0 </cn>\n" + 
    "      </apply>\n" + 
    "    </piece>\n" + 
    "    <otherwise>\n" + 
    "      <ci> newChild </ci>\n" + 
    "    </otherwise>\n" + 
    "  </piecewise>\n");
    String original = wrapMathML("<piecewise>" + 
    "  <piece>" + 
    "    <cn>0</cn>" + 
    "    <apply> <eq/> <ci>x</ci> <cn>0</cn> </apply>" + 
    "  </piece>" + 
    "</piecewise>");
    N = libsbml.readMathMLFromString(original);
    assertTrue( N.getNumChildren() == 2 );
    ASTNode newChild = new ASTNode(libsbml.AST_NAME);
    newChild.setName("newChild");
    int i = N.insertChild(3,newChild);
    assertTrue( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE );
    assertTrue( N.getNumChildren() == 2 );
    i = N.insertChild(2,newChild);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.getNumChildren() == 3 );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_ChildFunctions_insertIntoPiecewise_2()
  {
    String expected = wrapMathML("  <piecewise>\n" + 
    "    <piece>\n" + 
    "      <cn> 0 </cn>\n" + 
    "      <ci> newChild </ci>\n" + 
    "    </piece>\n" + 
    "    <otherwise>\n" + 
    "      <apply>\n" + 
    "        <eq/>\n" + 
    "        <ci> x </ci>\n" + 
    "        <cn> 0 </cn>\n" + 
    "      </apply>\n" + 
    "    </otherwise>\n" + 
    "  </piecewise>\n");
    String original = wrapMathML("<piecewise>" + 
    "  <piece>" + 
    "    <cn>0</cn>" + 
    "    <apply> <eq/> <ci>x</ci> <cn>0</cn> </apply>" + 
    "  </piece>" + 
    "</piecewise>");
    N = libsbml.readMathMLFromString(original);
    assertTrue( N.getNumChildren() == 2 );
    ASTNode newChild = new ASTNode(libsbml.AST_NAME);
    newChild.setName("newChild");
    int i = N.insertChild(3,newChild);
    assertTrue( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE );
    assertTrue( N.getNumChildren() == 2 );
    i = N.insertChild(1,newChild);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.getNumChildren() == 3 );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_ChildFunctions_insertIntoPiecewise_3()
  {
    String expected = wrapMathML("  <piecewise>\n" + 
    "    <piece>\n" + 
    "      <ci> newChild </ci>\n" + 
    "      <cn> 0 </cn>\n" + 
    "    </piece>\n" + 
    "    <otherwise>\n" + 
    "      <apply>\n" + 
    "        <eq/>\n" + 
    "        <ci> x </ci>\n" + 
    "        <cn> 0 </cn>\n" + 
    "      </apply>\n" + 
    "    </otherwise>\n" + 
    "  </piecewise>\n");
    String original = wrapMathML("<piecewise>" + 
    "  <piece>" + 
    "    <cn>0</cn>" + 
    "    <apply> <eq/> <ci>x</ci> <cn>0</cn> </apply>" + 
    "  </piece>" + 
    "</piecewise>");
    N = libsbml.readMathMLFromString(original);
    assertTrue( N.getNumChildren() == 2 );
    ASTNode newChild = new ASTNode(libsbml.AST_NAME);
    newChild.setName("newChild");
    int i = N.prependChild(newChild);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.getNumChildren() == 3 );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_ChildFunctions_insertIntoPiecewise_4()
  {
    String expected = wrapMathML("  <piecewise>\n" + 
    "    <piece>\n" + 
    "      <apply>\n" + 
    "        <plus/>\n" + 
    "        <ci> a </ci>\n" + 
    "        <ci> b </ci>\n" + 
    "      </apply>\n" + 
    "      <cn> 0 </cn>\n" + 
    "    </piece>\n" + 
    "    <otherwise>\n" + 
    "      <apply>\n" + 
    "        <eq/>\n" + 
    "        <ci> x </ci>\n" + 
    "        <cn> 0 </cn>\n" + 
    "      </apply>\n" + 
    "    </otherwise>\n" + 
    "  </piecewise>\n");
    String original = wrapMathML("<piecewise>" + 
    "  <piece>" + 
    "    <cn>0</cn>" + 
    "    <apply> <eq/> <ci>x</ci> <cn>0</cn> </apply>" + 
    "  </piece>" + 
    "</piecewise>");
    N = libsbml.readMathMLFromString(original);
    assertTrue( N.getNumChildren() == 2 );
    ASTNode newChild = libsbml.parseFormula("a + b");
    int i = N.prependChild(newChild);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.getNumChildren() == 3 );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_ChildFunctions_insertIntoRoot_1()
  {
    String expected = wrapMathML("  <apply>\n" + 
    "    <root/>\n" + 
    "    <degree>\n" + 
    "      <cn type=\"integer\"> 3 </cn>\n" + 
    "    </degree>\n" + 
    "    <ci> newChild </ci>\n" + 
    "  </apply>\n");
    String original = wrapMathML("<apply> <root/> <degree> <cn type='integer'> 3 </cn> </degree>" + 
    "               <ci> x </ci>" + 
    "</apply>");
    N = libsbml.readMathMLFromString(original);
    assertTrue( N.getNumChildren() == 2 );
    ASTNode newChild = new ASTNode(libsbml.AST_NAME);
    newChild.setName("newChild");
    int i = N.insertChild(3,newChild);
    assertTrue( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE );
    assertTrue( N.getNumChildren() == 2 );
    i = N.insertChild(2,newChild);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.getNumChildren() == 3 );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_ChildFunctions_insertIntoRoot_2()
  {
    String expected = wrapMathML("  <apply>\n" + 
    "    <root/>\n" + 
    "    <degree>\n" + 
    "      <cn type=\"integer\"> 3 </cn>\n" + 
    "    </degree>\n" + 
    "    <ci> x </ci>\n" + 
    "  </apply>\n");
    String original = wrapMathML("<apply> <root/> <degree> <cn type='integer'> 3 </cn> </degree>" + 
    "               <ci> x </ci>" + 
    "</apply>");
    N = libsbml.readMathMLFromString(original);
    assertTrue( N.getNumChildren() == 2 );
    ASTNode newChild = new ASTNode(libsbml.AST_NAME);
    newChild.setName("newChild");
    int i = N.insertChild(1,newChild);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.getNumChildren() == 3 );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_ChildFunctions_insertIntoRoot_3()
  {
    String expected = wrapMathML("  <apply>\n" + 
    "    <root/>\n" + 
    "    <degree>\n" + 
    "      <ci> newChild </ci>\n" + 
    "    </degree>\n" + 
    "    <ci> x </ci>\n" + 
    "  </apply>\n");
    String original = wrapMathML("<apply> <root/> <degree> <cn type='integer'> 3 </cn> </degree>" + 
    "               <ci> x </ci>" + 
    "</apply>");
    N = libsbml.readMathMLFromString(original);
    assertTrue( N.getNumChildren() == 2 );
    ASTNode newChild = new ASTNode(libsbml.AST_NAME);
    newChild.setName("newChild");
    int i = N.insertChild(0,newChild);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.getNumChildren() == 3 );
    S = libsbml.writeMathMLToString(N);
    ASTNode child = N.getChild(1);
    assertTrue( child.getType() == libsbml.AST_INTEGER );
    assertEquals( true, equals(expected,S) );
  }

  public void test_ChildFunctions_remove()
  {
    N = new ASTNode(libsbml.AST_TIMES);
    ASTNode c1 = new ASTNode(libsbml.AST_NAME);
    c1.setName("c1");
    N.addChild(c1);
    ASTNode c2 = new ASTNode(libsbml.AST_NAME);
    c2.setName("c2");
    N.addChild(c2);
    assertTrue( N.getNumChildren() == 2 );
    int i = N.removeChild(3);
    assertTrue( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE );
    assertTrue( N.getNumChildren() == 2 );
    i = N.removeChild(2);
    assertTrue( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE );
    assertTrue( N.getNumChildren() == 2 );
    i = N.removeChild(0);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.getNumChildren() == 1 );
    ASTNode child = N.getChild(0);
    assertTrue( child.getType() == libsbml.AST_NAME );
    assertTrue( !child.getName().equals( "c2") == false );
    c1 = null;
  }

  public void test_ChildFunctions_removeFromLambda_1()
  {
    String expected = wrapMathML("  <lambda>\n" + 
    "    <bvar>\n" + 
    "      <ci> y </ci>\n" + 
    "    </bvar>\n" + 
    "    <apply>\n" + 
    "      <plus/>\n" + 
    "      <ci> x </ci>\n" + 
    "      <ci> y </ci>\n" + 
    "    </apply>\n" + 
    "  </lambda>\n");
    String original = wrapMathML("<lambda>" + 
    "    <bvar> <ci>x</ci> </bvar>" + 
    "    <bvar> <ci>y</ci> </bvar>" + 
    "    <apply> <plus/> <ci>x</ci> <ci>y</ci> </apply>" + 
    "</lambda>");
    N = libsbml.readMathMLFromString(original);
    assertTrue( N.getNumChildren() == 3 );
    assertTrue( N.getNumBvars() == 2 );
    assertTrue( N.getChild(0).representsBvar() == true );
    assertTrue( N.getChild(1).representsBvar() == true );
    assertTrue( N.getChild(2).representsBvar() == false );
    int i = N.removeChild(3);
    assertTrue( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE );
    ASTNode removed = N.getChild(0);
    i = N.removeChild(0);
    removed = null;
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.getNumChildren() == 2 );
    assertTrue( N.getNumBvars() == 1 );
    assertTrue( N.getChild(0).representsBvar() == true );
    assertTrue( N.getChild(1).representsBvar() == false );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_ChildFunctions_removeFromLambda_2()
  {
    String expected = wrapMathML("  <lambda>\n" + 
    "    <bvar>\n" + 
    "      <ci> x </ci>\n" + 
    "    </bvar>\n" + 
    "    <apply>\n" + 
    "      <plus/>\n" + 
    "      <ci> x </ci>\n" + 
    "      <ci> y </ci>\n" + 
    "    </apply>\n" + 
    "  </lambda>\n");
    String original = wrapMathML("<lambda>" + 
    "    <bvar> <ci>x</ci> </bvar>" + 
    "    <bvar> <ci>y</ci> </bvar>" + 
    "    <apply> <plus/> <ci>x</ci> <ci>y</ci> </apply>" + 
    "</lambda>");
    N = libsbml.readMathMLFromString(original);
    assertTrue( N.getNumChildren() == 3 );
    assertTrue( N.getNumBvars() == 2 );
    assertTrue( N.getChild(0).representsBvar() == true );
    assertTrue( N.getChild(1).representsBvar() == true );
    assertTrue( N.getChild(2).representsBvar() == false );
    ASTNode removed = N.getChild(1);
    int i = N.removeChild(1);
    removed = null;
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.getNumChildren() == 2 );
    assertTrue( N.getNumBvars() == 1 );
    assertTrue( N.getChild(0).representsBvar() == true );
    assertTrue( N.getChild(1).representsBvar() == false );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_ChildFunctions_removeFromLambda_3()
  {
    String expected = wrapMathML("  <lambda>\n" + 
    "    <bvar>\n" + 
    "      <ci> x </ci>\n" + 
    "    </bvar>\n" + 
    "    <bvar>\n" + 
    "      <ci> y </ci>\n" + 
    "    </bvar>\n" + 
    "  </lambda>\n");
    String original = wrapMathML("<lambda>" + 
    "    <bvar> <ci>x</ci> </bvar>" + 
    "    <bvar> <ci>y</ci> </bvar>" + 
    "    <apply> <plus/> <ci>x</ci> <ci>y</ci> </apply>" + 
    "</lambda>");
    N = libsbml.readMathMLFromString(original);
    assertTrue( N.getNumChildren() == 3 );
    assertTrue( N.getNumBvars() == 2 );
    assertTrue( N.getChild(0).representsBvar() == true );
    assertTrue( N.getChild(1).representsBvar() == true );
    assertTrue( N.getChild(2).representsBvar() == false );
    ASTNode removed = N.getChild(2);
    int i = N.removeChild(2);
    removed = null;
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.getNumChildren() == 2 );
    assertTrue( N.getNumBvars() == 2 );
    assertTrue( N.getChild(0).representsBvar() == true );
    assertTrue( N.getChild(1).representsBvar() == true );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_ChildFunctions_removeFromLog_1()
  {
    String expected = wrapMathML("  <apply>\n" + 
    "    <log/>\n" + 
    "  </apply>\n");
    String original = wrapMathML("<apply> <log/> <logbase> <cn type='integer'> 3 </cn> </logbase>" + 
    "               <ci> x </ci>" + 
    "</apply>");
    N = libsbml.readMathMLFromString(original);
    assertTrue( N.getNumChildren() == 2 );
    int i = N.removeChild(3);
    assertTrue( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE );
    ASTNode removed = N.getChild(1);
    i = N.removeChild(1);
    removed = null;
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.getNumChildren() == 1 );
    ASTNode child = N.getChild(0);
    assertTrue( child.getType() == libsbml.AST_INTEGER );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_ChildFunctions_removeFromLog_2()
  {
    String expected = wrapMathMLUnits("  <apply>\n" + 
    "    <log/>\n" + 
    "  </apply>\n");
    String original = wrapMathML("<apply> <log/>" + 
    "               <ci> x </ci>" + 
    "</apply>");
    N = libsbml.readMathMLFromString(original);
    assertTrue( N.getNumChildren() == 2 );
    int i = N.removeChild(3);
    assertTrue( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE );
    ASTNode removed = N.getChild(1);
    i = N.removeChild(1);
    removed = null;
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.getNumChildren() == 1 );
    ASTNode child = N.getChild(0);
    assertTrue( child.getType() == libsbml.AST_INTEGER );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_ChildFunctions_removeFromLog_3()
  {
    String expected = wrapMathML("  <apply>\n" + 
    "    <log/>\n" + 
    "  </apply>\n");
    String original = wrapMathML("<apply> <log/> <logbase> <cn type='integer'> 3 </cn> </logbase>" + 
    "               <ci> x </ci>" + 
    "</apply>");
    N = libsbml.readMathMLFromString(original);
    assertTrue( N.getNumChildren() == 2 );
    ASTNode removed = N.getChild(0);
    int i = N.removeChild(0);
    removed = null;
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.getNumChildren() == 1 );
    ASTNode child = N.getChild(0);
    assertTrue( child.getType() == libsbml.AST_NAME );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_ChildFunctions_removeFromLog_4()
  {
    String expected = wrapMathML("  <apply>\n" + 
    "    <log/>\n" + 
    "  </apply>\n");
    String original = wrapMathML("<apply> <log/>" + 
    "               <ci> x </ci>" + 
    "</apply>");
    N = libsbml.readMathMLFromString(original);
    assertTrue( N.getNumChildren() == 2 );
    ASTNode removed = N.getChild(0);
    int i = N.removeChild(0);
    removed = null;
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.getNumChildren() == 1 );
    ASTNode child = N.getChild(0);
    assertTrue( child.getType() == libsbml.AST_NAME );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_ChildFunctions_removeFromPiecewise_1()
  {
    String expected = wrapMathML("  <piecewise>\n" + 
    "    <piece>\n" + 
    "      <cn> 0 </cn>\n" + 
    "      <apply>\n" + 
    "        <eq/>\n" + 
    "        <ci> x </ci>\n" + 
    "        <cn> 0 </cn>\n" + 
    "      </apply>\n" + 
    "    </piece>\n" + 
    "    <piece>\n" + 
    "      <ci> x </ci>\n" + 
    "      <apply>\n" + 
    "        <gt/>\n" + 
    "        <ci> x </ci>\n" + 
    "        <cn> 0 </cn>\n" + 
    "      </apply>\n" + 
    "    </piece>\n" + 
    "  </piecewise>\n");
    String original = wrapMathML("<piecewise>" + 
    "  <piece>" + 
    "    <apply> <cos/> <ci>x</ci> </apply>" + 
    "    <apply> <lt/> <ci>x</ci> <cn>0</cn> </apply>" + 
    "  </piece>" + 
    "  <piece>" + 
    "    <cn>0</cn>" + 
    "    <apply> <eq/> <ci>x</ci> <cn>0</cn> </apply>" + 
    "  </piece>" + 
    "  <piece>" + 
    "    <ci>x</ci>" + 
    "    <apply> <gt/> <ci>x</ci> <cn>0</cn> </apply>" + 
    "  </piece>" + 
    "</piecewise>");
    N = libsbml.readMathMLFromString(original);
    assertTrue( N.getNumChildren() == 6 );
    ASTNode removed = N.getChild(0);
    int i = N.removeChild(0);
    removed = null;
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.getNumChildren() == 5 );
    removed = N.getChild(0);
    i = N.removeChild(0);
    removed = null;
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.getNumChildren() == 4 );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_ChildFunctions_removeFromPiecewise_2()
  {
    String expected = wrapMathML("  <piecewise>\n" + 
    "    <piece>\n" + 
    "      <cn> 0 </cn>\n" + 
    "      <apply>\n" + 
    "        <eq/>\n" + 
    "        <ci> x </ci>\n" + 
    "        <cn> 0 </cn>\n" + 
    "      </apply>\n" + 
    "    </piece>\n" + 
    "  </piecewise>\n");
    String original = wrapMathML("<piecewise>" + 
    "  <piece>" + 
    "    <cn>0</cn>" + 
    "    <apply> <eq/> <ci>x</ci> <cn>0</cn> </apply>" + 
    "  </piece>" + 
    "    <otherwise>\n" + 
    "      <ci> x </ci>\n" + 
    "    </otherwise>\n" + 
    "</piecewise>");
    N = libsbml.readMathMLFromString(original);
    assertTrue( N.getNumChildren() == 3 );
    ASTNode removed = N.getChild(2);
    int i = N.removeChild(2);
    removed = null;
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.getNumChildren() == 2 );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_ChildFunctions_removeFromPiecewise_3()
  {
    String expected = wrapMathML("  <piecewise>\n" + 
    "    <otherwise>\n" + 
    "      <cn> 0 </cn>\n" + 
    "    </otherwise>\n" + 
    "  </piecewise>\n");
    String original = wrapMathML("<piecewise>" + 
    "  <piece>" + 
    "    <cn>0</cn>" + 
    "    <apply> <eq/> <ci>x</ci> <cn>0</cn> </apply>" + 
    "  </piece>" + 
    "</piecewise>");
    N = libsbml.readMathMLFromString(original);
    assertTrue( N.getNumChildren() == 2 );
    ASTNode removed = N.getChild(1);
    int i = N.removeChild(1);
    removed = null;
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.getNumChildren() == 1 );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_ChildFunctions_removeFromRoot_1()
  {
    String expected = wrapMathML("  <apply>\n" + 
    "    <root/>\n" + 
    "    <cn type=\"integer\"> 3 </cn>\n" + 
    "  </apply>\n");
    String original = wrapMathML("<apply> <root/> <degree> <cn type='integer'> 3 </cn> </degree>" + 
    "               <ci> x </ci>" + 
    "</apply>");
    N = libsbml.readMathMLFromString(original);
    assertTrue( N.getNumChildren() == 2 );
    int i = N.removeChild(3);
    assertTrue( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE );
    ASTNode removed = N.getChild(1);
    i = N.removeChild(1);
    removed = null;
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.getNumChildren() == 1 );
    ASTNode child = N.getChild(0);
    assertTrue( child.getType() == libsbml.AST_INTEGER );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_ChildFunctions_removeFromRoot_2()
  {
    String expected = wrapMathMLUnits("  <apply>\n" + 
    "    <root/>\n" + 
    "    <cn sbml:units=\"dimensionless\" type=\"integer\"> 2 </cn>\n" + 
    "  </apply>\n");
    String original = wrapMathML("<apply> <root/>" + 
    "               <ci> x </ci>" + 
    "</apply>");
    N = libsbml.readMathMLFromString(original);
    assertTrue( N.getNumChildren() == 2 );
    int i = N.removeChild(3);
    assertTrue( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE );
    ASTNode removed = N.getChild(1);
    i = N.removeChild(1);
    removed = null;
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.getNumChildren() == 1 );
    ASTNode child = N.getChild(0);
    assertTrue( child.getType() == libsbml.AST_INTEGER );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_ChildFunctions_removeFromRoot_3()
  {
    String expected = wrapMathML("  <apply>\n" + 
    "    <root/>\n" + 
    "    <ci> x </ci>\n" + 
    "  </apply>\n");
    String original = wrapMathML("<apply> <root/> <degree> <cn type='integer'> 3 </cn> </degree>" + 
    "               <ci> x </ci>" + 
    "</apply>");
    N = libsbml.readMathMLFromString(original);
    assertTrue( N.getNumChildren() == 2 );
    ASTNode removed = N.getChild(0);
    int i = N.removeChild(0);
    removed = null;
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.getNumChildren() == 1 );
    ASTNode child = N.getChild(0);
    assertTrue( child.getType() == libsbml.AST_NAME );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_ChildFunctions_removeFromRoot_4()
  {
    String expected = wrapMathML("  <apply>\n" + 
    "    <root/>\n" + 
    "    <ci> x </ci>\n" + 
    "  </apply>\n");
    String original = wrapMathML("<apply> <root/>" + 
    "               <ci> x </ci>" + 
    "</apply>");
    N = libsbml.readMathMLFromString(original);
    assertTrue( N.getNumChildren() == 2 );
    ASTNode removed = N.getChild(0);
    int i = N.removeChild(0);
    removed = null;
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.getNumChildren() == 1 );
    ASTNode child = N.getChild(0);
    assertTrue( child.getType() == libsbml.AST_NAME );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_ChildFunctions_replace()
  {
    N = new ASTNode(libsbml.AST_TIMES);
    ASTNode c1 = new ASTNode(libsbml.AST_NAME);
    c1.setName("c1");
    N.addChild(c1);
    ASTNode c2 = new ASTNode(libsbml.AST_NAME);
    c2.setName("c2");
    N.addChild(c2);
    ASTNode newChild = new ASTNode(libsbml.AST_NAME);
    newChild.setName("newChild");
    assertTrue( N.getNumChildren() == 2 );
    int i = N.replaceChild(3,newChild,true);
    assertTrue( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE );
    assertTrue( N.getNumChildren() == 2 );
    i = N.replaceChild(2,newChild,true);
    assertTrue( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE );
    assertTrue( N.getNumChildren() == 2 );
    i = N.replaceChild(1,newChild,true);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.getNumChildren() == 2 );
    ASTNode child = N.getChild(1);
    assertTrue( child.getType() == libsbml.AST_NAME );
    assertTrue( !child.getName().equals( "newChild") == false );
  }

  public void test_ChildFunctions_replaceInPiecewise_1()
  {
    String expected = wrapMathML("  <piecewise>\n" + 
    "    <piece>\n" + 
    "      <ci> newChild </ci>\n" + 
    "      <apply>\n" + 
    "        <lt/>\n" + 
    "        <ci> x </ci>\n" + 
    "        <cn> 0 </cn>\n" + 
    "      </apply>\n" + 
    "    </piece>\n" + 
    "  </piecewise>\n");
    String original = wrapMathML("<piecewise>" + 
    "  <piece>" + 
    "    <ci> x </ci>" + 
    "    <apply> <lt/> <ci>x</ci> <cn>0</cn> </apply>" + 
    "  </piece>" + 
    "</piecewise>");
    N = libsbml.readMathMLFromString(original);
    assertTrue( N.getNumChildren() == 2 );
    ASTNode newChild = new ASTNode(libsbml.AST_NAME);
    newChild.setName("newChild");
    int i = N.replaceChild(3,newChild,true);
    assertTrue( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE );
    assertTrue( N.getNumChildren() == 2 );
    i = N.replaceChild(2,newChild,true);
    assertTrue( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE );
    assertTrue( N.getNumChildren() == 2 );
    i = N.replaceChild(0,newChild,true);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.getNumChildren() == 2 );
    ASTNode child = N.getChild(0);
    assertTrue( child.getType() == libsbml.AST_NAME );
    assertTrue( !child.getName().equals( "newChild") == false );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_ChildFunctions_replaceInPiecewise_2()
  {
    String expected = wrapMathML("  <piecewise>\n" + 
    "    <piece>\n" + 
    "      <ci> x </ci>\n" + 
    "      <apply>\n" + 
    "        <lt/>\n" + 
    "        <ci> x </ci>\n" + 
    "        <cn> 0 </cn>\n" + 
    "      </apply>\n" + 
    "    </piece>\n" + 
    "    <otherwise>\n" + 
    "      <ci> newChild </ci>\n" + 
    "    </otherwise>\n" + 
    "  </piecewise>\n");
    String original = wrapMathML("<piecewise>" + 
    "  <piece>" + 
    "    <ci> x </ci>" + 
    "    <apply> <lt/> <ci>x</ci> <cn>0</cn> </apply>" + 
    "  </piece>" + 
    "  <otherwise> <ci> x </ci> </otherwise>" + 
    "</piecewise>");
    N = libsbml.readMathMLFromString(original);
    assertTrue( N.getNumChildren() == 3 );
    ASTNode newChild = new ASTNode(libsbml.AST_NAME);
    newChild.setName("newChild");
    int i = N.replaceChild(4,newChild,true);
    assertTrue( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE );
    assertTrue( N.getNumChildren() == 3 );
    i = N.replaceChild(3,newChild,true);
    assertTrue( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE );
    assertTrue( N.getNumChildren() == 3 );
    i = N.replaceChild(2,newChild,true);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.getNumChildren() == 3 );
    ASTNode child = N.getChild(2);
    assertTrue( child.getType() == libsbml.AST_NAME );
    assertTrue( !child.getName().equals( "newChild") == false );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_ChildFunctions_replaceInPiecewise_3()
  {
    String expected = wrapMathML("  <piecewise>\n" + 
    "    <piece>\n" + 
    "      <ci> x </ci>\n" + 
    "      <apply>\n" + 
    "        <plus/>\n" + 
    "        <ci> a </ci>\n" + 
    "        <ci> b </ci>\n" + 
    "      </apply>\n" + 
    "    </piece>\n" + 
    "    <otherwise>\n" + 
    "      <ci> x </ci>\n" + 
    "    </otherwise>\n" + 
    "  </piecewise>\n");
    String original = wrapMathML("<piecewise>" + 
    "  <piece>" + 
    "    <ci> x </ci>" + 
    "    <apply> <lt/> <ci>x</ci> <cn>0</cn> </apply>" + 
    "  </piece>" + 
    "  <otherwise> <ci> x </ci> </otherwise>" + 
    "</piecewise>");
    N = libsbml.readMathMLFromString(original);
    assertTrue( N.getNumChildren() == 3 );
    ASTNode newChild = libsbml.parseFormula("a + b");
    int i = N.replaceChild(1,newChild,true);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.getNumChildren() == 3 );
    ASTNode child = N.getChild(1);
    assertTrue( child.getType() == libsbml.AST_PLUS );
    assertTrue( child.getNumChildren() == 2 );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_ChildFunctions_replaceInPiecewise_4()
  {
    String expected = wrapMathML("  <piecewise>\n" + 
    "    <piece>\n" + 
    "      <apply>\n" + 
    "        <cos/>\n" + 
    "        <ci> x </ci>\n" + 
    "      </apply>\n" + 
    "      <apply>\n" + 
    "        <lt/>\n" + 
    "        <ci> x </ci>\n" + 
    "        <cn> 0 </cn>\n" + 
    "      </apply>\n" + 
    "    </piece>\n" + 
    "    <piece>\n" + 
    "      <cn> 0 </cn>\n" + 
    "      <apply>\n" + 
    "        <eq/>\n" + 
    "        <ci> x </ci>\n" + 
    "        <cn> 0 </cn>\n" + 
    "      </apply>\n" + 
    "    </piece>\n" + 
    "    <piece>\n" + 
    "      <cn type=\"integer\"> 3 </cn>\n" + 
    "      <apply>\n" + 
    "        <gt/>\n" + 
    "        <ci> x </ci>\n" + 
    "        <cn> 0 </cn>\n" + 
    "      </apply>\n" + 
    "    </piece>\n" + 
    "  </piecewise>\n");
    String original = wrapMathML("<piecewise>" + 
    "  <piece>" + 
    "    <apply> <cos/> <ci>x</ci> </apply>" + 
    "    <apply> <lt/> <ci>x</ci> <cn>0</cn> </apply>" + 
    "  </piece>" + 
    "  <piece>" + 
    "    <cn>0</cn>" + 
    "    <apply> <eq/> <ci>x</ci> <cn>0</cn> </apply>" + 
    "  </piece>" + 
    "  <piece>" + 
    "    <ci>x</ci>" + 
    "    <apply> <gt/> <ci>x</ci> <cn>0</cn> </apply>" + 
    "  </piece>" + 
    "</piecewise>");
    N = libsbml.readMathMLFromString(original);
    assertTrue( N.getNumChildren() == 6 );
    ASTNode newChild = libsbml.parseFormula("3");
    int i = N.replaceChild(4,newChild,true);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.getNumChildren() == 6 );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  /**
   * Loads the SWIG-generated libSBML Java module when this class is
   * loaded, or reports a sensible diagnostic message about why it failed.
   */
  static
  {
    String varname;
    String shlibname;

    if (System.getProperty("mrj.version") != null)
    {
      varname = "DYLD_LIBRARY_PATH";    // We're on a Mac.
      shlibname = "libsbmlj.jnilib and/or libsbml.dylib";
    }
    else
    {
      varname = "LD_LIBRARY_PATH";      // We're not on a Mac.
      shlibname = "libsbmlj.so and/or libsbml.so";
    }

    try
    {
      System.loadLibrary("sbmlj");
      // For extra safety, check that the jar file is in the classpath.
      Class.forName("org.sbml.libsbml.libsbml");
    }
    catch (SecurityException e)
    {
      e.printStackTrace();
      System.err.println("Could not load the libSBML library files due to a"+
                         " security exception.\n");
      System.exit(1);
    }
    catch (UnsatisfiedLinkError e)
    {
      e.printStackTrace();
      System.err.println("Error: could not link with the libSBML library files."+
                         " It is likely\nyour " + varname +
                         " environment variable does not include the directories\n"+
                         "containing the " + shlibname + " library files.\n");
      System.exit(1);
    }
    catch (ClassNotFoundException e)
    {
      e.printStackTrace();
      System.err.println("Error: unable to load the file libsbmlj.jar."+
                         " It is likely\nyour -classpath option and CLASSPATH" +
                         " environment variable\n"+
                         "do not include the path to libsbmlj.jar.\n");
      System.exit(1);
    }
  }
}
