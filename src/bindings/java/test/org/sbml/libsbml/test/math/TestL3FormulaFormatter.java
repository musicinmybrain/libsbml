/*
 * @file    TestL3FormulaFormatter.java
 * @brief   FormulaFormatter unit tests
 *
 * @author  Akiya Jouraku (Java conversion)
 * @author  Lucian Smith, from Ben Bornstein 
 * 
 * ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
 *
 * DO NOT EDIT THIS FILE.
 *
 * This file was generated automatically by converting the file located at
 * src/sbml/test/TestL3FormulaFormatter.c
 * using the conversion program dev/utilities/translateTests/translateTests.pl.
 * Any changes made here will be lost the next time the file is regenerated.
 *
 * -----------------------------------------------------------------------------
 * This file is part of libSBML.  Please visit http://sbml.org for more
 * information about SBML, and the latest version of libSBML.
 *
 * Copyright 2005-2010 California Institute of Technology.
 * Copyright 2002-2005 California Institute of Technology and
 *                     Japan Science and Technology Corporation.
 * 
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation.  A copy of the license agreement is provided
 * in the file named "LICENSE.txt" included with this software distribution
 * and also available online as http://sbml.org/software/libsbml/license.html
 * -----------------------------------------------------------------------------
 */

package org.sbml.libsbml.test.math;

import org.sbml.libsbml.*;

import java.io.File;
import java.lang.AssertionError;

public class TestL3FormulaFormatter {

  static void assertTrue(boolean condition) throws AssertionError
  {
    if (condition == true)
    {
      return;
    }
    throw new AssertionError();
  }

  static void assertEquals(Object a, Object b) throws AssertionError
  {
    if ( (a == null) && (b == null) )
    {
      return;
    }
    else if ( (a == null) || (b == null) )
    {
      throw new AssertionError();
    }
    else if (a.equals(b))
    {
      return;
    }

    throw new AssertionError();
  }

  static void assertNotEquals(Object a, Object b) throws AssertionError
  {
    if ( (a == null) && (b == null) )
    {
      throw new AssertionError();
    }
    else if ( (a == null) || (b == null) )
    {
      return;
    }
    else if (a.equals(b))
    {
      throw new AssertionError();
    }
  }

  static void assertEquals(boolean a, boolean b) throws AssertionError
  {
    if ( a == b )
    {
      return;
    }
    throw new AssertionError();
  }

  static void assertNotEquals(boolean a, boolean b) throws AssertionError
  {
    if ( a != b )
    {
      return;
    }
    throw new AssertionError();
  }

  static void assertEquals(int a, int b) throws AssertionError
  {
    if ( a == b )
    {
      return;
    }
    throw new AssertionError();
  }

  static void assertNotEquals(int a, int b) throws AssertionError
  {
    if ( a != b )
    {
      return;
    }
    throw new AssertionError();
  }

  public void test_L3FormulaFormatter_accessWithNULL()
  {
    null.format(null,null);
    null.formatFunction(null,null);
    null.formatOperator(null);
    null.visit(null,null,null);
    null.visitFunction(null,null,null);
    null.visitLog10(null,null,null);
    null.visitOther(null,null,null);
    null.visitSqrt(null,null,null);
    null.visitUMinus(null,null,null);
    assertTrue( null.isFunction(null) == 0 );
    assertTrue( null.isGrouped(null,null) == 0 );
    String s = null.formulaToL3String();
    assertTrue( s == null );
  }

  public void test_L3FormulaFormatter_collapseMinus()
  {
    String s;
    ASTNode n = new  ASTNode();
    ASTNode c = new  ASTNode();
    ASTNode c2 = new  ASTNode();
    ASTNode c3 = new  ASTNode();
    ASTNode c4 = new  ASTNode();
    L3ParserSettings l3ps = new  L3ParserSettings();
    n.setType(libsbml.AST_MINUS);
    c.setType(libsbml.AST_MINUS);
    n.addChild(c);
    c2.setType(libsbml.AST_MINUS);
    c.addChild(c2);
    c3.setType(libsbml.AST_MINUS);
    c2.addChild(c3);
    c4.setName( "x");
    c3.addChild(c4);
    s = n.formulaToL3StringWithSettings(l3ps);
    assertTrue(s.equals( "----x"));
    l3ps.setParseCollapseMinus(0);
    s = n.formulaToL3StringWithSettings(l3ps);
    assertTrue(s.equals( "----x"));
    l3ps.setParseCollapseMinus(1);
    s = n.formulaToL3StringWithSettings(l3ps);
    assertTrue(s.equals( "x"));
    n = null;
    l3ps = null;
  }

  public void test_L3FormulaFormatter_isFunction()
  {
    ASTNode n = new  ASTNode();
    ASTNode c = new  ASTNode();
    n.setType(libsbml.AST_NAME);
    assertTrue( n.isFunction(null) == 0 );
    n.setType(libsbml.AST_CONSTANT_PI);
    assertTrue( n.isFunction(null) == 0 );
    n.setType(libsbml.AST_LAMBDA);
    assertTrue( n.isFunction(null) == 1 );
    n.setType(libsbml.AST_FUNCTION);
    assertTrue( n.isFunction(null) == 1 );
    n.setType(libsbml.AST_LOGICAL_AND);
    assertTrue( n.isFunction(null) == 1 );
    n.setType(libsbml.AST_RELATIONAL_EQ);
    assertTrue( n.isFunction(null) == 1 );
    n.setType(libsbml.AST_PLUS);
    assertTrue( n.isFunction(null) == 1 );
    n.addChild(c);
    n.setType(libsbml.AST_LOGICAL_AND);
    assertTrue( n.isFunction(null) == 1 );
    n.setType(libsbml.AST_RELATIONAL_EQ);
    assertTrue( n.isFunction(null) == 1 );
    n.setType(libsbml.AST_PLUS);
    assertTrue( n.isFunction(null) == 1 );
    c = new  ASTNode();
    n.addChild(c);
    n.setType(libsbml.AST_LOGICAL_AND);
    assertTrue( n.isFunction(null) == 0 );
    n.setType(libsbml.AST_RELATIONAL_EQ);
    assertTrue( n.isFunction(null) == 0 );
    n.setType(libsbml.AST_PLUS);
    assertTrue( n.isFunction(null) == 0 );
    n = null;
  }

  public void test_L3FormulaFormatter_isGrouped()
  {
    ASTNode p = new  ASTNode();
    ASTNode c;
    assertTrue( null.isGrouped(p,null) == 0 );
    p = null;
    p = "1 + 2 * 3".parseL3Formula();
    c = p.getLeftChild();
    assertTrue( p.isGrouped(c,null) == 0 );
    c = p.getRightChild();
    assertTrue( p.isGrouped(c,null) == 0 );
    p = null;
    p = "(1 + 2) * 3".parseL3Formula();
    c = p.getLeftChild();
    assertTrue( p.isGrouped(c,null) == 1 );
    c = p.getRightChild();
    assertTrue( p.isGrouped(c,null) == 0 );
    p = null;
    p = "1 + (2 * 3)".parseL3Formula();
    c = p.getLeftChild();
    assertTrue( p.isGrouped(c,null) == 0 );
    c = p.getRightChild();
    assertTrue( p.isGrouped(c,null) == 0 );
    p = null;
    p = "foo(1 + 2, 2 * 3)".parseL3Formula();
    c = p.getLeftChild();
    assertTrue( p.isGrouped(c,null) == 0 );
    c = p.getRightChild();
    assertTrue( p.isGrouped(c,null) == 0 );
    p = null;
    p = "(a / b) * c".parseL3Formula();
    c = p.getLeftChild();
    assertTrue( p.isGrouped(c,null) == 1 );
    c = p.getRightChild();
    assertTrue( p.isGrouped(c,null) == 0 );
    p = null;
    p = "a / (b * c)".parseL3Formula();
    c = p.getLeftChild();
    assertTrue( p.isGrouped(c,null) == 0 );
    c = p.getRightChild();
    assertTrue( p.isGrouped(c,null) == 1 );
    p = null;
    p = "a - (b - c)".parseL3Formula();
    c = p.getLeftChild();
    assertTrue( p.isGrouped(c,null) == 0 );
    c = p.getRightChild();
    assertTrue( p.isGrouped(c,null) == 1 );
    p = null;
    p = "a - b - c".parseL3Formula();
    c = p.getLeftChild();
    assertTrue( p.isGrouped(c,null) == 0 );
    c = p.getRightChild();
    assertTrue( p.isGrouped(c,null) == 0 );
    p = null;
    p = "a + (b + c)".parseL3Formula();
    c = p.getLeftChild();
    assertTrue( p.isGrouped(c,null) == 0 );
    c = p.getRightChild();
    assertTrue( p.isGrouped(c,null) == 1 );
    p = null;
    p = "a + b + c".parseL3Formula();
    c = p.getLeftChild();
    assertTrue( p.isGrouped(c,null) == 0 );
    c = p.getRightChild();
    assertTrue( p.isGrouped(c,null) == 0 );
    p = null;
    p = "a * (b * c)".parseL3Formula();
    c = p.getLeftChild();
    assertTrue( p.isGrouped(c,null) == 0 );
    c = p.getRightChild();
    assertTrue( p.isGrouped(c,null) == 1 );
    p = null;
    p = "a * b * c".parseL3Formula();
    c = p.getLeftChild();
    assertTrue( p.isGrouped(c,null) == 0 );
    c = p.getRightChild();
    assertTrue( p.isGrouped(c,null) == 0 );
    p = null;
    p = "a / (b / c)".parseL3Formula();
    c = p.getLeftChild();
    assertTrue( p.isGrouped(c,null) == 0 );
    c = p.getRightChild();
    assertTrue( p.isGrouped(c,null) == 1 );
    p = null;
    p = "a / b / c".parseL3Formula();
    c = p.getLeftChild();
    assertTrue( p.isGrouped(c,null) == 0 );
    c = p.getRightChild();
    assertTrue( p.isGrouped(c,null) == 0 );
    p = null;
  }

  public void test_L3FormulaFormatter_multiAnd()
  {
    String s;
    ASTNode n = new  ASTNode();
    ASTNode c = new  ASTNode();
    n.setType(libsbml.AST_LOGICAL_AND);
    s = n.formulaToL3String();
    assertTrue(s.equals( "and()"));
    c.setName( "x");
    n.addChild(c);
    s = n.formulaToL3String();
    assertTrue(s.equals( "and(x)"));
    c = new  ASTNode();
    c.setName( "y");
    n.addChild(c);
    s = n.formulaToL3String();
    assertTrue(s.equals( "x && y"));
    c = new  ASTNode();
    c.setName( "z");
    n.addChild(c);
    s = n.formulaToL3String();
    assertTrue(s.equals( "x && y && z"));
    n = null;
  }

  public void test_L3FormulaFormatter_multiDivide()
  {
    String s;
    ASTNode n = new  ASTNode();
    ASTNode c = new  ASTNode();
    n.setType(libsbml.AST_DIVIDE);
    s = n.formulaToL3String();
    assertTrue(s.equals( "divide()"));
    c.setName( "x");
    n.addChild(c);
    s = n.formulaToL3String();
    assertTrue(s.equals( "divide(x)"));
    c = new  ASTNode();
    c.setName( "y");
    n.addChild(c);
    s = n.formulaToL3String();
    assertTrue(s.equals( "x / y"));
    c = new  ASTNode();
    c.setName( "z");
    n.addChild(c);
    s = n.formulaToL3String();
    assertTrue(s.equals( "divide(x, y, z)"));
    n = null;
  }

  public void test_L3FormulaFormatter_multiEq()
  {
    String s;
    ASTNode n = new  ASTNode();
    ASTNode c = new  ASTNode();
    n.setType(libsbml.AST_RELATIONAL_EQ);
    s = n.formulaToL3String();
    assertTrue(s.equals( "eq()"));
    c.setName( "x");
    n.addChild(c);
    s = n.formulaToL3String();
    assertTrue(s.equals( "eq(x)"));
    c = new  ASTNode();
    c.setName( "y");
    n.addChild(c);
    s = n.formulaToL3String();
    assertTrue(s.equals( "x == y"));
    c = new  ASTNode();
    c.setName( "z");
    n.addChild(c);
    s = n.formulaToL3String();
    assertTrue(s.equals( "x == y == z"));
    n = null;
  }

  public void test_L3FormulaFormatter_multiGT()
  {
    String s;
    ASTNode n = new  ASTNode();
    ASTNode c = new  ASTNode();
    n.setType(libsbml.AST_RELATIONAL_GT);
    s = n.formulaToL3String();
    assertTrue(s.equals( "gt()"));
    c.setName( "x");
    n.addChild(c);
    s = n.formulaToL3String();
    assertTrue(s.equals( "gt(x)"));
    c = new  ASTNode();
    c.setName( "y");
    n.addChild(c);
    s = n.formulaToL3String();
    assertTrue(s.equals( "x > y"));
    c = new  ASTNode();
    c.setName( "z");
    n.addChild(c);
    s = n.formulaToL3String();
    assertTrue(s.equals( "x > y > z"));
    n = null;
  }

  public void test_L3FormulaFormatter_multiNEq()
  {
    String s;
    ASTNode n = new  ASTNode();
    ASTNode c = new  ASTNode();
    n.setType(libsbml.AST_RELATIONAL_NEQ);
    s = n.formulaToL3String();
    assertTrue(s.equals( "neq()"));
    c.setName( "x");
    n.addChild(c);
    s = n.formulaToL3String();
    assertTrue(s.equals( "neq(x)"));
    c = new  ASTNode();
    c.setName( "y");
    n.addChild(c);
    s = n.formulaToL3String();
    assertTrue(s.equals( "x != y"));
    c = new  ASTNode();
    c.setName( "z");
    n.addChild(c);
    s = n.formulaToL3String();
    assertTrue(s.equals( "neq(x, y, z)"));
    n = null;
  }

  public void test_L3FormulaFormatter_multiOr()
  {
    String s;
    ASTNode n = new  ASTNode();
    ASTNode c = new  ASTNode();
    n.setType(libsbml.AST_LOGICAL_OR);
    s = n.formulaToL3String();
    assertTrue(s.equals( "or()"));
    c.setName( "x");
    n.addChild(c);
    s = n.formulaToL3String();
    assertTrue(s.equals( "or(x)"));
    c = new  ASTNode();
    c.setName( "y");
    n.addChild(c);
    s = n.formulaToL3String();
    assertTrue(s.equals( "x || y"));
    c = new  ASTNode();
    c.setName( "z");
    n.addChild(c);
    s = n.formulaToL3String();
    assertTrue(s.equals( "x || y || z"));
    n = null;
  }

  public void test_L3FormulaFormatter_multiPlus()
  {
    String s;
    ASTNode n = new  ASTNode();
    ASTNode c = new  ASTNode();
    n.setType(libsbml.AST_PLUS);
    s = n.formulaToL3String();
    assertTrue(s.equals( "plus()"));
    c.setName( "x");
    n.addChild(c);
    s = n.formulaToL3String();
    assertTrue(s.equals( "plus(x)"));
    c = new  ASTNode();
    c.setName( "y");
    n.addChild(c);
    s = n.formulaToL3String();
    assertTrue(s.equals( "x + y"));
    c = new  ASTNode();
    c.setName( "z");
    n.addChild(c);
    s = n.formulaToL3String();
    assertTrue(s.equals( "x + y + z"));
    n = null;
  }

  public void test_L3FormulaFormatter_multiPlusTimes()
  {
    String s;
    ASTNode n = new  ASTNode();
    ASTNode c = new  ASTNode();
    n.setType(libsbml.AST_PLUS);
    c.setName( "x");
    n.addChild(c);
    c = new  ASTNode();
    c.setName( "y");
    n.addChild(c);
    c = new  ASTNode();
    c.setName( "z");
    n.addChild(c);
    s = n.formulaToL3String();
    assertTrue(s.equals( "x + y + z"));
    n.setType(libsbml.AST_TIMES);
    s = n.formulaToL3String();
    assertTrue(s.equals( "x * y * z"));
    n = null;
  }

  public void test_L3FormulaFormatter_parseUnits()
  {
    String s;
    ASTNode n = new  ASTNode();
    L3ParserSettings l3ps = new  L3ParserSettings();
    n.setValue(1.1);
    n.setUnits( "mL");
    s = n.formulaToL3StringWithSettings(l3ps);
    assertTrue(s.equals( "1.1 mL"));
    l3ps.setParseUnits(0);
    s = n.formulaToL3StringWithSettings(l3ps);
    assertTrue(s.equals( "1.1"));
    l3ps.setParseUnits(1);
    s = n.formulaToL3StringWithSettings(l3ps);
    assertTrue(s.equals( "1.1 mL"));
    n = null;
    l3ps = null;
  }

  public void test_L3FormulaFormatter_semantics()
  {
    String s;
    ASTNode n = new  ASTNode();
    ASTNode c = new  ASTNode();
    n.setType(libsbml.AST_LOGICAL_OR);
    c.setName( "x");
    n.addChild(c);
    c = new  ASTNode();
    c.setName( "y");
    n.addChild(c);
    s = n.formulaToL3String();
    assertTrue(s.equals( "x || y"));
    XMLNode xml = XMLNode.convertStringToXMLNode("<annotation> a </annotation>",null);
    n.addSemanticsAnnotation(xml);
    s = n.formulaToL3String();
    assertTrue(s.equals( "x || y"));
    n = null;
  }

  public void test_SBML_formulaToL3String()
  {
    const char *formulae[] ={"1""2.1""2.101e-10""foo""1 + foo""1 + 2""1 + 2 * 3""(1 - 2) * 3""1 + -2 / 3""1 + -2e-100 / 3""1 - -foo / 3""2 * foo^bar + 3.1""foo()""foo(1)""foo(1, bar)""foo(1, bar, 2^-3)""(a / b) * c""a / (b * c)""1 + 2 + 3""a * (b * c)""a + (b + c)""a * b * c""a + b + c""x % y""(1 + x) % (3 / y)""(x^2) % -y""x && (y == z)""(x && y) == z""(a && b) || c""a && (b || c)""a && b && c""a || b || c""-x^y""(-x)^y""x^-y""!(x^2)""(!x)^2""x^!2""1 ml""(3/4) uM""INF""NaN""avogadro""time""pi""true""false""(x > y) + (p == q)""(x > y > z) + (p == d == q)""(x || y) > (p && q)""or(x) > and(p)""or() > and()""(x * y)^2""(x * y * z)^2""times(x)^2""times()^2"""  
    }
    ASTNode n;
    String s;
    int i;
    s = n.formulaToL3String();
    assertTrue(s.equals(formulae[i]));
    n = null;
  }
}

  public void test_SBML_formulaToL3String_L1toL3()
  {
    ASTNode n;
    String s;
    n = "acos(x)".parseL3Formula();
    s = n.formulaToL3String();
    assertTrue(s.equals( "acos(x)"));
    n = null;
    n = "asin(x)".parseL3Formula();
    s = n.formulaToL3String();
    assertTrue(s.equals( "asin(x)"));
    n = null;
    n = "atan(x)".parseL3Formula();
    s = n.formulaToL3String();
    assertTrue(s.equals( "atan(x)"));
    n = null;
    n = "ceil(x)".parseL3Formula();
    s = n.formulaToL3String();
    assertTrue(s.equals( "ceil(x)"));
    n = null;
    n = "log(x)".parseL3Formula();
    s = n.formulaToL3String();
    assertTrue(s.equals( "log10(x)"));
    n = null;
    n = libsbml.parseFormula("log(x)");
    s = n.formulaToL3String();
    assertTrue(s.equals( "ln(x)"));
    n = null;
    n = "log10(x)".parseL3Formula();
    s = n.formulaToL3String();
    assertTrue(s.equals( "log10(x)"));
    n = null;
    n = "pow(x, y)".parseL3Formula();
    s = n.formulaToL3String();
    assertTrue(s.equals( "x^y"));
    n = null;
    n = "sqr(x)".parseL3Formula();
    s = n.formulaToL3String();
    assertTrue(s.equals( "x^2"));
    n = null;
    n = "sqrt(x)".parseL3Formula();
    s = n.formulaToL3String();
    assertTrue(s.equals( "sqrt(x)"));
    n = null;
    n = "x + (y + z)".parseL3Formula();
    s = n.formulaToL3String();
    assertTrue(s.equals( "x + (y + z)"));
    n = null;
    n = "(x + y) + z".parseL3Formula();
    s = n.formulaToL3String();
    assertTrue(s.equals( "x + y + z"));
    n = null;
  }

  public void test_SBML_formulaToL3String_L2toL3()
  {
    ASTNode n;
    String s;
    n = "arccos(x)".parseL3Formula();
    s = n.formulaToL3String();
    assertTrue(s.equals( "acos(x)"));
    n = null;
    n = "arcsin(x)".parseL3Formula();
    s = n.formulaToL3String();
    assertTrue(s.equals( "asin(x)"));
    n = null;
    n = "arctan(x)".parseL3Formula();
    s = n.formulaToL3String();
    assertTrue(s.equals( "atan(x)"));
    n = null;
    n = "ceiling(x)".parseL3Formula();
    s = n.formulaToL3String();
    assertTrue(s.equals( "ceil(x)"));
    n = null;
    n = "ln(x)".parseL3Formula();
    s = n.formulaToL3String();
    assertTrue(s.equals( "ln(x)"));
    n = null;
    n = "log(10, x)".parseL3Formula();
    s = n.formulaToL3String();
    assertTrue(s.equals( "log10(x)"));
    n = null;
    n = "power(x, y)".parseL3Formula();
    s = n.formulaToL3String();
    assertTrue(s.equals( "x^y"));
    n = null;
    n = "power(x, 2)".parseL3Formula();
    s = n.formulaToL3String();
    assertTrue(s.equals( "x^2"));
    n = null;
    n = "root(2, x)".parseL3Formula();
    s = n.formulaToL3String();
    assertTrue(s.equals( "sqrt(x)"));
    n = null;
  }

  public void test_SBML_formulaToL3String_L3v2()
  {
    ASTNode n;
    String s;
    n = "rateOf(x)".parseL3Formula();
    s = n.formulaToL3String();
    assertTrue(s.equals( "rateOf(x)"));
    n = null;
    n = "rem(x,y)".parseL3Formula();
    s = n.formulaToL3String();
    assertTrue(s.equals( "rem(x, y)"));
    n = null;
    n = "quotient(1,2)".parseL3Formula();
    s = n.formulaToL3String();
    assertTrue(s.equals( "quotient(1, 2)"));
    n = null;
    n = "max(a,b,5,8.4)".parseL3Formula();
    s = n.formulaToL3String();
    assertTrue(s.equals( "max(a, b, 5, 8.4)"));
    n = null;
    n = "min(x)".parseL3Formula();
    s = n.formulaToL3String();
    assertTrue(s.equals( "min(x)"));
    n = null;
  }

  /**
   * Loads the SWIG-generated libSBML Java module when this class is
   * loaded, or reports a sensible diagnostic message about why it failed.
   */
  static
  {
    String varname;
    String shlibname;

    if (System.getProperty("mrj.version") != null)
    {
      varname = "DYLD_LIBRARY_PATH";    // We're on a Mac.
      shlibname = "libsbmlj.jnilib and/or libsbml.dylib";
    }
    else
    {
      varname = "LD_LIBRARY_PATH";      // We're not on a Mac.
      shlibname = "libsbmlj.so and/or libsbml.so";
    }

    try
    {
      System.loadLibrary("sbmlj");
      // For extra safety, check that the jar file is in the classpath.
      Class.forName("org.sbml.libsbml.libsbml");
    }
    catch (SecurityException e)
    {
      e.printStackTrace();
      System.err.println("Could not load the libSBML library files due to a"+
                         " security exception.\n");
      System.exit(1);
    }
    catch (UnsatisfiedLinkError e)
    {
      e.printStackTrace();
      System.err.println("Error: could not link with the libSBML library files."+
                         " It is likely\nyour " + varname +
                         " environment variable does not include the directories\n"+
                         "containing the " + shlibname + " library files.\n");
      System.exit(1);
    }
    catch (ClassNotFoundException e)
    {
      e.printStackTrace();
      System.err.println("Error: unable to load the file libsbmlj.jar."+
                         " It is likely\nyour -classpath option and CLASSPATH" +
                         " environment variable\n"+
                         "do not include the path to libsbmlj.jar.\n");
      System.exit(1);
    }
  }
}
