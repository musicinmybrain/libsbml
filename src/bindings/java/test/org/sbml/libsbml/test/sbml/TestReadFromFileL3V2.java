/*
 * @file    TestReadFromFileL3V2.java
 * @brief   Reads test-data/l3v2-all.xml into memory and tests it.
 *
 * @author  Akiya Jouraku (Java conversion)
 * @author  Sarah Keating 
 * 
 * ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
 *
 * DO NOT EDIT THIS FILE.
 *
 * This file was generated automatically by converting the file located at
 * src/sbml/test/TestReadFromFileL3V2.cpp
 * using the conversion program dev/utilities/translateTests/translateTests.pl.
 * Any changes made here will be lost the next time the file is regenerated.
 *
 * -----------------------------------------------------------------------------
 * This file is part of libSBML.  Please visit http://sbml.org for more
 * information about SBML, and the latest version of libSBML.
 *
 * Copyright 2005-2010 California Institute of Technology.
 * Copyright 2002-2005 California Institute of Technology and
 *                     Japan Science and Technology Corporation.
 * 
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation.  A copy of the license agreement is provided
 * in the file named "LICENSE.txt" included with this software distribution
 * and also available online as http://sbml.org/software/libsbml/license.html
 * -----------------------------------------------------------------------------
 */

package org.sbml.libsbml.test.sbml;

import org.sbml.libsbml.*;

import java.io.File;
import java.lang.AssertionError;

public class TestReadFromFileL3V2 {

  static void assertTrue(boolean condition) throws AssertionError
  {
    if (condition == true)
    {
      return;
    }
    throw new AssertionError();
  }

  static void assertEquals(Object a, Object b) throws AssertionError
  {
    if ( (a == null) && (b == null) )
    {
      return;
    }
    else if ( (a == null) || (b == null) )
    {
      throw new AssertionError();
    }
    else if (a.equals(b))
    {
      return;
    }

    throw new AssertionError();
  }

  static void assertNotEquals(Object a, Object b) throws AssertionError
  {
    if ( (a == null) && (b == null) )
    {
      throw new AssertionError();
    }
    else if ( (a == null) || (b == null) )
    {
      return;
    }
    else if (a.equals(b))
    {
      throw new AssertionError();
    }
  }

  static void assertEquals(boolean a, boolean b) throws AssertionError
  {
    if ( a == b )
    {
      return;
    }
    throw new AssertionError();
  }

  static void assertNotEquals(boolean a, boolean b) throws AssertionError
  {
    if ( a != b )
    {
      return;
    }
    throw new AssertionError();
  }

  static void assertEquals(int a, int b) throws AssertionError
  {
    if ( a == b )
    {
      return;
    }
    throw new AssertionError();
  }

  static void assertNotEquals(int a, int b) throws AssertionError
  {
    if ( a != b )
    {
      return;
    }
    throw new AssertionError();
  }

  public void test_echo_l3v2_all()
  {
    String filename = new String( "../../sbml/sbml/test/test-data/" );
    filename += "l3v2-all.xml";
    String fileout = new String( "../../sbml/sbml/test/test-data/" );
    fileout += "tempOut.xml";
    SBMLDocument d = libsbml.readSBML();
    if (d == null);
    {
    }
    libsbml.writeSBML(d);
    SBMLDocument outD = libsbml.readSBML();
    String doc = d.toSBML();
    String out = outD.toSBML();
    assertTrue( !doc.equals(out) == false );
    d = null;
    outD = null;
  }

  public void test_read_l3v2_all()
  {
    SBMLReader reader = new SBMLReader();
    SBMLDocument d;
    Model m;
    Compartment c;
    Species s;
    Parameter p;
    AssignmentRule ar;
    Reaction r;
    SpeciesReference sr;
    KineticLaw kl;
    UnitDefinition ud;
    Constraint con;
    Event e;
    Delay delay;
    Trigger trigger;
    EventAssignment ea;
    FunctionDefinition fd;
    InitialAssignment ia;
    AlgebraicRule alg;
    RateRule rr;
    Unit u;
    ListOfEvents loe;
    Event e1;
    ListOfEventAssignments loea;
    EventAssignment ea1;
    ListOfFunctionDefinitions lofd;
    FunctionDefinition fd1;
    LocalParameter lp;
    Priority prior;
    ASTNode ast;
    String filename = new String( "../../sbml/sbml/test/test-data/" );
    filename += "l3v2-all.xml";
    d = reader.readSBML(filename);
    if (d == null);
    {
    }
    assertTrue( d.getLevel() == 3 );
    assertTrue( d.getVersion() == 2 );
    m = d.getModel();
    assertTrue( m != null );
    assertEquals( true, m.isSetSubstanceUnits() );
    assertEquals( true, m.isSetTimeUnits() );
    assertEquals( true, m.isSetVolumeUnits() );
    assertEquals( true, m.isSetLengthUnits() );
    assertEquals( true, m.isSetAreaUnits() );
    assertEquals( true, m.isSetExtentUnits() );
    assertEquals( true, m.isSetConversionFactor() );
    assertTrue( m.getSubstanceUnits().equals( "mole") );
    assertTrue( m.getTimeUnits().equals( "second") );
    assertTrue( m.getVolumeUnits().equals( "litre") );
    assertTrue( m.getLengthUnits().equals( "metre") );
    assertTrue( m.getAreaUnits().equals( "metre") );
    assertTrue( m.getExtentUnits().equals( "mole") );
    assertTrue( m.getConversionFactor().equals( "p") );
    assertTrue( m.getNumUnitDefinitions() == 1 );
    ud = m.getUnitDefinition(0);
    assertTrue( ud.getNumUnits() == 3 );
    u = ud.getUnit(0);
    assertEquals( true, u.isSetExponent() );
    assertEquals( true, u.isSetScale() );
    assertEquals( true, u.isSetMultiplier() );
    assertTrue( u.getExponent() == -1 );
    assertTrue( u.getExponentAsDouble() == -1 );
    assertTrue( u.getScale() == 2 );
    assertTrue( u.getMultiplier() == 1.3 );
    u = ud.getUnit(1);
    assertEquals( true, u.isSetExponent() );
    assertEquals( true, u.isSetScale() );
    assertEquals( true, u.isSetMultiplier() );
    assertTrue( u.getExponentAsDouble() == 1.5 );
    assertTrue( u.getScale() == 10 );
    assertTrue( u.getMultiplier() == 0.5 );
    u = ud.getUnit(2);
    assertEquals( true, u.isSetExponent() );
    assertEquals( true, u.isSetScale() );
    assertEquals( true, u.isSetMultiplier() );
    assertTrue( u.getExponent() == 1 );
    assertTrue( u.getScale() == 0 );
    assertTrue( u.getMultiplier() == 1 );
    assertTrue( m.getNumCompartments() == 2 );
    c = m.getCompartment(0);
    assertEquals( true, c.isSetSize() );
    assertEquals( true, c.isSetSpatialDimensions() );
    assertEquals( true, c.isSetConstant() );
    assertTrue( c.getId().equals( "cell") );
    assertTrue( c.getSize() == 1e-14 );
    assertTrue( c.getSpatialDimensions() == 3 );
    assertTrue( c.getSpatialDimensionsAsDouble() == 3 );
    assertTrue( c.getUnits().equals( "litre") );
    assertTrue( c.getConstant() == true );
    c = m.getCompartment(1);
    assertEquals( false, c.isSetSize() );
    assertEquals( true, c.isSetSpatialDimensions() );
    assertEquals( true, c.isSetConstant() );
    assertTrue( c.getId().equals( "comp") );
    assertTrue( c.getSpatialDimensionsAsDouble() == 4.6 );
    assertTrue( m.getNumConstraints() == 1 );
    con = m.getConstraint(0);
    assertTrue( con != null );
    ast = con.getMath();
    String formula = libsbml.formulaToString(ast);
    assertTrue(formula.equals( "lt(x, 3)"));
    assertTrue( m.getNumEvents() == 1 );
    e = m.getEvent(0);
    assertTrue( e != null );
    assertTrue( e.getId().equals( "e1") );
    assertTrue( e.getSBOTerm() == 231 );
    assertTrue( e.getSBOTermID().equals( "SBO:0000231") );
    assertEquals( true, e.isSetDelay() );
    delay = e.getDelay();
    assertTrue( delay != null );
    assertTrue( delay.getSBOTerm() == 64 );
    assertTrue( delay.getSBOTermID().equals( "SBO:0000064") );
    ast = delay.getMath();
    formula = libsbml.formulaToString(ast);
    assertTrue(formula.equals( "p + 3"));
    assertEquals( true, e.isSetPriority() );
    prior = e.getPriority();
    assertTrue( prior != null );
    assertTrue( prior.getSBOTerm() == 64 );
    assertTrue( prior.getSBOTermID().equals( "SBO:0000064") );
    ast = prior.getMath();
    formula = libsbml.formulaToString(ast);
    assertTrue(formula.equals( "1"));
    assertEquals( true, e.isSetTrigger() );
    trigger = e.getTrigger();
    assertTrue( trigger != null );
    ast = trigger.getMath();
    formula = libsbml.formulaToString(ast);
    assertTrue(formula.equals( "true"));
    loe = m.getListOfEvents();
    e1 = loe.get(0);
    assertTrue( e1.equals(e) );
    e1 = loe.get("e1");
    assertTrue( e1.equals(e) );
    assertTrue( e.getNumEventAssignments() == 1 );
    ea = e.getEventAssignment(0);
    assertTrue( ea != null );
    assertTrue( ea.getVariable().equals( "Keq") );
    assertTrue( ea.getSBOTerm() == 64 );
    assertTrue( ea.getSBOTermID().equals( "SBO:0000064") );
    ast = ea.getMath();
    formula = libsbml.formulaToString(ast);
    assertTrue(formula.equals( "X0 * p"));
    loea = e.getListOfEventAssignments();
    ea1 = loea.get(0);
    assertTrue( ea1.equals(ea) );
    ea1 = loea.get("Keq");
    assertTrue( ea1.equals(ea) );
    assertTrue( m.getNumFunctionDefinitions() == 1 );
    fd = m.getFunctionDefinition(0);
    assertTrue( fd != null );
    assertTrue( fd.getId().equals( "fd") );
    assertTrue( fd.getSBOTerm() == 64 );
    assertTrue( fd.getSBOTermID().equals( "SBO:0000064") );
    ast = fd.getMath();
    formula = libsbml.formulaToString(ast);
    assertTrue(formula.equals( "lambda(x, pow(x, 3))"));
    lofd = m.getListOfFunctionDefinitions();
    fd1 = lofd.get(0);
    assertTrue( fd1.equals(fd) );
    fd1 = lofd.get("fd");
    assertTrue( fd1.equals(fd) );
    assertTrue( m.getNumInitialAssignments() == 1 );
    ia = m.getInitialAssignment(0);
    assertTrue( ia != null );
    assertTrue( ia.getSymbol().equals( "p1") );
    ast = ia.getMath();
    formula = libsbml.formulaToString(ast);
    assertTrue(formula.equals( "x * p3"));
    assertTrue( m.getNumRules() == 3 );
    alg = (AlgebraicRule)  m.getRule(0);
    assertTrue( alg != null );
    assertTrue( alg.getSBOTerm() == 64 );
    assertTrue( alg.getSBOTermID().equals( "SBO:0000064") );
    ast = alg.getMath();
    formula = libsbml.formulaToString(ast);
    assertTrue(formula.equals( "pow(x, 3)"));
    ar = (AssignmentRule) m.getRule(1);
    assertTrue( ar != null );
    assertTrue( ar.getVariable().equals( "p2") );
    assertTrue( ar.getSBOTerm() == 64 );
    assertTrue( ar.getSBOTermID().equals( "SBO:0000064") );
    ast = ar.getMath();
    formula = libsbml.formulaToString(ast);
    assertTrue(formula.equals( "x * p3"));
    rr = (RateRule) m.getRule(2);
    assertTrue( rr != null );
    assertTrue( rr.getVariable().equals( "p3") );
    assertTrue( rr.getSBOTerm() == 64 );
    assertTrue( rr.getSBOTermID().equals( "SBO:0000064") );
    ast = rr.getMath();
    formula = libsbml.formulaToString(ast);
    assertTrue(formula.equals( "p1 / p"));
    assertTrue( m.getNumSpecies() == 2 );
    s = m.getSpecies(0);
    assertTrue( s != null );
    assertTrue( s.getId().equals( "X0") );
    assertTrue( s.getCompartment().equals( "comp") );
    assertEquals( true, s.isSetConversionFactor() );
    assertTrue( s.getConversionFactor().equals( "p") );
    assertEquals( true, s.isSetBoundaryCondition() );
    assertTrue( s.getBoundaryCondition() == false );
    assertEquals( true, s.isSetHasOnlySubstanceUnits() );
    assertTrue( s.getHasOnlySubstanceUnits() == false );
    assertEquals( true, s.isSetSubstanceUnits() );
    assertTrue( s.getSubstanceUnits().equals( "mole") );
    assertEquals( true, s.isSetConstant() );
    assertTrue( s.getConstant() == false );
    assertEquals( true, s.isSetInitialAmount() );
    assertTrue( s.getInitialAmount() == 0 );
    assertEquals( false, s.isSetInitialConcentration() );
    assertEquals( true, util_isNaN );
    assertTrue( m.getNumReactions() == 1 );
    r = m.getReaction(0);
    assertEquals( false, r.isSetFast() );
    assertTrue( r.getFast() == false );
    assertEquals( true, r.isSetReversible() );
    assertTrue( r.getReversible() == false );
    assertEquals( true, r.isSetCompartment() );
    assertTrue( r.getCompartment().equals( "comp") );
    sr = r.getReactant(0);
    assertEquals( true, sr.isSetConstant() );
    assertTrue( sr.getConstant() == true );
    assertEquals( true, sr.isSetStoichiometry() );
    assertTrue( sr.getStoichiometry() == 1 );
    sr = r.getProduct(0);
    assertEquals( true, sr.isSetConstant() );
    assertTrue( sr.getConstant() == false );
    assertEquals( false, sr.isSetStoichiometry() );
    assertEquals( true, util_isNaN );
    kl = r.getKineticLaw();
    assertTrue( kl.getNumLocalParameters() == 2 );
    assertTrue( kl.getNumParameters() == 2 );
    p = kl.getParameter(0);
    assertEquals( true, p.isSetUnits() );
    assertTrue( p.getUnits().equals( "per_second") );
    assertEquals( true, p.isSetValue() );
    assertTrue( p.getValue() == 0.1 );
    lp = kl.getLocalParameter(0);
    assertEquals( true, lp.isSetUnits() );
    assertTrue( lp.getUnits().equals( "per_second") );
    assertEquals( true, lp.isSetValue() );
    assertTrue( lp.getValue() == 0.1 );
    lp = kl.getLocalParameter(1);
    assertEquals( false, lp.isSetUnits() );
    assertTrue( lp.getUnits().equals( "") );
    assertEquals( false, lp.isSetValue() );
    assertEquals( true, util_isNaN );
    d = null;
  }

  /**
   * Loads the SWIG-generated libSBML Java module when this class is
   * loaded, or reports a sensible diagnostic message about why it failed.
   */
  static
  {
    String varname;
    String shlibname;

    if (System.getProperty("mrj.version") != null)
    {
      varname = "DYLD_LIBRARY_PATH";    // We're on a Mac.
      shlibname = "libsbmlj.jnilib and/or libsbml.dylib";
    }
    else
    {
      varname = "LD_LIBRARY_PATH";      // We're not on a Mac.
      shlibname = "libsbmlj.so and/or libsbml.so";
    }

    try
    {
      System.loadLibrary("sbmlj");
      // For extra safety, check that the jar file is in the classpath.
      Class.forName("org.sbml.libsbml.libsbml");
    }
    catch (SecurityException e)
    {
      e.printStackTrace();
      System.err.println("Could not load the libSBML library files due to a"+
                         " security exception.\n");
      System.exit(1);
    }
    catch (UnsatisfiedLinkError e)
    {
      e.printStackTrace();
      System.err.println("Error: could not link with the libSBML library files."+
                         " It is likely\nyour " + varname +
                         " environment variable does not include the directories\n"+
                         "containing the " + shlibname + " library files.\n");
      System.exit(1);
    }
    catch (ClassNotFoundException e)
    {
      e.printStackTrace();
      System.err.println("Error: unable to load the file libsbmlj.jar."+
                         " It is likely\nyour -classpath option and CLASSPATH" +
                         " environment variable\n"+
                         "do not include the path to libsbmlj.jar.\n");
      System.exit(1);
    }
  }
}
