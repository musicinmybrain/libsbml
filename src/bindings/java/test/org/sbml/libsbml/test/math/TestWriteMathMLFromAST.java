/*
 * @file    TestWriteMathMLFromAST.java
 * @brief   Write MathML unit tests starting from ASTNodes
 *
 * @author  Akiya Jouraku (Java conversion)
 * @author  Sarah Keating 
 * 
 * ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
 *
 * DO NOT EDIT THIS FILE.
 *
 * This file was generated automatically by converting the file located at
 * src/sbml/test/TestWriteMathMLFromAST.cpp
 * using the conversion program dev/utilities/translateTests/translateTests.pl.
 * Any changes made here will be lost the next time the file is regenerated.
 *
 * -----------------------------------------------------------------------------
 * This file is part of libSBML.  Please visit http://sbml.org for more
 * information about SBML, and the latest version of libSBML.
 *
 * Copyright 2005-2010 California Institute of Technology.
 * Copyright 2002-2005 California Institute of Technology and
 *                     Japan Science and Technology Corporation.
 * 
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation.  A copy of the license agreement is provided
 * in the file named "LICENSE.txt" included with this software distribution
 * and also available online as http://sbml.org/software/libsbml/license.html
 * -----------------------------------------------------------------------------
 */

package org.sbml.libsbml.test.math;

import org.sbml.libsbml.*;

import java.io.File;
import java.lang.AssertionError;

public class TestWriteMathMLFromAST {

  static void assertTrue(boolean condition) throws AssertionError
  {
    if (condition == true)
    {
      return;
    }
    throw new AssertionError();
  }

  static void assertEquals(Object a, Object b) throws AssertionError
  {
    if ( (a == null) && (b == null) )
    {
      return;
    }
    else if ( (a == null) || (b == null) )
    {
      throw new AssertionError();
    }
    else if (a.equals(b))
    {
      return;
    }

    throw new AssertionError();
  }

  static void assertNotEquals(Object a, Object b) throws AssertionError
  {
    if ( (a == null) && (b == null) )
    {
      throw new AssertionError();
    }
    else if ( (a == null) || (b == null) )
    {
      return;
    }
    else if (a.equals(b))
    {
      throw new AssertionError();
    }
  }

  static void assertEquals(boolean a, boolean b) throws AssertionError
  {
    if ( a == b )
    {
      return;
    }
    throw new AssertionError();
  }

  static void assertNotEquals(boolean a, boolean b) throws AssertionError
  {
    if ( a != b )
    {
      return;
    }
    throw new AssertionError();
  }

  static void assertEquals(int a, int b) throws AssertionError
  {
    if ( a == b )
    {
      return;
    }
    throw new AssertionError();
  }

  static void assertNotEquals(int a, int b) throws AssertionError
  {
    if ( a != b )
    {
      return;
    }
    throw new AssertionError();
  }
  private ASTNode N;
  private String S;

  public String MATHML_FOOTER()
  {
    return "</math>";
  }

  public String MATHML_HEADER()
  {
    return "<math xmlns=\"http://www.w3.org/1998/Math/MathML\">\n";
  }

  public String MATHML_HEADER_UNITS()
  {
    return "<math xmlns=\"http://www.w3.org/1998/Math/MathML\"";
  }

  public String MATHML_HEADER_UNITS2()
  {
    return " xmlns:sbml=\"http://www.sbml.org/sbml/level3/version2/core\">\n";
  }

  public String XML_HEADER()
  {
    return "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
  }

  public String wrapMathML(String s)
  {
    String r = XML_HEADER();
    r += MATHML_HEADER();
    r += s;
    r += MATHML_FOOTER();
    return r;
  }

  public String wrapMathMLUnits(String s)
  {
    String r = XML_HEADER();
    r += MATHML_HEADER_UNITS();
    r += MATHML_HEADER_UNITS2();
    r += s;
    r += MATHML_FOOTER();
    return r;
  }

  protected void setUp() throws Exception
  {
    N = null;
    S = null;
  }

  protected void tearDown() throws Exception
  {
    S = null;
  }

  public void test_MathMLFromAST_ci()
  {
    String expected = wrapMathML("  <ci> foo </ci>\n");
    N = new ASTNode(libsbml.AST_NAME);
    N.setName("foo");
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_ci_class()
  {
    String expected = wrapMathML("  <ci class=\"test\"> foo </ci>\n");
    N = new ASTNode(libsbml.AST_NAME);
    N.setName("foo");
    assertTrue( N.setClass("test") == libsbml.LIBSBML_OPERATION_SUCCESS );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_ci_definitionURL()
  {
    String expected = wrapMathML("  <ci definitionURL=\"http://someurl\"> foo </ci>\n");
    N = new ASTNode(libsbml.AST_NAME);
    N.setName("foo");
    XMLAttributes xml = new XMLAttributes();
    xml.add("", "http://someurl");
    N.setDefinitionURL(xml);
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_ci_id()
  {
    String expected = wrapMathML("  <ci id=\"test\"> foo </ci>\n");
    N = new ASTNode(libsbml.AST_NAME);
    N.setName("foo");
    assertTrue( N.setId("test") == libsbml.LIBSBML_OPERATION_SUCCESS );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_ci_style()
  {
    String expected = wrapMathML("  <ci style=\"test\"> foo </ci>\n");
    N = new ASTNode(libsbml.AST_NAME);
    N.setName("foo");
    assertTrue( N.setStyle("test") == libsbml.LIBSBML_OPERATION_SUCCESS );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_cn_e_notation_1()
  {
    String expected = wrapMathML("  <cn type=\"e-notation\"> 0 <sep/> 3 </cn>\n"  
    );
    N = new ASTNode(libsbml.AST_REAL_E);
    N.setValue(0.0,3);
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_cn_e_notation_2()
  {
    String expected = wrapMathML("  <cn> 2000 </cn>\n"  
    );
    N = new ASTNode(libsbml.AST_REAL_E);
    N.setValue(2e3);
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_cn_e_notation_3()
  {
    String expected = wrapMathML("  <cn type=\"e-notation\"> 1234567.8 <sep/> 3 </cn>\n"  
    );
    N = new ASTNode(libsbml.AST_REAL_E);
    N.setValue(1234567.8,3);
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_cn_e_notation_4()
  {
    String expected = wrapMathML("  <cn type=\"e-notation\"> 6.0221367 <sep/> 23 </cn>\n"  
    );
    N = new ASTNode(libsbml.AST_REAL_E);
    N.setValue(6.0221367,23);
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_cn_e_notation_5()
  {
    String expected = wrapMathML("  <cn type=\"e-notation\"> 4 <sep/> -6 </cn>\n"  
    );
    N = new ASTNode(libsbml.AST_REAL_E);
    N.setValue(0.000004);
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_cn_e_notation_6()
  {
    String expected = wrapMathML("  <cn type=\"e-notation\"> 4 <sep/> -12 </cn>\n"  
    );
    N = new ASTNode(libsbml.AST_REAL_E);
    N.setValue(0.000004,-6);
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_cn_e_notation_7()
  {
    String expected = wrapMathML("  <cn type=\"e-notation\"> -1 <sep/> -6 </cn>\n"  
    );
    N = new ASTNode(libsbml.AST_REAL_E);
    N.setValue(-1.0,-6);
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_cn_integer()
  {
    String expected = wrapMathML("  <cn type=\"integer\"> 5 </cn>\n");
    N = new ASTNode(libsbml.AST_INTEGER);
    N.setValue((long)(5));
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_cn_rational()
  {
    String expected = wrapMathML("  <cn type=\"rational\"> 1 <sep/> 3 </cn>\n"  
    );
    N = new ASTNode(libsbml.AST_RATIONAL);
    N.setValue(long,3);
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_cn_real_1()
  {
    String expected = wrapMathML("  <cn> 1.2 </cn>\n");
    N = new ASTNode(libsbml.AST_REAL);
    N.setValue(1.2);
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_cn_real_2()
  {
    String expected = wrapMathML("  <cn> 1234567.8 </cn>\n");
    N = new ASTNode(libsbml.AST_REAL);
    N.setValue(1234567.8);
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_cn_real_3()
  {
    String expected = wrapMathML("  <cn> -3.14 </cn>\n");
    N = new ASTNode(libsbml.AST_REAL);
    N.setValue(-3.14);
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_cn_real_locale()
  {
    String expected = wrapMathML("  <cn> 2.72 </cn>\n");
    N = new ASTNode(libsbml.AST_REAL);
    N.setValue(2.72);
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_cn_units()
  {
    String expected = wrapMathMLUnits("  <cn sbml:units=\"mole\"> 1.2 </cn>\n");
    N = new ASTNode(libsbml.AST_REAL);
    N.setValue(1.2);
    N.setUnits("mole");
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_constant_exponentiale()
  {
    String expected = wrapMathML("  <exponentiale/>\n");
    N = new ASTNode(libsbml.AST_CONSTANT_E);
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_constant_false()
  {
    String expected = wrapMathML("  <false/>\n");
    N = new ASTNode(libsbml.AST_CONSTANT_FALSE);
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_constant_infinity()
  {
    String expected = wrapMathML("  <infinity/>\n");
    N = new ASTNode();
    N.setValue( util_PosInf() );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_constant_infinity_neg()
  {
    String expected = wrapMathML("  <apply> <minus/> <infinity/> </apply>\n"  
    );
    N = new ASTNode();
    N.setValue(- util_PosInf());
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_constant_infinity_neg1()
  {
    String expected = wrapMathML("  <apply> <minus/> <infinity/> </apply>\n"  
    );
    N = new ASTNode(libsbml.AST_REAL);
    N.setValue(- util_PosInf());
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_constant_notanumber()
  {
    String expected = wrapMathML("  <notanumber/>\n");
    N = new ASTNode(libsbml.AST_REAL);
    N.setValue( util_NaN() );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_constant_pi()
  {
    String expected = wrapMathML("  <pi/>\n");
    N = new ASTNode(libsbml.AST_CONSTANT_PI);
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_constant_true()
  {
    String expected = wrapMathML("  <true/>\n");
    N = new ASTNode(libsbml.AST_CONSTANT_TRUE);
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_csymbol_avogadro()
  {
    String expected = wrapMathML("  <csymbol encoding=\"text\" " + "definitionURL=\"http://www.sbml.org/sbml/symbols/avogadro\"> NA </csymbol>\n");
    N = new ASTNode(libsbml.AST_NAME_AVOGADRO);
    N.setName("NA");
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_csymbol_delay()
  {
    String expected = wrapMathML("  <apply>\n" + 
    "    <csymbol encoding=\"text\" definitionURL=\"http://www.sbml.org/sbml/" + 
    "symbols/delay\"> my_delay </csymbol>\n" + 
    "    <ci> x </ci>\n" + 
    "    <cn> 0.1 </cn>\n" + 
    "  </apply>\n");
    N = new ASTNode(libsbml.AST_FUNCTION_DELAY);
    assertTrue( N.setName("my_delay") == libsbml.LIBSBML_OPERATION_SUCCESS );
    ASTNode c1 = new ASTNode(libsbml.AST_NAME);
    assertTrue( c1.setName("x") == libsbml.LIBSBML_OPERATION_SUCCESS );
    ASTNode c2 = new ASTNode(libsbml.AST_REAL);
    assertTrue( c2.setValue(0.1) == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.addChild(c1) == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.addChild(c2) == libsbml.LIBSBML_OPERATION_SUCCESS );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_csymbol_rateof()
  {
    String expected = wrapMathML("  <apply>\n" + 
    "    <csymbol encoding=\"text\" definitionURL=\"http://www.sbml.org/sbml/" + 
    "symbols/rateOf\"> my_delay </csymbol>\n" + 
    "    <ci> x </ci>\n" + 
    "  </apply>\n");
    N = new ASTNode(libsbml.AST_FUNCTION_RATE_OF);
    assertTrue( N.setName("my_delay") == libsbml.LIBSBML_OPERATION_SUCCESS );
    ASTNode c1 = new ASTNode(libsbml.AST_NAME);
    assertTrue( c1.setName("x") == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.addChild(c1) == libsbml.LIBSBML_OPERATION_SUCCESS );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_csymbol_time()
  {
    String expected = wrapMathML("  <csymbol encoding=\"text\" " + "definitionURL=\"http://www.sbml.org/sbml/symbols/time\"> t </csymbol>\n");
    N = new ASTNode(libsbml.AST_NAME_TIME);
    N.setName("t");
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_csymbol_time_no_name()
  {
    String expected = wrapMathML("  <csymbol encoding=\"text\" " + "definitionURL=\"http://www.sbml.org/sbml/symbols/time\"/>\n");
    N = new ASTNode(libsbml.AST_NAME_TIME);
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_func_style()
  {
    String expected = wrapMathML("  <apply>\n" + 
    "    <sin style=\"a\"/>\n" + 
    "    <cn type=\"integer\"> 1 </cn>\n" + 
    "  </apply>\n");
    N = new ASTNode(libsbml.AST_FUNCTION_SIN);
    N.setStyle("a");
    ASTNode c = new ASTNode(libsbml.AST_INTEGER);
    c.setValue((int)(1));
    N.addChild(c);
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_function_1()
  {
    String expected = wrapMathML("  <apply>\n" + 
    "    <ci> foo </ci>\n" + 
    "    <cn type=\"integer\"> 1 </cn>\n" + 
    "    <cn type=\"integer\"> 2 </cn>\n" + 
    "    <cn type=\"integer\"> 3 </cn>\n" + 
    "  </apply>\n");
    N = new ASTNode(libsbml.AST_FUNCTION);
    assertTrue( N.setName("foo") == libsbml.LIBSBML_OPERATION_SUCCESS );
    ASTNode c1 = new ASTNode(libsbml.AST_INTEGER);
    c1.setValue(long);
    ASTNode c2 = new ASTNode(libsbml.AST_INTEGER);
    c2.setValue(long);
    ASTNode c3 = new ASTNode(libsbml.AST_INTEGER);
    c3.setValue(long);
    assertTrue( N.addChild(c1) == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.addChild(c2) == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.addChild(c3) == libsbml.LIBSBML_OPERATION_SUCCESS );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_function_2()
  {
    String expected = wrapMathML("  <apply>\n" + 
    "    <ci> foo </ci>\n" + 
    "    <cn type=\"integer\"> 1 </cn>\n" + 
    "    <cn type=\"integer\"> 2 </cn>\n" + 
    "    <apply>\n" + 
    "      <ci> bar </ci>\n" + 
    "      <ci> z </ci>\n" + 
    "    </apply>\n" + 
    "  </apply>\n");
    N = new ASTNode(libsbml.AST_FUNCTION);
    assertTrue( N.setName("foo") == libsbml.LIBSBML_OPERATION_SUCCESS );
    ASTNode c1 = new ASTNode(libsbml.AST_INTEGER);
    c1.setValue(long);
    ASTNode c2 = new ASTNode(libsbml.AST_INTEGER);
    c2.setValue(long);
    ASTNode bar = new ASTNode(libsbml.AST_FUNCTION);
    bar.setName("bar");
    ASTNode cz = new ASTNode(libsbml.AST_NAME);
    cz.setName("z");
    assertTrue( bar.addChild(cz) == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.addChild(c1) == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.addChild(c2) == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.addChild(bar) == libsbml.LIBSBML_OPERATION_SUCCESS );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_generic_csymbol()
  {
    String expected = wrapMathML("  <apply>\n" + 
    "    <csymbol encoding=\"text\" definitionURL=\"http://www.sbml.org/sbml/" + 
    "symbols/some/unknown/URL\"> unknown_function </csymbol>\n" + 
    "    <ci> x </ci>\n" + 
    "    <cn> 0.1 </cn>\n" + 
    "  </apply>\n");
    N = new ASTNode(libsbml.AST_CSYMBOL_FUNCTION);
    assertTrue( N.setName("unknown_function") == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.setDefinitionURL("http://www.sbml.org/sbml/symbols/some/unknown/URL") == libsbml.LIBSBML_OPERATION_SUCCESS );
    ASTNode c1 = new ASTNode(libsbml.AST_NAME);
    assertTrue( c1.setName("x") == libsbml.LIBSBML_OPERATION_SUCCESS );
    ASTNode c2 = new ASTNode(libsbml.AST_REAL);
    assertTrue( c2.setValue(0.1) == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.addChild(c1) == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.addChild(c2) == libsbml.LIBSBML_OPERATION_SUCCESS );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_implies()
  {
    String expected = wrapMathML("  <apply>\n" + 
    "    <implies/>\n" + 
    "    <cn type=\"integer\"> 1 </cn>\n" + 
    "    <cn type=\"integer\"> 2 </cn>\n" + 
    "    <cn type=\"integer\"> 3 </cn>\n" + 
    "  </apply>\n");
    N = new ASTNode(libsbml.AST_LOGICAL_IMPLIES);
    ASTNode c1 = new ASTNode(libsbml.AST_INTEGER);
    c1.setValue(long);
    ASTNode c2 = new ASTNode(libsbml.AST_INTEGER);
    c2.setValue(long);
    ASTNode c3 = new ASTNode(libsbml.AST_INTEGER);
    c3.setValue(long);
    assertTrue( N.addChild(c1) == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.addChild(c2) == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.addChild(c3) == libsbml.LIBSBML_OPERATION_SUCCESS );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_lambda()
  {
    String expected = wrapMathML("  <lambda>\n" + 
    "    <bvar>\n" + 
    "      <ci> x </ci>\n" + 
    "    </bvar>\n" + 
    "    <bvar>\n" + 
    "      <ci> y </ci>\n" + 
    "    </bvar>\n" + 
    "    <apply>\n" + 
    "      <plus/>\n" + 
    "      <ci> x </ci>\n" + 
    "      <ci> y </ci>\n" + 
    "    </apply>\n" + 
    "  </lambda>\n");
    N = new ASTNode(libsbml.AST_LAMBDA);
    ASTNode c1_1 = new ASTNode(libsbml.AST_NAME);
    c1_1.setName("x");
    ASTNode c2_1 = new ASTNode(libsbml.AST_NAME);
    c2_1.setName("y");
    ASTNode c3 = new ASTNode(libsbml.AST_PLUS);
    ASTNode c3_1 = new ASTNode(libsbml.AST_NAME);
    c3_1.setName("x");
    ASTNode c3_2 = new ASTNode(libsbml.AST_NAME);
    c3_2.setName("y");
    c3.addChild(c3_1);
    c3.addChild(c3_2);
    N.addChild(c1_1);
    N.addChild(c2_1);
    N.addChild(c3);
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_lambda1()
  {
    String expected = wrapMathML("  <lambda>\n" + 
    "    <bvar>\n" + 
    "      <ci> x </ci>\n" + 
    "    </bvar>\n" + 
    "    <bvar>\n" + 
    "      <ci> y </ci>\n" + 
    "    </bvar>\n" + 
    "    <apply>\n" + 
    "      <plus/>\n" + 
    "      <ci> x </ci>\n" + 
    "      <ci> y </ci>\n" + 
    "    </apply>\n" + 
    "  </lambda>\n");
    N = new ASTNode(libsbml.AST_LAMBDA);
    ASTNode c1_1 = new ASTNode(libsbml.AST_NAME);
    c1_1.setName("x");
    ASTNode c2_1 = new ASTNode(libsbml.AST_NAME);
    c2_1.setName("y");
    ASTNode c3 = new ASTNode(libsbml.AST_PLUS);
    ASTNode c3_1 = new ASTNode(libsbml.AST_NAME);
    c3_1.setName("x");
    ASTNode c3_2 = new ASTNode(libsbml.AST_NAME);
    c3_2.setName("y");
    c3.addChild(c3_1);
    c3.addChild(c3_2);
    N.addChild(c1_1);
    N.addChild(c2_1);
    N.addChild(c3);
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_lambda_no_bvars()
  {
    String expected = wrapMathML("  <lambda>\n" + 
    "    <apply>\n" + 
    "      <plus/>\n" + 
    "      <cn type=\"integer\"> 2 </cn>\n" + 
    "      <cn type=\"integer\"> 2 </cn>\n" + 
    "    </apply>\n" + 
    "  </lambda>\n");
    N = new ASTNode(libsbml.AST_LAMBDA);
    ASTNode c3 = new ASTNode(libsbml.AST_PLUS);
    ASTNode c3_1 = new ASTNode(libsbml.AST_INTEGER);
    c3_1.setValue(2);
    ASTNode c3_2 = new ASTNode(libsbml.AST_INTEGER);
    c3_2.setValue(2);
    c3.addChild(c3_1);
    c3.addChild(c3_2);
    N.addChild(c3);
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_log()
  {
    String expected = wrapMathML("  <apply>\n" + 
    "    <log/>\n" + 
    "    <logbase>\n" + 
    "      <cn type=\"integer\"> 2 </cn>\n" + 
    "    </logbase>\n" + 
    "    <ci> N </ci>\n" + 
    "  </apply>\n");
    N = new ASTNode(libsbml.AST_FUNCTION_LOG);
    ASTNode c1_1 = new ASTNode(libsbml.AST_INTEGER);
    assertTrue( c1_1.setValue(2) == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.addChild(c1_1) == libsbml.LIBSBML_OPERATION_SUCCESS );
    ASTNode c2 = new ASTNode(libsbml.AST_NAME);
    assertTrue( c2.setName("N") == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.addChild(c2) == libsbml.LIBSBML_OPERATION_SUCCESS );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_log_2()
  {
    String expected = wrapMathML("  <apply>\n" + 
    "    <log/>\n" + 
    "    <logbase>\n" + 
    "      <ci> x </ci>\n" + 
    "    </logbase>\n" + 
    "    <ci> N </ci>\n" + 
    "  </apply>\n");
    N = new ASTNode(libsbml.AST_FUNCTION_LOG);
    ASTNode c1 = new ASTNode(libsbml.AST_NAME);
    assertTrue( c1.setName("x") == libsbml.LIBSBML_OPERATION_SUCCESS );
    ASTNode c2 = new ASTNode(libsbml.AST_NAME);
    assertTrue( c2.setName("N") == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.addChild(c1) == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.addChild(c2) == libsbml.LIBSBML_OPERATION_SUCCESS );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_log_3()
  {
    String expected = wrapMathML("  <apply>\n" + 
    "    <log/>\n" + 
    "  </apply>\n");
    N = new ASTNode(libsbml.AST_FUNCTION_LOG);
    ASTNode c2 = new ASTNode(libsbml.AST_NAME);
    assertTrue( c2.setName("N") == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.addChild(c2) == libsbml.LIBSBML_OPERATION_SUCCESS );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_log_4()
  {
    String expected = wrapMathML("  <apply>\n" + 
    "    <log/>\n" + 
    "    <logbase>\n" + 
    "      <cn type=\"integer\"> 10 </cn>\n" + 
    "    </logbase>\n" + 
    "    <ci> N </ci>\n" + 
    "  </apply>\n");
    N = new ASTNode(libsbml.AST_FUNCTION_LOG);
    ASTNode c1_1 = new ASTNode(libsbml.AST_INTEGER);
    assertTrue( c1_1.setValue(10) == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.addChild(c1_1) == libsbml.LIBSBML_OPERATION_SUCCESS );
    ASTNode c2 = new ASTNode(libsbml.AST_NAME);
    assertTrue( c2.setName("N") == libsbml.LIBSBML_OPERATION_SUCCESS );
    ASTNode c3 = new ASTNode(libsbml.AST_NAME);
    assertTrue( c3.setName("x") == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.addChild(c3) == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.addChild(c2) == libsbml.LIBSBML_OPERATION_SUCCESS );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_max()
  {
    String expected = wrapMathML("  <apply>\n" + 
    "    <max/>\n" + 
    "    <cn type=\"integer\"> 1 </cn>\n" + 
    "    <cn type=\"integer\"> 2 </cn>\n" + 
    "  </apply>\n");
    N = new ASTNode(libsbml.AST_FUNCTION_MAX);
    ASTNode c1 = new ASTNode(libsbml.AST_INTEGER);
    c1.setValue(long);
    ASTNode c2 = new ASTNode(libsbml.AST_INTEGER);
    c2.setValue(long);
    assertTrue( N.addChild(c1) == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.addChild(c2) == libsbml.LIBSBML_OPERATION_SUCCESS );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_min()
  {
    String expected = wrapMathML("  <apply>\n" + 
    "    <min/>\n" + 
    "    <cn type=\"integer\"> 1 </cn>\n" + 
    "    <cn type=\"integer\"> 2 </cn>\n" + 
    "  </apply>\n");
    N = new ASTNode(libsbml.AST_FUNCTION_MIN);
    ASTNode c1 = new ASTNode(libsbml.AST_INTEGER);
    c1.setValue(long);
    ASTNode c2 = new ASTNode(libsbml.AST_INTEGER);
    c2.setValue(long);
    assertTrue( N.addChild(c1) == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.addChild(c2) == libsbml.LIBSBML_OPERATION_SUCCESS );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_minus()
  {
    String expected = wrapMathML("  <apply>\n" + 
    "    <minus/>\n" + 
    "    <cn type=\"integer\"> 1 </cn>\n" + 
    "    <cn type=\"integer\"> 2 </cn>\n" + 
    "  </apply>\n");
    N = new ASTNode(libsbml.AST_MINUS);
    ASTNode c1 = new ASTNode(libsbml.AST_INTEGER);
    c1.setValue(long);
    ASTNode c2 = new ASTNode(libsbml.AST_INTEGER);
    c2.setValue(long);
    N.addChild(c1);
    N.addChild(c2);
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_minus_unary_1()
  {
    String expected = wrapMathML("  <cn type=\"integer\"> -2 </cn>\n"  
    );
    N = new ASTNode(libsbml.AST_INTEGER);
    N.setValue(-2);
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_minus_unary_2()
  {
    String expected = wrapMathML("  <apply>\n" + 
    "    <minus/>\n" + 
    "    <ci> a </ci>\n" + 
    "  </apply>\n");
    N = new ASTNode(libsbml.AST_MINUS);
    ASTNode c1 = new ASTNode(libsbml.AST_NAME);
    c1.setName("a");
    N.addChild(c1);
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_nested_funcs()
  {
    String expected = wrapMathML("  <apply>\n" + 
    "    <divide/>\n" + 
    "    <cn type=\"integer\"> 1 </cn>\n" + 
    "    <apply>\n" + 
    "      <sin/>\n" + 
    "      <cn type=\"rational\"> 3 <sep/> 5 </cn>\n" + 
    "    </apply>\n" + 
    "  </apply>\n");
    N = new ASTNode(libsbml.AST_DIVIDE);
    ASTNode c1 = new ASTNode(libsbml.AST_INTEGER);
    c1.setValue(long);
    ASTNode c2 = new ASTNode(libsbml.AST_RATIONAL);
    c2.setValue(long,long);
    ASTNode sin = new ASTNode(libsbml.AST_FUNCTION_SIN);
    sin.addChild(c2);
    N.addChild(c1);
    N.addChild(sin);
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_piecewise1()
  {
    String expected = wrapMathML("  <piecewise>\n" + 
    "    <piece>\n" + 
    "      <cn type=\"integer\"> 0 </cn>\n" + 
    "      <apply>\n" + 
    "        <lt/>\n" + 
    "        <ci> x </ci>\n" + 
    "        <cn type=\"integer\"> 0 </cn>\n" + 
    "      </apply>\n" + 
    "    </piece>\n" + 
    "    <piece>\n" + 
    "      <cn type=\"integer\"> 0 </cn>\n" + 
    "      <apply>\n" + 
    "        <eq/>\n" + 
    "        <ci> x </ci>\n"  + 
    "        <cn type=\"integer\"> 0 </cn>\n" + 
    "      </apply>\n" + 
    "    </piece>\n" + 
    "  </piecewise>\n");
    N = new ASTNode(libsbml.AST_FUNCTION_PIECEWISE);
    ASTNode c1 = new ASTNode(libsbml.AST_INTEGER);
    c1.setValue(0);
    ASTNode c2 = new ASTNode(libsbml.AST_RELATIONAL_LT);
    ASTNode c2_1 = new ASTNode(libsbml.AST_NAME);
    c2_1.setName("x");
    ASTNode c2_2 = new ASTNode(libsbml.AST_INTEGER);
    c2_2.setValue(0);
    c2.addChild(c2_1);
    c2.addChild(c2_2);
    ASTNode c3 = new ASTNode(libsbml.AST_INTEGER);
    c3.setValue(0);
    ASTNode c4 = new ASTNode(libsbml.AST_RELATIONAL_EQ);
    ASTNode c4_1 = new ASTNode(libsbml.AST_NAME);
    c4_1.setName("x");
    ASTNode c4_4 = new ASTNode(libsbml.AST_INTEGER);
    c4_4.setValue(0);
    c4.addChild(c4_1);
    c4.addChild(c4_4);
    N.addChild(c1);
    N.addChild(c2);
    N.addChild(c3);
    N.addChild(c4);
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_piecewise_no_piece1()
  {
    String expected = wrapMathML("  <piecewise>\n" + 
    "    <otherwise>\n" + 
    "      <ci> x </ci>\n"  + 
    "    </otherwise>\n" + 
    "  </piecewise>\n");
    N = new ASTNode(libsbml.AST_FUNCTION_PIECEWISE);
    ASTNode c3 = new ASTNode(libsbml.AST_NAME);
    c3.setName("x");
    N.addChild(c3);
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_piecewise_otherwise1()
  {
    String expected = wrapMathML("  <piecewise>\n" + 
    "    <piece>\n" + 
    "      <cn type=\"integer\"> 0 </cn>\n" + 
    "      <apply>\n" + 
    "        <lt/>\n" + 
    "        <ci> x </ci>\n" + 
    "        <cn type=\"integer\"> 0 </cn>\n" + 
    "      </apply>\n" + 
    "    </piece>\n" + 
    "    <otherwise>\n" + 
    "      <ci> x </ci>\n"  + 
    "    </otherwise>\n" + 
    "  </piecewise>\n");
    N = new ASTNode(libsbml.AST_FUNCTION_PIECEWISE);
    ASTNode c1 = new ASTNode(libsbml.AST_INTEGER);
    c1.setValue(0);
    ASTNode c2 = new ASTNode(libsbml.AST_RELATIONAL_LT);
    ASTNode c2_1 = new ASTNode(libsbml.AST_NAME);
    c2_1.setName("x");
    ASTNode c2_2 = new ASTNode(libsbml.AST_INTEGER);
    c2_2.setValue(0);
    c2.addChild(c2_1);
    c2.addChild(c2_2);
    ASTNode c3 = new ASTNode(libsbml.AST_NAME);
    c3.setName("x");
    N.addChild(c1);
    N.addChild(c2);
    N.addChild(c3);
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_plus_binary()
  {
    String expected = wrapMathML("  <apply>\n" + 
    "    <plus/>\n" + 
    "    <cn type=\"integer\"> 1 </cn>\n" + 
    "    <cn type=\"integer\"> 2 </cn>\n" + 
    "  </apply>\n");
    N = new ASTNode(libsbml.AST_PLUS);
    ASTNode c1 = new ASTNode(libsbml.AST_INTEGER);
    c1.setValue(long);
    ASTNode c2 = new ASTNode(libsbml.AST_INTEGER);
    c2.setValue(long);
    N.addChild(c1);
    N.addChild(c2);
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_plus_nary_1()
  {
    String expected = wrapMathML("  <apply>\n" + 
    "    <plus/>\n" + 
    "    <cn type=\"integer\"> 1 </cn>\n" + 
    "    <cn type=\"integer\"> 2 </cn>\n" + 
    "    <cn type=\"integer\"> 3 </cn>\n" + 
    "  </apply>\n");
    N = new ASTNode(libsbml.AST_PLUS);
    ASTNode c1 = new ASTNode(libsbml.AST_INTEGER);
    c1.setValue(long);
    ASTNode c2 = new ASTNode(libsbml.AST_INTEGER);
    c2.setValue(long);
    ASTNode c3 = new ASTNode(libsbml.AST_INTEGER);
    c3.setValue(long);
    N.addChild(c1);
    N.addChild(c2);
    N.addChild(c3);
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_plus_nary_2()
  {
    String expected = wrapMathML("  <apply>\n" + 
    "    <plus/>\n" + 
    "    <cn type=\"integer\"> 1 </cn>\n" + 
    "    <cn type=\"integer\"> 2 </cn>\n" + 
    "    <cn type=\"integer\"> 3 </cn>\n" + 
    "  </apply>\n");
    N = new ASTNode(libsbml.AST_PLUS);
    ASTNode c1 = new ASTNode(libsbml.AST_INTEGER);
    c1.setValue(long);
    ASTNode c2 = new ASTNode(libsbml.AST_INTEGER);
    c2.setValue(long);
    ASTNode c3 = new ASTNode(libsbml.AST_INTEGER);
    c3.setValue(long);
    ASTNode plus = new ASTNode(libsbml.AST_PLUS);
    plus.addChild(c1);
    plus.addChild(c2);
    N.addChild(plus);
    N.addChild(c3);
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_plus_nary_3()
  {
    String expected = wrapMathML("  <apply>\n" + 
    "    <plus/>\n" + 
    "    <cn type=\"integer\"> 1 </cn>\n" + 
    "    <cn type=\"integer\"> 2 </cn>\n" + 
    "    <cn type=\"integer\"> 3 </cn>\n" + 
    "  </apply>\n");
    N = new ASTNode(libsbml.AST_PLUS);
    ASTNode c1 = new ASTNode(libsbml.AST_INTEGER);
    c1.setValue(long);
    ASTNode c2 = new ASTNode(libsbml.AST_INTEGER);
    c2.setValue(long);
    ASTNode c3 = new ASTNode(libsbml.AST_INTEGER);
    c3.setValue(long);
    ASTNode plus = new ASTNode(libsbml.AST_PLUS);
    plus.addChild(c2);
    plus.addChild(c3);
    N.addChild(c1);
    N.addChild(plus);
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_plus_nary_4()
  {
    String expected = wrapMathML("  <apply>\n" + 
    "    <plus/>\n" + 
    "    <cn type=\"integer\"> 1 </cn>\n" + 
    "    <cn type=\"integer\"> 2 </cn>\n" + 
    "    <apply>\n" + 
    "      <times/>\n" + 
    "      <ci> x </ci>\n" + 
    "      <ci> y </ci>\n" + 
    "      <ci> z </ci>\n" + 
    "    </apply>\n" + 
    "    <cn type=\"integer\"> 3 </cn>\n" + 
    "  </apply>\n");
    N = new ASTNode(libsbml.AST_PLUS);
    ASTNode c1 = new ASTNode(libsbml.AST_INTEGER);
    c1.setValue(long);
    ASTNode c2 = new ASTNode(libsbml.AST_INTEGER);
    c2.setValue(long);
    ASTNode c3 = new ASTNode(libsbml.AST_INTEGER);
    c3.setValue(long);
    ASTNode cx = new ASTNode(libsbml.AST_NAME);
    cx.setName("x");
    ASTNode cy = new ASTNode(libsbml.AST_NAME);
    cy.setName("y");
    ASTNode cz = new ASTNode(libsbml.AST_NAME);
    cz.setName("z");
    ASTNode times = new ASTNode(libsbml.AST_TIMES);
    times.addChild(cx);
    times.addChild(cy);
    times.addChild(cz);
    N.addChild(c1);
    N.addChild(c2);
    N.addChild(times);
    N.addChild(c3);
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_plus_nary_5()
  {
    String expected = wrapMathML("  <apply>\n" + 
    "    <plus/>\n" + 
    "    <cn type=\"integer\"> 1 </cn>\n" + 
    "    <cn type=\"integer\"> 4 </cn>\n" + 
    "    <cn type=\"integer\"> 5 </cn>\n" + 
    "    <cn type=\"integer\"> 3 </cn>\n" + 
    "    <cn type=\"integer\"> 2 </cn>\n" + 
    "  </apply>\n");
    N = new ASTNode(libsbml.AST_PLUS);
    ASTNode c1 = new ASTNode(libsbml.AST_INTEGER);
    c1.setValue(1);
    ASTNode c2 = new ASTNode(libsbml.AST_INTEGER);
    c2.setValue(2);
    ASTNode c3 = new ASTNode(libsbml.AST_INTEGER);
    c3.setValue(3);
    ASTNode c4 = new ASTNode(libsbml.AST_INTEGER);
    c4.setValue(4);
    ASTNode c5 = new ASTNode(libsbml.AST_INTEGER);
    c5.setValue(5);
    ASTNode plus = new ASTNode(libsbml.AST_PLUS);
    plus.addChild(c4);
    plus.addChild(c5);
    ASTNode plus1 = new ASTNode(libsbml.AST_PLUS);
    plus1.addChild(plus);
    plus1.addChild(c3);
    ASTNode plus2 = new ASTNode(libsbml.AST_PLUS);
    plus2.addChild(plus1);
    plus2.addChild(c2);
    N.addChild(c1);
    N.addChild(plus2);
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_quotient()
  {
    String expected = wrapMathML("  <apply>\n" + 
    "    <quotient/>\n" + 
    "    <cn type=\"integer\"> 1 </cn>\n" + 
    "    <cn type=\"integer\"> 2 </cn>\n" + 
    "  </apply>\n");
    N = new ASTNode(libsbml.AST_FUNCTION_QUOTIENT);
    ASTNode c1 = new ASTNode(libsbml.AST_INTEGER);
    c1.setValue(long);
    ASTNode c2 = new ASTNode(libsbml.AST_INTEGER);
    c2.setValue(long);
    assertTrue( N.addChild(c1) == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.addChild(c2) == libsbml.LIBSBML_OPERATION_SUCCESS );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_rem()
  {
    String expected = wrapMathML("  <apply>\n" + 
    "    <rem/>\n" + 
    "    <cn type=\"integer\"> 1 </cn>\n" + 
    "    <cn type=\"integer\"> 2 </cn>\n" + 
    "  </apply>\n");
    N = new ASTNode(libsbml.AST_FUNCTION_REM);
    ASTNode c1 = new ASTNode(libsbml.AST_INTEGER);
    c1.setValue(long);
    ASTNode c2 = new ASTNode(libsbml.AST_INTEGER);
    c2.setValue(long);
    assertTrue( N.addChild(c1) == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.addChild(c2) == libsbml.LIBSBML_OPERATION_SUCCESS );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_replaceIDWithFunction_2()
  {
    String expected = wrapMathML("  <apply>\n" + 
    "    <power/>\n" + 
    "    <apply>\n" + 
    "      <plus/>\n" + 
    "      <cn> 1 </cn>\n" + 
    "    </apply>\n" + 
    "    <cn> 2 </cn>\n" + 
    "  </apply>\n");
    String original = wrapMathML("  <apply>\n" + 
    "    <power/>\n" + 
    "    <ci> x </ci>\n" + 
    "    <cn> 2 </cn>\n" + 
    "  </apply>\n");
    N = new ASTNode(libsbml.AST_POWER);
    ASTNode n1 = new ASTNode(libsbml.AST_NAME);
    n1.setName("x");
    ASTNode n2 = new ASTNode();
    n2.setValue(2.0);
    N.addChild(n1);
    N.addChild(n2);
    ASTNode replaced = new ASTNode(libsbml.AST_PLUS);
    ASTNode c = new ASTNode();
    c.setValue(1.0);
    replaced.addChild(c);
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(original,S) );
    N.replaceIDWithFunction("x",replaced);
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
    replaced = null;
  }

  public void test_MathMLFromAST_root()
  {
    String expected = wrapMathML("  <apply>\n" + 
    "    <root/>\n" + 
    "    <degree>\n" + 
    "      <cn type=\"integer\"> 3 </cn>\n" + 
    "    </degree>\n" + 
    "    <ci> x </ci>\n" + 
    "  </apply>\n");
    N = new ASTNode(libsbml.AST_FUNCTION_ROOT);
    ASTNode c1_1 = new ASTNode(libsbml.AST_INTEGER);
    assertTrue( c1_1.setValue(3) == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.addChild(c1_1) == libsbml.LIBSBML_OPERATION_SUCCESS );
    ASTNode c2 = new ASTNode(libsbml.AST_NAME);
    assertTrue( c2.setName("x") == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.addChild(c2) == libsbml.LIBSBML_OPERATION_SUCCESS );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_root1()
  {
    String expected = wrapMathML("  <apply>\n" + 
    "    <root/>\n" + 
    "    <degree>\n" + 
    "      <ci> y </ci>\n" + 
    "    </degree>\n" + 
    "    <ci> x </ci>\n" + 
    "  </apply>\n");
    String expected1 = wrapMathML("  <apply>\n" + 
    "    <root/>\n" + 
    "    <degree>\n" + 
    "      <ci> y </ci>\n" + 
    "    </degree>\n" + 
    "    <ci> x1 </ci>\n" + 
    "  </apply>\n");
    N = new ASTNode(libsbml.AST_FUNCTION_ROOT);
    ASTNode c1 = new ASTNode(libsbml.AST_NAME);
    assertTrue( c1.setName("y") == libsbml.LIBSBML_OPERATION_SUCCESS );
    ASTNode c2 = new ASTNode(libsbml.AST_NAME);
    assertTrue( c2.setName("x") == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.addChild(c1) == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.addChild(c2) == libsbml.LIBSBML_OPERATION_SUCCESS );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
    ASTNode c3 = new ASTNode(libsbml.AST_NAME);
    assertTrue( c3.setName("x1") == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.addChild(c3) == libsbml.LIBSBML_OPERATION_SUCCESS );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected1,S) );
  }

  public void test_MathMLFromAST_root2()
  {
    String expected = wrapMathML("  <apply>\n" + 
    "    <root/>\n" + 
    "    <ci> x </ci>\n" + 
    "  </apply>\n");
    N = new ASTNode(libsbml.AST_FUNCTION_ROOT);
    ASTNode c2 = new ASTNode(libsbml.AST_NAME);
    assertTrue( c2.setName("x") == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( N.addChild(c2) == libsbml.LIBSBML_OPERATION_SUCCESS );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  public void test_MathMLFromAST_sin()
  {
    String expected = wrapMathML("  <apply>\n" + 
    "    <sin/>\n" + 
    "    <cn type=\"integer\"> 1 </cn>\n" + 
    "  </apply>\n");
    N = new ASTNode(libsbml.AST_FUNCTION_SIN);
    ASTNode c = new ASTNode(libsbml.AST_INTEGER);
    c.setValue(long);
    assertTrue( N.addChild(c) == libsbml.LIBSBML_OPERATION_SUCCESS );
    S = libsbml.writeMathMLToString(N);
    assertEquals( true, equals(expected,S) );
  }

  /**
   * Loads the SWIG-generated libSBML Java module when this class is
   * loaded, or reports a sensible diagnostic message about why it failed.
   */
  static
  {
    String varname;
    String shlibname;

    if (System.getProperty("mrj.version") != null)
    {
      varname = "DYLD_LIBRARY_PATH";    // We're on a Mac.
      shlibname = "libsbmlj.jnilib and/or libsbml.dylib";
    }
    else
    {
      varname = "LD_LIBRARY_PATH";      // We're not on a Mac.
      shlibname = "libsbmlj.so and/or libsbml.so";
    }

    try
    {
      System.loadLibrary("sbmlj");
      // For extra safety, check that the jar file is in the classpath.
      Class.forName("org.sbml.libsbml.libsbml");
    }
    catch (SecurityException e)
    {
      e.printStackTrace();
      System.err.println("Could not load the libSBML library files due to a"+
                         " security exception.\n");
      System.exit(1);
    }
    catch (UnsatisfiedLinkError e)
    {
      e.printStackTrace();
      System.err.println("Error: could not link with the libSBML library files."+
                         " It is likely\nyour " + varname +
                         " environment variable does not include the directories\n"+
                         "containing the " + shlibname + " library files.\n");
      System.exit(1);
    }
    catch (ClassNotFoundException e)
    {
      e.printStackTrace();
      System.err.println("Error: unable to load the file libsbmlj.jar."+
                         " It is likely\nyour -classpath option and CLASSPATH" +
                         " environment variable\n"+
                         "do not include the path to libsbmlj.jar.\n");
      System.exit(1);
    }
  }
}
