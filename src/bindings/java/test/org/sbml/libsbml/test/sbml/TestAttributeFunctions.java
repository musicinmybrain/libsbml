/*
 * @file    TestAttributeFunctions.java
 * @brief   Attribute function tests
 *
 * @author  Akiya Jouraku (Java conversion)
 * @author  Sarah Keating 
 * 
 * ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
 *
 * DO NOT EDIT THIS FILE.
 *
 * This file was generated automatically by converting the file located at
 * src/sbml/test/TestAttributeFunctions.cpp
 * using the conversion program dev/utilities/translateTests/translateTests.pl.
 * Any changes made here will be lost the next time the file is regenerated.
 *
 * -----------------------------------------------------------------------------
 * This file is part of libSBML.  Please visit http://sbml.org for more
 * information about SBML, and the latest version of libSBML.
 *
 * Copyright 2005-2010 California Institute of Technology.
 * Copyright 2002-2005 California Institute of Technology and
 *                     Japan Science and Technology Corporation.
 * 
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation.  A copy of the license agreement is provided
 * in the file named "LICENSE.txt" included with this software distribution
 * and also available online as http://sbml.org/software/libsbml/license.html
 * -----------------------------------------------------------------------------
 */

package org.sbml.libsbml.test.sbml;

import org.sbml.libsbml.*;

import java.io.File;
import java.lang.AssertionError;

public class TestAttributeFunctions {

  static void assertTrue(boolean condition) throws AssertionError
  {
    if (condition == true)
    {
      return;
    }
    throw new AssertionError();
  }

  static void assertEquals(Object a, Object b) throws AssertionError
  {
    if ( (a == null) && (b == null) )
    {
      return;
    }
    else if ( (a == null) || (b == null) )
    {
      throw new AssertionError();
    }
    else if (a.equals(b))
    {
      return;
    }

    throw new AssertionError();
  }

  static void assertNotEquals(Object a, Object b) throws AssertionError
  {
    if ( (a == null) && (b == null) )
    {
      throw new AssertionError();
    }
    else if ( (a == null) || (b == null) )
    {
      return;
    }
    else if (a.equals(b))
    {
      throw new AssertionError();
    }
  }

  static void assertEquals(boolean a, boolean b) throws AssertionError
  {
    if ( a == b )
    {
      return;
    }
    throw new AssertionError();
  }

  static void assertNotEquals(boolean a, boolean b) throws AssertionError
  {
    if ( a != b )
    {
      return;
    }
    throw new AssertionError();
  }

  static void assertEquals(int a, int b) throws AssertionError
  {
    if ( a == b )
    {
      return;
    }
    throw new AssertionError();
  }

  static void assertNotEquals(int a, int b) throws AssertionError
  {
    if ( a != b )
    {
      return;
    }
    throw new AssertionError();
  }
  private SBase S;

  protected void setUp() throws Exception
  {
    S = new Model(2,4);
    if (S == null);
    {
    }
  }

  protected void tearDown() throws Exception
  {
  }

  public void test_Attributes_AssignmentRule_variable()
  {
    AssignmentRule obj = new AssignmentRule(3,1);
    String initialValue =  "string";
    String value;
    String otherValue;
    int result;
    result = obj.setAttribute("variable",initialValue);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.getVariable().equals(initialValue) == true );
    assertTrue( obj.isSetVariable() == true );
    assertTrue( obj.isSetAttribute("variable") == true );
    result = obj.getAttribute("variable",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value.equals(initialValue) );
    otherValue = ((SBase) obj).getAttribute < string > "variable";
    assertTrue( otherValue.equals(initialValue) );
    result = obj.unsetAttribute("variable");
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.isSetVariable() == false );
    assertTrue( obj.isSetAttribute("variable") == false );
    result = obj.getAttribute("variable",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, value.empty() );
    obj = null;
  }

  public void test_Attributes_Compartment_constant()
  {
    Compartment obj = new Compartment(3,1);
    bool initialValue = true;
    bool value;
    bool otherValue;
    int result;
    result = obj.setAttribute("constant",initialValue);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.getConstant().equals(initialValue) );
    assertTrue( obj.isSetConstant() == true );
    assertTrue( obj.isSetAttribute("constant") == true );
    result = obj.getAttribute("constant",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value.equals(initialValue) );
    otherValue = ((SBase) obj).getAttribute < bool > "constant";
    assertTrue( otherValue.equals(initialValue) );
    result = obj.unsetAttribute("constant");
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.isSetConstant() == false );
    assertTrue( obj.isSetAttribute("constant") == false );
    result = obj.getAttribute("constant",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value == true );
    obj = null;
  }

  public void test_Attributes_Compartment_size()
  {
    Compartment obj = new Compartment(3,1);
    double initialValue = 3.6;
    double value;
    double otherValue;
    int result;
    result = obj.setAttribute("size",initialValue);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, util_isEqual );
    assertTrue( obj.isSetSize() == true );
    assertTrue( obj.isSetAttribute("size") == true );
    result = obj.getAttribute("size",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, util_isEqual );
    otherValue = ((SBase) obj).getAttribute < double > "size";
    assertEquals( true, util_isEqual );
    result = obj.unsetAttribute("size");
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.isSetSize() == false );
    assertTrue( obj.isSetAttribute("size") == false );
    result = obj.getAttribute("size",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, util_isNaN );
    obj = null;
  }

  public void test_Attributes_Compartment_spatialDimensions()
  {
    Compartment obj = new Compartment(3,1);
    long initialValue = 2;
    long value;
    long otherValue;
    int result;
    result = obj.setAttribute("spatialDimensions",initialValue);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.getSpatialDimensions().equals(initialValue) );
    assertTrue( obj.isSetSpatialDimensions() == true );
    assertTrue( obj.isSetAttribute("spatialDimensions") == true );
    result = obj.getAttribute("spatialDimensions",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value.equals(initialValue) );
    otherValue = ((SBase) obj).getAttribute < unsignedint > "spatialDimensions";
    assertTrue( otherValue.equals(initialValue) );
    result = obj.unsetAttribute("spatialDimensions");
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.isSetSpatialDimensions() == false );
    assertTrue( obj.isSetAttribute("spatialDimensions") == false );
    result = obj.getAttribute("spatialDimensions",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value == 0 );
    obj = null;
  }

  public void test_Attributes_Compartment_spatialDimensions_double()
  {
    Compartment obj = new Compartment(3,1);
    double initialValue = 2.7;
    double value;
    double otherValue;
    int result;
    result = obj.setAttribute("spatialDimensions",initialValue);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, util_isEqual );
    assertTrue( obj.isSetSpatialDimensions() == true );
    assertTrue( obj.isSetAttribute("spatialDimensions") == true );
    result = obj.getAttribute("spatialDimensions",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, util_isEqual );
    otherValue = ((SBase) obj).getAttribute < double > "spatialDimensions";
    assertTrue( otherValue.equals(initialValue) );
    result = obj.unsetAttribute("spatialDimensions");
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.isSetSpatialDimensions() == false );
    assertTrue( obj.isSetAttribute("spatialDimensions") == false );
    result = obj.getAttribute("spatialDimensions",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, util_isNaN );
    obj = null;
  }

  public void test_Attributes_Compartment_units()
  {
    Compartment obj = new Compartment(3,1);
    String initialValue =  "string";
    String value;
    String otherValue;
    int result;
    result = obj.setAttribute("units",initialValue);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.getUnits().equals(initialValue) == true );
    assertTrue( obj.isSetUnits() == true );
    assertTrue( obj.isSetAttribute("units") == true );
    result = obj.getAttribute("units",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value.equals(initialValue) );
    otherValue = ((SBase) obj).getAttribute < string > "units";
    assertTrue( otherValue.equals(initialValue) );
    result = obj.unsetAttribute("units");
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.isSetUnits() == false );
    assertTrue( obj.isSetAttribute("units") == false );
    result = obj.getAttribute("units",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, value.empty() );
    obj = null;
  }

  public void test_Attributes_EventAssignment_variable()
  {
    EventAssignment obj = new EventAssignment(3,1);
    String initialValue =  "string";
    String value;
    String otherValue;
    int result;
    result = obj.setAttribute("variable",initialValue);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.getVariable().equals(initialValue) == true );
    assertTrue( obj.isSetVariable() == true );
    assertTrue( obj.isSetAttribute("variable") == true );
    result = obj.getAttribute("variable",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value.equals(initialValue) );
    otherValue = ((SBase) obj).getAttribute < string > "variable";
    assertTrue( otherValue.equals(initialValue) );
    result = obj.unsetAttribute("variable");
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.isSetVariable() == false );
    assertTrue( obj.isSetAttribute("variable") == false );
    result = obj.getAttribute("variable",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, value.empty() );
    obj = null;
  }

  public void test_Attributes_Event_timeUnits()
  {
    Event obj = new Event(3,1);
    String initialValue =  "string";
    String value;
    String otherValue;
    int result;
    result = obj.setAttribute("timeUnits",initialValue);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.getTimeUnits().equals(initialValue) == true );
    assertTrue( obj.isSetTimeUnits() == true );
    assertTrue( obj.isSetAttribute("timeUnits") == true );
    result = obj.getAttribute("timeUnits",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value.equals(initialValue) );
    otherValue = ((SBase) obj).getAttribute < string > "timeUnits";
    assertTrue( otherValue.equals(initialValue) );
    result = obj.unsetAttribute("timeUnits");
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.isSetTimeUnits() == false );
    assertTrue( obj.isSetAttribute("timeUnits") == false );
    result = obj.getAttribute("timeUnits",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, value.empty() );
    obj = null;
  }

  public void test_Attributes_Event_useValuesFromTriggerTime()
  {
    Event obj = new Event(3,1);
    bool initialValue = true;
    bool value;
    bool otherValue;
    int result;
    result = obj.setAttribute("useValuesFromTriggerTime",initialValue);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.getUseValuesFromTriggerTime().equals(initialValue) );
    assertTrue( obj.isSetUseValuesFromTriggerTime() == true );
    assertTrue( obj.isSetAttribute("useValuesFromTriggerTime") == true );
    result = obj.getAttribute("useValuesFromTriggerTime",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value.equals(initialValue) );
    otherValue = ((SBase) obj).getAttribute < bool > "useValuesFromTriggerTime";
    assertTrue( otherValue.equals(initialValue) );
    result = obj.unsetAttribute("useValuesFromTriggerTime");
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.isSetUseValuesFromTriggerTime() == false );
    assertTrue( obj.isSetAttribute("useValuesFromTriggerTime") == false );
    result = obj.getAttribute("useValuesFromTriggerTime",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value == true );
    obj = null;
  }

  public void test_Attributes_FunctionDefinition_sbo()
  {
    FunctionDefinition obj = new FunctionDefinition(3,1);
    int initialValue = 67;
    int value;
    int otherValue;
    int result;
    result = obj.setAttribute("sboTerm",initialValue);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.getSBOTerm().equals(initialValue) );
    assertTrue( obj.isSetSBOTerm() == true );
    assertTrue( obj.isSetAttribute("sboTerm") == true );
    result = obj.getAttribute("sboTerm",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value.equals(initialValue) );
    otherValue = ((SBase) obj).getAttribute < int > "sboTerm";
    assertTrue( otherValue.equals(initialValue) );
    result = obj.unsetAttribute("sboTerm");
    assertTrue( obj.isSetSBOTerm() == false );
    assertTrue( obj.isSetAttribute("sboTerm") == false );
    result = obj.getAttribute("sboTerm",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, value ==-1 );
    obj = null;
  }

  public void test_Attributes_FunctionDefinition_sbo_string()
  {
    FunctionDefinition obj = new FunctionDefinition(3,1);
    String initialValue =  "SBO:0000067";
    String value;
    String otherValue;
    int result;
    result = obj.setAttribute("sboTerm",initialValue);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.getSBOTermID().equals(initialValue) == true );
    assertTrue( obj.isSetSBOTerm() == true );
    assertTrue( obj.isSetAttribute("sboTerm") == true );
    result = obj.getAttribute("sboTerm",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value.equals(initialValue) );
    otherValue = ((SBase) obj).getAttribute < string > "sboTerm";
    assertTrue( otherValue.equals(initialValue) );
    result = obj.unsetAttribute("sboTerm");
    assertTrue( obj.isSetSBOTerm() == false );
    assertTrue( obj.isSetAttribute("sboTerm") == false );
    result = obj.getAttribute("sboTerm",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value == "" );
    obj = null;
  }

  public void test_Attributes_Id()
  {
    const std::string& id =  "x12345";
    String value;
    String other_value;
    int result;
    result = S.setAttribute("id",id);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( S.getIdAttribute().equals(id) );
    assertTrue( S.isSetIdAttribute() == true );
    assertTrue( S.isSetAttribute("id") == true );
    result = S.getAttribute("id",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value.equals(id) );
    other_value = S.getAttribute < string > "id";
    assertTrue( other_value.equals(id) );
    result = S.unsetAttribute("id");
    assertTrue( S.isSetIdAttribute() == false );
    assertTrue( S.isSetAttribute("id") == false );
    result = S.getAttribute("id",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value.equals( "") );
  }

  public void test_Attributes_InitialAssignment_symbol()
  {
    InitialAssignment obj = new InitialAssignment(3,1);
    String initialValue =  "string";
    String value;
    String otherValue;
    int result;
    result = obj.setAttribute("symbol",initialValue);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.getSymbol().equals(initialValue) == true );
    assertTrue( obj.isSetSymbol() == true );
    assertTrue( obj.isSetAttribute("symbol") == true );
    result = obj.getAttribute("symbol",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value.equals(initialValue) );
    otherValue = ((SBase) obj).getAttribute < string > "symbol";
    assertTrue( otherValue.equals(initialValue) );
    result = obj.unsetAttribute("symbol");
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.isSetSymbol() == false );
    assertTrue( obj.isSetAttribute("symbol") == false );
    result = obj.getAttribute("symbol",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, value.empty() );
    obj = null;
  }

  public void test_Attributes_KineticLaw_timeUnits()
  {
    KineticLaw obj = new KineticLaw(2,1);
    String initialValue =  "string";
    String value;
    String otherValue;
    int result;
    result = obj.setAttribute("timeUnits",initialValue);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.getTimeUnits().equals(initialValue) == true );
    assertTrue( obj.isSetTimeUnits() == true );
    assertTrue( obj.isSetAttribute("timeUnits") == true );
    result = obj.getAttribute("timeUnits",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value.equals(initialValue) );
    otherValue = ((SBase) obj).getAttribute < string > "timeUnits";
    assertTrue( otherValue.equals(initialValue) );
    result = obj.unsetAttribute("timeUnits");
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.isSetTimeUnits() == false );
    assertTrue( obj.isSetAttribute("timeUnits") == false );
    result = obj.getAttribute("timeUnits",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, value.empty() );
    obj = null;
  }

  public void test_Attributes_LocalParameter_units()
  {
    LocalParameter obj = LocalParameter(3,1);
    String initialValue =  "string";
    String value;
    String otherValue;
    int result;
    result = obj.setAttribute("units",initialValue);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.getUnits().equals(initialValue) == true );
    assertTrue( obj.isSetUnits() == true );
    assertTrue( obj.isSetAttribute("units") == true );
    result = obj.getAttribute("units",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value.equals(initialValue) );
    otherValue = ((SBase) obj).getAttribute < string > "units";
    assertTrue( otherValue.equals(initialValue) );
    result = obj.unsetAttribute("units");
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.isSetUnits() == false );
    assertTrue( obj.isSetAttribute("units") == false );
    result = obj.getAttribute("units",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, value.empty() );
    obj = null;
  }

  public void test_Attributes_LocalParameter_value()
  {
    LocalParameter obj = LocalParameter(3,1);
    double initialValue = 3.6;
    double value;
    double otherValue;
    int result;
    result = obj.setAttribute("value",initialValue);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, util_isEqual );
    assertTrue( obj.isSetValue() == true );
    assertTrue( obj.isSetAttribute("value") == true );
    result = obj.getAttribute("value",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, util_isEqual );
    otherValue = ((SBase) obj).getAttribute < double > "value";
    assertEquals( true, util_isEqual );
    result = obj.unsetAttribute("value");
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.isSetValue() == false );
    assertTrue( obj.isSetAttribute("value") == false );
    result = obj.getAttribute("value",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, util_isNaN );
    obj = null;
  }

  public void test_Attributes_MetaId()
  {
    const std::string& metaid =  "x12345";
    const std::string name =  "metaid";
    String value;
    String other_value;
    int result;
    result = S.setAttribute("metaid",metaid);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( S.getMetaId().equals(metaid) == true );
    assertTrue( S.isSetMetaId() == true );
    assertTrue( S.isSetAttribute("metaid") == true );
    result = S.getAttribute("metaid",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value.equals(metaid) );
    other_value = S.getAttribute < string > "metaid";
    assertTrue( other_value.equals(metaid) );
    result = S.unsetAttribute("metaid");
    assertTrue( S.isSetMetaId() == false );
    assertTrue( S.isSetAttribute("metaid") == false );
    result = S.getAttribute("metaid",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value.equals( "") );
  }

  public void test_Attributes_Model_substanceUnits()
  {
    Model obj = new Model(3,1);
    String initialValue =  "string";
    String value;
    String otherValue;
    int result;
    result = obj.setAttribute("substanceUnits",initialValue);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.getSubstanceUnits().equals(initialValue) == true );
    assertTrue( obj.isSetSubstanceUnits() == true );
    assertTrue( obj.isSetAttribute("substanceUnits") == true );
    result = obj.getAttribute("substanceUnits",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value.equals(initialValue) );
    otherValue = ((SBase) obj).getAttribute < string > "substanceUnits";
    assertTrue( otherValue.equals(initialValue) );
    result = obj.unsetAttribute("substanceUnits");
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.isSetSubstanceUnits() == false );
    assertTrue( obj.isSetAttribute("substanceUnits") == false );
    result = obj.getAttribute("substanceUnits",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, value.empty() );
    obj = null;
  }

  public void test_Attributes_Parameter_constant()
  {
    Parameter obj = new Parameter(3,1);
    bool initialValue = true;
    bool value;
    bool otherValue;
    int result;
    result = obj.setAttribute("constant",initialValue);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.getConstant().equals(initialValue) );
    assertTrue( obj.isSetConstant() == true );
    assertTrue( obj.isSetAttribute("constant") == true );
    result = obj.getAttribute("constant",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value.equals(initialValue) );
    otherValue = ((SBase) obj).getAttribute < bool > "constant";
    assertTrue( otherValue.equals(initialValue) );
    result = obj.unsetAttribute("constant");
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.isSetConstant() == false );
    assertTrue( obj.isSetAttribute("constant") == false );
    result = obj.getAttribute("constant",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value == true );
    obj = null;
  }

  public void test_Attributes_Parameter_units()
  {
    Parameter obj = new Parameter(3,1);
    String initialValue =  "string";
    String value;
    String otherValue;
    int result;
    result = obj.setAttribute("units",initialValue);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.getUnits().equals(initialValue) == true );
    assertTrue( obj.isSetUnits() == true );
    assertTrue( obj.isSetAttribute("units") == true );
    result = obj.getAttribute("units",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value.equals(initialValue) );
    otherValue = ((SBase) obj).getAttribute < string > "units";
    assertTrue( otherValue.equals(initialValue) );
    result = obj.unsetAttribute("units");
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.isSetUnits() == false );
    assertTrue( obj.isSetAttribute("units") == false );
    result = obj.getAttribute("units",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, value.empty() );
    obj = null;
  }

  public void test_Attributes_Parameter_value()
  {
    Parameter obj = new Parameter(3,1);
    double initialValue = 3.6;
    double value;
    double otherValue;
    int result;
    result = obj.setAttribute("value",initialValue);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, util_isEqual );
    assertTrue( obj.isSetValue() == true );
    assertTrue( obj.isSetAttribute("value") == true );
    result = obj.getAttribute("value",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, util_isEqual );
    otherValue = ((SBase) obj).getAttribute < double > "value";
    assertEquals( true, util_isEqual );
    result = obj.unsetAttribute("value");
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.isSetValue() == false );
    assertTrue( obj.isSetAttribute("value") == false );
    result = obj.getAttribute("value",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, util_isNaN );
    obj = null;
  }

  public void test_Attributes_RateRule_variable()
  {
    RateRule obj = new RateRule(3,1);
    String initialValue =  "string";
    String value;
    String otherValue;
    int result;
    result = obj.setAttribute("variable",initialValue);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.getVariable().equals(initialValue) == true );
    assertTrue( obj.isSetVariable() == true );
    assertTrue( obj.isSetAttribute("variable") == true );
    result = obj.getAttribute("variable",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value.equals(initialValue) );
    otherValue = ((SBase) obj).getAttribute < string > "variable";
    assertTrue( otherValue.equals(initialValue) );
    result = obj.unsetAttribute("variable");
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.isSetVariable() == false );
    assertTrue( obj.isSetAttribute("variable") == false );
    result = obj.getAttribute("variable",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, value.empty() );
    obj = null;
  }

  public void test_Attributes_Reaction_compartment()
  {
    Reaction obj = new Reaction(3,1);
    String initialValue =  "string";
    String value;
    String otherValue;
    int result;
    result = obj.setAttribute("compartment",initialValue);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.getCompartment().equals(initialValue) == true );
    assertTrue( obj.isSetCompartment() == true );
    assertTrue( obj.isSetAttribute("compartment") == true );
    result = obj.getAttribute("compartment",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value.equals(initialValue) );
    otherValue = ((SBase) obj).getAttribute < string > "compartment";
    assertTrue( otherValue.equals(initialValue) );
    result = obj.unsetAttribute("compartment");
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.isSetCompartment() == false );
    assertTrue( obj.isSetAttribute("compartment") == false );
    result = obj.getAttribute("compartment",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, value.empty() );
    obj = null;
  }

  public void test_Attributes_Reaction_fast()
  {
    Reaction obj = new Reaction(3,1);
    bool initialValue = true;
    bool value;
    bool otherValue;
    int result;
    result = obj.setAttribute("fast",initialValue);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.getFast().equals(initialValue) );
    assertTrue( obj.isSetFast() == true );
    assertTrue( obj.isSetAttribute("fast") == true );
    result = obj.getAttribute("fast",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value.equals(initialValue) );
    otherValue = ((SBase) obj).getAttribute < bool > "fast";
    assertTrue( otherValue.equals(initialValue) );
    result = obj.unsetAttribute("fast");
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.isSetFast() == false );
    assertTrue( obj.isSetAttribute("fast") == false );
    result = obj.getAttribute("fast",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value == true );
    obj = null;
  }

  public void test_Attributes_SBOTerm()
  {
    int sboTerm = 5;
    int value;
    int other_value;
    int result;
    result = S.setAttribute("sboTerm",sboTerm);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( S.getSBOTerm().equals(sboTerm) );
    assertTrue( S.isSetSBOTerm() == true );
    assertTrue( S.isSetAttribute("sboTerm") == true );
    result = S.getAttribute("sboTerm",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value.equals(sboTerm) );
    other_value = S.getAttribute < int > "sboTerm";
    assertTrue( other_value.equals(sboTerm) );
    result = S.unsetAttribute("sboTerm");
    assertTrue( S.isSetSBOTerm() == false );
    assertTrue( S.isSetAttribute("sboTerm") == false );
    result = S.getAttribute("sboTerm",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, value ==-1 );
  }

  public void test_Attributes_SimpleSpeciesReference_species()
  {
    SpeciesReference obj = new SpeciesReference(3,1);
    String initialValue =  "string";
    String value;
    String otherValue;
    int result;
    result = obj.setAttribute("species",initialValue);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.getSpecies().equals(initialValue) == true );
    assertTrue( obj.isSetSpecies() == true );
    assertTrue( obj.isSetAttribute("species") == true );
    result = obj.getAttribute("species",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value.equals(initialValue) );
    otherValue = ((SBase) obj).getAttribute < string > "species";
    assertTrue( otherValue.equals(initialValue) );
    result = obj.unsetAttribute("species");
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.isSetSpecies() == false );
    assertTrue( obj.isSetAttribute("species") == false );
    result = obj.getAttribute("species",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, value.empty() );
    obj = null;
  }

  public void test_Attributes_SpeciesReference_constant()
  {
    SpeciesReference obj = new SpeciesReference(3,1);
    bool initialValue = true;
    bool value;
    bool otherValue;
    int result;
    result = obj.setAttribute("constant",initialValue);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.getConstant().equals(initialValue) );
    assertTrue( obj.isSetConstant() == true );
    assertTrue( obj.isSetAttribute("constant") == true );
    result = obj.getAttribute("constant",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value.equals(initialValue) );
    otherValue = ((SBase) obj).getAttribute < bool > "constant";
    assertTrue( otherValue.equals(initialValue) );
    result = obj.unsetAttribute("constant");
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.isSetConstant() == false );
    assertTrue( obj.isSetAttribute("constant") == false );
    result = obj.getAttribute("constant",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value == true );
    obj = null;
  }

  public void test_Attributes_SpeciesReference_denominator()
  {
    SpeciesReference obj = new SpeciesReference(1,2);
    int initialValue = 2;
    int value;
    int otherValue;
    int result;
    result = obj.setAttribute("denominator",initialValue);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.getDenominator().equals(initialValue) );
    assertTrue( obj.isSetAttribute("denominator") == true );
    result = obj.getAttribute("denominator",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value.equals(initialValue) );
    otherValue = ((SBase) obj).getAttribute < int > "denominator";
    assertTrue( otherValue.equals(initialValue) );
    result = obj.unsetAttribute("denominator");
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.isSetAttribute("denominator") == true );
    result = obj.getAttribute("denominator",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value == 1 );
    obj = null;
  }

  public void test_Attributes_SpeciesReference_stoichiometry()
  {
    SpeciesReference obj = new SpeciesReference(1,2);
    int initialValue = 3;
    int value;
    int otherValue;
    int result;
    result = obj.setAttribute("stoichiometry",initialValue);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, util_isEqual );
    assertTrue( obj.isSetStoichiometry() == true );
    assertTrue( obj.isSetAttribute("stoichiometry") == true );
    result = obj.getAttribute("stoichiometry",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value.equals(initialValue) );
    otherValue = ((SBase) obj).getAttribute < int > "stoichiometry";
    assertTrue( otherValue.equals(initialValue) );
    result = obj.unsetAttribute("stoichiometry");
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.isSetStoichiometry() == true );
    assertTrue( obj.isSetAttribute("stoichiometry") == true );
    result = obj.getAttribute("stoichiometry",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value == 1 );
    obj = null;
  }

  public void test_Attributes_SpeciesReference_stoichiometry_double()
  {
    SpeciesReference obj = new SpeciesReference(3,1);
    double initialValue = 3.6;
    double value;
    double otherValue;
    int result;
    result = obj.setAttribute("stoichiometry",initialValue);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, util_isEqual );
    assertTrue( obj.isSetStoichiometry() == true );
    assertTrue( obj.isSetAttribute("stoichiometry") == true );
    result = obj.getAttribute("stoichiometry",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, util_isEqual );
    otherValue = ((SBase) obj).getAttribute < double > "stoichiometry";
    assertEquals( true, util_isEqual );
    result = obj.unsetAttribute("stoichiometry");
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.isSetStoichiometry() == false );
    assertTrue( obj.isSetAttribute("stoichiometry") == false );
    result = obj.getAttribute("stoichiometry",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, util_isNaN );
    obj = null;
  }

  public void test_Attributes_Species_charge()
  {
    Species obj = new Species(2,1);
    int initialValue = 2;
    int value;
    int otherValue;
    int result;
    result = obj.setAttribute("charge",initialValue);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.getCharge().equals(initialValue) );
    assertTrue( obj.isSetCharge() == true );
    assertTrue( obj.isSetAttribute("charge") == true );
    result = obj.getAttribute("charge",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value.equals(initialValue) );
    otherValue = ((SBase) obj).getAttribute < int > "charge";
    assertTrue( otherValue.equals(initialValue) );
    result = obj.unsetAttribute("charge");
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.isSetCharge() == false );
    assertTrue( obj.isSetAttribute("charge") == false );
    result = obj.getAttribute("charge",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value == 0 );
    obj = null;
  }

  public void test_Attributes_Species_compartment()
  {
    Species obj = new Species(3,1);
    String initialValue =  "string";
    String value;
    String otherValue;
    int result;
    result = obj.setAttribute("compartment",initialValue);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.getCompartment().equals(initialValue) == true );
    assertTrue( obj.isSetCompartment() == true );
    assertTrue( obj.isSetAttribute("compartment") == true );
    result = obj.getAttribute("compartment",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value.equals(initialValue) );
    otherValue = ((SBase) obj).getAttribute < string > "compartment";
    assertTrue( otherValue.equals(initialValue) );
    result = obj.unsetAttribute("compartment");
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.isSetCompartment() == false );
    assertTrue( obj.isSetAttribute("compartment") == false );
    result = obj.getAttribute("compartment",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, value.empty() );
    obj = null;
  }

  public void test_Attributes_Species_hasOnlySubstanceUnits()
  {
    Species obj = new Species(3,1);
    bool initialValue = true;
    bool value;
    bool otherValue;
    int result;
    result = obj.setAttribute("hasOnlySubstanceUnits",initialValue);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.getHasOnlySubstanceUnits().equals(initialValue) );
    assertTrue( obj.isSetHasOnlySubstanceUnits() == true );
    assertTrue( obj.isSetAttribute("hasOnlySubstanceUnits") == true );
    result = obj.getAttribute("hasOnlySubstanceUnits",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value.equals(initialValue) );
    otherValue = ((SBase) obj).getAttribute < bool > "hasOnlySubstanceUnits";
    assertTrue( otherValue.equals(initialValue) );
    result = obj.unsetAttribute("hasOnlySubstanceUnits");
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.isSetHasOnlySubstanceUnits() == false );
    assertTrue( obj.isSetAttribute("hasOnlySubstanceUnits") == false );
    result = obj.getAttribute("hasOnlySubstanceUnits",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value == true );
    obj = null;
  }

  public void test_Attributes_Species_initialAmount()
  {
    Species obj = new Species(3,1);
    double initialValue = 3.6;
    double value;
    double otherValue;
    int result;
    result = obj.setAttribute("initialAmount",initialValue);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, util_isEqual );
    assertTrue( obj.isSetInitialAmount() == true );
    assertTrue( obj.isSetAttribute("initialAmount") == true );
    result = obj.getAttribute("initialAmount",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, util_isEqual );
    otherValue = ((SBase) obj).getAttribute < double > "initialAmount";
    assertEquals( true, util_isEqual );
    result = obj.unsetAttribute("initialAmount");
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.isSetInitialAmount() == false );
    assertTrue( obj.isSetAttribute("initialAmount") == false );
    result = obj.getAttribute("initialAmount",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, util_isNaN );
    obj = null;
  }

  public void test_Attributes_Trigger_Id()
  {
    Trigger obj = new Trigger(3,2);
    const std::string& att_name =  "id";
    String id =  "x12345";
    String value;
    String other_value;
    int result;
    result = obj.setAttribute(att_name,id);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.getId().equals(id) == true );
    assertTrue( obj.isSetId() == true );
    assertTrue( obj.isSetAttribute(att_name) == true );
    result = obj.getAttribute(att_name,value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value.equals(id) );
    result = obj.getAttribute(att_name,other_value);
    assertTrue( other_value.equals(id) );
    result = obj.unsetAttribute(att_name);
    assertTrue( obj.isSetId() == false );
    assertTrue( obj.isSetAttribute(att_name) == false );
    result = obj.getAttribute(att_name,value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, value.empty() );
    obj = null;
  }

  public void test_Attributes_Trigger_MetaId()
  {
    Trigger obj = new Trigger(3,1);
    const std::string& metaid =  "x12345";
    String value;
    String other_value;
    int result;
    result = obj.setAttribute("metaid",metaid);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.getMetaId().equals(metaid) == true );
    assertTrue( obj.isSetMetaId() == true );
    assertTrue( obj.isSetAttribute("metaid") == true );
    result = obj.getAttribute("metaid",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value.equals(metaid) );
    other_value = ((SBase) obj).getAttribute < string > "metaid";
    assertTrue( other_value.equals(metaid) );
    result = obj.unsetAttribute("metaid");
    assertTrue( obj.isSetMetaId() == false );
    assertTrue( obj.isSetAttribute("metaid") == false );
    result = obj.getAttribute("metaid",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value.equals( "") );
    obj = null;
  }

  public void test_Attributes_Trigger_initialValue()
  {
    Trigger obj = new Trigger(3,1);
    bool initialValue = true;
    bool value;
    bool otherValue;
    int result;
    result = obj.setAttribute("initialValue",initialValue);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.getInitialValue().equals(initialValue) );
    assertTrue( obj.isSetInitialValue() == true );
    assertTrue( obj.isSetAttribute("initialValue") == true );
    result = obj.getAttribute("initialValue",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value.equals(initialValue) );
    otherValue = ((SBase) obj).getAttribute < bool > "initialValue";
    assertTrue( otherValue.equals(initialValue) );
    result = obj.getAttribute("initialValue",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value.equals(initialValue) );
    result = obj.unsetAttribute("initialValue");
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.isSetInitialValue() == false );
    assertTrue( obj.isSetAttribute("initialValue") == false );
    result = obj.getAttribute("initialValue",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value == true );
    obj = null;
  }

  public void test_Attributes_Unit_exponent()
  {
    Unit obj = new Unit(3,1);
    int initialValue = 2;
    int value;
    int otherValue;
    int result;
    result = obj.setAttribute("exponent",initialValue);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.getExponent().equals(initialValue) );
    assertTrue( obj.isSetExponent() == true );
    assertTrue( obj.isSetAttribute("exponent") == true );
    result = obj.getAttribute("exponent",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value.equals(initialValue) );
    otherValue = ((SBase) obj).getAttribute < int > "exponent";
    assertTrue( otherValue.equals(initialValue) );
    result = obj.unsetAttribute("exponent");
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.isSetExponent() == false );
    assertTrue( obj.isSetAttribute("exponent") == false );
    result = obj.getAttribute("exponent",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value == 0 );
    obj = null;
  }

  public void test_Attributes_Unit_exponent_double()
  {
    Unit obj = new Unit(3,1);
    double initialValue = 3.6;
    double value;
    double otherValue;
    int result;
    result = obj.setAttribute("exponent",initialValue);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, util_isEqual );
    assertTrue( obj.isSetExponent() == true );
    assertTrue( obj.isSetAttribute("exponent") == true );
    result = obj.getAttribute("exponent",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, util_isEqual );
    otherValue = ((SBase) obj).getAttribute < double > "exponent";
    assertEquals( true, util_isEqual );
    result = obj.unsetAttribute("exponent");
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.isSetExponent() == false );
    assertTrue( obj.isSetAttribute("exponent") == false );
    result = obj.getAttribute("exponent",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, util_isNaN );
    obj = null;
  }

  public void test_Attributes_Unit_multiplier()
  {
    Unit obj = new Unit(3,1);
    double initialValue = 3.6;
    double value;
    double otherValue;
    int result;
    result = obj.setAttribute("multiplier",initialValue);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, util_isEqual );
    assertTrue( obj.isSetMultiplier() == true );
    assertTrue( obj.isSetAttribute("multiplier") == true );
    result = obj.getAttribute("multiplier",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, util_isEqual );
    otherValue = ((SBase) obj).getAttribute < double > "multiplier";
    assertEquals( true, util_isEqual );
    result = obj.unsetAttribute("multiplier");
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.isSetMultiplier() == false );
    assertTrue( obj.isSetAttribute("multiplier") == false );
    result = obj.getAttribute("multiplier",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, util_isNaN );
    obj = null;
  }

  public void test_Attributes_Unit_scale()
  {
    Unit obj = new Unit(3,1);
    int initialValue = 2;
    int value;
    int otherValue;
    int result;
    result = obj.setAttribute("scale",initialValue);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.getScale() == initialValue );
    assertTrue( obj.isSetScale() == true );
    assertTrue( obj.isSetAttribute("scale") == true );
    result = obj.getAttribute("scale",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value.equals(initialValue) );
    otherValue = ((SBase) obj).getAttribute < int > "scale";
    assertTrue( otherValue.equals(initialValue) );
    result = obj.unsetAttribute("scale");
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( obj.isSetScale() == false );
    assertTrue( obj.isSetAttribute("scale") == false );
    result = obj.getAttribute("scale",value);
    assertTrue( result == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( value == SBML_INT_MAX );
    obj = null;
  }

  public void test_Elements_Event()
  {
    Model m = new Model(3,1);
    Event e = m.createChildObject("event");
    assertTrue( e.getNumEventAssignments() == 0 );
    assertTrue( e.getNumObjects("eventAssignments") == 0 );
    assertTrue( e.isSetTrigger() == false );
    assertTrue( e.getNumObjects("trigger") == 0 );
    Trigger t = e.createChildObject("trigger");
    assertTrue( e.isSetTrigger() == true );
    assertTrue( e.getNumObjects("trigger") == 1 );
    Trigger t1 = t.cloneObject();
    t1.setPersistent(true);
    t1.setInitialValue(false);
    ASTNode math = libsbml.parseFormula("true");
    t1.setMath(math);
    math = null;
    e.unsetTrigger();
    assertTrue( e.isSetTrigger() == false );
    assertTrue( e.getNumObjects("trigger") == 0 );
    assertTrue( e.addChildObject("trigger",t1) == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( e.isSetTrigger() == true );
    assertTrue( e.getNumObjects("trigger") == 1 );
    t1 = null;
    Trigger t2 = e.removeChildObject("trigger", "");
    assertTrue( t2 != null );
    assertTrue( e.isSetTrigger() == false );
    assertTrue( e.getNumObjects("trigger") == 0 );
    t2 = null;
    m = null;
  }

  public void test_Elements_Model()
  {
    Model m = new Model(3,1);
    assertTrue( m.getNumSpecies() == 0 );
    assertTrue( m.getNumObjects("species") == 0 );
    Species s = m.createChildObject("species");
    s.setId("s1");
    assertTrue( m.getNumSpecies() == 1 );
    assertTrue( m.getNumObjects("species") == 1 );
    Species s2 = s.cloneObject();
    s2.setId("s2");
    s2.setCompartment("c");
    s2.setHasOnlySubstanceUnits(false);
    s2.setConstant(false);
    s2.setBoundaryCondition(true);
    assertTrue( m.addChildObject("species",s2) == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertTrue( m.getNumSpecies() == 2 );
    assertTrue( m.getNumObjects("species") == 2 );
    Species ss = m.removeChildObject("species", "s1");
    assertTrue( ss != null );
    assertTrue( ss.getId().equals( "s1") );
    assertTrue( m.getNumSpecies() == 1 );
    assertTrue( m.getNumObjects("species") == 1 );
    s2 = null;
    ss = null;
    m = null;
  }

  /**
   * Loads the SWIG-generated libSBML Java module when this class is
   * loaded, or reports a sensible diagnostic message about why it failed.
   */
  static
  {
    String varname;
    String shlibname;

    if (System.getProperty("mrj.version") != null)
    {
      varname = "DYLD_LIBRARY_PATH";    // We're on a Mac.
      shlibname = "libsbmlj.jnilib and/or libsbml.dylib";
    }
    else
    {
      varname = "LD_LIBRARY_PATH";      // We're not on a Mac.
      shlibname = "libsbmlj.so and/or libsbml.so";
    }

    try
    {
      System.loadLibrary("sbmlj");
      // For extra safety, check that the jar file is in the classpath.
      Class.forName("org.sbml.libsbml.libsbml");
    }
    catch (SecurityException e)
    {
      e.printStackTrace();
      System.err.println("Could not load the libSBML library files due to a"+
                         " security exception.\n");
      System.exit(1);
    }
    catch (UnsatisfiedLinkError e)
    {
      e.printStackTrace();
      System.err.println("Error: could not link with the libSBML library files."+
                         " It is likely\nyour " + varname +
                         " environment variable does not include the directories\n"+
                         "containing the " + shlibname + " library files.\n");
      System.exit(1);
    }
    catch (ClassNotFoundException e)
    {
      e.printStackTrace();
      System.err.println("Error: unable to load the file libsbmlj.jar."+
                         " It is likely\nyour -classpath option and CLASSPATH" +
                         " environment variable\n"+
                         "do not include the path to libsbmlj.jar.\n");
      System.exit(1);
    }
  }
}
