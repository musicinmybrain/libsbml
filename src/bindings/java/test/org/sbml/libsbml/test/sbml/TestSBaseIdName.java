/*
 * @file    TestSBaseIdName.java
 * @brief   SBase unit tests
 *
 * @author  Akiya Jouraku (Java conversion)
 * @author  Ben Bornstein 
 * 
 * ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
 *
 * DO NOT EDIT THIS FILE.
 *
 * This file was generated automatically by converting the file located at
 * src/sbml/test/TestSBaseIdName.cpp
 * using the conversion program dev/utilities/translateTests/translateTests.pl.
 * Any changes made here will be lost the next time the file is regenerated.
 *
 * -----------------------------------------------------------------------------
 * This file is part of libSBML.  Please visit http://sbml.org for more
 * information about SBML, and the latest version of libSBML.
 *
 * Copyright 2005-2010 California Institute of Technology.
 * Copyright 2002-2005 California Institute of Technology and
 *                     Japan Science and Technology Corporation.
 * 
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation.  A copy of the license agreement is provided
 * in the file named "LICENSE.txt" included with this software distribution
 * and also available online as http://sbml.org/software/libsbml/license.html
 * -----------------------------------------------------------------------------
 */

package org.sbml.libsbml.test.sbml;

import org.sbml.libsbml.*;

import java.io.File;
import java.lang.AssertionError;

public class TestSBaseIdName {

  static void assertTrue(boolean condition) throws AssertionError
  {
    if (condition == true)
    {
      return;
    }
    throw new AssertionError();
  }

  static void assertEquals(Object a, Object b) throws AssertionError
  {
    if ( (a == null) && (b == null) )
    {
      return;
    }
    else if ( (a == null) || (b == null) )
    {
      throw new AssertionError();
    }
    else if (a.equals(b))
    {
      return;
    }

    throw new AssertionError();
  }

  static void assertNotEquals(Object a, Object b) throws AssertionError
  {
    if ( (a == null) && (b == null) )
    {
      throw new AssertionError();
    }
    else if ( (a == null) || (b == null) )
    {
      return;
    }
    else if (a.equals(b))
    {
      throw new AssertionError();
    }
  }

  static void assertEquals(boolean a, boolean b) throws AssertionError
  {
    if ( a == b )
    {
      return;
    }
    throw new AssertionError();
  }

  static void assertNotEquals(boolean a, boolean b) throws AssertionError
  {
    if ( a != b )
    {
      return;
    }
    throw new AssertionError();
  }

  static void assertEquals(int a, int b) throws AssertionError
  {
    if ( a == b )
    {
      return;
    }
    throw new AssertionError();
  }

  static void assertNotEquals(int a, int b) throws AssertionError
  {
    if ( a != b )
    {
      return;
    }
    throw new AssertionError();
  }
  private AssignmentRule AR32;
  private AssignmentRule AR31;
  private SBase U31;
  private SBase U32;
  private EventAssignment EA32;
  private SBase S31;
  private EventAssignment EA31;
  private SBase E32;
  private SBase E31;
  private SBase S32;

  protected void setUp() throws Exception
  {
    S31 = new Species(3,1);
    if (S31 == null);
    {
    }
    S32 = new Species(3,2);
    if (S32 == null);
    {
    }
    E31 = new Event(3,1);
    if (E31 == null);
    {
    }
    E32 = new Event(3,2);
    if (E32 == null);
    {
    }
    U31 = new Unit(3,1);
    if (U31 == null);
    {
    }
    U32 = new Unit(3,2);
    if (U32 == null);
    {
    }
    AR31 = new AssignmentRule(3,1);
    if (AR31 == null);
    {
    }
    AR32 = new AssignmentRule(3,2);
    if (AR32 == null);
    {
    }
    EA31 = new EventAssignment(3,1);
    if (EA31 == null);
    {
    }
    EA32 = new EventAssignment(3,2);
    if (EA32 == null);
    {
    }
  }

  protected void tearDown() throws Exception
  {
  }

  public void test_SBase_setIdAttribute_1()
  {
    String id =  "x12345";
    int i = S31.setIdAttribute(id);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, S31.isSetId() );
    assertTrue( S31.getId().equals(id) == true );
    assertEquals( true, S31.isSetIdAttribute() );
    assertTrue( S31.getIdAttribute().equals(id) );
    i = S31.unsetIdAttribute();
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( false, S31.isSetId() );
    assertTrue( S31.getId().equals( "") );
    assertEquals( false, S31.isSetIdAttribute() );
    assertTrue( S31.getIdAttribute().equals( "") );
  }

  public void test_SBase_setIdAttribute_10()
  {
    String id =  "x12345";
    int i = EA32.setIdAttribute(id);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( false, EA32.isSetId() );
    assertTrue( EA32.getId().equals( "") );
    assertEquals( true, EA32.isSetIdAttribute() );
    assertTrue( EA32.getIdAttribute().equals(id) );
    assertEquals( false, EA32.isSetVariable() );
    assertTrue( EA32.getVariable().equals( "") );
    i = EA32.unsetIdAttribute();
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( false, EA32.isSetId() );
    assertTrue( EA32.getId().equals( "") );
    assertEquals( false, EA32.isSetIdAttribute() );
    assertTrue( EA32.getIdAttribute().equals( "") );
    assertEquals( false, EA32.isSetVariable() );
    assertTrue( EA32.getVariable().equals( "") );
  }

  public void test_SBase_setIdAttribute_2()
  {
    String id =  "x12345";
    int i = S32.setIdAttribute(id);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, S32.isSetId() );
    assertTrue( S32.getId().equals(id) == true );
    assertEquals( true, S32.isSetIdAttribute() );
    assertTrue( S32.getIdAttribute().equals(id) );
    i = S32.unsetIdAttribute();
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( false, S32.isSetId() );
    assertTrue( S32.getId().equals( "") );
    assertEquals( false, S32.isSetIdAttribute() );
    assertTrue( S32.getIdAttribute().equals( "") );
  }

  public void test_SBase_setIdAttribute_3()
  {
    String id =  "x12345";
    int i = E31.setIdAttribute(id);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, E31.isSetId() );
    assertTrue( E31.getId().equals(id) == true );
    assertEquals( true, E31.isSetIdAttribute() );
    assertTrue( E31.getIdAttribute().equals(id) );
    i = E31.unsetIdAttribute();
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( false, E31.isSetId() );
    assertTrue( E31.getId().equals( "") );
    assertEquals( false, E31.isSetIdAttribute() );
    assertTrue( E31.getIdAttribute().equals( "") );
  }

  public void test_SBase_setIdAttribute_4()
  {
    String id =  "x12345";
    int i = E32.setIdAttribute(id);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, E32.isSetId() );
    assertTrue( E32.getId().equals(id) == true );
    assertEquals( true, E32.isSetIdAttribute() );
    assertTrue( E32.getIdAttribute().equals(id) );
    i = E32.unsetIdAttribute();
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( false, E32.isSetId() );
    assertTrue( E32.getId().equals( "") );
    assertEquals( false, E32.isSetIdAttribute() );
    assertTrue( E32.getIdAttribute().equals( "") );
  }

  public void test_SBase_setIdAttribute_5()
  {
    String id =  "x12345";
    int i = U31.setIdAttribute(id);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( false, U31.isSetId() );
    assertTrue( U31.getId().equals( "") );
    assertEquals( true, U31.isSetIdAttribute() );
    assertTrue( U31.getIdAttribute().equals(id) );
    i = U31.unsetIdAttribute();
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( false, U31.isSetId() );
    assertTrue( U31.getId().equals( "") );
    assertEquals( false, U31.isSetIdAttribute() );
    assertTrue( U31.getIdAttribute().equals( "") );
  }

  public void test_SBase_setIdAttribute_6()
  {
    String id =  "x12345";
    int i = U32.setIdAttribute(id);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, U32.isSetId() );
    assertTrue( U32.getId().equals(id) == true );
    assertEquals( true, U32.isSetIdAttribute() );
    assertTrue( U32.getIdAttribute().equals(id) );
    i = U32.unsetIdAttribute();
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( false, U32.isSetId() );
    assertTrue( U32.getId().equals( "") );
    assertEquals( false, U32.isSetIdAttribute() );
    assertTrue( U32.getIdAttribute().equals( "") );
  }

  public void test_SBase_setIdAttribute_7()
  {
    String id =  "x12345";
    int i = AR31.setIdAttribute(id);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( false, AR31.isSetId() );
    assertTrue( AR31.getId().equals( "") );
    assertEquals( true, AR31.isSetIdAttribute() );
    assertTrue( AR31.getIdAttribute().equals(id) );
    assertEquals( false, AR31.isSetVariable() );
    assertTrue( AR31.getVariable().equals( "") );
    i = AR31.unsetIdAttribute();
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( false, AR31.isSetId() );
    assertTrue( AR31.getId().equals( "") );
    assertEquals( false, AR31.isSetIdAttribute() );
    assertTrue( AR31.getIdAttribute().equals( "") );
    assertEquals( false, AR31.isSetVariable() );
    assertTrue( AR31.getVariable().equals( "") );
  }

  public void test_SBase_setIdAttribute_8()
  {
    String id =  "x12345";
    int i = AR32.setIdAttribute(id);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( false, AR32.isSetId() );
    assertTrue( AR32.getId().equals( "") );
    assertEquals( true, AR32.isSetIdAttribute() );
    assertTrue( AR32.getIdAttribute().equals(id) );
    assertEquals( false, AR32.isSetVariable() );
    assertTrue( AR32.getVariable().equals( "") );
    i = AR32.unsetIdAttribute();
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( false, AR32.isSetId() );
    assertTrue( AR32.getId().equals( "") );
    assertEquals( false, AR32.isSetIdAttribute() );
    assertTrue( AR32.getIdAttribute().equals( "") );
    assertEquals( false, AR32.isSetVariable() );
    assertTrue( AR32.getVariable().equals( "") );
  }

  public void test_SBase_setIdAttribute_9()
  {
    String id =  "x12345";
    int i = EA31.setIdAttribute(id);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( false, EA31.isSetId() );
    assertTrue( EA31.getId().equals( "") );
    assertEquals( true, EA31.isSetIdAttribute() );
    assertTrue( EA31.getIdAttribute().equals(id) );
    assertEquals( false, EA31.isSetVariable() );
    assertTrue( EA31.getVariable().equals( "") );
    i = EA31.unsetIdAttribute();
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( false, EA31.isSetId() );
    assertTrue( EA31.getId().equals( "") );
    assertEquals( false, EA31.isSetIdAttribute() );
    assertTrue( EA31.getIdAttribute().equals( "") );
    assertEquals( false, EA31.isSetVariable() );
    assertTrue( EA31.getVariable().equals( "") );
  }

  public void test_SBase_setId_1()
  {
    String id =  "x12345";
    int i = S31.setId(id);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, S31.isSetId() );
    assertTrue( S31.getId().equals(id) == true );
    assertEquals( true, S31.isSetIdAttribute() );
    assertTrue( S31.getIdAttribute().equals(id) );
    i = S31.unsetId();
    assertTrue( i == libsbml.LIBSBML_OPERATION_FAILED );
    assertEquals( true, S31.isSetId() );
    assertTrue( S31.getId().equals(id) == true );
    assertEquals( true, S31.isSetIdAttribute() );
    assertTrue( S31.getIdAttribute().equals(id) );
  }

  public void test_SBase_setId_10()
  {
    String id =  "x12345";
    int i = EA32.setId(id);
    assertTrue( i == libsbml.LIBSBML_USE_ID_ATTRIBUTE_FUNCTION );
    assertEquals( false, EA32.isSetId() );
    assertTrue( EA32.getId().equals( "") );
    assertEquals( false, EA32.isSetIdAttribute() );
    assertTrue( EA32.getIdAttribute().equals( "") );
    assertEquals( false, EA32.isSetVariable() );
    assertTrue( EA32.getVariable().equals( "") );
    i = EA32.unsetId();
    assertTrue( i == libsbml.LIBSBML_USE_ID_ATTRIBUTE_FUNCTION );
    assertEquals( false, EA32.isSetId() );
    assertTrue( EA32.getId().equals( "") );
    assertEquals( false, EA32.isSetIdAttribute() );
    assertTrue( EA32.getIdAttribute().equals( "") );
    assertEquals( false, EA32.isSetVariable() );
    assertTrue( EA32.getVariable().equals( "") );
  }

  public void test_SBase_setId_2()
  {
    String id =  "x12345";
    int i = S32.setId(id);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, S32.isSetId() );
    assertTrue( S32.getId().equals(id) == true );
    assertEquals( true, S32.isSetIdAttribute() );
    assertTrue( S32.getIdAttribute().equals(id) );
    i = S32.unsetId();
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( false, S32.isSetId() );
    assertTrue( S32.getId().equals( "") );
    assertEquals( false, S32.isSetIdAttribute() );
    assertTrue( S32.getIdAttribute().equals( "") );
  }

  public void test_SBase_setId_3()
  {
    String id =  "x12345";
    int i = E31.setId(id);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, E31.isSetId() );
    assertTrue( E31.getId().equals(id) == true );
    assertEquals( true, E31.isSetIdAttribute() );
    assertTrue( E31.getIdAttribute().equals(id) );
    i = E31.unsetId();
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( false, E31.isSetId() );
    assertTrue( E31.getId().equals( "") );
    assertEquals( false, E31.isSetIdAttribute() );
    assertTrue( E31.getIdAttribute().equals( "") );
  }

  public void test_SBase_setId_4()
  {
    String id =  "x12345";
    int i = E32.setId(id);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, E32.isSetId() );
    assertTrue( E32.getId().equals(id) == true );
    assertEquals( true, E32.isSetIdAttribute() );
    assertTrue( E32.getIdAttribute().equals(id) );
    i = E32.unsetId();
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( false, E32.isSetId() );
    assertTrue( E32.getId().equals( "") );
    assertEquals( false, E32.isSetIdAttribute() );
    assertTrue( E32.getIdAttribute().equals( "") );
  }

  public void test_SBase_setId_5()
  {
    String id =  "x12345";
    int i = U31.setId(id);
    assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE );
    assertEquals( false, U31.isSetId() );
    assertTrue( U31.getId().equals( "") );
    assertEquals( false, U31.isSetIdAttribute() );
    assertTrue( U31.getIdAttribute().equals( "") );
    i = U31.unsetId();
    assertTrue( i == libsbml.LIBSBML_OPERATION_FAILED );
    assertEquals( false, U31.isSetId() );
    assertTrue( U31.getId().equals( "") );
    assertEquals( false, U31.isSetIdAttribute() );
    assertTrue( U31.getIdAttribute().equals( "") );
  }

  public void test_SBase_setId_6()
  {
    String id =  "x12345";
    int i = U32.setId(id);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, U32.isSetId() );
    assertTrue( U32.getId().equals(id) == true );
    assertEquals( true, U32.isSetIdAttribute() );
    assertTrue( U32.getIdAttribute().equals(id) );
    i = U32.unsetId();
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( false, U32.isSetId() );
    assertTrue( U32.getId().equals( "") );
    assertEquals( false, U32.isSetIdAttribute() );
    assertTrue( U32.getIdAttribute().equals( "") );
  }

  public void test_SBase_setId_7()
  {
    String id =  "x12345";
    int i = AR31.setId(id);
    assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE );
    assertEquals( false, AR31.isSetId() );
    assertTrue( AR31.getId().equals( "") );
    assertEquals( false, AR31.isSetIdAttribute() );
    assertTrue( AR31.getIdAttribute().equals( "") );
    assertEquals( false, AR31.isSetVariable() );
    assertTrue( AR31.getVariable().equals( "") );
    i = AR31.unsetId();
    assertTrue( i == libsbml.LIBSBML_OPERATION_FAILED );
    assertEquals( false, AR31.isSetId() );
    assertTrue( AR31.getId().equals( "") );
    assertEquals( false, AR31.isSetIdAttribute() );
    assertTrue( AR31.getIdAttribute().equals( "") );
    assertEquals( false, AR31.isSetVariable() );
    assertTrue( AR31.getVariable().equals( "") );
  }

  public void test_SBase_setId_8()
  {
    String id =  "x12345";
    int i = AR32.setId(id);
    assertTrue( i == libsbml.LIBSBML_USE_ID_ATTRIBUTE_FUNCTION );
    assertEquals( false, AR32.isSetId() );
    assertTrue( AR32.getId().equals( "") );
    assertEquals( false, AR32.isSetIdAttribute() );
    assertTrue( AR32.getIdAttribute().equals( "") );
    assertEquals( false, AR32.isSetVariable() );
    assertTrue( AR32.getVariable().equals( "") );
    i = AR32.unsetId();
    assertTrue( i == libsbml.LIBSBML_USE_ID_ATTRIBUTE_FUNCTION );
    assertEquals( false, AR32.isSetId() );
    assertTrue( AR32.getId().equals( "") );
    assertEquals( false, AR32.isSetIdAttribute() );
    assertTrue( AR32.getIdAttribute().equals( "") );
    assertEquals( false, AR32.isSetVariable() );
    assertTrue( AR32.getVariable().equals( "") );
  }

  public void test_SBase_setId_9()
  {
    String id =  "x12345";
    int i = EA31.setId(id);
    assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE );
    assertEquals( false, EA31.isSetId() );
    assertTrue( EA31.getId().equals( "") );
    assertEquals( false, EA31.isSetIdAttribute() );
    assertTrue( EA31.getIdAttribute().equals( "") );
    assertEquals( false, EA31.isSetVariable() );
    assertTrue( EA31.getVariable().equals( "") );
    i = EA31.unsetId();
    assertTrue( i == libsbml.LIBSBML_OPERATION_FAILED );
    assertEquals( false, EA31.isSetId() );
    assertTrue( EA31.getId().equals( "") );
    assertEquals( false, EA31.isSetIdAttribute() );
    assertTrue( EA31.getIdAttribute().equals( "") );
    assertEquals( false, EA31.isSetVariable() );
    assertTrue( EA31.getVariable().equals( "") );
  }

  public void test_SBase_setName_1()
  {
    String name =  "x12345";
    S31.setName(name);
    assertTrue(S31.getName().equals(name));
    assertEquals( true, S31.isSetName() );
    if (S31.getName() == name);
    {
    }
    S31.setName(S31.getName());
    assertTrue(S31.getName().equals(name));
    S31.setName("");
    assertEquals( false, S31.isSetName() );
    if (S31.getName() != null);
    {
    }
  }

  public void test_SBase_setName_10()
  {
    String name =  "x12345";
    EA32.setName(name);
    assertTrue(EA32.getName().equals(name));
    assertEquals( true, EA32.isSetName() );
    if (EA32.getName() == name);
    {
    }
    EA32.setName(EA32.getName());
    assertTrue(EA32.getName().equals(name));
    EA32.setName("");
    assertEquals( false, EA32.isSetName() );
    if (EA32.getName() != null);
    {
    }
  }

  public void test_SBase_setName_2()
  {
    String name =  "x12345";
    S32.setName(name);
    assertTrue(S32.getName().equals(name));
    assertEquals( true, S32.isSetName() );
    if (S32.getName() == name);
    {
    }
    S32.setName(S32.getName());
    assertTrue(S32.getName().equals(name));
    S32.setName("");
    assertEquals( false, S32.isSetName() );
    if (S32.getName() != null);
    {
    }
  }

  public void test_SBase_setName_3()
  {
    String name =  "x12345";
    E31.setName(name);
    assertTrue(E31.getName().equals(name));
    assertEquals( true, E31.isSetName() );
    if (E31.getName() == name);
    {
    }
    E31.setName(E31.getName());
    assertTrue(E31.getName().equals(name));
    E31.setName("");
    assertEquals( false, E31.isSetName() );
    if (E31.getName() != null);
    {
    }
  }

  public void test_SBase_setName_4()
  {
    String name =  "x12345";
    E32.setName(name);
    assertTrue(E32.getName().equals(name));
    assertEquals( true, E32.isSetName() );
    if (E32.getName() == name);
    {
    }
    E32.setName(E32.getName());
    assertTrue(E32.getName().equals(name));
    E32.setName("");
    assertEquals( false, E32.isSetName() );
    if (E32.getName() != null);
    {
    }
  }

  public void test_SBase_setName_5()
  {
    String name =  "x12345";
    int i = U31.setName(name);
    assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE );
    assertEquals( false, U31.isSetName() );
    assertTrue( U31.getName().equals("") == true );
  }

  public void test_SBase_setName_6()
  {
    String name =  "x12345";
    U32.setName(name);
    assertTrue(U32.getName().equals(name));
    assertEquals( true, U32.isSetName() );
    if (U32.getName() == name);
    {
    }
    U32.setName(U32.getName());
    assertTrue(U32.getName().equals(name));
    U32.setName("");
    assertEquals( false, U32.isSetName() );
    if (U32.getName() != null);
    {
    }
  }

  public void test_SBase_setName_7()
  {
    String name =  "x12345";
    int i = AR31.setName(name);
    assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE );
    assertEquals( false, AR31.isSetName() );
    assertTrue( AR31.getName().equals("") == true );
  }

  public void test_SBase_setName_8()
  {
    String name =  "x12345";
    AR32.setName(name);
    assertTrue(AR32.getName().equals(name));
    assertEquals( true, AR32.isSetName() );
    if (AR32.getName() == name);
    {
    }
    AR32.setName(AR32.getName());
    assertTrue(AR32.getName().equals(name));
    AR32.setName("");
    assertEquals( false, AR32.isSetName() );
    if (AR32.getName() != null);
    {
    }
  }

  public void test_SBase_setName_9()
  {
    String name =  "x12345";
    int i = EA31.setName(name);
    assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE );
    assertEquals( false, EA31.isSetName() );
    assertTrue( EA31.getName().equals("") == true );
  }

  public void test_SBase_setVariable_10()
  {
    String id =  "x12345";
    int i = EA31.setVariable(id);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, EA31.isSetId() );
    assertTrue( EA31.getId().equals(id) == true );
    assertEquals( false, EA31.isSetIdAttribute() );
    assertTrue( EA31.getIdAttribute().equals( "") );
    assertEquals( true, EA31.isSetVariable() );
    assertTrue( EA31.getVariable().equals(id) == true );
    i = EA31.unsetVariable();
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( false, EA31.isSetId() );
    assertTrue( EA31.getId().equals( "") );
    assertEquals( false, EA31.isSetIdAttribute() );
    assertTrue( EA31.getIdAttribute().equals( "") );
    assertEquals( false, EA31.isSetVariable() );
    assertTrue( EA31.getVariable().equals( "") );
  }

  public void test_SBase_setVariable_7()
  {
    String id =  "x12345";
    int i = AR31.setVariable(id);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, AR31.isSetId() );
    assertTrue( AR31.getId().equals(id) == true );
    assertEquals( false, AR31.isSetIdAttribute() );
    assertTrue( AR31.getIdAttribute().equals( "") );
    assertEquals( true, AR31.isSetVariable() );
    assertTrue( AR31.getVariable().equals(id) == true );
    i = AR31.unsetVariable();
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( false, AR31.isSetId() );
    assertTrue( AR31.getId().equals( "") );
    assertEquals( false, AR31.isSetIdAttribute() );
    assertTrue( AR31.getIdAttribute().equals( "") );
    assertEquals( false, AR31.isSetVariable() );
    assertTrue( AR31.getVariable().equals( "") );
  }

  public void test_SBase_setVariable_8()
  {
    String id =  "x12345";
    int i = AR31.setVariable(id);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, AR31.isSetId() );
    assertTrue( AR31.getId().equals(id) == true );
    assertEquals( false, AR31.isSetIdAttribute() );
    assertTrue( AR31.getIdAttribute().equals( "") );
    assertEquals( true, AR31.isSetVariable() );
    assertTrue( AR31.getVariable().equals(id) == true );
    i = AR31.unsetVariable();
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( false, AR31.isSetId() );
    assertTrue( AR31.getId().equals( "") );
    assertEquals( false, AR31.isSetIdAttribute() );
    assertTrue( AR31.getIdAttribute().equals( "") );
    assertEquals( false, AR31.isSetVariable() );
    assertTrue( AR31.getVariable().equals( "") );
  }

  public void test_SBase_setVariable_9()
  {
    String id =  "x12345";
    int i = EA31.setVariable(id);
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( true, EA31.isSetId() );
    assertTrue( EA31.getId().equals(id) == true );
    assertEquals( false, EA31.isSetIdAttribute() );
    assertTrue( EA31.getIdAttribute().equals( "") );
    assertEquals( true, EA31.isSetVariable() );
    assertTrue( EA31.getVariable().equals(id) == true );
    i = EA31.unsetVariable();
    assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
    assertEquals( false, EA31.isSetId() );
    assertTrue( EA31.getId().equals( "") );
    assertEquals( false, EA31.isSetIdAttribute() );
    assertTrue( EA31.getIdAttribute().equals( "") );
    assertEquals( false, EA31.isSetVariable() );
    assertTrue( EA31.getVariable().equals( "") );
  }

  /**
   * Loads the SWIG-generated libSBML Java module when this class is
   * loaded, or reports a sensible diagnostic message about why it failed.
   */
  static
  {
    String varname;
    String shlibname;

    if (System.getProperty("mrj.version") != null)
    {
      varname = "DYLD_LIBRARY_PATH";    // We're on a Mac.
      shlibname = "libsbmlj.jnilib and/or libsbml.dylib";
    }
    else
    {
      varname = "LD_LIBRARY_PATH";      // We're not on a Mac.
      shlibname = "libsbmlj.so and/or libsbml.so";
    }

    try
    {
      System.loadLibrary("sbmlj");
      // For extra safety, check that the jar file is in the classpath.
      Class.forName("org.sbml.libsbml.libsbml");
    }
    catch (SecurityException e)
    {
      e.printStackTrace();
      System.err.println("Could not load the libSBML library files due to a"+
                         " security exception.\n");
      System.exit(1);
    }
    catch (UnsatisfiedLinkError e)
    {
      e.printStackTrace();
      System.err.println("Error: could not link with the libSBML library files."+
                         " It is likely\nyour " + varname +
                         " environment variable does not include the directories\n"+
                         "containing the " + shlibname + " library files.\n");
      System.exit(1);
    }
    catch (ClassNotFoundException e)
    {
      e.printStackTrace();
      System.err.println("Error: unable to load the file libsbmlj.jar."+
                         " It is likely\nyour -classpath option and CLASSPATH" +
                         " environment variable\n"+
                         "do not include the path to libsbmlj.jar.\n");
      System.exit(1);
    }
  }
}
