///  @file    TestSBMLConvertStrict.cs
///  @brief   SBMLConvert unit tests for strict conversion
///  @author  Frank Bergmann (Csharp conversion)
///  @author  Akiya Jouraku (Csharp conversion)
///  @author  Sarah Keating 
///  
///  ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
/// 
///  DO NOT EDIT THIS FILE.
/// 
///  This file was generated automatically by converting the file located at
///  src/sbml/test/TestSBMLConvertStrict.cpp
///  using the conversion program dev/utilities/translateTests/translateTests.pl.
///  Any changes made here will be lost the next time the file is regenerated.
/// 
///  -----------------------------------------------------------------------------
///  This file is part of libSBML.  Please visit http://sbml.org for more
///  information about SBML, and the latest version of libSBML.
/// 
///  Copyright 2005-2010 California Institute of Technology.
///  Copyright 2002-2005 California Institute of Technology and
///                      Japan Science and Technology Corporation.
///  
///  This library is free software; you can redistribute it and/or modify it
///  under the terms of the GNU Lesser General Public License as published by
///  the Free Software Foundation.  A copy of the license agreement is provided
///  in the file named "LICENSE.txt" included with this software distribution
///  and also available online as http://sbml.org/software/libsbml/license.html
///  -----------------------------------------------------------------------------


namespace LibSBMLCSTest.sbml {

  using libsbmlcs;

  using System;

  using System.IO;

  public class TestSBMLConvertStrict {
    public class AssertionError : System.Exception 
    {
      public AssertionError() : base()
      {
        
      }
    }


    static void assertTrue(bool condition)
    {
      if (condition == true)
      {
        return;
      }
      throw new AssertionError();
    }

    static void assertEquals(object a, object b)
    {
      if ( (a == null) && (b == null) )
      {
        return;
      }
      else if ( (a == null) || (b == null) )
      {
        throw new AssertionError();
      }
      else if (a.Equals(b))
      {
        return;
      }
  
      throw new AssertionError();
    }

    static void assertNotEquals(object a, object b)
    {
      if ( (a == null) && (b == null) )
      {
        throw new AssertionError();
      }
      else if ( (a == null) || (b == null) )
      {
        return;
      }
      else if (a.Equals(b))
      {
        throw new AssertionError();
      }
    }

    static void assertEquals(bool a, bool b)
    {
      if ( a == b )
      {
        return;
      }
      throw new AssertionError();
    }

    static void assertNotEquals(bool a, bool b)
    {
      if ( a != b )
      {
        return;
      }
      throw new AssertionError();
    }

    static void assertEquals(int a, int b)
    {
      if ( a == b )
      {
        return;
      }
      throw new AssertionError();
    }

    static void assertNotEquals(int a, int b)
    {
      if ( a != b )
      {
        return;
      }
      throw new AssertionError();
    }


    public void test_SBMLConvertStrict_convertFromL1_L2_stoich()
    {
      SBMLDocument d = new  SBMLDocument(1,2);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      Species s = m.createSpecies();
      s.setId( "s");
      s.setCompartment( "c");
      Reaction r = m.createReaction();
      r.setId( "r");
      SpeciesReference sr = r.createReactant();
      sr.setSpecies( "s");
      sr.setStoichiometry(3);
      sr.setDenominator(2);
      assertTrue( d.setLevelAndVersion(2,4,true) == true );
      m = d.getModel();
      sr = m.getReaction(0).getReactant(0);
      assertTrue( sr.isSetStoichiometryMath() == 1 );
      string math = libsbml.formulaToString(sr.getStoichiometryMath().getMath());
      assertTrue( (  "(3/2)" != math ) == false );
      assertTrue( sr.getStoichiometry() == 1 );
      assertTrue( sr.getDenominator() == 1 );
      d = null;
    }

    public void test_SBMLConvertStrict_convertFromL1_L2_stoich1()
    {
      SBMLDocument d = new  SBMLDocument(1,2);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      Species s = m.createSpecies();
      s.setId( "s");
      s.setCompartment( "c");
      Reaction r = m.createReaction();
      r.setId( "r");
      SpeciesReference sr = r.createReactant();
      sr.setSpecies( "s");
      sr.setStoichiometry(3);
      assertTrue( d.setLevelAndVersion(2,4,true) == true );
      m = d.getModel();
      sr = m.getReaction(0).getReactant(0);
      assertTrue( sr.isSetStoichiometryMath() == 0 );
      assertTrue( sr.getStoichiometry() == 3 );
      d = null;
    }

    public void test_SBMLConvertStrict_convertFromL1_L3_localParameters()
    {
      SBMLDocument d = new  SBMLDocument(1,2);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      Species s = m.createSpecies();
      s.setId( "s");
      s.setCompartment( "c");
      Reaction r = m.createReaction();
      r.setId( "r");
      SpeciesReference sr = r.createReactant();
      sr.setSpecies( "s");
      sr.setStoichiometry(1);
      KineticLaw kl = r.createKineticLaw();
      kl.setFormula( "1*2");
      Parameter p = kl.createParameter();
      p.setName( "p1");
      assertTrue( d.setLevelAndVersion(3,1,true) == true );
      m = d.getModel();
      r = m.getReaction(0);
      kl = r.getKineticLaw();
      LocalParameter lp = kl.getLocalParameter(0);
      assertTrue( lp.isSetId() == true );
      d = null;
    }

    public void test_SBMLConvertStrict_convertFromL1_L3_stoich()
    {
      SBMLDocument d = new  SBMLDocument(1,2);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      Species s = m.createSpecies();
      s.setId( "s");
      s.setCompartment( "c");
      Reaction r = m.createReaction();
      r.setId( "r");
      SpeciesReference sr = r.createReactant();
      sr.setSpecies( "s");
      sr.setStoichiometry(3);
      sr.setDenominator(2);
      assertTrue( d.setLevelAndVersion(3,1,true) == true );
      m = d.getModel();
      sr = m.getReaction(0).getReactant(0);
      assertTrue( sr.isSetId() == true );
      string math = libsbml.formulaToString(m.getInitialAssignment(0).getMath());
      assertTrue( (  "(3/2)" != math ) == false );
      assertTrue( ( m.getInitialAssignment(0).getSymbol() != sr.getId() ) == false );
      assertTrue( sr.getDenominator() == 1 );
      d = null;
    }

    public void test_SBMLConvertStrict_convertFromL1_L3_stoich1()
    {
      SBMLDocument d = new  SBMLDocument(1,2);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      Species s = m.createSpecies();
      s.setId( "s");
      s.setCompartment( "c");
      Reaction r = m.createReaction();
      r.setId( "r");
      SpeciesReference sr = r.createReactant();
      sr.setSpecies( "s");
      sr.setStoichiometry(3);
      assertTrue( d.setLevelAndVersion(3,1,true) == true );
      m = d.getModel();
      sr = m.getReaction(0).getReactant(0);
      assertTrue( sr.isSetId() == false );
      assertTrue( sr.getStoichiometry() == 3 );
      assertTrue( sr.getDenominator() == 1 );
      d = null;
    }

    public void test_SBMLConvertStrict_convertFromL2_L1_stoich()
    {
      SBMLDocument d = new  SBMLDocument(2,2);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      Species s = m.createSpecies();
      s.setId( "s");
      s.setCompartment( "c");
      Reaction r = m.createReaction();
      r.setId( "r");
      SpeciesReference sr = r.createReactant();
      sr.setSpecies( "s");
      sr.setStoichiometry(2);
      assertTrue( d.setLevelAndVersion(1,2,true) == true );
      m = d.getModel();
      sr = m.getReaction(0).getReactant(0);
      assertTrue( sr.getStoichiometry() == 2 );
      assertTrue( sr.getDenominator() == 1 );
      d = null;
    }

    public void test_SBMLConvertStrict_convertFromL2_L1_stoich1()
    {
      SBMLDocument d = new  SBMLDocument(2,2);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      Species s = m.createSpecies();
      s.setId( "s");
      s.setCompartment( "c");
      Reaction r = m.createReaction();
      r.setId( "r");
      SpeciesReference sr = r.createReactant();
      sr.setSpecies( "s");
      StoichiometryMath sm = sr.createStoichiometryMath();
      ASTNode ast = new  ASTNode();
      ast.setValue(5,2);
      sm.setMath(ast);
      assertTrue( d.setLevelAndVersion(1,2,true) == true );
      m = d.getModel();
      sr = m.getReaction(0).getReactant(0);
      assertTrue( sr.isSetStoichiometryMath() == 0 );
      assertTrue( sr.getStoichiometry() == 5 );
      assertTrue( sr.getDenominator() == 2 );
      d = null;
      ast = null;
    }

    public void test_SBMLConvertStrict_convertFromL2_L1_stoich2()
    {
      SBMLDocument d = new  SBMLDocument(2,2);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      Species s = m.createSpecies();
      s.setId( "s");
      s.setCompartment( "c");
      Reaction r = m.createReaction();
      r.setId( "r");
      SpeciesReference sr = r.createReactant();
      sr.setSpecies( "s");
      sr.setStoichiometry(2.5);
      assertTrue( d.setLevelAndVersion(1,2,true) == false );
      d = null;
    }

    public void test_SBMLConvertStrict_convertFromL2_L1_stoich3()
    {
      SBMLDocument d = new  SBMLDocument(2,2);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      Species s = m.createSpecies();
      s.setId( "s");
      s.setCompartment( "c");
      Reaction r = m.createReaction();
      r.setId( "r");
      SpeciesReference sr = r.createReactant();
      sr.setSpecies( "s");
      StoichiometryMath sm = sr.createStoichiometryMath();
      ASTNode ast = new  ASTNode();
      ast.setValue(5);
      sm.setMath(ast);
      assertTrue( d.setLevelAndVersion(1,2,true) == true );
      m = d.getModel();
      sr = m.getReaction(0).getReactant(0);
      assertTrue( sr.isSetStoichiometryMath() == 0 );
      assertTrue( sr.getStoichiometry() == 5 );
      assertTrue( sr.getDenominator() == 1 );
      d = null;
      ast = null;
    }

    public void test_SBMLConvertStrict_convertFromL2_L1_stoich4()
    {
      SBMLDocument d = new  SBMLDocument(2,2);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      Species s = m.createSpecies();
      s.setId( "s");
      s.setCompartment( "c");
      Reaction r = m.createReaction();
      r.setId( "r");
      SpeciesReference sr = r.createReactant();
      sr.setSpecies( "s");
      StoichiometryMath sm = sr.createStoichiometryMath();
      ASTNode math = libsbml.parseFormula("5/2");
      sm.setMath(math);
      math = null;
      assertTrue( d.setLevelAndVersion(1,2,true) == false );
      d = null;
    }

    public void test_SBMLConvertStrict_convertFromL2_L3_stoich()
    {
      SBMLDocument d = new  SBMLDocument(2,4);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      c.setSpatialDimensions(3);
      c.setConstant(true);
      Species s = m.createSpecies();
      s.setId( "s");
      s.setCompartment( "c");
      s.setHasOnlySubstanceUnits(false);
      s.setBoundaryCondition(false);
      s.setConstant(false);
      Reaction r = m.createReaction();
      r.setId( "r");
      r.setReversible(false);
      r.setFast(false);
      SpeciesReference sr = r.createReactant();
      sr.setSpecies( "s");
      sr.setId( "XREF");
      sr.setStoichiometry(3.2);
      assertTrue( d.setLevelAndVersion(3,1,true) == true );
      assertTrue( d.getLevel() == 3 );
      assertTrue( d.getVersion() == 1 );
      m = d.getModel();
      sr = m.getReaction(0).getReactant(0);
      assertTrue( sr.getStoichiometry() == 3.2 );
      d = null;
    }

    public void test_SBMLConvertStrict_convertFromL2_L3_stoich1()
    {
      SBMLDocument d = new  SBMLDocument(2,4);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      c.setSpatialDimensions(3);
      c.setConstant(true);
      Species s = m.createSpecies();
      s.setId( "s");
      s.setCompartment( "c");
      s.setHasOnlySubstanceUnits(false);
      s.setBoundaryCondition(false);
      s.setConstant(false);
      Parameter p = m.createParameter();
      p.setId( "p");
      Reaction r = m.createReaction();
      r.setId( "r");
      r.setReversible(false);
      r.setFast(false);
      SpeciesReference sr = r.createReactant();
      sr.setSpecies( "s");
      sr.setId( "XREF");
      StoichiometryMath sm = sr.createStoichiometryMath();
      ASTNode math = libsbml.parseFormula("p");
      sm.setMath(math);
      math = null;
      assertTrue( m.getNumRules() == 0 );
      assertTrue( d.setLevelAndVersion(3,1,true) == true );
      assertTrue( d.getLevel() == 3 );
      assertTrue( d.getVersion() == 1 );
      m = d.getModel();
      assertTrue( m.getNumRules() == 1 );
      assertTrue( (  "XREF" != m.getRule(0).getVariable() ) == false );
      sr = m.getReaction(0).getReactant(0);
      assertTrue( sr.isSetStoichiometry() == 0 );
      d = null;
    }

    public void test_SBMLConvertStrict_convertFromL2_L3_stoich2()
    {
      SBMLDocument d = new  SBMLDocument(2,4);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      c.setSpatialDimensions(3);
      c.setConstant(true);
      Species s = m.createSpecies();
      s.setId( "s");
      s.setCompartment( "c");
      s.setHasOnlySubstanceUnits(false);
      s.setBoundaryCondition(false);
      s.setConstant(false);
      Parameter p = m.createParameter();
      p.setId( "p");
      Reaction r = m.createReaction();
      r.setId( "r");
      r.setReversible(false);
      r.setFast(false);
      SpeciesReference sr = r.createReactant();
      sr.setSpecies( "s");
      StoichiometryMath sm = sr.createStoichiometryMath();
      ASTNode math = libsbml.parseFormula("p");
      sm.setMath(math);
      math = null;
      assertTrue( m.getNumRules() == 0 );
      assertTrue( sr.isSetId() == false );
      assertTrue( d.setLevelAndVersion(3,1,true) == true );
      assertTrue( d.getLevel() == 3 );
      assertTrue( d.getVersion() == 1 );
      m = d.getModel();
      sr = m.getReaction(0).getReactant(0);
      assertTrue( m.getNumRules() == 1 );
      assertTrue( ( sr.getId() != m.getRule(0).getVariable() ) == false );
      assertTrue( sr.isSetId() == true );
      assertTrue( sr.isSetStoichiometry() == 0 );
      d = null;
    }

    public void test_SBMLConvertStrict_convertFromL2_L3_stoichMath1()
    {
      SBMLDocument d = new  SBMLDocument(2,5);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      c.setSpatialDimensions(3);
      c.setConstant(true);
      Species s = m.createSpecies();
      s.setId( "s");
      s.setCompartment( "c");
      s.setHasOnlySubstanceUnits(false);
      s.setBoundaryCondition(false);
      s.setConstant(false);
      Reaction r = m.createReaction();
      r.setId( "r");
      r.setReversible(false);
      r.setFast(false);
      SpeciesReference sr = r.createReactant();
      sr.setId( "XREF");
      sr.setSpecies( "s");
      sr.setConstant(false);
      StoichiometryMath sm = sr.createStoichiometryMath();
      ASTNode math = new ASTNode(libsbml.AST_RATIONAL);
      math.setValue((long)(3),(long)(2));
      sm.setMath(math);
      math = null;
      string out = writeSBMLToStdString;
      SBMLDocument doc = libsbml.readSBMLFromString();
      assertTrue( doc.setLevelAndVersion(3,1,true) == true );
      SpeciesReference sr1 = doc.getModel().getReaction(0).getReactant(0);
      assertEquals( true, util_isEqual );
      d = null;
      doc = null;
    }

    public void test_SBMLConvertStrict_convertFromL3_L1_stoichMath1()
    {
      SBMLDocument d = new  SBMLDocument(3,1);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      c.setSpatialDimensions(3);
      c.setConstant(true);
      Species s = m.createSpecies();
      s.setId( "s");
      s.setCompartment( "c");
      s.setHasOnlySubstanceUnits(false);
      s.setBoundaryCondition(false);
      s.setConstant(false);
      Reaction r = m.createReaction();
      r.setId( "r");
      r.setReversible(false);
      r.setFast(false);
      SpeciesReference sr = r.createReactant();
      sr.setId( "XREF");
      sr.setSpecies( "s");
      sr.setConstant(false);
      Rule rule = new  RateRule(3,1);
      rule.setVariable( "XREF");
      ASTNode math = libsbml.parseFormula("0.001");
      rule.setMath(math);
      math = null;
      m.addRule(rule);
      assertTrue( d.setLevelAndVersion(1,2,true) == false );
      d = null;
      rule = null;
    }

    public void test_SBMLConvertStrict_convertFromL3_L1_stoichMath2()
    {
      SBMLDocument d = new  SBMLDocument(3,1);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      c.setSpatialDimensions(3);
      c.setConstant(true);
      Species s = m.createSpecies();
      s.setId( "s");
      s.setCompartment( "c");
      s.setHasOnlySubstanceUnits(false);
      s.setBoundaryCondition(false);
      s.setConstant(false);
      Reaction r = m.createReaction();
      r.setId( "r");
      r.setReversible(false);
      r.setFast(false);
      SpeciesReference sr = r.createReactant();
      sr.setId( "XREF");
      sr.setSpecies( "s");
      sr.setConstant(false);
      sr.setStoichiometry(1.0);
      Rule rule = new  RateRule(3,1);
      rule.setVariable( "XREF");
      ASTNode math = libsbml.parseFormula("0.001");
      rule.setMath(math);
      math = null;
      m.addRule(rule);
      assertTrue( d.setLevelAndVersion(1,2,true) == false );
      d = null;
      rule = null;
    }

    public void test_SBMLConvertStrict_convertFromL3_L1_stoichMath3()
    {
      SBMLDocument d = new  SBMLDocument(3,1);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      c.setSpatialDimensions(3);
      c.setConstant(true);
      Species s = m.createSpecies();
      s.setId( "s");
      s.setCompartment( "c");
      s.setHasOnlySubstanceUnits(false);
      s.setBoundaryCondition(false);
      s.setConstant(false);
      Reaction r = m.createReaction();
      r.setId( "r");
      r.setReversible(false);
      r.setFast(false);
      SpeciesReference sr = r.createReactant();
      sr.setSpecies( "s");
      sr.setConstant(true);
      sr.setStoichiometry(1.0);
      assertTrue( d.setLevelAndVersion(1,2,true) == true );
      m = d.getModel();
      sr = m.getReaction(0).getReactant(0);
      assertTrue( sr.isSetStoichiometryMath() == 0 );
      assertTrue( sr.getStoichiometry() == 1 );
      assertTrue( sr.getDenominator() == 1 );
      d = null;
    }

    public void test_SBMLConvertStrict_convertFromL3_L1_stoichMath4()
    {
      SBMLDocument d = new  SBMLDocument(3,1);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      c.setSpatialDimensions(3);
      c.setConstant(true);
      Species s = m.createSpecies();
      s.setId( "s");
      s.setCompartment( "c");
      s.setHasOnlySubstanceUnits(false);
      s.setBoundaryCondition(false);
      s.setConstant(false);
      Reaction r = m.createReaction();
      r.setId( "r");
      r.setReversible(false);
      r.setFast(false);
      SpeciesReference sr = r.createReactant();
      sr.setSpecies( "s");
      sr.setConstant(true);
      assertTrue( d.setLevelAndVersion(1,2,true) == false );
      d = null;
    }

    public void test_SBMLConvertStrict_convertFromL3_L1_stoichMath5()
    {
      SBMLDocument d = new  SBMLDocument(3,1);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      c.setSpatialDimensions(3);
      c.setConstant(true);
      Species s = m.createSpecies();
      s.setId( "s");
      s.setCompartment( "c");
      s.setHasOnlySubstanceUnits(false);
      s.setBoundaryCondition(false);
      s.setConstant(false);
      Reaction r = m.createReaction();
      r.setId( "r");
      r.setReversible(false);
      r.setFast(false);
      SpeciesReference sr = r.createReactant();
      sr.setId( "XREF");
      sr.setSpecies( "s");
      sr.setConstant(false);
      Rule rule = new  AssignmentRule(3,1);
      rule.setVariable( "XREF");
      ASTNode math = libsbml.parseFormula("0.001");
      rule.setMath(math);
      math = null;
      m.addRule(rule);
      assertTrue( d.setLevelAndVersion(1,2,true) == false );
      d = null;
      rule = null;
    }

    public void test_SBMLConvertStrict_convertFromL3_L1_stoichMath6()
    {
      SBMLDocument d = new  SBMLDocument(3,1);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      c.setSpatialDimensions(3);
      c.setConstant(true);
      Species s = m.createSpecies();
      s.setId( "s");
      s.setCompartment( "c");
      s.setHasOnlySubstanceUnits(false);
      s.setBoundaryCondition(false);
      s.setConstant(false);
      Reaction r = m.createReaction();
      r.setId( "r");
      r.setReversible(false);
      r.setFast(false);
      SpeciesReference sr = r.createReactant();
      sr.setId( "XREF");
      sr.setSpecies( "s");
      sr.setConstant(false);
      sr.setStoichiometry(1.0);
      Rule rule = new  AssignmentRule(3,1);
      rule.setVariable( "XREF");
      ASTNode math = libsbml.parseFormula("0.001");
      rule.setMath(math);
      math = null;
      m.addRule(rule);
      assertTrue( d.setLevelAndVersion(1,2,true) == false );
      d = null;
      rule = null;
    }

    public void test_SBMLConvertStrict_convertFromL3_L1_stoichMath7()
    {
      SBMLDocument d = new  SBMLDocument(3,1);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      c.setSpatialDimensions(3);
      c.setConstant(true);
      Species s = m.createSpecies();
      s.setId( "s");
      s.setCompartment( "c");
      s.setHasOnlySubstanceUnits(false);
      s.setBoundaryCondition(false);
      s.setConstant(false);
      Reaction r = m.createReaction();
      r.setId( "r");
      r.setReversible(false);
      r.setFast(false);
      SpeciesReference sr = r.createReactant();
      sr.setId( "XREF");
      sr.setSpecies( "s");
      sr.setConstant(false);
      InitialAssignment ia = m.createInitialAssignment();
      ia.setSymbol( "XREF");
      ASTNode math = libsbml.parseFormula("0.001");
      ia.setMath(math);
      math = null;
      assertTrue( d.setLevelAndVersion(1,2,true) == false );
      d = null;
    }

    public void test_SBMLConvertStrict_convertFromL3_L1_stoichMath8()
    {
      SBMLDocument d = new  SBMLDocument(3,1);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      c.setSpatialDimensions(3);
      c.setConstant(true);
      Species s = m.createSpecies();
      s.setId( "s");
      s.setCompartment( "c");
      s.setHasOnlySubstanceUnits(false);
      s.setBoundaryCondition(false);
      s.setConstant(false);
      Reaction r = m.createReaction();
      r.setId( "r");
      r.setReversible(false);
      r.setFast(false);
      SpeciesReference sr = r.createReactant();
      sr.setId( "XREF");
      sr.setSpecies( "s");
      sr.setConstant(false);
      sr.setStoichiometry(1.0);
      InitialAssignment ia = m.createInitialAssignment();
      ia.setSymbol( "XREF");
      ASTNode math = libsbml.parseFormula("0.001");
      ia.setMath(math);
      math = null;
      assertTrue( d.setLevelAndVersion(1,2,true) == false );
      d = null;
    }

    public void test_SBMLConvertStrict_convertFromL3_L1_stoichMath9()
    {
      SBMLDocument d = new  SBMLDocument(3,1);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      c.setSpatialDimensions(3);
      c.setConstant(true);
      Species s = m.createSpecies();
      s.setId( "s");
      s.setCompartment( "c");
      s.setHasOnlySubstanceUnits(false);
      s.setBoundaryCondition(false);
      s.setConstant(false);
      Reaction r = m.createReaction();
      r.setId( "r");
      r.setReversible(false);
      r.setFast(false);
      SpeciesReference sr = r.createReactant();
      sr.setSpecies( "s");
      sr.setConstant(true);
      sr.setId( "XREF");
      assertTrue( d.setLevelAndVersion(1,2,true) == false );
      d = null;
    }

    public void test_SBMLConvertStrict_convertFromL3_doubleExponent()
    {
      SBMLDocument d = new  SBMLDocument(3,1);
      Model m = d.createModel();
      UnitDefinition c = m.createUnitDefinition();
      c.setId( "ud");
      Unit u = c.createUnit();
      u.setKind(libsbml.UnitKind_forName("mole"));
      u.setExponent(1.5);
      u.setScale(0);
      u.setMultiplier(1.0);
      assertTrue( d.setLevelAndVersion(2,4,true) == false );
      d = null;
    }

    public void test_SBMLConvertStrict_convertFromL3_fast()
    {
      SBMLDocument d = new  SBMLDocument(3,1);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      c.setSpatialDimensions(3);
      c.setConstant(true);
      Species s = m.createSpecies();
      s.setId( "s");
      s.setCompartment( "c");
      s.setHasOnlySubstanceUnits(false);
      s.setBoundaryCondition(false);
      s.setConstant(false);
      Reaction r = m.createReaction();
      r.setId( "r");
      r.setReversible(false);
      r.setFast(true);
      SpeciesReference sr = r.createReactant();
      sr.setSpecies( "s");
      sr.setConstant(false);
      assertTrue( d.setLevelAndVersion(2,4,true) == true );
      m = d.getModel();
      r = m.getReaction(0);
      assertTrue( r.isSetFast() == true );
      assertTrue( r.getFast() == true );
      d = null;
    }

    public void test_SBMLConvertStrict_convertFromL3_spatialDim1()
    {
      SBMLDocument d = new  SBMLDocument(3,1);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      c.setSpatialDimensions(3);
      c.setConstant(true);
      assertTrue( d.setLevelAndVersion(2,4,true) == true );
      m = d.getModel();
      Compartment p = m.getCompartment(0);
      assertTrue((  "c" == p.getId() ));
      assertTrue( p.getConstant() == true );
      assertTrue( p.getSpatialDimensions() == 3 );
      d = null;
    }

    public void test_SBMLConvertStrict_convertFromL3_spatialDim2()
    {
      SBMLDocument d = new  SBMLDocument(3,1);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      c.setSpatialDimensions(2);
      c.setConstant(true);
      assertTrue( d.setLevelAndVersion(2,4,true) == true );
      m = d.getModel();
      Compartment p = m.getCompartment(0);
      assertTrue((  "c" == p.getId() ));
      assertTrue( p.getConstant() == true );
      assertTrue( p.getSpatialDimensions() == 2 );
      d = null;
    }

    public void test_SBMLConvertStrict_convertFromL3_spatialDim3()
    {
      SBMLDocument d = new  SBMLDocument(3,1);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      c.setSpatialDimensions(1);
      c.setConstant(true);
      assertTrue( d.setLevelAndVersion(2,4,true) == true );
      m = d.getModel();
      Compartment p = m.getCompartment(0);
      assertTrue((  "c" == p.getId() ));
      assertTrue( p.getConstant() == true );
      assertTrue( p.getSpatialDimensions() == 1 );
      d = null;
    }

    public void test_SBMLConvertStrict_convertFromL3_spatialDim4()
    {
      SBMLDocument d = new  SBMLDocument(3,1);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      c.setSpatialDimensions(0);
      c.setConstant(true);
      assertTrue( d.setLevelAndVersion(2,4,true) == true );
      m = d.getModel();
      Compartment p = m.getCompartment(0);
      assertTrue((  "c" == p.getId() ));
      assertTrue( p.getConstant() == true );
      assertTrue( p.getSpatialDimensions() == 0 );
      d = null;
    }

    public void test_SBMLConvertStrict_convertFromL3_spatialDim5()
    {
      SBMLDocument d = new  SBMLDocument(3,1);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      c.setSpatialDimensions(3.2);
      c.setConstant(true);
      assertTrue( d.setLevelAndVersion(2,4,true) == false );
      d = null;
    }

    public void test_SBMLConvertStrict_convertFromL3_stoichMath1()
    {
      SBMLDocument d = new  SBMLDocument(3,1);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      c.setSpatialDimensions(3);
      c.setConstant(true);
      Species s = m.createSpecies();
      s.setId( "s");
      s.setCompartment( "c");
      s.setHasOnlySubstanceUnits(false);
      s.setBoundaryCondition(false);
      s.setConstant(false);
      Reaction r = m.createReaction();
      r.setId( "r");
      r.setReversible(false);
      r.setFast(false);
      SpeciesReference sr = r.createReactant();
      sr.setId( "XREF");
      sr.setSpecies( "s");
      sr.setConstant(false);
      Rule rule = new  RateRule(3,1);
      rule.setVariable( "XREF");
      ASTNode math = libsbml.parseFormula("0.001");
      rule.setMath(math);
      math = null;
      m.addRule(rule);
      assertTrue( d.setLevelAndVersion(2,4,true) == true );
      m = d.getModel();
      assertTrue( m.getNumParameters() == 1 );
      Parameter p = m.getParameter(0);
      assertTrue((  "parameterId_0" == p.getId() ));
      assertTrue( p.getConstant() == false );
      assertTrue((  "parameterId_0" == m.getRule(0).getVariable() ));
      sr = m.getReaction(0).getReactant(0);
      assertTrue( sr.isSetStoichiometryMath() == 1 );
      string mathstr = libsbml.formulaToString(sr.getStoichiometryMath().getMath());
      assertTrue((  "parameterId_0" == mathstr ));
      d = null;
      rule = null;
    }

    public void test_SBMLConvertStrict_convertFromL3_stoichMath10()
    {
      SBMLDocument d = new  SBMLDocument(3,1);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      c.setSpatialDimensions(3);
      c.setConstant(true);
      Species s = m.createSpecies();
      s.setId( "s");
      s.setCompartment( "c");
      s.setHasOnlySubstanceUnits(false);
      s.setBoundaryCondition(false);
      s.setConstant(false);
      Reaction r = m.createReaction();
      r.setId( "r");
      r.setReversible(false);
      r.setFast(false);
      SpeciesReference sr = r.createReactant();
      sr.setId( "XREF");
      sr.setSpecies( "s");
      sr.setConstant(false);
      sr.setStoichiometry(4.0);
      InitialAssignment ia = m.createInitialAssignment();
      ia.setSymbol( "XREF");
      ASTNode math = libsbml.parseFormula("0.001");
      ia.setMath(math);
      math = null;
      ASTNode math1 = libsbml.parseFormula("1");
      Rule rr = m.createRateRule();
      rr.setVariable( "XREF");
      rr.setMath(math1);
      math1 = null;
      assertTrue( d.setLevelAndVersion(2,1,true) == true );
      m = d.getModel();
      assertTrue( m.getNumInitialAssignments() == 0 );
      assertTrue( m.getNumRules() == 1 );
      assertTrue( m.getNumParameters() == 1 );
      sr = m.getReaction(0).getReactant(0);
      assertTrue( sr.isSetStoichiometryMath() == 1 );
      string mathstr = libsbml.formulaToString(sr.getStoichiometryMath().getMath());
      assertTrue((  "parameterId_0" == mathstr ));
      Parameter p = m.getParameter(0);
      assertTrue((  "parameterId_0" == p.getId() ));
      assertEquals( true, util_isEqual );
      rr = m.getRule(0);
      assertTrue((  "parameterId_0" == rr.getVariable() ));
      mathstr = libsbml.formulaToString(rr.getMath());
      assertTrue((  "1" == mathstr ));
      d = null;
    }

    public void test_SBMLConvertStrict_convertFromL3_stoichMath11()
    {
      SBMLDocument d = new  SBMLDocument(3,1);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      c.setSpatialDimensions(3);
      c.setConstant(true);
      Species s = m.createSpecies();
      s.setId( "s");
      s.setCompartment( "c");
      s.setHasOnlySubstanceUnits(false);
      s.setBoundaryCondition(false);
      s.setConstant(false);
      Reaction r = m.createReaction();
      r.setId( "r");
      r.setReversible(false);
      r.setFast(false);
      SpeciesReference sr = r.createReactant();
      sr.setId( "XREF");
      sr.setSpecies( "s");
      sr.setConstant(false);
      sr.setStoichiometry(4.0);
      InitialAssignment ia = m.createInitialAssignment();
      ia.setSymbol( "XREF");
      ASTNode math = libsbml.parseFormula("0.001");
      ia.setMath(math);
      math = null;
      ASTNode math1 = libsbml.parseFormula("1");
      Rule rr = m.createRateRule();
      rr.setVariable( "XREF");
      rr.setMath(math1);
      math1 = null;
      assertTrue( d.setLevelAndVersion(2,4,true) == true );
      m = d.getModel();
      assertTrue( m.getNumInitialAssignments() == 1 );
      assertTrue( m.getNumRules() == 1 );
      assertTrue( m.getNumParameters() == 1 );
      sr = m.getReaction(0).getReactant(0);
      assertTrue( sr.isSetStoichiometryMath() == 1 );
      string mathstr = libsbml.formulaToString(sr.getStoichiometryMath().getMath());
      assertTrue((  "parameterId_0" == mathstr ));
      Parameter p = m.getParameter(0);
      assertTrue((  "parameterId_0" == p.getId() ));
      assertEquals( true, util_isEqual );
      rr = m.getRule(0);
      assertTrue((  "parameterId_0" == rr.getVariable() ));
      mathstr = libsbml.formulaToString(rr.getMath());
      assertTrue((  "1" == mathstr ));
      ia = m.getInitialAssignment(0);
      assertTrue((  "parameterId_0" == ia.getSymbol() ));
      mathstr = libsbml.formulaToString(ia.getMath());
      assertTrue((  "0.001" == mathstr ));
      d = null;
    }

    public void test_SBMLConvertStrict_convertFromL3_stoichMath2()
    {
      SBMLDocument d = new  SBMLDocument(3,1);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      c.setSpatialDimensions(3);
      c.setConstant(true);
      Species s = m.createSpecies();
      s.setId( "s");
      s.setCompartment( "c");
      s.setHasOnlySubstanceUnits(false);
      s.setBoundaryCondition(false);
      s.setConstant(false);
      Reaction r = m.createReaction();
      r.setId( "r");
      r.setReversible(false);
      r.setFast(false);
      SpeciesReference sr = r.createReactant();
      sr.setId( "XREF");
      sr.setSpecies( "s");
      sr.setConstant(false);
      sr.setStoichiometry(1.0);
      Rule rule = new  RateRule(3,1);
      rule.setVariable( "XREF");
      ASTNode math = libsbml.parseFormula("0.001");
      rule.setMath(math);
      math = null;
      m.addRule(rule);
      assertTrue( d.setLevelAndVersion(2,4,true) == true );
      m = d.getModel();
      assertTrue( m.getNumParameters() == 1 );
      Parameter p = m.getParameter(0);
      assertTrue((  "parameterId_0" == p.getId() ));
      assertTrue( p.getConstant() == false );
      assertTrue((  "parameterId_0" == m.getRule(0).getVariable() ));
      sr = m.getReaction(0).getReactant(0);
      assertTrue( sr.isSetStoichiometryMath() == 1 );
      string mathstr = libsbml.formulaToString(sr.getStoichiometryMath().getMath());
      assertTrue((  "parameterId_0" == mathstr ));
      d = null;
      rule = null;
    }

    public void test_SBMLConvertStrict_convertFromL3_stoichMath3()
    {
      SBMLDocument d = new  SBMLDocument(3,1);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      c.setSpatialDimensions(3);
      c.setConstant(true);
      Species s = m.createSpecies();
      s.setId( "s");
      s.setCompartment( "c");
      s.setHasOnlySubstanceUnits(false);
      s.setBoundaryCondition(false);
      s.setConstant(false);
      Reaction r = m.createReaction();
      r.setId( "r");
      r.setReversible(false);
      r.setFast(false);
      SpeciesReference sr = r.createReactant();
      sr.setSpecies( "s");
      sr.setConstant(false);
      sr.setStoichiometry(1.0);
      assertTrue( d.setLevelAndVersion(2,4,true) == true );
      m = d.getModel();
      assertTrue( m.getNumParameters() == 0 );
      r = m.getReaction(0);
      assertTrue( r.getReactant(0).isSetStoichiometryMath() == 0 );
      d = null;
    }

    public void test_SBMLConvertStrict_convertFromL3_stoichMath4()
    {
      SBMLDocument d = new  SBMLDocument(3,1);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      c.setSpatialDimensions(3);
      c.setConstant(true);
      Species s = m.createSpecies();
      s.setId( "s");
      s.setCompartment( "c");
      s.setHasOnlySubstanceUnits(false);
      s.setBoundaryCondition(false);
      s.setConstant(false);
      Reaction r = m.createReaction();
      r.setId( "r");
      r.setReversible(false);
      r.setFast(false);
      SpeciesReference sr = r.createReactant();
      sr.setSpecies( "s");
      sr.setConstant(false);
      assertTrue( d.setLevelAndVersion(2,4,true) == true );
      m = d.getModel();
      assertTrue( m.getNumParameters() == 1 );
      Parameter p = m.getParameter(0);
      assertTrue((  "parameterId_0" == p.getId() ));
      assertTrue( p.getConstant() == false );
      sr = m.getReaction(0).getReactant(0);
      assertTrue( sr.isSetStoichiometryMath() == 1 );
      string mathstr = libsbml.formulaToString(sr.getStoichiometryMath().getMath());
      assertTrue((  "parameterId_0" == mathstr ));
      d = null;
    }

    public void test_SBMLConvertStrict_convertFromL3_stoichMath5()
    {
      SBMLDocument d = new  SBMLDocument(3,1);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      c.setSpatialDimensions(3);
      c.setConstant(true);
      Species s = m.createSpecies();
      s.setId( "s");
      s.setCompartment( "c");
      s.setHasOnlySubstanceUnits(false);
      s.setBoundaryCondition(false);
      s.setConstant(false);
      Reaction r = m.createReaction();
      r.setId( "r");
      r.setReversible(false);
      r.setFast(false);
      SpeciesReference sr = r.createReactant();
      sr.setId( "XREF");
      sr.setSpecies( "s");
      sr.setConstant(false);
      Rule rule = new  AssignmentRule(3,1);
      rule.setVariable( "XREF");
      ASTNode math = libsbml.parseFormula("0.001");
      rule.setMath(math);
      math = null;
      m.addRule(rule);
      assertTrue( d.setLevelAndVersion(2,4,true) == true );
      m = d.getModel();
      assertTrue( m.getNumRules() == 0 );
      sr = m.getReaction(0).getReactant(0);
      assertTrue( sr.isSetStoichiometryMath() == 1 );
      string mathstr = libsbml.formulaToString(sr.getStoichiometryMath().getMath());
      assertTrue((  "0.001" == mathstr ));
      d = null;
      rule = null;
    }

    public void test_SBMLConvertStrict_convertFromL3_stoichMath6()
    {
      SBMLDocument d = new  SBMLDocument(3,1);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      c.setSpatialDimensions(3);
      c.setConstant(true);
      Species s = m.createSpecies();
      s.setId( "s");
      s.setCompartment( "c");
      s.setHasOnlySubstanceUnits(false);
      s.setBoundaryCondition(false);
      s.setConstant(false);
      Reaction r = m.createReaction();
      r.setId( "r");
      r.setReversible(false);
      r.setFast(false);
      SpeciesReference sr = r.createReactant();
      sr.setId( "XREF");
      sr.setSpecies( "s");
      sr.setConstant(false);
      sr.setStoichiometry(1.0);
      Rule rule = new  AssignmentRule(3,1);
      rule.setVariable( "XREF");
      ASTNode math = libsbml.parseFormula("0.001");
      rule.setMath(math);
      math = null;
      m.addRule(rule);
      assertTrue( d.setLevelAndVersion(2,4,true) == true );
      m = d.getModel();
      assertTrue( m.getNumRules() == 0 );
      sr = m.getReaction(0).getReactant(0);
      assertTrue( sr.isSetStoichiometryMath() == 1 );
      string mathstr = libsbml.formulaToString(sr.getStoichiometryMath().getMath());
      assertTrue((  "0.001" == mathstr ));
      d = null;
      rule = null;
    }

    public void test_SBMLConvertStrict_convertFromL3_stoichMath7()
    {
      SBMLDocument d = new  SBMLDocument(3,1);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      c.setSpatialDimensions(3);
      c.setConstant(true);
      Species s = m.createSpecies();
      s.setId( "s");
      s.setCompartment( "c");
      s.setHasOnlySubstanceUnits(false);
      s.setBoundaryCondition(false);
      s.setConstant(false);
      Reaction r = m.createReaction();
      r.setId( "r");
      r.setReversible(false);
      r.setFast(false);
      SpeciesReference sr = r.createReactant();
      sr.setId( "XREF");
      sr.setSpecies( "s");
      sr.setConstant(false);
      InitialAssignment ia = m.createInitialAssignment();
      ia.setSymbol( "XREF");
      ASTNode math = libsbml.parseFormula("0.001");
      ia.setMath(math);
      math = null;
      assertTrue( d.setLevelAndVersion(2,4,true) == true );
      m = d.getModel();
      assertTrue( m.getNumInitialAssignments() == 0 );
      sr = m.getReaction(0).getReactant(0);
      assertTrue( sr.isSetStoichiometryMath() == 1 );
      string mathstr = libsbml.formulaToString(sr.getStoichiometryMath().getMath());
      assertTrue((  "0.001" == mathstr ));
      d = null;
    }

    public void test_SBMLConvertStrict_convertFromL3_stoichMath8()
    {
      SBMLDocument d = new  SBMLDocument(3,1);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      c.setSpatialDimensions(3);
      c.setConstant(true);
      Species s = m.createSpecies();
      s.setId( "s");
      s.setCompartment( "c");
      s.setHasOnlySubstanceUnits(false);
      s.setBoundaryCondition(false);
      s.setConstant(false);
      Reaction r = m.createReaction();
      r.setId( "r");
      r.setReversible(false);
      r.setFast(false);
      SpeciesReference sr = r.createReactant();
      sr.setId( "XREF");
      sr.setSpecies( "s");
      sr.setConstant(false);
      sr.setStoichiometry(1.0);
      InitialAssignment ia = m.createInitialAssignment();
      ia.setSymbol( "XREF");
      ASTNode math = libsbml.parseFormula("0.001");
      ia.setMath(math);
      math = null;
      assertTrue( d.setLevelAndVersion(2,4,true) == true );
      m = d.getModel();
      assertTrue( m.getNumInitialAssignments() == 0 );
      sr = m.getReaction(0).getReactant(0);
      assertTrue( sr.isSetStoichiometryMath() == 1 );
      string mathstr = libsbml.formulaToString(sr.getStoichiometryMath().getMath());
      assertTrue((  "0.001" == mathstr ));
      d = null;
    }

    public void test_SBMLConvertStrict_convertFromL3_stoichMath9()
    {
      SBMLDocument d = new  SBMLDocument(3,1);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      c.setSpatialDimensions(3);
      c.setConstant(true);
      Species s = m.createSpecies();
      s.setId( "s");
      s.setCompartment( "c");
      s.setHasOnlySubstanceUnits(false);
      s.setBoundaryCondition(false);
      s.setConstant(false);
      Reaction r = m.createReaction();
      r.setId( "r");
      r.setReversible(false);
      r.setFast(false);
      SpeciesReference sr = r.createReactant();
      sr.setSpecies( "s");
      sr.setConstant(false);
      sr.setId( "XREF");
      assertTrue( d.setLevelAndVersion(2,4,true) == true );
      m = d.getModel();
      assertTrue( m.getNumParameters() == 1 );
      Parameter p = m.getParameter(0);
      assertTrue((  "parameterId_0" == p.getId() ));
      assertTrue( p.getConstant() == false );
      sr = m.getReaction(0).getReactant(0);
      assertTrue( sr.isSetStoichiometryMath() == 1 );
      string math = libsbml.formulaToString(sr.getStoichiometryMath().getMath());
      assertTrue((  "parameterId_0" == math ));
      d = null;
    }

    public void test_SBMLConvertStrict_convertFrom_L3V2_fast()
    {
      SBMLDocument d = new  SBMLDocument(3,2);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      c.setSpatialDimensions(3);
      c.setConstant(true);
      Species s = m.createSpecies();
      s.setId( "s");
      s.setCompartment( "c");
      s.setHasOnlySubstanceUnits(false);
      s.setBoundaryCondition(false);
      s.setConstant(false);
      Reaction r = m.createReaction();
      r.setId( "r");
      r.setReversible(false);
      SpeciesReference sr = r.createReactant();
      sr.setId( "XREF");
      sr.setSpecies( "s");
      sr.setConstant(false);
      string out = writeSBMLToStdString;
      SBMLDocument doc = libsbml.readSBMLFromString();
      Reaction r1 = doc.getModel().getReaction(0);
      assertTrue( r1.isSetFast() == false );
      assertTrue( doc.setLevelAndVersion(3,1,true) == true );
      r1 = doc.getModel().getReaction(0);
      assertTrue( r1.isSetFast() == true );
      d = null;
      doc = null;
    }

    public void test_SBMLConvertStrict_convertFuncDefsInInitialAssignmentToL1()
    {
      SBMLDocument d = new  SBMLDocument(2,2);
      Model m = d.createModel();
      FunctionDefinition fd = m.createFunctionDefinition();
      fd.setId( "fd");
      ASTNode math = libsbml.parseFormula("lambda(x, x+2)");
      fd.setMath(math);
      Parameter p = m.createParameter();
      p.setId( "p");
      p.setConstant(false);
      InitialAssignment ia = m.createInitialAssignment();
      ASTNode math1 = libsbml.parseFormula("fd(3)");
      ia.setMath(math1);
      ia.setSymbol( "p");
      assertTrue( m.getNumFunctionDefinitions() == 1 );
      assertTrue( m.getNumInitialAssignments() == 1 );
      assertTrue( p.isSetValue() == false );
      assertTrue( d.setLevelAndVersion(1,2,true) == true );
      assertTrue( d.getLevel() == 1 );
      assertTrue( d.getVersion() == 2 );
      Model m1 = d.getModel();
      Parameter p1 = m.getParameter(0);
      assertTrue( m1.getNumFunctionDefinitions() == 0 );
      assertTrue( m1.getNumInitialAssignments() == 0 );
      assertTrue( p1.isSetValue() == true );
      assertEquals( true, util_isEqual );
      d = null;
      math = null;
      math1 = null;
    }

    public void test_SBMLConvertStrict_convertFuncDefsToL1()
    {
      SBMLDocument d = new  SBMLDocument(2,2);
      Model m = d.createModel();
      FunctionDefinition fd = m.createFunctionDefinition();
      fd.setId( "fd");
      ASTNode math = libsbml.parseFormula("lambda(x, x+2)");
      fd.setMath(math);
      Compartment c = m.createCompartment();
      c.setId( "c");
      c.setConstant(false);
      c.setSize(1);
      Rule ar = m.createAssignmentRule();
      ASTNode math1 = libsbml.parseFormula("fd(3)");
      ar.setMath(math1);
      ar.setVariable( "c");
      assertTrue( m.getNumFunctionDefinitions() == 1 );
      assertTrue( d.setLevelAndVersion(1,2,true) == true );
      assertTrue( d.getLevel() == 1 );
      assertTrue( d.getVersion() == 2 );
      Model m1 = d.getModel();
      assertTrue( m1.getNumFunctionDefinitions() == 0 );
      Rule ar1 = m1.getRule(0);
      assertTrue((  "3 + 2" == ar1.getFormula() ));
      d = null;
      math = null;
      math1 = null;
    }

    public void test_SBMLConvertStrict_convertInitialAssignmentsToL1()
    {
      SBMLDocument d = new  SBMLDocument(2,2);
      Model m = d.createModel();
      Parameter p1 = m.createParameter();
      p1.setId( "p1");
      p1.setValue(1);
      Parameter p2 = m.createParameter();
      p2.setId( "p2");
      p2.setValue(4.6);
      Parameter p3 = m.createParameter();
      p3.setId( "p3");
      InitialAssignment ia1 = m.createInitialAssignment();
      ia1.setSymbol( "p1");
      ASTNode math = libsbml.parseFormula("3/3");
      ia1.setMath(math);
      InitialAssignment ia2 = m.createInitialAssignment();
      ia2.setSymbol( "p2");
      ASTNode math1 = libsbml.parseFormula("3 + 2");
      ia2.setMath(math1);
      InitialAssignment ia3 = m.createInitialAssignment();
      ia3.setSymbol( "p3");
      ASTNode math2 = libsbml.parseFormula("pow(2,3)");
      ia3.setMath(math2);
      assertTrue( m.getNumInitialAssignments() == 3 );
      assertTrue( m.getParameter(0).getValue() == 1 );
      assertTrue( m.getParameter(1).getValue() == 4.6 );
      assertTrue( m.getParameter(2).isSetValue() == false );
      assertTrue( d.setLevelAndVersion(1,2,true) == true );
      assertTrue( d.getLevel() == 1 );
      assertTrue( d.getVersion() == 2 );
      Model m1 = d.getModel();
      assertTrue( m1.getNumInitialAssignments() == 0 );
      assertTrue( m1.getParameter(0).getValue() == 1 );
      assertTrue( m1.getParameter(1).getValue() == 5 );
      assertTrue( m1.getParameter(2).isSetValue() == true );
      assertTrue( m1.getParameter(2).getValue() == 8 );
      d = null;
      math = null;
      math1 = null;
      math2 = null;
    }

    public void test_SBMLConvertStrict_convertInitialAssignmentsToL2()
    {
      SBMLDocument d = new  SBMLDocument(3,1);
      Model m = d.createModel();
      Parameter p1 = m.createParameter();
      p1.setId( "p1");
      p1.setConstant(true);
      p1.setValue(1);
      Parameter p2 = m.createParameter();
      p2.setId( "p2");
      p2.setConstant(true);
      p2.setValue(4.6);
      Parameter p3 = m.createParameter();
      p3.setId( "p3");
      p3.setConstant(true);
      Parameter p4 = m.createParameter();
      p4.setId( "p4");
      p4.setConstant(true);
      Parameter p5 = m.createParameter();
      p5.setId( "p5");
      p5.setConstant(true);
      Parameter p6 = m.createParameter();
      p6.setId( "p6");
      p6.setConstant(true);
      InitialAssignment ia1 = m.createInitialAssignment();
      ia1.setSymbol( "p1");
      ASTNode math = libsbml.parseFormula("piecewise(1, and(), 0)");
      ia1.setMath(math);
      InitialAssignment ia2 = m.createInitialAssignment();
      ia2.setSymbol( "p2");
      ASTNode math1 = libsbml.parseFormula("piecewise(1, or(), 0)");
      ia2.setMath(math1);
      InitialAssignment ia3 = m.createInitialAssignment();
      ia3.setSymbol( "p3");
      ASTNode math2 = libsbml.parseFormula("piecewise(1, xor(),  0)");
      ia3.setMath(math2);
      InitialAssignment ia4 = m.createInitialAssignment();
      ia4.setSymbol( "p4");
      ASTNode math3 = libsbml.parseFormula("piecewise(1, and(true), 0)");
      ia4.setMath(math3);
      InitialAssignment ia5 = m.createInitialAssignment();
      ia5.setSymbol( "p5");
      ASTNode math4 = libsbml.parseFormula("piecewise(1, or(false), 0)");
      ia5.setMath(math4);
      InitialAssignment ia6 = m.createInitialAssignment();
      ia6.setSymbol( "p6");
      ASTNode math5 = libsbml.parseFormula("piecewise(1, xor(true),  0)");
      ia6.setMath(math5);
      assertTrue( m.getNumInitialAssignments() == 6 );
      assertTrue( d.setLevelAndVersion(2,1,true) == true );
      assertTrue( d.getLevel() == 2 );
      assertTrue( d.getVersion() == 1 );
      Model m1 = d.getModel();
      assertTrue( m1.getNumInitialAssignments() == 0 );
      assertTrue( m1.getParameter(0).getValue() == 1 );
      assertTrue( m1.getParameter(1).getValue() == 0 );
      assertTrue( m1.getParameter(2).isSetValue() == true );
      assertTrue( m1.getParameter(2).getValue() == 0 );
      assertTrue( m1.getParameter(3).getValue() == 1 );
      assertTrue( m1.getParameter(4).getValue() == 0 );
      assertTrue( m1.getParameter(5).getValue() == 1 );
      d = null;
      math = null;
      math1 = null;
      math2 = null;
      math3 = null;
      math4 = null;
      math5 = null;
    }

    public void test_SBMLConvertStrict_convertInitialAssignmentsUsingRnId()
    {
      SBMLDocument d = new  SBMLDocument(3,1);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      c.setSpatialDimensions(3);
      c.setConstant(true);
      Species s = m.createSpecies();
      s.setId( "s");
      s.setCompartment( "c");
      s.setHasOnlySubstanceUnits(false);
      s.setBoundaryCondition(false);
      s.setConstant(false);
      Reaction r = m.createReaction();
      r.setId( "r");
      r.setReversible(false);
      r.setFast(false);
      SpeciesReference sr = r.createReactant();
      sr.setSpecies( "s");
      sr.setConstant(true);
      sr.setStoichiometry(1);
      KineticLaw kl = r.createKineticLaw();
      ASTNode math = libsbml.parseFormula("3");
      kl.setMath(math);
      Parameter p = m.createParameter();
      p.setId( "p");
      p.setConstant(false);
      InitialAssignment ia1 = m.createInitialAssignment();
      ia1.setSymbol( "p");
      ASTNode math1 = libsbml.parseFormula("3/r");
      ia1.setMath(math1);
      assertTrue( m.getNumInitialAssignments() == 1 );
      assertTrue( m.getParameter(0).isSetValue() == false );
      assertTrue( d.setLevelAndVersion(1,2,true) == true );
      assertTrue( d.getLevel() == 1 );
      assertTrue( d.getVersion() == 2 );
      Model m1 = d.getModel();
      assertTrue( m1.getNumInitialAssignments() == 0 );
      assertTrue( m1.getParameter(0).isSetValue() == true );
      assertEquals( true, util_isEqual );
      d = null;
      math = null;
      math1 = null;
    }

    public void test_SBMLConvertStrict_convertL1ParamRule()
    {
      SBMLDocument d = new  SBMLDocument(1,2);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      Parameter p = m.createParameter();
      p.setId( "p");
      Parameter p1 = m.createParameter();
      p1.setId( "p1");
      ASTNode math = libsbml.parseFormula("p");
      Rule ar = m.createAssignmentRule();
      ar.setVariable( "p1");
      ar.setMath(math);
      ar.setUnits( "mole");
      assertTrue( d.setLevelAndVersion(2,1,true) == true );
      assertTrue( d.getLevel() == 2 );
      assertTrue( d.getVersion() == 1 );
      Rule r1 = d.getModel().getRule(0);
      assertTrue( r1.getUnits() == "" );
      d = null;
      math = null;
    }

    public void test_SBMLConvertStrict_convertNonStrictSBO1()
    {
      SBMLDocument d = new  SBMLDocument(2,4);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      c.setConstant(false);
      (c).setSBOTerm(64);
      assertTrue( d.setLevelAndVersion(2,3,true) == false );
      assertTrue( d.getLevel() == 2 );
      assertTrue( d.getVersion() == 4 );
      assertTrue( d.setLevelAndVersion(2,2,true) == false );
      assertTrue( d.getLevel() == 2 );
      assertTrue( d.getVersion() == 4 );
      assertTrue( d.setLevelAndVersion(2,1,true) == true );
      assertTrue( d.getLevel() == 2 );
      assertTrue( d.getVersion() == 1 );
      Compartment c1 = d.getModel().getCompartment(0);
      assertTrue( (c1).getSBOTerm() == -1 );
      d = null;
    }

    public void test_SBMLConvertStrict_convertNonStrictSBO2()
    {
      SBMLDocument d = new  SBMLDocument(2,4);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      c.setConstant(false);
      (c).setSBOTerm(64);
      assertTrue( d.setLevelAndVersion(1,2,true) == true );
      assertTrue( d.getLevel() == 1 );
      assertTrue( d.getVersion() == 2 );
      Compartment c2 = d.getModel().getCompartment(0);
      assertTrue( (c2).getSBOTerm() == -1 );
      d = null;
    }

    public void test_SBMLConvertStrict_convertNonStrictUnits()
    {
      SBMLDocument d = new  SBMLDocument(2,4);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      c.setConstant(false);
      Parameter p = m.createParameter();
      p.setId( "p");
      p.setUnits( "mole");
      ASTNode math = libsbml.parseFormula("p");
      Rule ar = m.createAssignmentRule();
      ar.setVariable( "c");
      ar.setMath(math);
      assertTrue( d.setLevelAndVersion(2,1,true) == false );
      assertTrue( d.getLevel() == 2 );
      assertTrue( d.getVersion() == 4 );
      assertTrue( d.setLevelAndVersion(2,2,true) == false );
      assertTrue( d.getLevel() == 2 );
      assertTrue( d.getVersion() == 4 );
      assertTrue( d.setLevelAndVersion(2,3,true) == false );
      assertTrue( d.getLevel() == 2 );
      assertTrue( d.getVersion() == 4 );
      assertTrue( d.setLevelAndVersion(1,2,true) == false );
      assertTrue( d.getLevel() == 2 );
      assertTrue( d.getVersion() == 4 );
      d = null;
      math = null;
    }

    public void test_SBMLConvertStrict_convertSBO1()
    {
      SBMLDocument d = new  SBMLDocument(2,4);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      (c).setSBOTerm(240);
      assertTrue( d.setLevelAndVersion(2,3,true) == true );
      assertTrue( d.getLevel() == 2 );
      assertTrue( d.getVersion() == 3 );
      Compartment c1 = d.getModel().getCompartment(0);
      assertTrue( (c1).getSBOTerm() == 240 );
      d = null;
    }

    public void test_SBMLConvertStrict_convertSBO2()
    {
      SBMLDocument d = new  SBMLDocument(2,4);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      (c).setSBOTerm(240);
      assertTrue( d.setLevelAndVersion(2,2,true) == true );
      assertTrue( d.getLevel() == 2 );
      assertTrue( d.getVersion() == 2 );
      Compartment c1 = d.getModel().getCompartment(0);
      assertTrue( (c1).getSBOTerm() == -1 );
      d = null;
    }

    public void test_SBMLConvertStrict_convertSpeciesReferenceIdsUsedInMath()
    {
      SBMLDocument d = new  SBMLDocument(3,1);
      Model m = d.createModel();
      Compartment c = m.createCompartment();
      c.setId( "c");
      c.setSpatialDimensions(3);
      c.setConstant(true);
      Species s = m.createSpecies();
      s.setId( "s");
      s.setCompartment( "c");
      s.setHasOnlySubstanceUnits(false);
      s.setBoundaryCondition(false);
      s.setConstant(false);
      Reaction r = m.createReaction();
      r.setId( "r");
      r.setReversible(false);
      r.setFast(false);
      SpeciesReference sr = r.createReactant();
      sr.setId( "XREF");
      sr.setSpecies( "s");
      sr.setConstant(false);
      sr.setStoichiometry(1.0);
      InitialAssignment ia = m.createInitialAssignment();
      ia.setSymbol( "c");
      ASTNode math = libsbml.parseFormula("XREF*2");
      ia.setMath(math);
      math = null;
      assertTrue( d.setLevelAndVersion(1,2,true) == false );
      assertTrue( d.setLevelAndVersion(2,1,true) == false );
      assertTrue( d.setLevelAndVersion(2,2,true) == false );
      assertTrue( d.setLevelAndVersion(2,3,true) == false );
      assertTrue( d.setLevelAndVersion(2,4,true) == false );
      assertTrue( d.setLevelAndVersion(2,5,true) == false );
      d = null;
    }

    public void test_SBMLConvertStrict_convertToL1()
    {
      SBMLDocument d = new  SBMLDocument(2,2);
      Model m = d.createModel();
      (m).setMetaId( "_m");
      Compartment c = m.createCompartment();
      c.setId( "c");
      (c).setSBOTerm(240);
      Species s = m.createSpecies();
      s.setId( "s");
      s.setCompartment( "c");
      assertTrue( d.setLevelAndVersion(1,2,true) == true );
      assertTrue( d.getLevel() == 1 );
      assertTrue( d.getVersion() == 2 );
      Model m1 = d.getModel();
      assertTrue( (m1).getMetaId() == "" );
      Compartment c1 = m1.getCompartment(0);
      assertTrue( (c1).getSBOTerm() == -1 );
      d = null;
    }

  }
}
