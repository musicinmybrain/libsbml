///  @file    TestReadFromFileL3V2_3.cs
///  @brief   Reads test-data/l3v2-empty-lo-2.xml into memory and tests it.
///  @author  Frank Bergmann (Csharp conversion)
///  @author  Akiya Jouraku (Csharp conversion)
///  @author  Sarah Keating 
///  
///  ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
/// 
///  DO NOT EDIT THIS FILE.
/// 
///  This file was generated automatically by converting the file located at
///  src/sbml/test/TestReadFromFileL3V2_3.cpp
///  using the conversion program dev/utilities/translateTests/translateTests.pl.
///  Any changes made here will be lost the next time the file is regenerated.
/// 
///  -----------------------------------------------------------------------------
///  This file is part of libSBML.  Please visit http://sbml.org for more
///  information about SBML, and the latest version of libSBML.
/// 
///  Copyright 2005-2010 California Institute of Technology.
///  Copyright 2002-2005 California Institute of Technology and
///                      Japan Science and Technology Corporation.
///  
///  This library is free software; you can redistribute it and/or modify it
///  under the terms of the GNU Lesser General Public License as published by
///  the Free Software Foundation.  A copy of the license agreement is provided
///  in the file named "LICENSE.txt" included with this software distribution
///  and also available online as http://sbml.org/software/libsbml/license.html
///  -----------------------------------------------------------------------------


namespace LibSBMLCSTest.sbml {

  using libsbmlcs;

  using System;

  using System.IO;

  public class TestReadFromFileL3V2_3 {
    public class AssertionError : System.Exception 
    {
      public AssertionError() : base()
      {
        
      }
    }


    static void assertTrue(bool condition)
    {
      if (condition == true)
      {
        return;
      }
      throw new AssertionError();
    }

    static void assertEquals(object a, object b)
    {
      if ( (a == null) && (b == null) )
      {
        return;
      }
      else if ( (a == null) || (b == null) )
      {
        throw new AssertionError();
      }
      else if (a.Equals(b))
      {
        return;
      }
  
      throw new AssertionError();
    }

    static void assertNotEquals(object a, object b)
    {
      if ( (a == null) && (b == null) )
      {
        throw new AssertionError();
      }
      else if ( (a == null) || (b == null) )
      {
        return;
      }
      else if (a.Equals(b))
      {
        throw new AssertionError();
      }
    }

    static void assertEquals(bool a, bool b)
    {
      if ( a == b )
      {
        return;
      }
      throw new AssertionError();
    }

    static void assertNotEquals(bool a, bool b)
    {
      if ( a != b )
      {
        return;
      }
      throw new AssertionError();
    }

    static void assertEquals(int a, int b)
    {
      if ( a == b )
      {
        return;
      }
      throw new AssertionError();
    }

    static void assertNotEquals(int a, int b)
    {
      if ( a != b )
      {
        return;
      }
      throw new AssertionError();
    }


    public void test_echo_l3v2_empty_lo_2()
    {
      string expected = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + 
    "<sbml xmlns=\"http://www.sbml.org/sbml/level3/version2/core\" " + 
    "level=\"3\" version=\"2\">\n"  + 
    "  <model substanceUnits=\"mole\" timeUnits=\"second\" volumeUnits=\"litre\" " + 
    "areaUnits=\"metre\" lengthUnits=\"metre\" extentUnits=\"mole\" " + 
    "conversionFactor=\"p\">\n" + 
    "    <listOfUnitDefinitions>\n" + 
    "      <unitDefinition id=\"nonsense\">\n" + 
    "        <listOfUnits metaid=\"dd\"/>\n" + 
    "      </unitDefinition>\n" + 
    "    </listOfUnitDefinitions>\n" + 
    "    <listOfReactions>\n" + 
    "      <reaction id=\"in\" reversible=\"false\" compartment=\"comp\">\n" + 
    "        <listOfReactants id=\"d\"/>\n" + 
    "        <listOfProducts name=\"ss\"/>\n" + 
    "        <listOfModifiers sboTerm=\"SBO:0000002\"/>\n" + 
    "        <kineticLaw>\n" + 
    "          <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\n" + 
    "            <apply>\n" + 
    "              <times/>\n" + 
    "              <ci> k1 </ci>\n" + 
    "              <ci> X0 </ci>\n" + 
    "              <ci> cell </ci>\n" + 
    "            </apply>\n" + 
    "          </math>\n" + 
    "          <listOfLocalParameters>\n" + 
    "            <notes>\n" + 
    "              <body xmlns=\"http://www.w3.org/1999/xhtml\">\n" + 
    "                <center>\n" + 
    "                  <h2>A Simple Mitotic Oscillator</h2>\n" + 
    "                </center>\n" + 
    "                <p>A minimal cascade model for the mitotic oscillator involving cyclin and cdc2 kinase</p>\n" + 
    "              </body>\n" + 
    "            </notes>\n" + 
    "          </listOfLocalParameters>\n" + 
    "        </kineticLaw>\n" + 
    "      </reaction>\n" + 
    "    </listOfReactions>\n" + 
    "    <listOfEvents>\n" + 
    "      <event sboTerm=\"SBO:0000231\" id=\"e1\" useValuesFromTriggerTime=\"true\">\n" + 
    "        <trigger initialValue=\"false\" persistent=\"false\">\n" + 
    "          <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\n" + 
    "            <true/>\n" + 
    "          </math>\n" + 
    "        </trigger>\n" + 
    "        <listOfEventAssignments>\n" + 
    "          <annotation>\n" + 
    "            <rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" " + 
    "xmlns:dc=\"http://purl.org/dc/elements/1.1/\" " + 
    "xmlns:dcterms=\"http://purl.org/dc/terms/\" " + 
    "xmlns:vCard=\"http://www.w3.org/2001/vcard-rdf/3.0#\" " + 
    "xmlns:bqbiol=\"http://biomodels.net/biology-qualifiers/\" " + 
    "xmlns:bqmodel=\"http://biomodels.net/model-qualifiers/\">\n" + 
    "              <rdf:Description rdf:about=\"#_000002\">\n" + 
    "                <bqbiol:is>\n" + 
    "                  <rdf:Bag>\n" + 
    "                    <rdf:li rdf:resource=\"http://www.geneontology.org/#GO:0007274\"/>\n" + 
    "                    <rdf:li rdf:resource=\"http://www.geneontology.org/#GO:0015464\"/>\n" + 
    "                    <rdf:li rdf:resource=\"http://www.genome.jp/kegg/pathway/#hsa04080\"/>\n" + 
    "                    <rdf:li rdf:resource=\"http://www.ncbi.nlm.nih.gov/Taxonomy/#7787\"/>\n" + 
    "                  </rdf:Bag>\n" + 
    "                </bqbiol:is>\n" + 
    "              </rdf:Description>\n" + 
    "            </rdf:RDF>\n" + 
    "          </annotation>\n" + 
    "        </listOfEventAssignments>\n" + 
    "      </event>\n" + 
    "    </listOfEvents>\n" + 
    "  </model>\n" + 
    "</sbml>\n";
      string filename =  "../../sbml/sbml/test/test-data/";
      filename += "l3v2-empty-lo-2.xml";
      string fileout =  "../../sbml/sbml/test/test-data/";
      fileout += "tempOut.xml";
      SBMLDocument d = libsbml.readSBML();
      if (d == null);
      {
      }
      libsbml.writeSBML(d);
      SBMLDocument outD = libsbml.readSBML();
      Model m = outD.getModel();
      assertTrue( m != null );
      assertTrue( m.getNumUnitDefinitions() == 1 );
      assertTrue( m.getNumFunctionDefinitions() == 0 );
      assertTrue( m.getNumCompartments() == 0 );
      assertTrue( m.getNumSpecies() == 0 );
      assertTrue( m.getNumParameters() == 0 );
      assertTrue( m.getNumRules() == 0 );
      assertTrue( m.getNumInitialAssignments() == 0 );
      assertTrue( m.getNumConstraints() == 0 );
      assertTrue( m.getNumReactions() == 1 );
      assertTrue( m.getNumEvents() == 1 );
      UnitDefinition ud = m.getUnitDefinition(0);
      assertTrue( ud != null );
      assertTrue( ud.getNumUnits() == 0 );
      assertTrue( ud.getListOfUnits().isSetMetaId() == true );
      assertTrue( ud.getListOfUnits().getMetaId() ==  "dd" );
      Reaction r = m.getReaction(0);
      assertTrue( r != null );
      assertTrue( r.getNumReactants() == 0 );
      assertTrue( r.getListOfReactants().isSetId() == true );
      assertTrue( r.getListOfReactants().getId() ==  "d" );
      assertTrue( r.getNumProducts() == 0 );
      assertTrue( r.getListOfProducts().isSetName() == true );
      assertTrue( r.getListOfProducts().getName() ==  "ss" );
      assertTrue( r.getNumModifiers() == 0 );
      assertTrue( r.getListOfModifiers().isSetSBOTerm() == true );
      assertTrue( r.getListOfModifiers().getSBOTerm() == 2 );
      KineticLaw kl = r.getKineticLaw();
      assertTrue( kl != null );
      assertTrue( kl.getNumLocalParameters() == 0 );
      assertTrue( kl.getListOfLocalParameters().isSetNotes() == true );
      assertTrue( kl.getListOfLocalParameters().isSetAnnotation() == false );
      Event e = m.getEvent(0);
      assertTrue( e != null );
      assertTrue( e.getNumEventAssignments() == 0 );
      assertTrue( e.getListOfEventAssignments().isSetNotes() == false );
      assertTrue( e.getListOfEventAssignments().isSetAnnotation() == true );
      string S = libsbml.writeSBMLToString(outD);
      assertEquals( true, equals(expected,S) );
      d = null;
      outD = null;
    }

    public void test_read_l3v2_empty_lo_2()
    {
      SBMLReader reader = new SBMLReader();
      SBMLDocument d;
      Model m;
      string filename =  "../../sbml/sbml/test/test-data/";
      filename += "l3v2-empty-lo-2.xml";
      d = reader.readSBML(filename);
      if (d == null);
      {
      }
      assertTrue( d.getLevel() == 3 );
      assertTrue( d.getVersion() == 2 );
      m = d.getModel();
      assertTrue( m != null );
      assertTrue( m.getNumUnitDefinitions() == 1 );
      assertTrue( m.getNumFunctionDefinitions() == 0 );
      assertTrue( m.getNumCompartments() == 0 );
      assertTrue( m.getNumSpecies() == 0 );
      assertTrue( m.getNumParameters() == 0 );
      assertTrue( m.getNumRules() == 0 );
      assertTrue( m.getNumInitialAssignments() == 0 );
      assertTrue( m.getNumConstraints() == 0 );
      assertTrue( m.getNumReactions() == 1 );
      assertTrue( m.getNumEvents() == 1 );
      UnitDefinition ud = m.getUnitDefinition(0);
      assertTrue( ud != null );
      assertTrue( ud.getNumUnits() == 0 );
      assertTrue( ud.getListOfUnits().hasOptionalAttributes() == true );
      assertTrue( ud.getListOfUnits().hasOptionalElements() == false );
      assertTrue( ud.getListOfUnits().isSetMetaId() == true );
      assertTrue( ud.getListOfUnits().getMetaId() ==  "dd" );
      Reaction r = m.getReaction(0);
      assertTrue( r != null );
      assertTrue( r.getNumReactants() == 0 );
      assertTrue( r.getListOfReactants().hasOptionalAttributes() == true );
      assertTrue( r.getListOfReactants().hasOptionalElements() == false );
      assertTrue( r.getListOfReactants().isSetId() == true );
      assertTrue( r.getListOfReactants().getId() ==  "d" );
      assertTrue( r.getNumProducts() == 0 );
      assertTrue( r.getListOfProducts().isSetName() == true );
      assertTrue( r.getListOfProducts().getName() ==  "ss" );
      assertTrue( r.getNumModifiers() == 0 );
      assertTrue( r.getListOfModifiers().isSetSBOTerm() == true );
      assertTrue( r.getListOfModifiers().getSBOTerm() == 2 );
      KineticLaw kl = r.getKineticLaw();
      assertTrue( kl != null );
      assertTrue( kl.getNumLocalParameters() == 0 );
      assertTrue( kl.getListOfLocalParameters().hasOptionalAttributes() == false );
      assertTrue( kl.getListOfLocalParameters().hasOptionalElements() == true );
      assertTrue( kl.getListOfLocalParameters().isSetNotes() == true );
      assertTrue( kl.getListOfLocalParameters().isSetAnnotation() == false );
      Event e = m.getEvent(0);
      assertTrue( e != null );
      assertTrue( e.getNumEventAssignments() == 0 );
      assertTrue( e.getListOfEventAssignments().hasOptionalAttributes() == false );
      assertTrue( e.getListOfEventAssignments().hasOptionalElements() == true );
      assertTrue( e.getListOfEventAssignments().isSetNotes() == false );
      assertTrue( e.getListOfEventAssignments().isSetAnnotation() == true );
      d = null;
    }

  }
}
