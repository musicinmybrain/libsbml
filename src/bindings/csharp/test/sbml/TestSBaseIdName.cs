///  @file    TestSBaseIdName.cs
///  @brief   SBase unit tests
///  @author  Frank Bergmann (Csharp conversion)
///  @author  Akiya Jouraku (Csharp conversion)
///  @author  Ben Bornstein 
///  
///  ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
/// 
///  DO NOT EDIT THIS FILE.
/// 
///  This file was generated automatically by converting the file located at
///  src/sbml/test/TestSBaseIdName.cpp
///  using the conversion program dev/utilities/translateTests/translateTests.pl.
///  Any changes made here will be lost the next time the file is regenerated.
/// 
///  -----------------------------------------------------------------------------
///  This file is part of libSBML.  Please visit http://sbml.org for more
///  information about SBML, and the latest version of libSBML.
/// 
///  Copyright 2005-2010 California Institute of Technology.
///  Copyright 2002-2005 California Institute of Technology and
///                      Japan Science and Technology Corporation.
///  
///  This library is free software; you can redistribute it and/or modify it
///  under the terms of the GNU Lesser General Public License as published by
///  the Free Software Foundation.  A copy of the license agreement is provided
///  in the file named "LICENSE.txt" included with this software distribution
///  and also available online as http://sbml.org/software/libsbml/license.html
///  -----------------------------------------------------------------------------


namespace LibSBMLCSTest.sbml {

  using libsbmlcs;

  using System;

  using System.IO;

  public class TestSBaseIdName {
    public class AssertionError : System.Exception 
    {
      public AssertionError() : base()
      {
        
      }
    }


    static void assertTrue(bool condition)
    {
      if (condition == true)
      {
        return;
      }
      throw new AssertionError();
    }

    static void assertEquals(object a, object b)
    {
      if ( (a == null) && (b == null) )
      {
        return;
      }
      else if ( (a == null) || (b == null) )
      {
        throw new AssertionError();
      }
      else if (a.Equals(b))
      {
        return;
      }
  
      throw new AssertionError();
    }

    static void assertNotEquals(object a, object b)
    {
      if ( (a == null) && (b == null) )
      {
        throw new AssertionError();
      }
      else if ( (a == null) || (b == null) )
      {
        return;
      }
      else if (a.Equals(b))
      {
        throw new AssertionError();
      }
    }

    static void assertEquals(bool a, bool b)
    {
      if ( a == b )
      {
        return;
      }
      throw new AssertionError();
    }

    static void assertNotEquals(bool a, bool b)
    {
      if ( a != b )
      {
        return;
      }
      throw new AssertionError();
    }

    static void assertEquals(int a, int b)
    {
      if ( a == b )
      {
        return;
      }
      throw new AssertionError();
    }

    static void assertNotEquals(int a, int b)
    {
      if ( a != b )
      {
        return;
      }
      throw new AssertionError();
    }

    private SBase S32;
    private SBase E32;
    private SBase U32;
    private SBase S31;
    private AssignmentRule AR32;
    private EventAssignment EA31;
    private AssignmentRule AR31;
    private SBase U31;
    private EventAssignment EA32;
    private SBase E31;

    public void setUp()
    {
      S31 = new Species(3,1);
      if (S31 == null);
      {
      }
      S32 = new Species(3,2);
      if (S32 == null);
      {
      }
      E31 = new Event(3,1);
      if (E31 == null);
      {
      }
      E32 = new Event(3,2);
      if (E32 == null);
      {
      }
      U31 = new Unit(3,1);
      if (U31 == null);
      {
      }
      U32 = new Unit(3,2);
      if (U32 == null);
      {
      }
      AR31 = new AssignmentRule(3,1);
      if (AR31 == null);
      {
      }
      AR32 = new AssignmentRule(3,2);
      if (AR32 == null);
      {
      }
      EA31 = new EventAssignment(3,1);
      if (EA31 == null);
      {
      }
      EA32 = new EventAssignment(3,2);
      if (EA32 == null);
      {
      }
    }

    public void tearDown()
    {
    }

    public void test_SBase_setIdAttribute_1()
    {
      string id =  "x12345";
      int i = S31.setIdAttribute(id);
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertEquals( true, S31.isSetId() );
      assertTrue( S31.getId() == id );
      assertEquals( true, S31.isSetIdAttribute() );
      assertTrue( S31.getIdAttribute() == id );
      i = S31.unsetIdAttribute();
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertEquals( false, S31.isSetId() );
      assertTrue( S31.getId() ==  "" );
      assertEquals( false, S31.isSetIdAttribute() );
      assertTrue( S31.getIdAttribute() ==  "" );
    }

    public void test_SBase_setIdAttribute_10()
    {
      string id =  "x12345";
      int i = EA32.setIdAttribute(id);
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertEquals( false, EA32.isSetId() );
      assertTrue( EA32.getId() ==  "" );
      assertEquals( true, EA32.isSetIdAttribute() );
      assertTrue( EA32.getIdAttribute() == id );
      assertEquals( false, EA32.isSetVariable() );
      assertTrue( EA32.getVariable() ==  "" );
      i = EA32.unsetIdAttribute();
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertEquals( false, EA32.isSetId() );
      assertTrue( EA32.getId() ==  "" );
      assertEquals( false, EA32.isSetIdAttribute() );
      assertTrue( EA32.getIdAttribute() ==  "" );
      assertEquals( false, EA32.isSetVariable() );
      assertTrue( EA32.getVariable() ==  "" );
    }

    public void test_SBase_setIdAttribute_2()
    {
      string id =  "x12345";
      int i = S32.setIdAttribute(id);
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertEquals( true, S32.isSetId() );
      assertTrue( S32.getId() == id );
      assertEquals( true, S32.isSetIdAttribute() );
      assertTrue( S32.getIdAttribute() == id );
      i = S32.unsetIdAttribute();
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertEquals( false, S32.isSetId() );
      assertTrue( S32.getId() ==  "" );
      assertEquals( false, S32.isSetIdAttribute() );
      assertTrue( S32.getIdAttribute() ==  "" );
    }

    public void test_SBase_setIdAttribute_3()
    {
      string id =  "x12345";
      int i = E31.setIdAttribute(id);
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertEquals( true, E31.isSetId() );
      assertTrue( E31.getId() == id );
      assertEquals( true, E31.isSetIdAttribute() );
      assertTrue( E31.getIdAttribute() == id );
      i = E31.unsetIdAttribute();
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertEquals( false, E31.isSetId() );
      assertTrue( E31.getId() ==  "" );
      assertEquals( false, E31.isSetIdAttribute() );
      assertTrue( E31.getIdAttribute() ==  "" );
    }

    public void test_SBase_setIdAttribute_4()
    {
      string id =  "x12345";
      int i = E32.setIdAttribute(id);
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertEquals( true, E32.isSetId() );
      assertTrue( E32.getId() == id );
      assertEquals( true, E32.isSetIdAttribute() );
      assertTrue( E32.getIdAttribute() == id );
      i = E32.unsetIdAttribute();
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertEquals( false, E32.isSetId() );
      assertTrue( E32.getId() ==  "" );
      assertEquals( false, E32.isSetIdAttribute() );
      assertTrue( E32.getIdAttribute() ==  "" );
    }

    public void test_SBase_setIdAttribute_5()
    {
      string id =  "x12345";
      int i = U31.setIdAttribute(id);
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertEquals( false, U31.isSetId() );
      assertTrue( U31.getId() ==  "" );
      assertEquals( true, U31.isSetIdAttribute() );
      assertTrue( U31.getIdAttribute() == id );
      i = U31.unsetIdAttribute();
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertEquals( false, U31.isSetId() );
      assertTrue( U31.getId() ==  "" );
      assertEquals( false, U31.isSetIdAttribute() );
      assertTrue( U31.getIdAttribute() ==  "" );
    }

    public void test_SBase_setIdAttribute_6()
    {
      string id =  "x12345";
      int i = U32.setIdAttribute(id);
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertEquals( true, U32.isSetId() );
      assertTrue( U32.getId() == id );
      assertEquals( true, U32.isSetIdAttribute() );
      assertTrue( U32.getIdAttribute() == id );
      i = U32.unsetIdAttribute();
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertEquals( false, U32.isSetId() );
      assertTrue( U32.getId() ==  "" );
      assertEquals( false, U32.isSetIdAttribute() );
      assertTrue( U32.getIdAttribute() ==  "" );
    }

    public void test_SBase_setIdAttribute_7()
    {
      string id =  "x12345";
      int i = AR31.setIdAttribute(id);
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertEquals( false, AR31.isSetId() );
      assertTrue( AR31.getId() ==  "" );
      assertEquals( true, AR31.isSetIdAttribute() );
      assertTrue( AR31.getIdAttribute() == id );
      assertEquals( false, AR31.isSetVariable() );
      assertTrue( AR31.getVariable() ==  "" );
      i = AR31.unsetIdAttribute();
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertEquals( false, AR31.isSetId() );
      assertTrue( AR31.getId() ==  "" );
      assertEquals( false, AR31.isSetIdAttribute() );
      assertTrue( AR31.getIdAttribute() ==  "" );
      assertEquals( false, AR31.isSetVariable() );
      assertTrue( AR31.getVariable() ==  "" );
    }

    public void test_SBase_setIdAttribute_8()
    {
      string id =  "x12345";
      int i = AR32.setIdAttribute(id);
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertEquals( false, AR32.isSetId() );
      assertTrue( AR32.getId() ==  "" );
      assertEquals( true, AR32.isSetIdAttribute() );
      assertTrue( AR32.getIdAttribute() == id );
      assertEquals( false, AR32.isSetVariable() );
      assertTrue( AR32.getVariable() ==  "" );
      i = AR32.unsetIdAttribute();
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertEquals( false, AR32.isSetId() );
      assertTrue( AR32.getId() ==  "" );
      assertEquals( false, AR32.isSetIdAttribute() );
      assertTrue( AR32.getIdAttribute() ==  "" );
      assertEquals( false, AR32.isSetVariable() );
      assertTrue( AR32.getVariable() ==  "" );
    }

    public void test_SBase_setIdAttribute_9()
    {
      string id =  "x12345";
      int i = EA31.setIdAttribute(id);
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertEquals( false, EA31.isSetId() );
      assertTrue( EA31.getId() ==  "" );
      assertEquals( true, EA31.isSetIdAttribute() );
      assertTrue( EA31.getIdAttribute() == id );
      assertEquals( false, EA31.isSetVariable() );
      assertTrue( EA31.getVariable() ==  "" );
      i = EA31.unsetIdAttribute();
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertEquals( false, EA31.isSetId() );
      assertTrue( EA31.getId() ==  "" );
      assertEquals( false, EA31.isSetIdAttribute() );
      assertTrue( EA31.getIdAttribute() ==  "" );
      assertEquals( false, EA31.isSetVariable() );
      assertTrue( EA31.getVariable() ==  "" );
    }

    public void test_SBase_setId_1()
    {
      string id =  "x12345";
      int i = S31.setId(id);
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertEquals( true, S31.isSetId() );
      assertTrue( S31.getId() == id );
      assertEquals( true, S31.isSetIdAttribute() );
      assertTrue( S31.getIdAttribute() == id );
      i = S31.unsetId();
      assertTrue( i == libsbml.LIBSBML_OPERATION_FAILED );
      assertEquals( true, S31.isSetId() );
      assertTrue( S31.getId() == id );
      assertEquals( true, S31.isSetIdAttribute() );
      assertTrue( S31.getIdAttribute() == id );
    }

    public void test_SBase_setId_10()
    {
      string id =  "x12345";
      int i = EA32.setId(id);
      assertTrue( i == libsbml.LIBSBML_USE_ID_ATTRIBUTE_FUNCTION );
      assertEquals( false, EA32.isSetId() );
      assertTrue( EA32.getId() ==  "" );
      assertEquals( false, EA32.isSetIdAttribute() );
      assertTrue( EA32.getIdAttribute() ==  "" );
      assertEquals( false, EA32.isSetVariable() );
      assertTrue( EA32.getVariable() ==  "" );
      i = EA32.unsetId();
      assertTrue( i == libsbml.LIBSBML_USE_ID_ATTRIBUTE_FUNCTION );
      assertEquals( false, EA32.isSetId() );
      assertTrue( EA32.getId() ==  "" );
      assertEquals( false, EA32.isSetIdAttribute() );
      assertTrue( EA32.getIdAttribute() ==  "" );
      assertEquals( false, EA32.isSetVariable() );
      assertTrue( EA32.getVariable() ==  "" );
    }

    public void test_SBase_setId_2()
    {
      string id =  "x12345";
      int i = S32.setId(id);
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertEquals( true, S32.isSetId() );
      assertTrue( S32.getId() == id );
      assertEquals( true, S32.isSetIdAttribute() );
      assertTrue( S32.getIdAttribute() == id );
      i = S32.unsetId();
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertEquals( false, S32.isSetId() );
      assertTrue( S32.getId() ==  "" );
      assertEquals( false, S32.isSetIdAttribute() );
      assertTrue( S32.getIdAttribute() ==  "" );
    }

    public void test_SBase_setId_3()
    {
      string id =  "x12345";
      int i = E31.setId(id);
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertEquals( true, E31.isSetId() );
      assertTrue( E31.getId() == id );
      assertEquals( true, E31.isSetIdAttribute() );
      assertTrue( E31.getIdAttribute() == id );
      i = E31.unsetId();
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertEquals( false, E31.isSetId() );
      assertTrue( E31.getId() ==  "" );
      assertEquals( false, E31.isSetIdAttribute() );
      assertTrue( E31.getIdAttribute() ==  "" );
    }

    public void test_SBase_setId_4()
    {
      string id =  "x12345";
      int i = E32.setId(id);
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertEquals( true, E32.isSetId() );
      assertTrue( E32.getId() == id );
      assertEquals( true, E32.isSetIdAttribute() );
      assertTrue( E32.getIdAttribute() == id );
      i = E32.unsetId();
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertEquals( false, E32.isSetId() );
      assertTrue( E32.getId() ==  "" );
      assertEquals( false, E32.isSetIdAttribute() );
      assertTrue( E32.getIdAttribute() ==  "" );
    }

    public void test_SBase_setId_5()
    {
      string id =  "x12345";
      int i = U31.setId(id);
      assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE );
      assertEquals( false, U31.isSetId() );
      assertTrue( U31.getId() ==  "" );
      assertEquals( false, U31.isSetIdAttribute() );
      assertTrue( U31.getIdAttribute() ==  "" );
      i = U31.unsetId();
      assertTrue( i == libsbml.LIBSBML_OPERATION_FAILED );
      assertEquals( false, U31.isSetId() );
      assertTrue( U31.getId() ==  "" );
      assertEquals( false, U31.isSetIdAttribute() );
      assertTrue( U31.getIdAttribute() ==  "" );
    }

    public void test_SBase_setId_6()
    {
      string id =  "x12345";
      int i = U32.setId(id);
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertEquals( true, U32.isSetId() );
      assertTrue( U32.getId() == id );
      assertEquals( true, U32.isSetIdAttribute() );
      assertTrue( U32.getIdAttribute() == id );
      i = U32.unsetId();
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertEquals( false, U32.isSetId() );
      assertTrue( U32.getId() ==  "" );
      assertEquals( false, U32.isSetIdAttribute() );
      assertTrue( U32.getIdAttribute() ==  "" );
    }

    public void test_SBase_setId_7()
    {
      string id =  "x12345";
      int i = AR31.setId(id);
      assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE );
      assertEquals( false, AR31.isSetId() );
      assertTrue( AR31.getId() ==  "" );
      assertEquals( false, AR31.isSetIdAttribute() );
      assertTrue( AR31.getIdAttribute() ==  "" );
      assertEquals( false, AR31.isSetVariable() );
      assertTrue( AR31.getVariable() ==  "" );
      i = AR31.unsetId();
      assertTrue( i == libsbml.LIBSBML_OPERATION_FAILED );
      assertEquals( false, AR31.isSetId() );
      assertTrue( AR31.getId() ==  "" );
      assertEquals( false, AR31.isSetIdAttribute() );
      assertTrue( AR31.getIdAttribute() ==  "" );
      assertEquals( false, AR31.isSetVariable() );
      assertTrue( AR31.getVariable() ==  "" );
    }

    public void test_SBase_setId_8()
    {
      string id =  "x12345";
      int i = AR32.setId(id);
      assertTrue( i == libsbml.LIBSBML_USE_ID_ATTRIBUTE_FUNCTION );
      assertEquals( false, AR32.isSetId() );
      assertTrue( AR32.getId() ==  "" );
      assertEquals( false, AR32.isSetIdAttribute() );
      assertTrue( AR32.getIdAttribute() ==  "" );
      assertEquals( false, AR32.isSetVariable() );
      assertTrue( AR32.getVariable() ==  "" );
      i = AR32.unsetId();
      assertTrue( i == libsbml.LIBSBML_USE_ID_ATTRIBUTE_FUNCTION );
      assertEquals( false, AR32.isSetId() );
      assertTrue( AR32.getId() ==  "" );
      assertEquals( false, AR32.isSetIdAttribute() );
      assertTrue( AR32.getIdAttribute() ==  "" );
      assertEquals( false, AR32.isSetVariable() );
      assertTrue( AR32.getVariable() ==  "" );
    }

    public void test_SBase_setId_9()
    {
      string id =  "x12345";
      int i = EA31.setId(id);
      assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE );
      assertEquals( false, EA31.isSetId() );
      assertTrue( EA31.getId() ==  "" );
      assertEquals( false, EA31.isSetIdAttribute() );
      assertTrue( EA31.getIdAttribute() ==  "" );
      assertEquals( false, EA31.isSetVariable() );
      assertTrue( EA31.getVariable() ==  "" );
      i = EA31.unsetId();
      assertTrue( i == libsbml.LIBSBML_OPERATION_FAILED );
      assertEquals( false, EA31.isSetId() );
      assertTrue( EA31.getId() ==  "" );
      assertEquals( false, EA31.isSetIdAttribute() );
      assertTrue( EA31.getIdAttribute() ==  "" );
      assertEquals( false, EA31.isSetVariable() );
      assertTrue( EA31.getVariable() ==  "" );
    }

    public void test_SBase_setName_1()
    {
      string name =  "x12345";
      S31.setName(name);
      assertTrue(( name == S31.getName() ));
      assertEquals( true, S31.isSetName() );
      if (S31.getName() == name);
      {
      }
      S31.setName(S31.getName());
      assertTrue(( name == S31.getName() ));
      S31.setName("");
      assertEquals( false, S31.isSetName() );
      if (S31.getName() != null);
      {
      }
    }

    public void test_SBase_setName_10()
    {
      string name =  "x12345";
      EA32.setName(name);
      assertTrue(( name == EA32.getName() ));
      assertEquals( true, EA32.isSetName() );
      if (EA32.getName() == name);
      {
      }
      EA32.setName(EA32.getName());
      assertTrue(( name == EA32.getName() ));
      EA32.setName("");
      assertEquals( false, EA32.isSetName() );
      if (EA32.getName() != null);
      {
      }
    }

    public void test_SBase_setName_2()
    {
      string name =  "x12345";
      S32.setName(name);
      assertTrue(( name == S32.getName() ));
      assertEquals( true, S32.isSetName() );
      if (S32.getName() == name);
      {
      }
      S32.setName(S32.getName());
      assertTrue(( name == S32.getName() ));
      S32.setName("");
      assertEquals( false, S32.isSetName() );
      if (S32.getName() != null);
      {
      }
    }

    public void test_SBase_setName_3()
    {
      string name =  "x12345";
      E31.setName(name);
      assertTrue(( name == E31.getName() ));
      assertEquals( true, E31.isSetName() );
      if (E31.getName() == name);
      {
      }
      E31.setName(E31.getName());
      assertTrue(( name == E31.getName() ));
      E31.setName("");
      assertEquals( false, E31.isSetName() );
      if (E31.getName() != null);
      {
      }
    }

    public void test_SBase_setName_4()
    {
      string name =  "x12345";
      E32.setName(name);
      assertTrue(( name == E32.getName() ));
      assertEquals( true, E32.isSetName() );
      if (E32.getName() == name);
      {
      }
      E32.setName(E32.getName());
      assertTrue(( name == E32.getName() ));
      E32.setName("");
      assertEquals( false, E32.isSetName() );
      if (E32.getName() != null);
      {
      }
    }

    public void test_SBase_setName_5()
    {
      string name =  "x12345";
      int i = U31.setName(name);
      assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE );
      assertEquals( false, U31.isSetName() );
      assertTrue( U31.getName() == "" );
    }

    public void test_SBase_setName_6()
    {
      string name =  "x12345";
      U32.setName(name);
      assertTrue(( name == U32.getName() ));
      assertEquals( true, U32.isSetName() );
      if (U32.getName() == name);
      {
      }
      U32.setName(U32.getName());
      assertTrue(( name == U32.getName() ));
      U32.setName("");
      assertEquals( false, U32.isSetName() );
      if (U32.getName() != null);
      {
      }
    }

    public void test_SBase_setName_7()
    {
      string name =  "x12345";
      int i = AR31.setName(name);
      assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE );
      assertEquals( false, AR31.isSetName() );
      assertTrue( AR31.getName() == "" );
    }

    public void test_SBase_setName_8()
    {
      string name =  "x12345";
      AR32.setName(name);
      assertTrue(( name == AR32.getName() ));
      assertEquals( true, AR32.isSetName() );
      if (AR32.getName() == name);
      {
      }
      AR32.setName(AR32.getName());
      assertTrue(( name == AR32.getName() ));
      AR32.setName("");
      assertEquals( false, AR32.isSetName() );
      if (AR32.getName() != null);
      {
      }
    }

    public void test_SBase_setName_9()
    {
      string name =  "x12345";
      int i = EA31.setName(name);
      assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE );
      assertEquals( false, EA31.isSetName() );
      assertTrue( EA31.getName() == "" );
    }

    public void test_SBase_setVariable_10()
    {
      string id =  "x12345";
      int i = EA31.setVariable(id);
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertEquals( true, EA31.isSetId() );
      assertTrue( EA31.getId() == id );
      assertEquals( false, EA31.isSetIdAttribute() );
      assertTrue( EA31.getIdAttribute() ==  "" );
      assertEquals( true, EA31.isSetVariable() );
      assertTrue( EA31.getVariable() == id );
      i = EA31.unsetVariable();
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertEquals( false, EA31.isSetId() );
      assertTrue( EA31.getId() ==  "" );
      assertEquals( false, EA31.isSetIdAttribute() );
      assertTrue( EA31.getIdAttribute() ==  "" );
      assertEquals( false, EA31.isSetVariable() );
      assertTrue( EA31.getVariable() ==  "" );
    }

    public void test_SBase_setVariable_7()
    {
      string id =  "x12345";
      int i = AR31.setVariable(id);
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertEquals( true, AR31.isSetId() );
      assertTrue( AR31.getId() == id );
      assertEquals( false, AR31.isSetIdAttribute() );
      assertTrue( AR31.getIdAttribute() ==  "" );
      assertEquals( true, AR31.isSetVariable() );
      assertTrue( AR31.getVariable() == id );
      i = AR31.unsetVariable();
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertEquals( false, AR31.isSetId() );
      assertTrue( AR31.getId() ==  "" );
      assertEquals( false, AR31.isSetIdAttribute() );
      assertTrue( AR31.getIdAttribute() ==  "" );
      assertEquals( false, AR31.isSetVariable() );
      assertTrue( AR31.getVariable() ==  "" );
    }

    public void test_SBase_setVariable_8()
    {
      string id =  "x12345";
      int i = AR31.setVariable(id);
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertEquals( true, AR31.isSetId() );
      assertTrue( AR31.getId() == id );
      assertEquals( false, AR31.isSetIdAttribute() );
      assertTrue( AR31.getIdAttribute() ==  "" );
      assertEquals( true, AR31.isSetVariable() );
      assertTrue( AR31.getVariable() == id );
      i = AR31.unsetVariable();
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertEquals( false, AR31.isSetId() );
      assertTrue( AR31.getId() ==  "" );
      assertEquals( false, AR31.isSetIdAttribute() );
      assertTrue( AR31.getIdAttribute() ==  "" );
      assertEquals( false, AR31.isSetVariable() );
      assertTrue( AR31.getVariable() ==  "" );
    }

    public void test_SBase_setVariable_9()
    {
      string id =  "x12345";
      int i = EA31.setVariable(id);
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertEquals( true, EA31.isSetId() );
      assertTrue( EA31.getId() == id );
      assertEquals( false, EA31.isSetIdAttribute() );
      assertTrue( EA31.getIdAttribute() ==  "" );
      assertEquals( true, EA31.isSetVariable() );
      assertTrue( EA31.getVariable() == id );
      i = EA31.unsetVariable();
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertEquals( false, EA31.isSetId() );
      assertTrue( EA31.getId() ==  "" );
      assertEquals( false, EA31.isSetIdAttribute() );
      assertTrue( EA31.getIdAttribute() ==  "" );
      assertEquals( false, EA31.isSetVariable() );
      assertTrue( EA31.getVariable() ==  "" );
    }

  }
}
