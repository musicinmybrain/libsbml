///  @file    TestRemoveFromParent.cs
///  @brief   RemoveFromParent unit tests
///  @author  Frank Bergmann (Csharp conversion)
///  @author  Akiya Jouraku (Csharp conversion)
///  @author  Lucian Smith 
///  
///  ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
/// 
///  DO NOT EDIT THIS FILE.
/// 
///  This file was generated automatically by converting the file located at
///  src/sbml/test/TestRemoveFromParent.cpp
///  using the conversion program dev/utilities/translateTests/translateTests.pl.
///  Any changes made here will be lost the next time the file is regenerated.
/// 
///  -----------------------------------------------------------------------------
///  This file is part of libSBML.  Please visit http://sbml.org for more
///  information about SBML, and the latest version of libSBML.
/// 
///  Copyright 2005-2010 California Institute of Technology.
///  Copyright 2002-2005 California Institute of Technology and
///                      Japan Science and Technology Corporation.
///  
///  This library is free software; you can redistribute it and/or modify it
///  under the terms of the GNU Lesser General Public License as published by
///  the Free Software Foundation.  A copy of the license agreement is provided
///  in the file named "LICENSE.txt" included with this software distribution
///  and also available online as http://sbml.org/software/libsbml/license.html
///  -----------------------------------------------------------------------------


namespace LibSBMLCSTest.sbml {

  using libsbmlcs;

  using System;

  using System.IO;

  public class TestRemoveFromParent {
    public class AssertionError : System.Exception 
    {
      public AssertionError() : base()
      {
        
      }
    }


    static void assertTrue(bool condition)
    {
      if (condition == true)
      {
        return;
      }
      throw new AssertionError();
    }

    static void assertEquals(object a, object b)
    {
      if ( (a == null) && (b == null) )
      {
        return;
      }
      else if ( (a == null) || (b == null) )
      {
        throw new AssertionError();
      }
      else if (a.Equals(b))
      {
        return;
      }
  
      throw new AssertionError();
    }

    static void assertNotEquals(object a, object b)
    {
      if ( (a == null) && (b == null) )
      {
        throw new AssertionError();
      }
      else if ( (a == null) || (b == null) )
      {
        return;
      }
      else if (a.Equals(b))
      {
        throw new AssertionError();
      }
    }

    static void assertEquals(bool a, bool b)
    {
      if ( a == b )
      {
        return;
      }
      throw new AssertionError();
    }

    static void assertNotEquals(bool a, bool b)
    {
      if ( a != b )
      {
        return;
      }
      throw new AssertionError();
    }

    static void assertEquals(int a, int b)
    {
      if ( a == b )
      {
        return;
      }
      throw new AssertionError();
    }

    static void assertNotEquals(int a, int b)
    {
      if ( a != b )
      {
        return;
      }
      throw new AssertionError();
    }


    public void test_RemoveFromParent_alreadyRemoved()
    {
      SBMLReader reader = new SBMLReader();
      SBMLDocument d;
      string filename =  "../../sbml/sbml/test/test-data/";
      filename += "multiple-ids.xml";
      d = reader.readSBML(filename);
      if (d == null);
      {
      }
      SBase obj;
      obj = d.getElementByMetaId("meta20");
      assertTrue( obj != null );
      assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
      obj = d.getElementByMetaId("meta20");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta21");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta30");
      assertTrue( obj != null );
      assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
      obj = d.getElementByMetaId("meta30");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta32");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta31");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta3");
      assertTrue( obj != null );
      assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
      obj = d.getElementByMetaId("meta3");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta4");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta5");
      assertTrue( obj != null );
      assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
      obj = d.getElementByMetaId("meta5");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta6");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta11");
      assertTrue( obj != null );
      assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
      obj = d.getElementByMetaId("meta11");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta28");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta27");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta34");
      assertTrue( obj != null );
      assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
      obj = d.getElementByMetaId("meta34");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta35");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta8");
      assertTrue( obj != null );
      assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
      obj = d.getElementByMetaId("meta8");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta10");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta9");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta33");
      assertTrue( obj != null );
      assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
      obj = d.getElementByMetaId("meta33");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta18");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta15");
      assertTrue( obj != null );
      assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
      obj = d.getElementByMetaId("meta15");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta16");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta13");
      assertTrue( obj != null );
      assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
      obj = d.getElementByMetaId("meta13");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta14");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta17");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta19");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta22");
      assertTrue( obj != null );
      assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
      obj = d.getElementByMetaId("meta22");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta23");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta24");
      assertTrue( obj != null );
      assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
      obj = d.getElementByMetaId("meta24");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta25");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta26");
      assertTrue( obj == null );
      d = null;
    }

    public void test_RemoveFromParent_successfulRemoves()
    {
      SBMLReader reader = new SBMLReader();
      SBMLDocument d;
      string filename =  "../../sbml/sbml/test/test-data/";
      filename += "multiple-ids.xml";
      d = reader.readSBML(filename);
      if (d == null);
      {
      }
      SBase obj;
      obj = d.getElementByMetaId("meta1");
      assertTrue( obj != null );
      assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_FAILED );
      obj = d.getElementByMetaId("meta21");
      assertTrue( obj != null );
      assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
      obj = d.getElementByMetaId("meta21");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta20");
      assertTrue( obj != null );
      assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
      obj = d.getElementByMetaId("meta20");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta32");
      assertTrue( obj != null );
      assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
      obj = d.getElementByMetaId("meta32");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta31");
      assertTrue( obj != null );
      assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
      obj = d.getElementByMetaId("meta31");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta30");
      assertTrue( obj != null );
      assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
      obj = d.getElementByMetaId("meta30");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta29");
      assertTrue( obj != null );
      assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
      obj = d.getElementByMetaId("meta29");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta4");
      assertTrue( obj != null );
      assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
      obj = d.getElementByMetaId("meta4");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta3");
      assertTrue( obj != null );
      assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
      obj = d.getElementByMetaId("meta3");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta6");
      assertTrue( obj != null );
      assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
      obj = d.getElementByMetaId("meta6");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta5");
      assertTrue( obj != null );
      assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
      obj = d.getElementByMetaId("meta5");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta28");
      assertTrue( obj != null );
      assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
      obj = d.getElementByMetaId("meta28");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta27");
      assertTrue( obj != null );
      assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
      obj = d.getElementByMetaId("meta27");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta11");
      assertTrue( obj != null );
      assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
      obj = d.getElementByMetaId("meta11");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta10");
      assertTrue( obj != null );
      assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
      obj = d.getElementByMetaId("meta10");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta9");
      assertTrue( obj != null );
      assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
      obj = d.getElementByMetaId("meta9");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta35");
      assertTrue( obj != null );
      assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
      obj = d.getElementByMetaId("meta35");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta34");
      assertTrue( obj != null );
      assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
      obj = d.getElementByMetaId("meta34");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta8");
      assertTrue( obj != null );
      assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
      obj = d.getElementByMetaId("meta8");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta7");
      assertTrue( obj != null );
      assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
      obj = d.getElementByMetaId("meta7");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta18");
      assertTrue( obj != null );
      assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
      obj = d.getElementByMetaId("meta18");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta33");
      assertTrue( obj != null );
      assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
      obj = d.getElementByMetaId("meta33");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta14");
      assertTrue( obj != null );
      assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
      obj = d.getElementByMetaId("meta14");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta16");
      assertTrue( obj != null );
      assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
      obj = d.getElementByMetaId("meta16");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta15");
      assertTrue( obj != null );
      assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
      obj = d.getElementByMetaId("meta15");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta17");
      assertTrue( obj != null );
      assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
      obj = d.getElementByMetaId("meta17");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta19");
      assertTrue( obj != null );
      assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
      obj = d.getElementByMetaId("meta19");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta13");
      assertTrue( obj != null );
      assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
      obj = d.getElementByMetaId("meta13");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta12");
      assertTrue( obj != null );
      assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
      obj = d.getElementByMetaId("meta12");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta23");
      assertTrue( obj != null );
      assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
      obj = d.getElementByMetaId("meta23");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta22");
      assertTrue( obj != null );
      assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
      obj = d.getElementByMetaId("meta22");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta25");
      assertTrue( obj != null );
      assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
      obj = d.getElementByMetaId("meta25");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta26");
      assertTrue( obj != null );
      assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
      obj = d.getElementByMetaId("meta26");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta24");
      assertTrue( obj != null );
      assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
      obj = d.getElementByMetaId("meta24");
      assertTrue( obj == null );
      obj = d.getElementByMetaId("meta2");
      assertTrue( obj != null );
      assertTrue( obj.removeFromParentAndDelete() == libsbml.LIBSBML_OPERATION_SUCCESS );
      obj = d.getElementByMetaId("meta2");
      assertTrue( obj == null );
      d = null;
    }

  }
}
