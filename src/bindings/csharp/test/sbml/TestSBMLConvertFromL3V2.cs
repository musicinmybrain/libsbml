///  @file    TestSBMLConvertFromL3V2.cs
///  @brief   SBMLConvert unit tests for strict conversion from L3V2
///  @author  Frank Bergmann (Csharp conversion)
///  @author  Akiya Jouraku (Csharp conversion)
///  @author  Sarah Keating 
///  
///  ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
/// 
///  DO NOT EDIT THIS FILE.
/// 
///  This file was generated automatically by converting the file located at
///  src/sbml/test/TestSBMLConvertFromL3V2.cpp
///  using the conversion program dev/utilities/translateTests/translateTests.pl.
///  Any changes made here will be lost the next time the file is regenerated.
/// 
///  -----------------------------------------------------------------------------
///  This file is part of libSBML.  Please visit http://sbml.org for more
///  information about SBML, and the latest version of libSBML.
/// 
///  Copyright 2005-2010 California Institute of Technology.
///  Copyright 2002-2005 California Institute of Technology and
///                      Japan Science and Technology Corporation.
///  
///  This library is free software; you can redistribute it and/or modify it
///  under the terms of the GNU Lesser General Public License as published by
///  the Free Software Foundation.  A copy of the license agreement is provided
///  in the file named "LICENSE.txt" included with this software distribution
///  and also available online as http://sbml.org/software/libsbml/license.html
///  -----------------------------------------------------------------------------


namespace LibSBMLCSTest.sbml {

  using libsbmlcs;

  using System;

  using System.IO;

  public class TestSBMLConvertFromL3V2 {
    public class AssertionError : System.Exception 
    {
      public AssertionError() : base()
      {
        
      }
    }


    static void assertTrue(bool condition)
    {
      if (condition == true)
      {
        return;
      }
      throw new AssertionError();
    }

    static void assertEquals(object a, object b)
    {
      if ( (a == null) && (b == null) )
      {
        return;
      }
      else if ( (a == null) || (b == null) )
      {
        throw new AssertionError();
      }
      else if (a.Equals(b))
      {
        return;
      }
  
      throw new AssertionError();
    }

    static void assertNotEquals(object a, object b)
    {
      if ( (a == null) && (b == null) )
      {
        throw new AssertionError();
      }
      else if ( (a == null) || (b == null) )
      {
        return;
      }
      else if (a.Equals(b))
      {
        throw new AssertionError();
      }
    }

    static void assertEquals(bool a, bool b)
    {
      if ( a == b )
      {
        return;
      }
      throw new AssertionError();
    }

    static void assertNotEquals(bool a, bool b)
    {
      if ( a != b )
      {
        return;
      }
      throw new AssertionError();
    }

    static void assertEquals(int a, int b)
    {
      if ( a == b )
      {
        return;
      }
      throw new AssertionError();
    }

    static void assertNotEquals(int a, int b)
    {
      if ( a != b )
      {
        return;
      }
      throw new AssertionError();
    }


    public void test_SBMLConvertFromL3V2_convertEmptyLO_nonstrict()
    {
      string expected = "<model>\n" + 
    "  <listOfParameters>\n" + 
    "    <annotation>some annotation</annotation>\n" + 
    "  </listOfParameters>\n" + 
    "</model>";
      string expected1 = + "<model/>";
      SBMLDocument doc = new SBMLDocument(3,2);
      Model m = doc.createModel();
      ListOfParameters lo = m.getListOfParameters();
      lo.setAnnotation("some annotation");
      assertTrue( doc.getLevel() == 3 );
      assertTrue( doc.getVersion() == 2 );
      assertTrue( lo.getLevel() == 3 );
      assertTrue( lo.getVersion() == 2 );
      assertTrue( lo.isSetAnnotation() == true );
      string sbml = m.toSBML();
      assertEquals( true, equals(expected,sbml) );
      sbml = null;
      bool done = doc.setLevelAndVersion(2,4,false);
      assertTrue( done == true );
      assertTrue( doc.getErrorLog().contains(EmptyListOfElementNotSupported) == true );
      assertTrue( doc.getLevel() == 2 );
      assertTrue( doc.getVersion() == 4 );
      assertTrue( doc.getModel().getListOfParameters().getLevel() == 2 );
      assertTrue( doc.getModel().getListOfParameters().getVersion() == 4 );
      Model m1 = doc.getModel();
      sbml = m1.toSBML();
      assertEquals( true, equals(expected1,sbml) );
      sbml = null;
      doc = null;
    }

    public void test_SBMLConvertFromL3V2_convertEmptyLO_strict()
    {
      string expected = "<model>\n" + 
    "  <listOfParameters>\n" + 
    "    <annotation>some annotation</annotation>\n" + 
    "  </listOfParameters>\n" + 
    "</model>";
      string expected1 = + "<model/>";
      SBMLDocument doc = new SBMLDocument(3,2);
      Model m = doc.createModel();
      ListOfParameters lo = m.getListOfParameters();
      lo.setAnnotation("some annotation");
      assertTrue( doc.getLevel() == 3 );
      assertTrue( doc.getVersion() == 2 );
      assertTrue( lo.getLevel() == 3 );
      assertTrue( lo.getVersion() == 2 );
      assertTrue( lo.isSetAnnotation() == true );
      string sbml = m.toSBML();
      assertEquals( true, equals(expected,sbml) );
      sbml = null;
      bool done = doc.setLevelAndVersion(2,4,true);
      assertTrue( done == true );
      assertTrue( doc.getErrorLog().contains(EmptyListOfElementNotSupported) == true );
      assertTrue( doc.getLevel() == 2 );
      assertTrue( doc.getVersion() == 4 );
      assertTrue( doc.getModel().getListOfParameters().getLevel() == 2 );
      assertTrue( doc.getModel().getListOfParameters().getVersion() == 4 );
      Model m1 = doc.getModel();
      sbml = m1.toSBML();
      assertEquals( true, equals(expected1,sbml) );
      sbml = null;
      doc = null;
    }

    public void test_SBMLConvertFromL3V2_convertIA_nonstrict()
    {
      SBMLDocument doc = new SBMLDocument(3,2);
      Model m = doc.createModel();
      Parameter p = m.createParameter();
      p.setId("p");
      p.setConstant(false);
      InitialAssignment ar = m.createInitialAssignment();
      ar.setSymbol("p");
      string math =  "2*3";
      ASTNode node = .parseL3Formula();
      ar.setMath(node);
      node = null;
      assertTrue( doc.getLevel() == 3 );
      assertTrue( doc.getVersion() == 2 );
      assertTrue( ar.getLevel() == 3 );
      assertTrue( ar.getVersion() == 2 );
      assertTrue( ar.isSetMath() == true );
      assertTrue( ar.getMath().usesL3V2MathConstructs() == false );
      assertTrue( m.getNumInitialAssignments() == 1 );
      assertTrue( p.isSetValue() == false );
      bool done = doc.setLevelAndVersion(2,4,false);
      assertTrue( done == true );
      assertTrue( doc.getErrorLog().contains(ConvertibleMathInitialAssignment) == false );
      assertTrue( doc.getLevel() == 2 );
      assertTrue( doc.getVersion() == 4 );
      assertTrue( doc.getModel().getParameter(0).getLevel() == 2 );
      assertTrue( doc.getModel().getParameter(0).getVersion() == 4 );
      assertTrue( m.getNumInitialAssignments() == 1 );
      ASTNode node1 = doc.getModel().getInitialAssignment(0).getMath();
      string str = node1.formulaToL3String();
      assertTrue((  "2 * 3" == str ));
      assertTrue( doc.getModel().getParameter(0).isSetValue() == false );
      doc = null;
    }

    public void test_SBMLConvertFromL3V2_convertIA_strict()
    {
      SBMLDocument doc = new SBMLDocument(3,2);
      Model m = doc.createModel();
      Parameter p = m.createParameter();
      p.setId("p");
      p.setConstant(false);
      InitialAssignment ar = m.createInitialAssignment();
      ar.setSymbol("p");
      string math =  "2*3";
      ASTNode node = .parseL3Formula();
      ar.setMath(node);
      node = null;
      assertTrue( doc.getLevel() == 3 );
      assertTrue( doc.getVersion() == 2 );
      assertTrue( ar.getLevel() == 3 );
      assertTrue( ar.getVersion() == 2 );
      assertTrue( ar.isSetMath() == true );
      assertTrue( ar.getMath().usesL3V2MathConstructs() == false );
      assertTrue( m.getNumInitialAssignments() == 1 );
      assertTrue( p.isSetValue() == false );
      bool done = doc.setLevelAndVersion(2,4,true);
      assertTrue( done == true );
      assertTrue( doc.getErrorLog().contains(ConvertibleMathInitialAssignment) == false );
      assertTrue( doc.getLevel() == 2 );
      assertTrue( doc.getVersion() == 4 );
      assertTrue( doc.getModel().getParameter(0).getLevel() == 2 );
      assertTrue( doc.getModel().getParameter(0).getVersion() == 4 );
      assertTrue( m.getNumInitialAssignments() == 1 );
      ASTNode node1 = doc.getModel().getInitialAssignment(0).getMath();
      string str = node1.formulaToL3String();
      assertTrue((  "2 * 3" == str ));
      assertTrue( doc.getModel().getParameter(0).isSetValue() == false );
      doc = null;
    }

    public void test_SBMLConvertFromL3V2_convertIAnewMath1_nonstrict()
    {
      SBMLDocument doc = new SBMLDocument(3,2);
      Model m = doc.createModel();
      Parameter p = m.createParameter();
      p.setId("p");
      p.setConstant(false);
      Parameter p1 = m.createParameter();
      p1.setId("x");
      p1.setConstant(true);
      p1.setValue(1);
      InitialAssignment ar = m.createInitialAssignment();
      ar.setSymbol("p");
      string math =  "rateOf(x)";
      ASTNode node = .parseL3Formula();
      ar.setMath(node);
      node = null;
      assertTrue( doc.getLevel() == 3 );
      assertTrue( doc.getVersion() == 2 );
      assertTrue( ar.getLevel() == 3 );
      assertTrue( ar.getVersion() == 2 );
      assertTrue( ar.isSetMath() == true );
      assertTrue( ar.getMath().usesL3V2MathConstructs() == true );
      assertTrue( ar.getMath().usesRateOf() == true );
      assertTrue( m.getNumInitialAssignments() == 1 );
      assertTrue( p.isSetValue() == false );
      bool done = doc.setLevelAndVersion(2,4,false);
      assertTrue( done == true );
      assertTrue( doc.getErrorLog().contains(MathMLElementNotSupported) == true );
      assertTrue( doc.getLevel() == 2 );
      assertTrue( doc.getVersion() == 4 );
      assertTrue( doc.getModel().getParameter(0).getLevel() == 2 );
      assertTrue( doc.getModel().getParameter(0).getVersion() == 4 );
      assertTrue( m.getNumInitialAssignments() == 1 );
      assertTrue( doc.getModel().getParameter(0).isSetValue() == false );
      ASTNode node1 = doc.getModel().getInitialAssignment(0).getMath();
      string str = node1.formulaToL3String();
      assertTrue((  "rateOf(x)" == str ));
      doc = null;
    }

    public void test_SBMLConvertFromL3V2_convertIAnewMath1_strict()
    {
      SBMLDocument doc = new SBMLDocument(3,2);
      Model m = doc.createModel();
      Parameter p = m.createParameter();
      p.setId("p");
      p.setConstant(false);
      Parameter p1 = m.createParameter();
      p1.setId("x");
      p1.setConstant(true);
      p1.setValue(1);
      InitialAssignment ar = m.createInitialAssignment();
      ar.setSymbol("p");
      string math =  "rateOf(x)";
      ASTNode node = .parseL3Formula();
      ar.setMath(node);
      node = null;
      assertTrue( doc.getLevel() == 3 );
      assertTrue( doc.getVersion() == 2 );
      assertTrue( ar.getLevel() == 3 );
      assertTrue( ar.getVersion() == 2 );
      assertTrue( ar.isSetMath() == true );
      assertTrue( ar.getMath().usesL3V2MathConstructs() == true );
      assertTrue( ar.getMath().usesRateOf() == true );
      assertTrue( m.getNumInitialAssignments() == 1 );
      assertTrue( p.isSetValue() == false );
      bool done = doc.setLevelAndVersion(2,4,true);
      assertTrue( done == false );
      assertTrue( doc.getErrorLog().contains(MathMLElementNotSupported) == true );
      assertTrue( doc.getLevel() == 3 );
      assertTrue( doc.getVersion() == 2 );
      assertTrue( doc.getModel().getParameter(0).getLevel() == 3 );
      assertTrue( doc.getModel().getParameter(0).getVersion() == 2 );
      assertTrue( m.getNumInitialAssignments() == 1 );
      assertTrue( doc.getModel().getParameter(0).isSetValue() == false );
      doc = null;
    }

    public void test_SBMLConvertFromL3V2_convertIAnewMath_nonstrict()
    {
      SBMLDocument doc = new SBMLDocument(3,2);
      Model m = doc.createModel();
      Parameter p = m.createParameter();
      p.setId("p");
      p.setConstant(false);
      InitialAssignment ar = m.createInitialAssignment();
      ar.setSymbol("p");
      string math =  "min(2, 3)";
      ASTNode node = .parseL3Formula();
      ar.setMath(node);
      node = null;
      assertTrue( doc.getLevel() == 3 );
      assertTrue( doc.getVersion() == 2 );
      assertTrue( ar.getLevel() == 3 );
      assertTrue( ar.getVersion() == 2 );
      assertTrue( ar.isSetMath() == true );
      assertTrue( ar.getMath().usesL3V2MathConstructs() == true );
      assertTrue( ar.getMath().usesRateOf() == false );
      assertTrue( m.getNumInitialAssignments() == 1 );
      assertTrue( p.isSetValue() == false );
      bool done = doc.setLevelAndVersion(2,4,true);
      assertTrue( done == true );
      assertTrue( doc.getErrorLog().contains(ConvertibleMathInitialAssignment) == true );
      assertTrue( doc.getLevel() == 2 );
      assertTrue( doc.getVersion() == 4 );
      assertTrue( doc.getModel().getParameter(0).getLevel() == 2 );
      assertTrue( doc.getModel().getParameter(0).getVersion() == 4 );
      assertTrue( m.getNumInitialAssignments() == 0 );
      assertTrue( doc.getModel().getParameter(0).isSetValue() == true );
      assertEquals( true, util_isEqual );
      doc = null;
    }

    public void test_SBMLConvertFromL3V2_convertIAnewMath_strict()
    {
      SBMLDocument doc = new SBMLDocument(3,2);
      Model m = doc.createModel();
      Parameter p = m.createParameter();
      p.setId("p");
      p.setConstant(false);
      InitialAssignment ar = m.createInitialAssignment();
      ar.setSymbol("p");
      string math =  "min(2, 3)";
      ASTNode node = .parseL3Formula();
      ar.setMath(node);
      node = null;
      assertTrue( doc.getLevel() == 3 );
      assertTrue( doc.getVersion() == 2 );
      assertTrue( ar.getLevel() == 3 );
      assertTrue( ar.getVersion() == 2 );
      assertTrue( ar.isSetMath() == true );
      assertTrue( ar.getMath().usesL3V2MathConstructs() == true );
      assertTrue( ar.getMath().usesRateOf() == false );
      assertTrue( m.getNumInitialAssignments() == 1 );
      assertTrue( p.isSetValue() == false );
      bool done = doc.setLevelAndVersion(2,4,true);
      assertTrue( done == true );
      assertTrue( doc.getErrorLog().contains(ConvertibleMathInitialAssignment) == true );
      assertTrue( doc.getLevel() == 2 );
      assertTrue( doc.getVersion() == 4 );
      assertTrue( doc.getModel().getParameter(0).getLevel() == 2 );
      assertTrue( doc.getModel().getParameter(0).getVersion() == 4 );
      assertTrue( m.getNumInitialAssignments() == 0 );
      assertTrue( doc.getModel().getParameter(0).isSetValue() == true );
      assertEquals( true, util_isEqual );
      doc = null;
    }

    public void test_SBMLConvertFromL3V2_convertIAvalue_nonstrict()
    {
      SBMLDocument doc = new SBMLDocument(3,2);
      Model m = doc.createModel();
      Parameter p = m.createParameter();
      p.setId("p");
      p.setConstant(false);
      InitialAssignment ar = m.createInitialAssignment();
      ar.setSymbol("p");
      string math =  "2 * 3";
      ASTNode node = .parseL3Formula();
      ar.setMath(node);
      node = null;
      assertTrue( doc.getLevel() == 3 );
      assertTrue( doc.getVersion() == 2 );
      assertTrue( ar.getLevel() == 3 );
      assertTrue( ar.getVersion() == 2 );
      assertTrue( ar.isSetMath() == true );
      assertTrue( ar.getMath().usesL3V2MathConstructs() == false );
      assertTrue( m.getNumInitialAssignments() == 1 );
      assertTrue( p.isSetValue() == false );
      bool done = doc.setLevelAndVersion(2,1,false);
      assertTrue( done == true );
      assertTrue( doc.getErrorLog().contains(ConvertibleMathInitialAssignment) == false );
      assertTrue( doc.getErrorLog().contains(MathMLElementNotSupported) == false );
      assertTrue( doc.getLevel() == 2 );
      assertTrue( doc.getVersion() == 1 );
      assertTrue( doc.getModel().getParameter(0).getLevel() == 2 );
      assertTrue( doc.getModel().getParameter(0).getVersion() == 1 );
      assertTrue( m.getNumInitialAssignments() == 0 );
      assertTrue( doc.getModel().getParameter(0).isSetValue() == true );
      assertEquals( true, util_isEqual );
      doc = null;
    }

    public void test_SBMLConvertFromL3V2_convertIAvalue_strict()
    {
      SBMLDocument doc = new SBMLDocument(3,2);
      Model m = doc.createModel();
      Parameter p = m.createParameter();
      p.setId("p");
      p.setConstant(false);
      InitialAssignment ar = m.createInitialAssignment();
      ar.setSymbol("p");
      string math =  "2 * 3";
      ASTNode node = .parseL3Formula();
      ar.setMath(node);
      node = null;
      assertTrue( doc.getLevel() == 3 );
      assertTrue( doc.getVersion() == 2 );
      assertTrue( ar.getLevel() == 3 );
      assertTrue( ar.getVersion() == 2 );
      assertTrue( ar.isSetMath() == true );
      assertTrue( ar.getMath().usesL3V2MathConstructs() == false );
      assertTrue( m.getNumInitialAssignments() == 1 );
      assertTrue( p.isSetValue() == false );
      bool done = doc.setLevelAndVersion(2,1,true);
      assertTrue( done == true );
      assertTrue( doc.getErrorLog().contains(ConvertibleMathInitialAssignment) == false );
      assertTrue( doc.getErrorLog().contains(MathMLElementNotSupported) == false );
      assertTrue( doc.getLevel() == 2 );
      assertTrue( doc.getVersion() == 1 );
      assertTrue( doc.getModel().getParameter(0).getLevel() == 2 );
      assertTrue( doc.getModel().getParameter(0).getVersion() == 1 );
      assertTrue( m.getNumInitialAssignments() == 0 );
      assertTrue( doc.getModel().getParameter(0).isSetValue() == true );
      assertEquals( true, util_isEqual );
      doc = null;
    }

    public void test_SBMLConvertFromL3V2_convertMissingEAMath_bug()
    {
      SBMLDocument doc = new SBMLDocument(3,2);
      Model m = doc.createModel();
      Parameter p = m.createParameter();
      p.setId("p");
      p.setConstant(false);
      Event e = m.createEvent();
      e.setUseValuesFromTriggerTime(true);
      Trigger t = e.createTrigger();
      t.setPersistent(false);
      t.setInitialValue(false);
      string math =  "true";
      ASTNode node = .parseL3Formula();
      t.setMath(node);
      node = null;
      EventAssignment ea = e.createEventAssignment();
      ea.setVariable("p");
      assertTrue( doc.getLevel() == 3 );
      assertTrue( doc.getVersion() == 2 );
      assertTrue( e.getLevel() == 3 );
      assertTrue( e.getVersion() == 2 );
      assertTrue( e.isSetTrigger() == true );
      assertTrue( e.getTrigger().isSetMath() == true );
      assertTrue( e.getNumEventAssignments() == 1 );
      assertTrue( e.getEventAssignment(0).isSetMath() == false );
      bool done = doc.setLevelAndVersion(3,1,true);
      assertTrue( done == true );
      assertTrue( doc.getErrorLog().contains(MissingMathElementNotSupported) == true );
      assertTrue( doc.getLevel() == 3 );
      assertTrue( doc.getVersion() == 1 );
      assertTrue( doc.getModel().getEvent(0).getLevel() == 3 );
      assertTrue( doc.getModel().getEvent(0).getVersion() == 1 );
      assertTrue( doc.getModel().getEvent(0).isSetTrigger() == true );
      assertTrue( doc.getModel().getEvent(0).getTrigger().isSetMath() == true );
      assertTrue( e.getNumEventAssignments() == 0 );
      ASTNode node1 = doc.getModel().getEvent(0).getTrigger().getMath();
      string str = node1.formulaToL3String();
      assertTrue((  "true" == str ));
      doc = null;
    }

    public void test_SBMLConvertFromL3V2_convertMissingFast()
    {
      string filename =  "../../sbml/sbml/test/test-data/";
      filename += "l3v2-reaction.xml";
      SBMLDocument doc = libsbml.readSBML();
      assertTrue( doc.getLevel() == 3 );
      assertTrue( doc.getVersion() == 2 );
      assertTrue( doc.getModel().getNumReactions() == 1 );
      Reaction r = doc.getModel().getReaction(0);
      assertTrue( r != null );
      assertTrue( r.isSetFast() == false );
      bool done = doc.setLevelAndVersion(3,1,true);
      assertTrue( done == true );
      assertTrue( doc.getLevel() == 3 );
      assertTrue( doc.getVersion() == 1 );
      r = doc.getModel().getReaction(0);
      assertTrue( r != null );
      assertTrue( r.isSetFast() == true );
      assertTrue( r.getFast() == false );
      doc = null;
    }

    public void test_SBMLConvertFromL3V2_convertMissingMathForStoich_strict()
    {
      string filename =  "../../sbml/sbml/test/test-data/";
      filename += "l3v2-stoich-math-missing.xml";
      SBMLDocument doc = libsbml.readSBML();
      Model m = doc.getModel();
      AssignmentRule ar = m.getRule(0);
      SpeciesReference sr = m.getReaction(0).getProduct(0);
      assertTrue( doc.getLevel() == 3 );
      assertTrue( doc.getVersion() == 2 );
      assertTrue( ar.getLevel() == 3 );
      assertTrue( ar.getVersion() == 2 );
      assertTrue( ar.isSetMath() == false );
      assertTrue( m.getNumRules() == 1 );
      assertTrue( ar.getVariable() == sr.getId() );
      bool done = doc.setLevelAndVersion(2,4,true);
      assertTrue( done == true );
      assertTrue( doc.getLevel() == 2 );
      assertTrue( doc.getVersion() == 4 );
      m = doc.getModel();
      assertTrue( m.getNumRules() == 0 );
      sr = m.getReaction(0).getProduct(0);
      assertTrue( sr.isSetStoichiometryMath() == false );
      assertTrue( sr.isSetStoichiometry() == true );
      doc = null;
    }

    public void test_SBMLConvertFromL3V2_convertMissingMath_nonstrict()
    {
      SBMLDocument doc = new SBMLDocument(3,2);
      Model m = doc.createModel();
      Parameter p = m.createParameter();
      p.setId("p");
      p.setConstant(false);
      AssignmentRule ar = m.createAssignmentRule();
      ar.setVariable("p");
      assertTrue( doc.getLevel() == 3 );
      assertTrue( doc.getVersion() == 2 );
      assertTrue( ar.getLevel() == 3 );
      assertTrue( ar.getVersion() == 2 );
      assertTrue( ar.isSetMath() == false );
      assertTrue( m.getNumRules() == 1 );
      bool done = doc.setLevelAndVersion(3,1,false);
      assertTrue( done == true );
      assertTrue( doc.getErrorLog().contains(MissingMathElementNotSupported) == true );
      assertTrue( doc.getLevel() == 3 );
      assertTrue( doc.getVersion() == 1 );
      assertTrue( doc.getModel().getParameter(0).getLevel() == 3 );
      assertTrue( doc.getModel().getParameter(0).getVersion() == 1 );
      assertTrue( m.getNumRules() == 1 );
      ar = doc.getModel().getAssignmentRule("p");
      assertTrue( ar.isSetMath() == false );
      doc = null;
    }

    public void test_SBMLConvertFromL3V2_convertMissingMath_strict()
    {
      SBMLDocument doc = new SBMLDocument(3,2);
      Model m = doc.createModel();
      Parameter p = m.createParameter();
      p.setId("p");
      p.setConstant(false);
      AssignmentRule ar = m.createAssignmentRule();
      ar.setVariable("p");
      assertTrue( doc.getLevel() == 3 );
      assertTrue( doc.getVersion() == 2 );
      assertTrue( ar.getLevel() == 3 );
      assertTrue( ar.getVersion() == 2 );
      assertTrue( ar.isSetMath() == false );
      assertTrue( m.getNumRules() == 1 );
      bool done = doc.setLevelAndVersion(3,1,true);
      assertTrue( done == true );
      assertTrue( doc.getErrorLog().contains(MissingMathElementNotSupported) == true );
      assertTrue( doc.getLevel() == 3 );
      assertTrue( doc.getVersion() == 1 );
      assertTrue( doc.getModel().getParameter(0).getLevel() == 3 );
      assertTrue( doc.getModel().getParameter(0).getVersion() == 1 );
      assertTrue( m.getNumRules() == 0 );
      doc = null;
    }

    public void test_SBMLConvertFromL3V2_convertMissingReactantProducts_nonstrict()
    {
      string filename =  "../../sbml/sbml/test/test-data/";
      filename += "l3v2-reaction-no-sr.xml";
      SBMLDocument doc = libsbml.readSBML();
      assertTrue( doc.getLevel() == 3 );
      assertTrue( doc.getVersion() == 2 );
      assertTrue( doc.getModel().getNumReactions() == 1 );
      Reaction r = doc.getModel().getReaction(0);
      assertTrue( r != null );
      assertTrue( r.getNumProducts() == 0 );
      assertTrue( r.getNumReactants() == 0 );
      assertTrue( r.getNumModifiers() == 0 );
      assertTrue( r.isSetKineticLaw() == true );
      bool done = doc.setLevelAndVersion(3,1,false);
      assertTrue( done == true );
      assertTrue( doc.getErrorLog().contains(MissingParticipantsNotSupported) == true );
      assertTrue( doc.getLevel() == 3 );
      assertTrue( doc.getVersion() == 1 );
      assertTrue( doc.getModel().getNumReactions() == 1 );
      r = doc.getModel().getReaction(0);
      assertTrue( r != null );
      assertTrue( r.getNumProducts() == 0 );
      assertTrue( r.getNumReactants() == 0 );
      assertTrue( r.getNumModifiers() == 0 );
      assertTrue( r.isSetKineticLaw() == true );
      doc = null;
    }

    public void test_SBMLConvertFromL3V2_convertMissingReactantProducts_strict()
    {
      string filename =  "../../sbml/sbml/test/test-data/";
      filename += "l3v2-reaction-no-sr.xml";
      SBMLDocument doc = libsbml.readSBML();
      assertTrue( doc.getLevel() == 3 );
      assertTrue( doc.getVersion() == 2 );
      assertTrue( doc.getModel().getNumReactions() == 1 );
      Reaction r = doc.getModel().getReaction(0);
      assertTrue( r != null );
      assertTrue( r.getNumProducts() == 0 );
      assertTrue( r.getNumReactants() == 0 );
      assertTrue( r.getNumModifiers() == 0 );
      assertTrue( r.isSetKineticLaw() == true );
      bool done = doc.setLevelAndVersion(3,1,true);
      assertTrue( done == false );
      assertTrue( doc.getErrorLog().contains(MissingParticipantsNotSupported) == true );
      assertTrue( doc.getLevel() == 3 );
      assertTrue( doc.getVersion() == 2 );
      assertTrue( doc.getModel().getNumReactions() == 1 );
      doc = null;
    }

    public void test_SBMLConvertFromL3V2_convertMissingTriggerMath_nonstrict()
    {
      SBMLDocument doc = new SBMLDocument(3,2);
      Model m = doc.createModel();
      Parameter p = m.createParameter();
      p.setId("p");
      p.setConstant(false);
      Event e = m.createEvent();
      e.setUseValuesFromTriggerTime(true);
      Trigger t = e.createTrigger();
      t.setPersistent(false);
      t.setInitialValue(false);
      EventAssignment ea = e.createEventAssignment();
      ea.setVariable("p");
      string math =  "2";
      ASTNode node = .parseL3Formula();
      ea.setMath(node);
      node = null;
      assertTrue( doc.getLevel() == 3 );
      assertTrue( doc.getVersion() == 2 );
      assertTrue( e.getLevel() == 3 );
      assertTrue( e.getVersion() == 2 );
      assertTrue( e.isSetTrigger() == true );
      assertTrue( e.getTrigger().isSetMath() == false );
      bool done = doc.setLevelAndVersion(3,1,false);
      assertTrue( done == true );
      assertTrue( doc.getErrorLog().contains(MissingMathElementNotSupported) == true );
      assertTrue( doc.getLevel() == 3 );
      assertTrue( doc.getVersion() == 1 );
      assertTrue( doc.getModel().getEvent(0).getLevel() == 3 );
      assertTrue( doc.getModel().getEvent(0).getVersion() == 1 );
      assertTrue( doc.getModel().getEvent(0).isSetTrigger() == true );
      assertTrue( doc.getModel().getEvent(0).getTrigger().isSetMath() == true );
      ASTNode node1 = doc.getModel().getEvent(0).getTrigger().getMath();
      string str = node1.formulaToL3String();
      assertTrue((  "false" == str ));
      doc = null;
    }

    public void test_SBMLConvertFromL3V2_convertMissingTriggerMath_strict()
    {
      SBMLDocument doc = new SBMLDocument(3,2);
      Model m = doc.createModel();
      Parameter p = m.createParameter();
      p.setId("p");
      p.setConstant(false);
      Event e = m.createEvent();
      e.setUseValuesFromTriggerTime(true);
      Trigger t = e.createTrigger();
      t.setPersistent(false);
      t.setInitialValue(false);
      EventAssignment ea = e.createEventAssignment();
      ea.setVariable("p");
      string math =  "2";
      ASTNode node = .parseL3Formula();
      ea.setMath(node);
      node = null;
      assertTrue( doc.getLevel() == 3 );
      assertTrue( doc.getVersion() == 2 );
      assertTrue( e.getLevel() == 3 );
      assertTrue( e.getVersion() == 2 );
      assertTrue( e.isSetTrigger() == true );
      assertTrue( e.getTrigger().isSetMath() == false );
      bool done = doc.setLevelAndVersion(3,1,true);
      assertTrue( done == true );
      assertTrue( doc.getErrorLog().contains(MissingMathElementNotSupported) == true );
      assertTrue( doc.getLevel() == 3 );
      assertTrue( doc.getVersion() == 1 );
      assertTrue( doc.getModel().getEvent(0).getLevel() == 3 );
      assertTrue( doc.getModel().getEvent(0).getVersion() == 1 );
      assertTrue( doc.getModel().getEvent(0).isSetTrigger() == true );
      assertTrue( doc.getModel().getEvent(0).getTrigger().isSetMath() == true );
      ASTNode node1 = doc.getModel().getEvent(0).getTrigger().getMath();
      string str = node1.formulaToL3String();
      assertTrue((  "false" == str ));
      doc = null;
    }

    public void test_SBMLConvertFromL3V2_convertMissingTrigger_nonstrict()
    {
      SBMLDocument doc = new SBMLDocument(3,2);
      Model m = doc.createModel();
      Parameter p = m.createParameter();
      p.setId("p");
      p.setConstant(false);
      Event e = m.createEvent();
      e.setUseValuesFromTriggerTime(true);
      EventAssignment ea = e.createEventAssignment();
      ea.setVariable("p");
      string math =  "2";
      ASTNode node = .parseL3Formula();
      ea.setMath(node);
      node = null;
      assertTrue( doc.getLevel() == 3 );
      assertTrue( doc.getVersion() == 2 );
      assertTrue( e.getLevel() == 3 );
      assertTrue( e.getVersion() == 2 );
      assertTrue( e.isSetTrigger() == false );
      bool done = doc.setLevelAndVersion(3,1,false);
      assertTrue( done == true );
      assertTrue( doc.getErrorLog().contains(MissingTriggerElementNotSupported) == true );
      assertTrue( doc.getLevel() == 3 );
      assertTrue( doc.getVersion() == 1 );
      assertTrue( doc.getModel().getEvent(0).getLevel() == 3 );
      assertTrue( doc.getModel().getEvent(0).getVersion() == 1 );
      assertTrue( doc.getModel().getEvent(0).isSetTrigger() == true );
      assertTrue( doc.getModel().getEvent(0).getTrigger().isSetMath() == true );
      ASTNode node1 = doc.getModel().getEvent(0).getTrigger().getMath();
      string str = node1.formulaToL3String();
      assertTrue((  "false" == str ));
      doc = null;
    }

    public void test_SBMLConvertFromL3V2_convertMissingTrigger_strict()
    {
      SBMLDocument doc = new SBMLDocument(3,2);
      Model m = doc.createModel();
      Parameter p = m.createParameter();
      p.setId("p");
      p.setConstant(false);
      Event e = m.createEvent();
      e.setUseValuesFromTriggerTime(true);
      EventAssignment ea = e.createEventAssignment();
      ea.setVariable("p");
      string math =  "2";
      ASTNode node = .parseL3Formula();
      ea.setMath(node);
      node = null;
      assertTrue( doc.getLevel() == 3 );
      assertTrue( doc.getVersion() == 2 );
      assertTrue( e.getLevel() == 3 );
      assertTrue( e.getVersion() == 2 );
      assertTrue( e.isSetTrigger() == false );
      bool done = doc.setLevelAndVersion(3,1,true);
      assertTrue( done == true );
      assertTrue( doc.getErrorLog().contains(MissingTriggerElementNotSupported) == true );
      assertTrue( doc.getLevel() == 3 );
      assertTrue( doc.getVersion() == 1 );
      assertTrue( doc.getModel().getEvent(0).getLevel() == 3 );
      assertTrue( doc.getModel().getEvent(0).getVersion() == 1 );
      assertTrue( doc.getModel().getEvent(0).isSetTrigger() == true );
      assertTrue( doc.getModel().getEvent(0).getTrigger().isSetMath() == true );
      ASTNode node1 = doc.getModel().getEvent(0).getTrigger().getMath();
      string str = node1.formulaToL3String();
      assertTrue((  "false" == str ));
      doc = null;
    }

    public void test_SBMLConvertFromL3V2_convertnewMath_nonstrict()
    {
      SBMLDocument doc = new SBMLDocument(3,2);
      Model m = doc.createModel();
      Parameter p = m.createParameter();
      p.setId("p");
      p.setConstant(false);
      AssignmentRule ar = m.createAssignmentRule();
      ar.setVariable("p");
      string math =  "min(2, 3)";
      ASTNode node = .parseL3Formula();
      ar.setMath(node);
      node = null;
      assertTrue( doc.getLevel() == 3 );
      assertTrue( doc.getVersion() == 2 );
      assertTrue( ar.getLevel() == 3 );
      assertTrue( ar.getVersion() == 2 );
      assertTrue( ar.isSetMath() == true );
      assertTrue( ar.getMath().usesL3V2MathConstructs() == true );
      bool done = doc.setLevelAndVersion(2,4,false);
      assertTrue( done == true );
      assertTrue( doc.getErrorLog().contains(MathMLElementNotSupported) == true );
      assertTrue( doc.getLevel() == 2 );
      assertTrue( doc.getVersion() == 4 );
      assertTrue( doc.getModel().getRule(0).getLevel() == 2 );
      assertTrue( doc.getModel().getRule(0).getVersion() == 4 );
      assertTrue( doc.getModel().getRule(0).isSetMath() == true );
      assertTrue( doc.getModel().getRule(0).getMath().usesL3V2MathConstructs() == true );
      ASTNode node1 = doc.getModel().getRule(0).getMath();
      string str = node1.formulaToL3String();
      assertTrue((  "min(2, 3)" == str ));
      doc = null;
    }

    public void test_SBMLConvertFromL3V2_convertnewMath_strict()
    {
      SBMLDocument doc = new SBMLDocument(3,2);
      Model m = doc.createModel();
      Parameter p = m.createParameter();
      p.setId("p");
      p.setConstant(false);
      AssignmentRule ar = m.createAssignmentRule();
      ar.setVariable("p");
      string math =  "min(2, 3)";
      ASTNode node = .parseL3Formula();
      ar.setMath(node);
      node = null;
      assertTrue( doc.getLevel() == 3 );
      assertTrue( doc.getVersion() == 2 );
      assertTrue( ar.getLevel() == 3 );
      assertTrue( ar.getVersion() == 2 );
      assertTrue( ar.isSetMath() == true );
      assertTrue( ar.getMath().usesL3V2MathConstructs() == true );
      bool done = doc.setLevelAndVersion(2,4,true);
      assertTrue( done == false );
      assertTrue( doc.getErrorLog().contains(MathMLElementNotSupported) == true );
      assertTrue( doc.getLevel() == 3 );
      assertTrue( doc.getVersion() == 2 );
      assertTrue( doc.getModel().getRule(0).getLevel() == 3 );
      assertTrue( doc.getModel().getRule(0).getVersion() == 2 );
      assertTrue( doc.getModel().getRule(0).isSetMath() == true );
      assertTrue( doc.getModel().getRule(0).getMath().usesL3V2MathConstructs() == true );
      ASTNode node1 = doc.getModel().getRule(0).getMath();
      string str = node1.formulaToL3String();
      assertTrue((  "min(2, 3)" == str ));
      doc = null;
    }

  }
}
