///  @file    TestWriteL3V2SBML.cs
///  @brief   Write SBML unit tests
///  @author  Frank Bergmann (Csharp conversion)
///  @author  Akiya Jouraku (Csharp conversion)
///  @author  Sarah Keating 
///  
///  ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
/// 
///  DO NOT EDIT THIS FILE.
/// 
///  This file was generated automatically by converting the file located at
///  src/sbml/test/TestWriteL3V2SBML.cpp
///  using the conversion program dev/utilities/translateTests/translateTests.pl.
///  Any changes made here will be lost the next time the file is regenerated.
/// 
///  -----------------------------------------------------------------------------
///  This file is part of libSBML.  Please visit http://sbml.org for more
///  information about SBML, and the latest version of libSBML.
/// 
///  Copyright 2005-2010 California Institute of Technology.
///  Copyright 2002-2005 California Institute of Technology and
///                      Japan Science and Technology Corporation.
///  
///  This library is free software; you can redistribute it and/or modify it
///  under the terms of the GNU Lesser General Public License as published by
///  the Free Software Foundation.  A copy of the license agreement is provided
///  in the file named "LICENSE.txt" included with this software distribution
///  and also available online as http://sbml.org/software/libsbml/license.html
///  -----------------------------------------------------------------------------


namespace LibSBMLCSTest.sbml {

  using libsbmlcs;

  using System;

  using System.IO;

  public class TestWriteL3V2SBML {
    public class AssertionError : System.Exception 
    {
      public AssertionError() : base()
      {
        
      }
    }


    static void assertTrue(bool condition)
    {
      if (condition == true)
      {
        return;
      }
      throw new AssertionError();
    }

    static void assertEquals(object a, object b)
    {
      if ( (a == null) && (b == null) )
      {
        return;
      }
      else if ( (a == null) || (b == null) )
      {
        throw new AssertionError();
      }
      else if (a.Equals(b))
      {
        return;
      }
  
      throw new AssertionError();
    }

    static void assertNotEquals(object a, object b)
    {
      if ( (a == null) && (b == null) )
      {
        throw new AssertionError();
      }
      else if ( (a == null) || (b == null) )
      {
        return;
      }
      else if (a.Equals(b))
      {
        throw new AssertionError();
      }
    }

    static void assertEquals(bool a, bool b)
    {
      if ( a == b )
      {
        return;
      }
      throw new AssertionError();
    }

    static void assertNotEquals(bool a, bool b)
    {
      if ( a != b )
      {
        return;
      }
      throw new AssertionError();
    }

    static void assertEquals(int a, int b)
    {
      if ( a == b )
      {
        return;
      }
      throw new AssertionError();
    }

    static void assertNotEquals(int a, int b)
    {
      if ( a != b )
      {
        return;
      }
      throw new AssertionError();
    }

    private SBMLDocument D;

    public string LV_L3v2()
    {
      return "level=\"3\" version=\"2\">\n";
    }

    public string LV_L3v2_noEnd()
    {
      return "level=\"3\" version=\"2\"";
    }

    public string NS_EXTRA()
    {
      return "xmlns:extra=\"http://www.sbml.org/sbml/level3/version1/extra/version1\" ";
    }

    public string NS_L3v2()
    {
      return "xmlns=\"http://www.sbml.org/sbml/level3/version2/core\" ";
    }

    public string REQD_EXTRA()
    {
      return " extra:required=\"false\">\n";
    }

    public string SBML_END()
    {
      return "</sbml>\n";
    }

    public string SBML_START()
    {
      return "<sbml ";
    }

    public string XML_START()
    {
      return "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
    }

    public string wrapSBML_L3v2(string s)
    {
      string r = XML_START();
      r += SBML_START();
      r += NS_L3v2();
      r += LV_L3v2();
      r += s;
      r += SBML_END();
      return r;
    }

    public string wrapSBML_extra(string s)
    {
      string r = XML_START();
      r += SBML_START();
      r += NS_L3v2();
      r += NS_EXTRA();
      r += LV_L3v2_noEnd();
      r += REQD_EXTRA();
      r += s;
      r += SBML_END();
      return r;
    }

    public string wrapXML(string s)
    {
      string r = XML_START();
      r += s;
      return r;
    }

    public void setUp()
    {
      D = new SBMLDocument();
      D.setLevelAndVersion(3,2,false);
    }

    public void tearDown()
    {
    }

    public void test_WriteL3V2SBML_LO_ann()
    {
      string expected = wrapSBML_L3v2("  <model>\n" + 
    "    <listOfCompartments>\n" + 
    "      <annotation>test</annotation>\n" + 
    "    </listOfCompartments>\n" + 
    "  </model>\n");
      Model m = D.createModel("");
      XMLNode ann = XMLNode.convertStringToXMLNode("test");
      (SBase*)(m.getListOfCompartments())).setAnnotation(ann;
      ann = null;
      string S = writeSBMLToStdString;
      assertEquals( true, equals(expected,) );
    }

    public void test_WriteL3V2SBML_Model()
    {
      string expected = wrapSBML_L3v2("  <model/>\n"  
    );
      Model m = D.createModel("");
      (void) m;
      string S = writeSBMLToStdString;
      assertEquals( true, equals(expected,) );
    }

    public void test_WriteL3V2SBML_SBMLDocument_L3v1()
    {
      string expected = wrapXML("<sbml xmlns=\"http://www.sbml.org/sbml/level3/version2/core\" " + "level=\"3\" version=\"2\"/>\n");
      string S = writeSBMLToStdString;
      assertEquals( true, equals(expected,) );
    }

    public void test_WriteL3V2SBML_emptyMath()
    {
      string expected = wrapSBML_L3v2("  <model>\n" + 
    "    <listOfInitialAssignments>\n" + 
    "      <initialAssignment/>\n" + 
    "    </listOfInitialAssignments>\n" + 
    "  </model>\n");
      Model m = D.createModel("");
      m.createInitialAssignment();
      string S = writeSBMLToStdString;
      assertEquals( true, equals(expected,) );
    }

    public void test_WriteL3V2SBML_roundtrip()
    {
      string expected = wrapSBML_extra("  <model>\n" + 
    "    <listOfInitialAssignments extra:foo=\"bar\"/>\n" + 
    "  </model>\n");
      string filename = "../../sbml/sbml/test/test-data/l3v2-extra.xml";
      SBMLDocument d = libsbml.readSBML(filename);
      string S = writeSBMLToStdString;
      d = null;
      assertEquals( true, equals(expected,) );
    }

  }
}
