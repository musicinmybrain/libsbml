///  @file    TestXMLAttributesC.cs
///  @brief   XMLAttributes unit tests, C version
///  @author  Frank Bergmann (Csharp conversion)
///  @author  Akiya Jouraku (Csharp conversion)
///  @author  Sarah Keating 
///  
///  ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
/// 
///  DO NOT EDIT THIS FILE.
/// 
///  This file was generated automatically by converting the file located at
///  src/sbml/test/TestXMLAttributesC.c
///  using the conversion program dev/utilities/translateTests/translateTests.pl.
///  Any changes made here will be lost the next time the file is regenerated.
/// 
///  -----------------------------------------------------------------------------
///  This file is part of libSBML.  Please visit http://sbml.org for more
///  information about SBML, and the latest version of libSBML.
/// 
///  Copyright 2005-2010 California Institute of Technology.
///  Copyright 2002-2005 California Institute of Technology and
///                      Japan Science and Technology Corporation.
///  
///  This library is free software; you can redistribute it and/or modify it
///  under the terms of the GNU Lesser General Public License as published by
///  the Free Software Foundation.  A copy of the license agreement is provided
///  in the file named "LICENSE.txt" included with this software distribution
///  and also available online as http://sbml.org/software/libsbml/license.html
///  -----------------------------------------------------------------------------


namespace LibSBMLCSTest.xml {

  using libsbmlcs;

  using System;

  using System.IO;

  public class TestXMLAttributesC {
    public class AssertionError : System.Exception 
    {
      public AssertionError() : base()
      {
        
      }
    }


    static void assertTrue(bool condition)
    {
      if (condition == true)
      {
        return;
      }
      throw new AssertionError();
    }

    static void assertEquals(object a, object b)
    {
      if ( (a == null) && (b == null) )
      {
        return;
      }
      else if ( (a == null) || (b == null) )
      {
        throw new AssertionError();
      }
      else if (a.Equals(b))
      {
        return;
      }
  
      throw new AssertionError();
    }

    static void assertNotEquals(object a, object b)
    {
      if ( (a == null) && (b == null) )
      {
        throw new AssertionError();
      }
      else if ( (a == null) || (b == null) )
      {
        return;
      }
      else if (a.Equals(b))
      {
        throw new AssertionError();
      }
    }

    static void assertEquals(bool a, bool b)
    {
      if ( a == b )
      {
        return;
      }
      throw new AssertionError();
    }

    static void assertNotEquals(bool a, bool b)
    {
      if ( a != b )
      {
        return;
      }
      throw new AssertionError();
    }

    static void assertEquals(int a, int b)
    {
      if ( a == b )
      {
        return;
      }
      throw new AssertionError();
    }

    static void assertNotEquals(int a, int b)
    {
      if ( a != b )
      {
        return;
      }
      throw new AssertionError();
    }


    public void test_XMLAttributes_accessWithNULL()
    {
      assertTrue( null.add(null,null) == libsbml.LIBSBML_INVALID_OBJECT );
      assertTrue( null.add(null,null,null,null) == libsbml.LIBSBML_INVALID_OBJECT );
      assertTrue( null.add(null,null) == libsbml.LIBSBML_INVALID_OBJECT );
      assertTrue( null.clear() == libsbml.LIBSBML_INVALID_OBJECT );
      assertTrue( null.clone() == null );
      assertTrue( null.getIndex(null) == -1 );
      assertTrue( null.getIndex(null,null) == -1 );
      assertTrue( null.getIndex(null) == -1 );
      assertTrue( null.getLength() == 0 );
      assertTrue( null.getName(0) == "" );
      assertTrue( null.getPrefix(0) == "" );
      assertTrue( null.getURI(0) == "" );
      assertTrue( null.getValue(0) == null );
      assertTrue( null.getValue(null) == null );
      assertTrue( null.getValue(null,null) == null );
      assertTrue( null.getValue(null) == null );
      assertTrue( null.hasAttribute(0) == false );
      assertTrue( null.hasAttribute(null) == false );
      assertTrue( null.hasAttribute(null,null) == false );
      assertTrue( null.hasAttribute(null) == false );
      assertTrue( null.isEmpty() == true );
      assertTrue( null.readIntoBoolean(null,null,null,0) == 0 );
      assertTrue( null.readIntoBoolean(null,null,null,0) == 0 );
      assertTrue( null.readIntoDouble(null,null,null,0) == 0 );
      assertTrue( null.readIntoDouble(null,null,null,0) == 0 );
      assertTrue( null.readIntoInt(null,null,null,0) == 0 );
      assertTrue( null.readIntoInt(null,null,null,0) == 0 );
      assertTrue( null.readIntoLong(null,null,null,0) == 0 );
      assertTrue( null.readIntoLong(null,null,null,0) == 0 );
      assertTrue( null.readIntoString(null,null,null,0) == 0 );
      assertTrue( null.readIntoString(null,null,null,0) == 0 );
      assertTrue( null.readIntoUnsignedInt(null,null,null,0) == 0 );
      assertTrue( null.readIntoUnsignedInt(null,null,null,0) == 0 );
      assertTrue( null.remove(0) == libsbml.LIBSBML_INVALID_OBJECT );
      assertTrue( null.remove(null) == libsbml.LIBSBML_INVALID_OBJECT );
      assertTrue( null.remove(null,null) == libsbml.LIBSBML_INVALID_OBJECT );
      assertTrue( null.remove(null) == libsbml.LIBSBML_INVALID_OBJECT );
      assertTrue( null.removeResource(0) == libsbml.LIBSBML_INVALID_OBJECT );
    }

    public void test_XMLAttributes_add1()
    {
      XMLAttributes xa = new  XMLAttributes();
      XMLTriple xt2 = new  XMLTriple("name2", "http://name2.org/", "p2");
      int i = xa.add( "name1", "val1", "http://name1.org/", "p1");
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      i = xa.add(xt2, "val2");
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertTrue( xa.getLength() == 2 );
      assertTrue( xa.isEmpty() == false );
      i = xa.add( "noprefix", "val3");
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertTrue( xa.getLength() == 3 );
      assertTrue( xa.isEmpty() == false );
      xa = null;
      xt2 = null;
    }

    public void test_XMLAttributes_add_remove_qname_C()
    {
      string test;
      XMLAttributes xa = new  XMLAttributes();
      XMLTriple xt1 = new  XMLTriple("name1", "http://name1.org/", "p1");
      XMLTriple xt2 = new  XMLTriple("name2", "http://name2.org/", "p2");
      XMLTriple xt3 = new  XMLTriple("name3", "http://name3.org/", "p3");
      XMLTriple xt1a = new  XMLTriple("name1", "http://name1a.org/", "p1a");
      XMLTriple xt2a = new  XMLTriple("name2", "http://name2a.org/", "p2a");
      xa.add( "name1", "val1", "http://name1.org/", "p1");
      xa.add(xt2, "val2");
      assertTrue( xa.getLength() == 2 );
      assertTrue( xa.isEmpty() == false );
      test = xa.getName(0);
      assertTrue( (  "name1" != test ) == false );
      test = null;
      test = xa.getValue(0);
      assertTrue( (  "val1"  != test ) == false );
      test = null;
      test = xa.getURI(0);
      assertTrue( (  "http://name1.org/" != test ) == false );
      test = null;
      test = xa.getPrefix(0);
      assertTrue( (  "p1"    != test ) == false );
      test = null;
      test = xa.getName(1);
      assertTrue( (  "name2" != test ) == false );
      test = null;
      test = xa.getValue(1);
      assertTrue( (  "val2"  != test ) == false );
      test = null;
      test = xa.getURI(1);
      assertTrue( (  "http://name2.org/" != test ) == false );
      test = null;
      test = xa.getPrefix(1);
      assertTrue( (  "p2"    != test ) == false );
      test = null;
      test = xa.getValue( "name1");
      assertTrue( (  "val1"  != test ) == false );
      test = null;
      test = xa.getValue( "name2");
      assertTrue( (  "val2"  != test ) == false );
      test = null;
      test = xa.getValue( "name1", "http://name1.org/");
      assertTrue( (  "val1"  != test ) == false );
      test = null;
      test = xa.getValue( "name2", "http://name2.org/");
      assertTrue( (  "val2"  != test ) == false );
      test = null;
      test = xa.getValue(xt1);
      assertTrue( (  "val1"  != test ) == false );
      test = null;
      test = xa.getValue(xt2);
      assertTrue( (  "val2"  != test ) == false );
      test = null;
      assertTrue( xa.hasAttribute(-1) == false );
      assertTrue( xa.hasAttribute(2) == false );
      assertTrue( xa.hasAttribute(0) == true );
      assertTrue( xa.hasAttribute( "name1", "http://name1.org/") == true );
      assertTrue( xa.hasAttribute( "name2", "http://name2.org/") == true );
      assertTrue( xa.hasAttribute( "name3", "http://name3.org/") == false );
      assertTrue( xa.hasAttribute(xt1) == true );
      assertTrue( xa.hasAttribute(xt2) == true );
      assertTrue( xa.hasAttribute(xt3) == false );
      xa.add( "noprefix", "val3");
      assertTrue( xa.getLength() == 3 );
      assertTrue( xa.isEmpty() == false );
      test = xa.getName(2);
      assertTrue( (  "noprefix" != test ) == false );
      test = null;
      test = xa.getValue(2);
      assertTrue( (  "val3"  != test ) == false );
      test = null;
      assertTrue( xa.getURI(2) == "" );
      assertTrue( xa.getPrefix(2) == "" );
      test = xa.getValue( "noprefix", "");
      assertTrue( (  "val3" != test ) == false );
      test = null;
      assertTrue( xa.hasAttribute( "noprefix"    ) == true );
      assertTrue( xa.hasAttribute( "noprefix", "") == true );
      xa.add(xt1, "mval1");
      xa.add( "name2", "mval2", "http://name2.org/", "p2");
      xa.add( "noprefix", "mval3");
      assertTrue( xa.getLength() == 3 );
      assertTrue( xa.isEmpty() == false );
      test = xa.getName(0);
      assertTrue( (  "name1" != test ) == false );
      test = null;
      test = xa.getValue(0);
      assertTrue( (  "mval1"  != test ) == false );
      test = null;
      test = xa.getURI(0);
      assertTrue( (  "http://name1.org/" != test ) == false );
      test = null;
      test = xa.getPrefix(0);
      assertTrue( (  "p1"    != test ) == false );
      test = null;
      test = xa.getName(1);
      assertTrue( (  "name2" != test ) == false );
      test = null;
      test = xa.getValue(1);
      assertTrue( (  "mval2"  != test ) == false );
      test = null;
      test = xa.getURI(1);
      assertTrue( (  "http://name2.org/" != test ) == false );
      test = null;
      test = xa.getPrefix(1);
      assertTrue( (  "p2"    != test ) == false );
      test = null;
      test = xa.getName(2);
      assertTrue( (  "noprefix" != test ) == false );
      test = null;
      test = xa.getValue(2);
      assertTrue( (  "mval3"  != test ) == false );
      test = null;
      assertTrue( xa.getURI(2) == "" );
      assertTrue( xa.getPrefix(2) == "" );
      assertTrue( xa.hasAttribute(xt1) == true );
      assertTrue( xa.hasAttribute( "name1", "http://name1.org/") == true );
      assertTrue( xa.hasAttribute( "noprefix") == true );
      xa.add(xt1a, "val1a");
      xa.add(xt2a, "val2a");
      assertTrue( xa.getLength() == 5 );
      test = xa.getName(3);
      assertTrue( (  "name1" != test ) == false );
      test = null;
      test = xa.getValue(3);
      assertTrue( (  "val1a"  != test ) == false );
      test = null;
      test = xa.getURI(3);
      assertTrue( (  "http://name1a.org/" != test ) == false );
      test = null;
      test = xa.getPrefix(3);
      assertTrue( (  "p1a"    != test ) == false );
      test = null;
      test = xa.getName(4);
      assertTrue( (  "name2" != test ) == false );
      test = null;
      test = xa.getValue(4);
      assertTrue( (  "val2a"  != test ) == false );
      test = null;
      test = xa.getURI(4);
      assertTrue( (  "http://name2a.org/" != test ) == false );
      test = null;
      test = xa.getPrefix(4);
      assertTrue( (  "p2a"    != test ) == false );
      test = null;
      test = xa.getValue( "name1");
      assertTrue( (  "mval1"  != test ) == false );
      test = null;
      test = xa.getValue( "name2");
      assertTrue( (  "mval2"  != test ) == false );
      test = null;
      test = xa.getValue( "name1", "http://name1a.org/");
      assertTrue( (  "val1a"  != test ) == false );
      test = null;
      test = xa.getValue( "name2", "http://name2a.org/");
      assertTrue( (  "val2a"  != test ) == false );
      test = null;
      test = xa.getValue(xt1a);
      assertTrue( (  "val1a"  != test ) == false );
      test = null;
      test = xa.getValue(xt2a);
      assertTrue( (  "val2a"  != test ) == false );
      test = null;
      xa.remove(xt1a);
      xa.remove(xt2a);
      assertTrue( xa.getLength() == 3 );
      xa.remove( "name1", "http://name1.org/");
      assertTrue( xa.getLength() == 2 );
      assertTrue( xa.isEmpty() == false );
      test = xa.getName(0);
      assertTrue( (  "name2" != test ) == false );
      test = null;
      test = xa.getValue(0);
      assertTrue( (  "mval2"  != test ) == false );
      test = null;
      test = xa.getURI(0);
      assertTrue( (  "http://name2.org/" != test ) == false );
      test = null;
      test = xa.getPrefix(0);
      assertTrue( (  "p2"    != test ) == false );
      test = null;
      test = xa.getName(1);
      assertTrue( (  "noprefix" != test ) == false );
      test = null;
      test = xa.getValue(1);
      assertTrue( (  "mval3"  != test ) == false );
      test = null;
      assertTrue( xa.getURI(1) == "" );
      assertTrue( xa.getPrefix(1) == "" );
      assertTrue( xa.hasAttribute( "name1", "http://name1.org/") == false );
      xa.remove(xt2);
      assertTrue( xa.getLength() == 1 );
      assertTrue( xa.isEmpty() == false );
      test = xa.getName(0);
      assertTrue( (  "noprefix" != test ) == false );
      test = null;
      test = xa.getValue(0);
      assertTrue( (  "mval3"  != test ) == false );
      test = null;
      assertTrue( xa.getURI(0) == "" );
      assertTrue( xa.getPrefix(0) == "" );
      assertTrue( xa.hasAttribute(xt2) == false );
      assertTrue( xa.hasAttribute( "name2", "http://name2.org/") == false );
      xa.remove( "noprefix", "");
      assertTrue( xa.getLength() == 0 );
      assertTrue( xa.isEmpty() == true );
      assertTrue( xa.hasAttribute( "noprefix"    ) == false );
      assertTrue( xa.hasAttribute( "noprefix", "") == false );
      xa = null;
      xt1 = null;
      xt2 = null;
      xt3 = null;
      xt1a = null;
      xt2a = null;
    }

    public void test_XMLAttributes_clear1()
    {
      XMLAttributes xa = new  XMLAttributes();
      XMLTriple xt2 = new  XMLTriple("name2", "http://name2.org/", "p2");
      int i = xa.add( "name1", "val1", "http://name1.org/", "p1");
      i = xa.add(xt2, "val2");
      i = xa.add( "noprefix", "val3");
      assertTrue( xa.getLength() == 3 );
      assertTrue( xa.isEmpty() == false );
      i = xa.clear();
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertTrue( xa.getLength() == 0 );
      assertTrue( xa.isEmpty() == true );
      xa = null;
      xt2 = null;
    }

    public void test_XMLAttributes_remove1()
    {
      XMLAttributes xa = new  XMLAttributes();
      XMLTriple xt2 = new  XMLTriple("name2", "http://name2.org/", "p2");
      int i = xa.add( "name1", "val1", "http://name1.org/", "p1");
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      i = xa.add(xt2, "val2");
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      i = xa.add( "noprefix", "val3");
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      i = xa.add( "name4", "val4", "http://name4.org/", "p1");
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertTrue( xa.getLength() == 4 );
      i = xa.remove(4);
      assertTrue( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE );
      i = xa.remove(3);
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertTrue( xa.getLength() == 3 );
      i = xa.remove( "noprefix");
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertTrue( xa.getLength() == 2 );
      i = xa.remove(xt2);
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertTrue( xa.getLength() == 1 );
      i = xa.remove( "name1", "http://name1.org/");
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertTrue( xa.getLength() == 0 );
      xa = null;
      xt2 = null;
    }

  }
}
