///  @file    TestReadFromFileL3V2.cs
///  @brief   Tests for reading MathML from files into ASTNodes.
///  @author  Frank Bergmann (Csharp conversion)
///  @author  Akiya Jouraku (Csharp conversion)
///  @author  Sarah Keating 
///  
///  ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
/// 
///  DO NOT EDIT THIS FILE.
/// 
///  This file was generated automatically by converting the file located at
///  src/sbml/test/TestReadFromFileL3V2.cpp
///  using the conversion program dev/utilities/translateTests/translateTests.pl.
///  Any changes made here will be lost the next time the file is regenerated.
/// 
///  -----------------------------------------------------------------------------
///  This file is part of libSBML.  Please visit http://sbml.org for more
///  information about SBML, and the latest version of libSBML.
/// 
///  Copyright 2005-2010 California Institute of Technology.
///  Copyright 2002-2005 California Institute of Technology and
///                      Japan Science and Technology Corporation.
///  
///  This library is free software; you can redistribute it and/or modify it
///  under the terms of the GNU Lesser General Public License as published by
///  the Free Software Foundation.  A copy of the license agreement is provided
///  in the file named "LICENSE.txt" included with this software distribution
///  and also available online as http://sbml.org/software/libsbml/license.html
///  -----------------------------------------------------------------------------


namespace LibSBMLCSTest.math {

  using libsbmlcs;

  using System;

  using System.IO;

  public class TestReadFromFileL3V2 {
    public class AssertionError : System.Exception 
    {
      public AssertionError() : base()
      {
        
      }
    }


    static void assertTrue(bool condition)
    {
      if (condition == true)
      {
        return;
      }
      throw new AssertionError();
    }

    static void assertEquals(object a, object b)
    {
      if ( (a == null) && (b == null) )
      {
        return;
      }
      else if ( (a == null) || (b == null) )
      {
        throw new AssertionError();
      }
      else if (a.Equals(b))
      {
        return;
      }
  
      throw new AssertionError();
    }

    static void assertNotEquals(object a, object b)
    {
      if ( (a == null) && (b == null) )
      {
        throw new AssertionError();
      }
      else if ( (a == null) || (b == null) )
      {
        return;
      }
      else if (a.Equals(b))
      {
        throw new AssertionError();
      }
    }

    static void assertEquals(bool a, bool b)
    {
      if ( a == b )
      {
        return;
      }
      throw new AssertionError();
    }

    static void assertNotEquals(bool a, bool b)
    {
      if ( a != b )
      {
        return;
      }
      throw new AssertionError();
    }

    static void assertEquals(int a, int b)
    {
      if ( a == b )
      {
        return;
      }
      throw new AssertionError();
    }

    static void assertNotEquals(int a, int b)
    {
      if ( a != b )
      {
        return;
      }
      throw new AssertionError();
    }


    public void test_read_MathML_L3V2()
    {
      string expected = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + 
    "<math xmlns=\"http://www.w3.org/1998/Math/MathML\">\n" + 
    "  <apply>\n" + 
    "    <max/>\n" + 
    "    <cn> 2 </cn>\n" + 
    "    <cn> 3 </cn>\n" + 
    "  </apply>\n" + 
    "</math>";
      string filename =  "../../sbml/math/test/test-data/";
      filename += "L3V2Math.xml";
      SBMLDocument d = libsbml.readSBML();
      if (d == null);
      {
      }
      Model m = d.getModel();
      assertTrue( m != null );
      InitialAssignment ia = m.getInitialAssignment(0);
      ASTNode math = ia.getMath();
      string out = writeMathMLToStdString;
      assertEquals( true, equals(expected,) );
      string expected1 = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + 
    "<math xmlns=\"http://www.w3.org/1998/Math/MathML\">\n" + 
    "  <apply>\n" + 
    "    <times/>\n" + 
    "    <cn> 2 </cn>\n" + 
    "    <cn> 3 </cn>\n" + 
    "  </apply>\n" + 
    "</math>";
      ia = m.getInitialAssignment(1);
      math = ia.getMath();
      assertTrue( math.getNumPlugins() == 0 );
      out = writeMathMLToStdString;
      assertEquals( true, equals(expected1,) );
      d = null;
    }

  }
}
