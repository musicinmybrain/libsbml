///  @file    TestL3FormulaParser.cs
///  @brief   L3FormulaParser unit tests
///  @author  Frank Bergmann (Csharp conversion)
///  @author  Akiya Jouraku (Csharp conversion)
///  @author  Ben Bornstein 
///  
///  ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
/// 
///  DO NOT EDIT THIS FILE.
/// 
///  This file was generated automatically by converting the file located at
///  src/sbml/test/TestL3FormulaParser.cpp
///  using the conversion program dev/utilities/translateTests/translateTests.pl.
///  Any changes made here will be lost the next time the file is regenerated.
/// 
///  -----------------------------------------------------------------------------
///  This file is part of libSBML.  Please visit http://sbml.org for more
///  information about SBML, and the latest version of libSBML.
/// 
///  Copyright 2005-2010 California Institute of Technology.
///  Copyright 2002-2005 California Institute of Technology and
///                      Japan Science and Technology Corporation.
///  
///  This library is free software; you can redistribute it and/or modify it
///  under the terms of the GNU Lesser General Public License as published by
///  the Free Software Foundation.  A copy of the license agreement is provided
///  in the file named "LICENSE.txt" included with this software distribution
///  and also available online as http://sbml.org/software/libsbml/license.html
///  -----------------------------------------------------------------------------


namespace LibSBMLCSTest.math {

  using libsbmlcs;

  using System;

  using System.IO;

  public class TestL3FormulaParser {
    public class AssertionError : System.Exception 
    {
      public AssertionError() : base()
      {
        
      }
    }


    static void assertTrue(bool condition)
    {
      if (condition == true)
      {
        return;
      }
      throw new AssertionError();
    }

    static void assertEquals(object a, object b)
    {
      if ( (a == null) && (b == null) )
      {
        return;
      }
      else if ( (a == null) || (b == null) )
      {
        throw new AssertionError();
      }
      else if (a.Equals(b))
      {
        return;
      }
  
      throw new AssertionError();
    }

    static void assertNotEquals(object a, object b)
    {
      if ( (a == null) && (b == null) )
      {
        throw new AssertionError();
      }
      else if ( (a == null) || (b == null) )
      {
        return;
      }
      else if (a.Equals(b))
      {
        throw new AssertionError();
      }
    }

    static void assertEquals(bool a, bool b)
    {
      if ( a == b )
      {
        return;
      }
      throw new AssertionError();
    }

    static void assertNotEquals(bool a, bool b)
    {
      if ( a != b )
      {
        return;
      }
      throw new AssertionError();
    }

    static void assertEquals(int a, int b)
    {
      if ( a == b )
      {
        return;
      }
      throw new AssertionError();
    }

    static void assertNotEquals(int a, int b)
    {
      if ( a != b )
      {
        return;
      }
      throw new AssertionError();
    }


    public void test_SBML_parseL3Formula_1()
    {
      ASTNode r = "1".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_INTEGER );
      assertTrue( r.getInteger() == 1 );
      assertTrue( r.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_10()
    {
      ASTNode r = "1 + -2e100 / 3".parseL3Formula();
      ASTNode c;
      assertTrue( r.getType() == libsbml.AST_PLUS );
      assertTrue( r.getCharacter() == '+' );
      assertTrue( r.getNumChildren() == 2 );
      c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 1 );
      assertTrue( c.getNumChildren() == 0 );
      c = r.getRightChild();
      assertTrue( c.getType() == libsbml.AST_DIVIDE );
      assertTrue( c.getCharacter() == '/' );
      assertTrue( c.getNumChildren() == 2 );
      c = c.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_MINUS );
      assertTrue( c.getCharacter() == '-' );
      assertTrue( c.getNumChildren() == 1 );
      c = c.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_REAL_E );
      assertTrue( c.getMantissa() == 2 );
      assertTrue( c.getExponent() == 100 );
      assertTrue( c.getNumChildren() == 0 );
      c = r.getRightChild().getRightChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 3 );
      assertTrue( c.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_11()
    {
      ASTNode r = "1 - -foo / 3".parseL3Formula();
      ASTNode c;
      assertTrue( r.getType() == libsbml.AST_MINUS );
      assertTrue( r.getCharacter() == '-' );
      assertTrue( r.getNumChildren() == 2 );
      c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 1 );
      assertTrue( c.getNumChildren() == 0 );
      c = r.getRightChild();
      assertTrue( c.getType() == libsbml.AST_DIVIDE );
      assertTrue( c.getCharacter() == '/' );
      assertTrue( c.getNumChildren() == 2 );
      c = r.getRightChild().getLeftChild();
      assertTrue( c.getType() == libsbml.AST_MINUS );
      assertTrue( c.getCharacter() == '-' );
      assertTrue( c.getNumChildren() == 1 );
      c = r.getRightChild().getLeftChild().getLeftChild();
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "foo" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      c = r.getRightChild().getRightChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 3 );
      assertTrue( c.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_12()
    {
      ASTNode r = "2 * foo^bar + 3.0".parseL3Formula();
      ASTNode c;
      assertTrue( r.getType() == libsbml.AST_PLUS );
      assertTrue( r.getCharacter() == '+' );
      assertTrue( r.getNumChildren() == 2 );
      c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_TIMES );
      assertTrue( c.getCharacter() == '*' );
      assertTrue( c.getNumChildren() == 2 );
      c = r.getRightChild();
      assertTrue( c.getType() == libsbml.AST_REAL );
      assertTrue( c.getReal() == 3.0 );
      assertTrue( c.getNumChildren() == 0 );
      c = r.getLeftChild().getLeftChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 2 );
      assertTrue( c.getNumChildren() == 0 );
      c = r.getLeftChild().getRightChild();
      assertTrue( c.getType() == libsbml.AST_POWER );
      assertTrue( c.getCharacter() == '^' );
      assertTrue( c.getNumChildren() == 2 );
      c = r.getLeftChild().getRightChild().getLeftChild();
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "foo" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      c = r.getLeftChild().getRightChild().getRightChild();
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "bar" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_13()
    {
      ASTNode r = "foo()".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_FUNCTION );
      assertTrue((  "foo" == r.getName() ));
      assertTrue( r.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_14()
    {
      ASTNode r = "foo(1)".parseL3Formula();
      ASTNode c;
      assertTrue( r.getType() == libsbml.AST_FUNCTION );
      assertTrue((  "foo" == r.getName() ));
      assertTrue( r.getNumChildren() == 1 );
      c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 1 );
      assertTrue( c.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_15()
    {
      ASTNode r = "foo(1, bar)".parseL3Formula();
      ASTNode c;
      assertTrue( r.getType() == libsbml.AST_FUNCTION );
      assertTrue((  "foo" == r.getName() ));
      assertTrue( r.getNumChildren() == 2 );
      c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 1 );
      assertTrue( c.getNumChildren() == 0 );
      c = r.getRightChild();
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "bar" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_16()
    {
      ASTNode r = "foo(1, bar, 2^-3)".parseL3Formula();
      ASTNode c;
      assertTrue( r.getType() == libsbml.AST_FUNCTION );
      assertTrue((  "foo" == r.getName() ));
      assertTrue( r.getNumChildren() == 3 );
      c = r.getChild(0);
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 1 );
      assertTrue( c.getNumChildren() == 0 );
      c = r.getChild(1);
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "bar" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      c = r.getChild(2);
      assertTrue( c.getType() == libsbml.AST_POWER );
      assertTrue( c.getCharacter() == '^' );
      assertTrue( c.getNumChildren() == 2 );
      c = r.getChild(2).getLeftChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 2 );
      assertTrue( c.getNumChildren() == 0 );
      c = r.getChild(2).getRightChild();
      assertTrue( c.getType() == libsbml.AST_MINUS );
      assertTrue( c.getCharacter() == '-' );
      assertTrue( c.getNumChildren() == 1 );
      c = c.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 3 );
      assertTrue( c.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_17()
    {
      ASTNode r = "1//1".parseL3Formula();
      string error;
      assertTrue( r == null );
      error = .getLastParseL3Error();
      assertTrue((  "Error when parsing input '1//1' at position 3:  syntax error, unexpected '/'" == error ));
    }

    public void test_SBML_parseL3Formula_18()
    {
      ASTNode r = "1+2*3 4".parseL3Formula();
      string error;
      assertTrue( r == null );
      error = .getLastParseL3Error();
      assertTrue((  "Error when parsing input '1+2*3 4' at position 7:  syntax error, unexpected integer" == error ));
    }

    public void test_SBML_parseL3Formula_2()
    {
      ASTNode r = "2.1".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_REAL );
      assertTrue( r.getReal() == 2.1 );
      assertTrue( r.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_3()
    {
      ASTNode r = "2.1e5".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_REAL_E );
      assertTrue( r.getMantissa() == 2.1 );
      assertTrue( r.getExponent() == 5 );
      assertTrue( r.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_4()
    {
      ASTNode r = "foo".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_NAME );
      assertTrue((  "foo" == r.getName() ));
      assertTrue( r.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_5()
    {
      ASTNode r = "1 + foo".parseL3Formula();
      ASTNode c;
      assertTrue( r.getType() == libsbml.AST_PLUS );
      assertTrue( r.getCharacter() == '+' );
      assertTrue( r.getNumChildren() == 2 );
      c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 1 );
      assertTrue( c.getNumChildren() == 0 );
      c = r.getRightChild();
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "foo" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_6()
    {
      ASTNode r = "1 + 2".parseL3Formula();
      ASTNode c;
      assertTrue( r.getType() == libsbml.AST_PLUS );
      assertTrue( r.getCharacter() == '+' );
      assertTrue( r.getNumChildren() == 2 );
      c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 1 );
      assertTrue( c.getNumChildren() == 0 );
      c = r.getRightChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 2 );
      assertTrue( c.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_7()
    {
      ASTNode r = "1 + 2 * 3".parseL3Formula();
      ASTNode c;
      assertTrue( r.getType() == libsbml.AST_PLUS );
      assertTrue( r.getCharacter() == '+' );
      assertTrue( r.getNumChildren() == 2 );
      c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 1 );
      assertTrue( c.getNumChildren() == 0 );
      c = r.getRightChild();
      assertTrue( c.getType() == libsbml.AST_TIMES );
      assertTrue( c.getCharacter() == '*' );
      assertTrue( c.getNumChildren() == 2 );
      c = c.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 2 );
      assertTrue( c.getNumChildren() == 0 );
      c = r.getRightChild().getRightChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 3 );
      assertTrue( c.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_8()
    {
      ASTNode r = "(1 - 2) * 3".parseL3Formula();
      ASTNode c;
      assertTrue( r.getType() == libsbml.AST_TIMES );
      assertTrue( r.getCharacter() == '*' );
      assertTrue( r.getNumChildren() == 2 );
      c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_MINUS );
      assertTrue( c.getCharacter() == '-' );
      assertTrue( c.getNumChildren() == 2 );
      c = r.getRightChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 3 );
      assertTrue( c.getNumChildren() == 0 );
      c = r.getLeftChild().getLeftChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 1 );
      assertTrue( c.getNumChildren() == 0 );
      c = r.getLeftChild().getRightChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 2 );
      assertTrue( c.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_9()
    {
      ASTNode r = "1 + -2 / 3".parseL3Formula();
      ASTNode c;
      assertTrue( r.getType() == libsbml.AST_PLUS );
      assertTrue( r.getCharacter() == '+' );
      assertTrue( r.getNumChildren() == 2 );
      c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 1 );
      assertTrue( c.getNumChildren() == 0 );
      c = r.getRightChild();
      assertTrue( c.getType() == libsbml.AST_DIVIDE );
      assertTrue( c.getCharacter() == '/' );
      assertTrue( c.getNumChildren() == 2 );
      c = c.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_MINUS );
      assertTrue( c.getCharacter() == '-' );
      assertTrue( c.getNumChildren() == 1 );
      c = c.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 2 );
      assertTrue( c.getNumChildren() == 0 );
      c = r.getRightChild().getRightChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 3 );
      assertTrue( c.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_arguments()
    {
      string error;
      ASTNode r = "sin(x,y)".parseL3Formula();
      assertTrue( r == null );
      error = .getLastParseL3Error();
      assertTrue((  "Error when parsing input 'sin(x,y)' at position 8:  The function 'sin' takes exactly one argument, but 2 were found." == error ));
      r = "delay(x)".parseL3Formula();
      assertTrue( r == null );
      error = .getLastParseL3Error();
      assertTrue((  "Error when parsing input 'delay(x)' at position 8:  The function 'delay' takes exactly two arguments, but 1 were found." == error ));
      r = "piecewise()".parseL3Formula();
      assertTrue( r == null );
      error = .getLastParseL3Error();
      assertTrue((  "Error when parsing input 'piecewise()' at position 11:  The function 'piecewise' takes at least one argument, but none were found." == error ));
      r = "gt(x)".parseL3Formula();
      assertTrue( r == null );
      error = .getLastParseL3Error();
      assertTrue((  "Error when parsing input 'gt(x)' at position 5:  The function 'gt' takes at least two arguments, but 1 were found." == error ));
      r = "minus()".parseL3Formula();
      assertTrue( r == null );
      error = .getLastParseL3Error();
      assertTrue((  "Error when parsing input 'minus()' at position 7:  The function 'minus' takes exactly one or two arguments, but 0 were found." == error ));
      r = "root(x, y, z)".parseL3Formula();
      assertTrue( r == null );
      error = .getLastParseL3Error();
      assertTrue((  "Error when parsing input 'root(x, y, z)' at position 13:  The function 'root' takes exactly one or two arguments, but 3 were found." == error ));
      r = "power()".parseL3Formula();
      assertTrue( r == null );
      error = .getLastParseL3Error();
      assertTrue((  "Error when parsing input 'power()' at position 7:  The function 'power' takes exactly two arguments, but 0 were found." == error ));
      r = "rateOf()".parseL3Formula();
      assertTrue( r == null );
      error = .getLastParseL3Error();
      assertTrue((  "Error when parsing input 'rateOf()' at position 8:  The function 'rateOf' takes exactly one argument, but 0 were found." == error ));
      r = "rateOf(a, b)".parseL3Formula();
      assertTrue( r == null );
      error = .getLastParseL3Error();
      assertTrue((  "Error when parsing input 'rateOf(a, b)' at position 12:  The function 'rateOf' takes exactly one argument, but 2 were found." == error ));
      r = "rateOf(1.3)".parseL3Formula();
      assertTrue( r == null );
      error = .getLastParseL3Error();
      assertTrue((  "Error when parsing input 'rateOf(1.3)' at position 11:  The function 'rateOf' takes exactly one argument, which must be the identifier of an element in the model." == error ));
      r = "rateOf(a+b)".parseL3Formula();
      assertTrue( r == null );
      error = .getLastParseL3Error();
      assertTrue((  "Error when parsing input 'rateOf(a+b)' at position 11:  The function 'rateOf' takes exactly one argument, which must be the identifier of an element in the model." == error ));
      r = "quotient(1,2,3)".parseL3Formula();
      assertTrue( r == null );
      error = .getLastParseL3Error();
      assertTrue((  "Error when parsing input 'quotient(1,2,3)' at position 15:  The function 'quotient' takes exactly two arguments, but 3 were found." == error ));
      r = "rem()".parseL3Formula();
      assertTrue( r == null );
      error = .getLastParseL3Error();
      assertTrue((  "Error when parsing input 'rem()' at position 5:  The function 'rem' takes exactly two arguments, but 0 were found." == error ));
      r = "implies(a)".parseL3Formula();
      assertTrue( r == null );
      error = .getLastParseL3Error();
      assertTrue((  "Error when parsing input 'implies(a)' at position 10:  The function 'implies' takes exactly two arguments, but 1 were found." == error ));
    }

    public void test_SBML_parseL3Formula_avogadrosettings()
    {
      ASTNode r = "avogadro".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_NAME_AVOGADRO );
      assertTrue( r.getNumChildren() == 0 );
      r = null;
      L3ParserSettings settings;
      settings.setParseAvogadroCsymbol(L3P_AVOGADRO_IS_NAME);
      r = "avogadro".parseL3FormulaWithSettings(settings);
      assertTrue( r.getType() == libsbml.AST_NAME );
      assertTrue((  "avogadro" == r.getName() ));
      assertTrue( r.getNumChildren() == 0 );
      r = null;
      settings.setParseAvogadroCsymbol(L3P_AVOGADRO_IS_CSYMBOL);
      r = "avogadro".parseL3FormulaWithSettings(settings);
      assertTrue( r.getType() == libsbml.AST_NAME_AVOGADRO );
      assertTrue( r.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_capssettings1()
    {
      ASTNode r = "SqRt(3)".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_FUNCTION_ROOT );
      assertTrue( r.getNumChildren() == 2 );
      ASTNode c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 2 );
      assertTrue( c.getNumChildren() == 0 );
      c = r.getRightChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 3 );
      assertTrue( c.getNumChildren() == 0 );
      r = null;
      L3ParserSettings settings;
      settings.setComparisonCaseSensitivity(L3P_COMPARE_BUILTINS_CASE_SENSITIVE);
      r = "SqRt(3)".parseL3FormulaWithSettings(settings);
      assertTrue( r.getType() == libsbml.AST_FUNCTION );
      assertTrue((  "SqRt" == r.getName() ));
      assertTrue( r.getNumChildren() == 1 );
      c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 3 );
      assertTrue( c.getNumChildren() == 0 );
      r = null;
      settings.setComparisonCaseSensitivity(L3P_COMPARE_BUILTINS_CASE_INSENSITIVE);
      r = "SqRt(3)".parseL3FormulaWithSettings(settings);
      assertTrue( r.getType() == libsbml.AST_FUNCTION_ROOT );
      assertTrue( r.getNumChildren() == 2 );
      c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 2 );
      assertTrue( c.getNumChildren() == 0 );
      c = r.getRightChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 3 );
      assertTrue( c.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_capssettings2()
    {
      ASTNode r = "PI".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_CONSTANT_PI );
      assertTrue( r.getNumChildren() == 0 );
      r = null;
      L3ParserSettings settings;
      settings.setComparisonCaseSensitivity(L3P_COMPARE_BUILTINS_CASE_SENSITIVE);
      r = "PI".parseL3FormulaWithSettings(settings);
      assertTrue( r.getType() == libsbml.AST_NAME );
      assertTrue((  "PI" == r.getName() ));
      assertTrue( r.getNumChildren() == 0 );
      r = null;
      settings.setComparisonCaseSensitivity(L3P_COMPARE_BUILTINS_CASE_INSENSITIVE);
      r = "PI".parseL3FormulaWithSettings(settings);
      assertTrue( r.getType() == libsbml.AST_CONSTANT_PI );
      assertTrue( r.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_capssettings3()
    {
      ASTNode r = "ArcSinH(3)".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_FUNCTION_ARCSINH );
      assertTrue( r.getNumChildren() == 1 );
      ASTNode c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 3 );
      assertTrue( c.getNumChildren() == 0 );
      r = null;
      L3ParserSettings settings;
      settings.setComparisonCaseSensitivity(L3P_COMPARE_BUILTINS_CASE_SENSITIVE);
      r = "ArcSinH(3)".parseL3FormulaWithSettings(settings);
      assertTrue( r.getType() == libsbml.AST_FUNCTION );
      assertTrue((  "ArcSinH" == r.getName() ));
      assertTrue( r.getNumChildren() == 1 );
      c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 3 );
      assertTrue( c.getNumChildren() == 0 );
      r = null;
      settings.setComparisonCaseSensitivity(L3P_COMPARE_BUILTINS_CASE_INSENSITIVE);
      r = "ArcSinH(3)".parseL3FormulaWithSettings(settings);
      assertTrue( r.getType() == libsbml.AST_FUNCTION_ARCSINH );
      assertTrue( r.getNumChildren() == 1 );
      c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 3 );
      assertTrue( c.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_collapseminussettings1()
    {
      ASTNode r = "--4.4".parseL3Formula();
      ASTNode c;
      assertTrue( r.getType() == libsbml.AST_MINUS );
      assertTrue( r.getNumChildren() == 1 );
      c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_MINUS );
      assertTrue( c.getNumChildren() == 1 );
      c = c.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_REAL );
      assertTrue( c.getReal() == 4.4 );
      assertTrue( c.getNumChildren() == 0 );
      r = null;
      L3ParserSettings settings;
      settings.setParseCollapseMinus(L3P_COLLAPSE_UNARY_MINUS);
      r = "--4.4".parseL3FormulaWithSettings(settings);
      assertTrue( r.getType() == libsbml.AST_REAL );
      assertTrue( r.getReal() == 4.4 );
      assertTrue( r.getNumChildren() == 0 );
      r = null;
      settings.setParseCollapseMinus(L3P_EXPAND_UNARY_MINUS);
      r = "--4.4".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_MINUS );
      assertTrue( r.getNumChildren() == 1 );
      c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_MINUS );
      assertTrue( c.getNumChildren() == 1 );
      c = c.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_REAL );
      assertTrue( c.getReal() == 4.4 );
      assertTrue( c.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_collapseminussettings2()
    {
      ASTNode r = "--x".parseL3Formula();
      ASTNode c;
      assertTrue( r.getType() == libsbml.AST_MINUS );
      assertTrue( r.getNumChildren() == 1 );
      c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_MINUS );
      assertTrue( c.getNumChildren() == 1 );
      c = c.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "x" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      r = null;
      L3ParserSettings settings;
      settings.setParseCollapseMinus(L3P_COLLAPSE_UNARY_MINUS);
      r = "--x".parseL3FormulaWithSettings(settings);
      assertTrue( r.getType() == libsbml.AST_NAME );
      assertTrue((  "x" == r.getName() ));
      assertTrue( r.getNumChildren() == 0 );
      r = null;
      settings.setParseCollapseMinus(L3P_EXPAND_UNARY_MINUS);
      r = "--x".parseL3FormulaWithSettings(settings);
      assertTrue( r.getType() == libsbml.AST_MINUS );
      assertTrue( r.getNumChildren() == 1 );
      c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_MINUS );
      assertTrue( c.getNumChildren() == 1 );
      c = c.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "x" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_collapseminussettings3()
    {
      ASTNode r = "x---4.4".parseL3Formula();
      ASTNode c;
      assertTrue( r.getType() == libsbml.AST_MINUS );
      assertTrue( r.getNumChildren() == 2 );
      c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "x" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      c = r.getRightChild();
      assertTrue( c.getType() == libsbml.AST_MINUS );
      assertTrue( c.getNumChildren() == 1 );
      c = c.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_MINUS );
      assertTrue( c.getNumChildren() == 1 );
      c = c.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_REAL );
      assertTrue( c.getReal() == 4.4 );
      assertTrue( c.getNumChildren() == 0 );
      r = null;
      L3ParserSettings settings;
      settings.setParseCollapseMinus(L3P_COLLAPSE_UNARY_MINUS);
      r = "x---4.4".parseL3FormulaWithSettings(settings);
      assertTrue( r.getType() == libsbml.AST_MINUS );
      assertTrue( r.getNumChildren() == 2 );
      c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "x" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      c = r.getRightChild();
      assertTrue( c.getType() == libsbml.AST_REAL );
      assertTrue( c.getReal() == 4.4 );
      assertTrue( c.getNumChildren() == 0 );
      r = null;
      settings.setParseCollapseMinus(L3P_EXPAND_UNARY_MINUS);
      r = "x---4.4".parseL3FormulaWithSettings(settings);
      assertTrue( r.getType() == libsbml.AST_MINUS );
      assertTrue( r.getNumChildren() == 2 );
      c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "x" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      c = r.getRightChild();
      assertTrue( c.getType() == libsbml.AST_MINUS );
      assertTrue( c.getNumChildren() == 1 );
      c = c.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_MINUS );
      assertTrue( c.getNumChildren() == 1 );
      c = c.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_REAL );
      assertTrue( c.getReal() == 4.4 );
      assertTrue( c.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_collapseminussettings4()
    {
      ASTNode r = "x---y".parseL3Formula();
      ASTNode c;
      assertTrue( r.getType() == libsbml.AST_MINUS );
      assertTrue( r.getNumChildren() == 2 );
      c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "x" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      c = r.getRightChild();
      assertTrue( c.getType() == libsbml.AST_MINUS );
      assertTrue( c.getNumChildren() == 1 );
      c = c.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_MINUS );
      assertTrue( c.getNumChildren() == 1 );
      c = c.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "y" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      r = null;
      L3ParserSettings settings;
      settings.setParseCollapseMinus(L3P_COLLAPSE_UNARY_MINUS);
      r = "x---y".parseL3FormulaWithSettings(settings);
      assertTrue( r.getType() == libsbml.AST_MINUS );
      assertTrue( r.getNumChildren() == 2 );
      c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "x" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      c = r.getRightChild();
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "y" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      r = null;
      settings.setParseCollapseMinus(L3P_EXPAND_UNARY_MINUS);
      r = "x---y".parseL3FormulaWithSettings(settings);
      assertTrue( r.getType() == libsbml.AST_MINUS );
      assertTrue( r.getNumChildren() == 2 );
      c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "x" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      c = r.getRightChild();
      assertTrue( c.getType() == libsbml.AST_MINUS );
      assertTrue( c.getNumChildren() == 1 );
      c = c.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_MINUS );
      assertTrue( c.getNumChildren() == 1 );
      c = c.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "y" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_collapseminussettings5()
    {
      L3ParserSettings settings;
      settings.setParseCollapseMinus(L3P_COLLAPSE_UNARY_MINUS);
      ASTNode r = "---4".parseL3FormulaWithSettings(settings);
      assertTrue( r.getType() == libsbml.AST_INTEGER );
      assertTrue( r.getInteger() == -4 );
      assertTrue( r.getNumChildren() == 0 );
      r = null;
      r = "---(3/8)".parseL3FormulaWithSettings(settings);
      assertTrue( r.getType() == libsbml.AST_RATIONAL );
      assertTrue( r.getNumerator() == -3 );
      assertTrue( r.getDenominator() == 8 );
      assertTrue( r.getNumChildren() == 0 );
      r = null;
      r = "---(-3/8)".parseL3FormulaWithSettings(settings);
      assertTrue( r.getType() == libsbml.AST_RATIONAL );
      assertTrue( r.getNumerator() == 3 );
      assertTrue( r.getDenominator() == 8 );
      assertTrue( r.getNumChildren() == 0 );
      r = null;
      r = "---4.4".parseL3FormulaWithSettings(settings);
      assertTrue( r.getType() == libsbml.AST_REAL );
      assertTrue( r.getReal() == -4.4 );
      assertTrue( r.getNumChildren() == 0 );
      r = null;
      r = "---4e-3".parseL3FormulaWithSettings(settings);
      assertTrue( r.getType() == libsbml.AST_REAL_E );
      assertTrue( r.getMantissa() == -4 );
      assertTrue( r.getExponent() == -3 );
      assertTrue( r.getNumChildren() == 0 );
      r = null;
      r = "---.4".parseL3FormulaWithSettings(settings);
      assertTrue( r.getType() == libsbml.AST_REAL );
      assertTrue( r.getReal() == -.4 );
      assertTrue( r.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_combinedRelational_allEQ()
    {
      ASTNode r = "x == y == z".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_RELATIONAL_EQ );
      assertTrue( r.getNumChildren() == 3 );
      ASTNode c = r.getChild(0);
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "x" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      c = r.getChild(1);
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "y" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      c = r.getChild(2);
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "z" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_combinedRelational_allGEQ()
    {
      ASTNode r = "x >= y >= z".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_RELATIONAL_GEQ );
      assertTrue( r.getNumChildren() == 3 );
      ASTNode c = r.getChild(0);
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "x" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      c = r.getChild(1);
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "y" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      c = r.getChild(2);
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "z" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_combinedRelational_allGT()
    {
      ASTNode r = "x > y > z".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_RELATIONAL_GT );
      assertTrue( r.getNumChildren() == 3 );
      ASTNode c = r.getChild(0);
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "x" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      c = r.getChild(1);
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "y" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      c = r.getChild(2);
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "z" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_combinedRelational_allLEQ()
    {
      ASTNode r = "x <= y <= z".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_RELATIONAL_LEQ );
      assertTrue( r.getNumChildren() == 3 );
      ASTNode c = r.getChild(0);
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "x" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      c = r.getChild(1);
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "y" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      c = r.getChild(2);
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "z" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_combinedRelational_allLT()
    {
      ASTNode r = "x < y < z".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_RELATIONAL_LT );
      assertTrue( r.getNumChildren() == 3 );
      ASTNode c = r.getChild(0);
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "x" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      c = r.getChild(1);
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "y" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      c = r.getChild(2);
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "z" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_combinedRelational_allLT_many()
    {
      ASTNode r = "x < y < z < p < d < q".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_RELATIONAL_LT );
      assertTrue( r.getNumChildren() == 6 );
      ASTNode c = r.getChild(0);
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "x" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      c = r.getChild(1);
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "y" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      c = r.getChild(2);
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "z" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      c = r.getChild(3);
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "p" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      c = r.getChild(4);
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "d" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      c = r.getChild(5);
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "q" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_combinedRelational_allNEQ()
    {
      ASTNode r = "x != y != z".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_LOGICAL_AND );
      assertTrue( r.getNumChildren() == 2 );
      ASTNode c = r.getChild(0);
      assertTrue( c.getType() == libsbml.AST_RELATIONAL_NEQ );
      ASTNode c2 = c.getChild(0);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "x" == c2.getName() ));
      assertTrue( c2.getNumChildren() == 0 );
      c2 = c.getChild(1);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "y" == c2.getName() ));
      assertTrue( c2.getNumChildren() == 0 );
      c = r.getChild(1);
      assertTrue( c.getType() == libsbml.AST_RELATIONAL_NEQ );
      c2 = c.getChild(0);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "y" == c2.getName() ));
      assertTrue( c2.getNumChildren() == 0 );
      c2 = c.getChild(1);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "z" == c2.getName() ));
      assertTrue( c2.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_combinedRelational_mixed1()
    {
      ASTNode r = "x < y <= z".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_LOGICAL_AND );
      assertTrue( r.getNumChildren() == 2 );
      ASTNode c = r.getChild(0);
      assertTrue( c.getType() == libsbml.AST_RELATIONAL_LT );
      ASTNode c2 = c.getChild(0);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "x" == c2.getName() ));
      assertTrue( c2.getNumChildren() == 0 );
      c2 = c.getChild(1);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "y" == c2.getName() ));
      assertTrue( c2.getNumChildren() == 0 );
      c = r.getChild(1);
      assertTrue( c.getType() == libsbml.AST_RELATIONAL_LEQ );
      c2 = c.getChild(0);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "y" == c2.getName() ));
      assertTrue( c2.getNumChildren() == 0 );
      c2 = c.getChild(1);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "z" == c2.getName() ));
      assertTrue( c2.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_combinedRelational_mixed2()
    {
      ASTNode r = "x > y < z".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_LOGICAL_AND );
      assertTrue( r.getNumChildren() == 2 );
      ASTNode c = r.getChild(0);
      assertTrue( c.getType() == libsbml.AST_RELATIONAL_GT );
      ASTNode c2 = c.getChild(0);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "x" == c2.getName() ));
      assertTrue( c2.getNumChildren() == 0 );
      c2 = c.getChild(1);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "y" == c2.getName() ));
      assertTrue( c2.getNumChildren() == 0 );
      c = r.getChild(1);
      assertTrue( c.getType() == libsbml.AST_RELATIONAL_LT );
      c2 = c.getChild(0);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "y" == c2.getName() ));
      assertTrue( c2.getNumChildren() == 0 );
      c2 = c.getChild(1);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "z" == c2.getName() ));
      assertTrue( c2.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_combinedRelational_mixed_many1()
    {
      ASTNode r = "x < y <= z <= p".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_LOGICAL_AND );
      assertTrue( r.getNumChildren() == 2 );
      ASTNode c = r.getChild(0);
      assertTrue( c.getType() == libsbml.AST_RELATIONAL_LT );
      assertTrue( c.getNumChildren() == 2 );
      ASTNode c2 = c.getChild(0);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "x" == c2.getName() ));
      assertTrue( c2.getNumChildren() == 0 );
      c2 = c.getChild(1);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "y" == c2.getName() ));
      assertTrue( c2.getNumChildren() == 0 );
      c = r.getChild(1);
      assertTrue( c.getType() == libsbml.AST_RELATIONAL_LEQ );
      assertTrue( c.getNumChildren() == 3 );
      c2 = c.getChild(0);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "y" == c2.getName() ));
      assertTrue( c2.getNumChildren() == 0 );
      c2 = c.getChild(1);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "z" == c2.getName() ));
      assertTrue( c2.getNumChildren() == 0 );
      c2 = c.getChild(2);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "p" == c2.getName() ));
      assertTrue( c2.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_combinedRelational_mixed_many2()
    {
      ASTNode r = "x < y < z <= p".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_LOGICAL_AND );
      assertTrue( r.getNumChildren() == 2 );
      ASTNode c = r.getChild(0);
      assertTrue( c.getType() == libsbml.AST_RELATIONAL_LT );
      assertTrue( c.getNumChildren() == 3 );
      ASTNode c2 = c.getChild(0);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "x" == c2.getName() ));
      assertTrue( c2.getNumChildren() == 0 );
      c2 = c.getChild(1);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "y" == c2.getName() ));
      assertTrue( c2.getNumChildren() == 0 );
      c2 = c.getChild(2);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "z" == c2.getName() ));
      assertTrue( c2.getNumChildren() == 0 );
      c = r.getChild(1);
      assertTrue( c.getType() == libsbml.AST_RELATIONAL_LEQ );
      assertTrue( c.getNumChildren() == 2 );
      c2 = c.getChild(0);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "z" == c2.getName() ));
      assertTrue( c2.getNumChildren() == 0 );
      c2 = c.getChild(1);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "p" == c2.getName() ));
      assertTrue( c2.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_combinedRelational_mixed_many3()
    {
      ASTNode r = "x < y < z <= p <= d".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_LOGICAL_AND );
      assertTrue( r.getNumChildren() == 2 );
      ASTNode c = r.getChild(0);
      assertTrue( c.getType() == libsbml.AST_RELATIONAL_LT );
      assertTrue( c.getNumChildren() == 3 );
      ASTNode c2 = c.getChild(0);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "x" == c2.getName() ));
      assertTrue( c2.getNumChildren() == 0 );
      c2 = c.getChild(1);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "y" == c2.getName() ));
      assertTrue( c2.getNumChildren() == 0 );
      c2 = c.getChild(2);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "z" == c2.getName() ));
      assertTrue( c2.getNumChildren() == 0 );
      c = r.getChild(1);
      assertTrue( c.getType() == libsbml.AST_RELATIONAL_LEQ );
      assertTrue( c.getNumChildren() == 3 );
      c2 = c.getChild(0);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "z" == c2.getName() ));
      assertTrue( c2.getNumChildren() == 0 );
      c2 = c.getChild(1);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "p" == c2.getName() ));
      assertTrue( c2.getNumChildren() == 0 );
      c2 = c.getChild(2);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "d" == c2.getName() ));
      assertTrue( c2.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_combinedRelational_mixed_many4()
    {
      ASTNode r = "x < y <= z <= p == q".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_LOGICAL_AND );
      assertTrue( r.getNumChildren() == 3 );
      ASTNode c = r.getChild(0);
      assertTrue( c.getType() == libsbml.AST_RELATIONAL_LT );
      assertTrue( c.getNumChildren() == 2 );
      ASTNode c2 = c.getChild(0);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "x" == c2.getName() ));
      assertTrue( c2.getNumChildren() == 0 );
      c2 = c.getChild(1);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "y" == c2.getName() ));
      assertTrue( c2.getNumChildren() == 0 );
      c = r.getChild(1);
      assertTrue( c.getType() == libsbml.AST_RELATIONAL_LEQ );
      assertTrue( c.getNumChildren() == 3 );
      c2 = c.getChild(0);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "y" == c2.getName() ));
      assertTrue( c2.getNumChildren() == 0 );
      c2 = c.getChild(1);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "z" == c2.getName() ));
      assertTrue( c2.getNumChildren() == 0 );
      c2 = c.getChild(2);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "p" == c2.getName() ));
      assertTrue( c2.getNumChildren() == 0 );
      c = r.getChild(2);
      assertTrue( c.getType() == libsbml.AST_RELATIONAL_EQ );
      assertTrue( c.getNumChildren() == 2 );
      c2 = c.getChild(0);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "p" == c2.getName() ));
      assertTrue( c2.getNumChildren() == 0 );
      c2 = c.getChild(1);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "q" == c2.getName() ));
      assertTrue( c2.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_combinedRelational_mixed_many5()
    {
      ASTNode r = "x < y <= z == p >= q > r != s".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_LOGICAL_AND );
      assertTrue( r.getNumChildren() == 6 );
      ASTNode c = r.getChild(0);
      assertTrue( c.getType() == libsbml.AST_RELATIONAL_LT );
      assertTrue( c.getNumChildren() == 2 );
      ASTNode c2 = c.getChild(0);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "x" == c2.getName() ));
      assertTrue( c2.getNumChildren() == 0 );
      c2 = c.getChild(1);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "y" == c2.getName() ));
      assertTrue( c2.getNumChildren() == 0 );
      c = r.getChild(1);
      assertTrue( c.getType() == libsbml.AST_RELATIONAL_LEQ );
      assertTrue( c.getNumChildren() == 2 );
      c2 = c.getChild(0);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "y" == c2.getName() ));
      assertTrue( c2.getNumChildren() == 0 );
      c2 = c.getChild(1);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "z" == c2.getName() ));
      assertTrue( c2.getNumChildren() == 0 );
      c = r.getChild(2);
      assertTrue( c.getType() == libsbml.AST_RELATIONAL_EQ );
      assertTrue( c.getNumChildren() == 2 );
      c2 = c.getChild(0);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "z" == c2.getName() ));
      assertTrue( c2.getNumChildren() == 0 );
      c2 = c.getChild(1);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "p" == c2.getName() ));
      assertTrue( c2.getNumChildren() == 0 );
      c = r.getChild(3);
      assertTrue( c.getType() == libsbml.AST_RELATIONAL_GEQ );
      assertTrue( c.getNumChildren() == 2 );
      c2 = c.getChild(0);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "p" == c2.getName() ));
      assertTrue( c2.getNumChildren() == 0 );
      c2 = c.getChild(1);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "q" == c2.getName() ));
      assertTrue( c2.getNumChildren() == 0 );
      c = r.getChild(4);
      assertTrue( c.getType() == libsbml.AST_RELATIONAL_GT );
      assertTrue( c.getNumChildren() == 2 );
      c2 = c.getChild(0);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "q" == c2.getName() ));
      assertTrue( c2.getNumChildren() == 0 );
      c2 = c.getChild(1);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "r" == c2.getName() ));
      assertTrue( c2.getNumChildren() == 0 );
      c = r.getChild(5);
      assertTrue( c.getType() == libsbml.AST_RELATIONAL_NEQ );
      assertTrue( c.getNumChildren() == 2 );
      c2 = c.getChild(0);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "r" == c2.getName() ));
      assertTrue( c2.getNumChildren() == 0 );
      c2 = c.getChild(1);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "s" == c2.getName() ));
      assertTrue( c2.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_constants1()
    {
      ASTNode r = "true".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_CONSTANT_TRUE );
      assertTrue( r.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_constants10()
    {
      ASTNode r = "notanumber".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_REAL );
      assertTrue( util_isNaN == 1 );
      assertTrue( r.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_constants11()
    {
      ASTNode r = "nan".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_REAL );
      assertTrue( util_isNaN == 1 );
      assertTrue( r.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_constants12()
    {
      ASTNode r = "NaN".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_REAL );
      assertTrue( util_isNaN == 1 );
      assertTrue( r.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_constants2()
    {
      ASTNode r = "false".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_CONSTANT_FALSE );
      assertTrue( r.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_constants3()
    {
      ASTNode r = "pi".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_CONSTANT_PI );
      assertTrue( r.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_constants4()
    {
      ASTNode r = "exponentiale".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_CONSTANT_E );
      assertTrue( r.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_constants5()
    {
      ASTNode r = "avogadro".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_NAME_AVOGADRO );
      assertTrue( r.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_constants6()
    {
      ASTNode r = "time".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_NAME_TIME );
      assertTrue( r.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_constants7()
    {
      ASTNode r = "inf".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_REAL );
      assertTrue( util_isInf(r.getReal()) == true );
      assertTrue( r.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_constants8()
    {
      ASTNode r = "infinity".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_REAL );
      assertTrue( util_isInf(r.getReal()) == true );
      assertTrue( r.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_constants9()
    {
      ASTNode r = "INF".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_REAL );
      assertTrue( util_isInf(r.getReal()) == true );
      assertTrue( r.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_crazylong()
    {
      ASTNode r = "(1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890)".parseL3Formula();
      if (r == null);
      {
        string error = .getLastParseL3Error();
        assertTrue((  "Error when parsing input '(1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890)' at position 312:  syntax error, unexpected end of string" == error ));
      }
      else {
      assertTrue( r.getType() == libsbml.AST_REAL );
      assertTrue( util_isInf(r.getReal()) == true );
      assertTrue( r.getNumChildren() == 0 );
      r = null;
    }
  }

    public void test_SBML_parseL3Formula_crazylongerg()
    {
      ASTNode r = "(1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890erg)".parseL3Formula();
      if (r == null);
      {
        string error = .getLastParseL3Error();
        assertTrue((  "Error when parsing input '(1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890erg)' at position 311:  syntax error, unexpected end of string" == error ));
      }
      else {
      assertTrue( r.getType() == libsbml.AST_REAL );
      assertTrue( util_isInf(r.getReal()) == true );
      assertTrue( r.getNumChildren() == 0 );
      string units = r.getUnits();
      assertTrue((  "erg" == units ));
      r = null;
    }
  }

    public void test_SBML_parseL3Formula_e1()
    {
      ASTNode r = "2.001e+5".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_REAL_E );
      assertTrue( r.getMantissa() == 2.001 );
      assertTrue( r.getExponent() == 5 );
      assertTrue( r.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_e2()
    {
      ASTNode r = ".001e+5".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_REAL_E );
      assertTrue( r.getMantissa() == .001 );
      assertTrue( r.getExponent() == 5 );
      assertTrue( r.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_e3()
    {
      ASTNode r = ".001e-5".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_REAL_E );
      assertTrue( r.getMantissa() == .001 );
      assertTrue( r.getExponent() == -5 );
      assertTrue( r.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_e4()
    {
      ASTNode r = "2.e-005".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_REAL_E );
      assertTrue( r.getMantissa() == 2 );
      assertTrue( r.getExponent() == -5 );
      assertTrue( r.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_e5()
    {
      ASTNode r = ".e+5".parseL3Formula();
      string error;
      assertTrue( r == null );
      error = .getLastParseL3Error();
      assertTrue((  "Error when parsing input '.e+5' at position 1:  syntax error, unexpected $undefined" == error ));
      r = null;
    }

    public void test_SBML_parseL3Formula_easunit()
    {
      ASTNode r = "1.01e".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_REAL );
      assertTrue( r.getReal() == 1.01 );
      assertTrue( r.getNumChildren() == 0 );
      string units = r.getUnits();
      assertTrue((  "e" == units ));
      r = null;
    }

    public void test_SBML_parseL3Formula_easunitint()
    {
      ASTNode r = "101e".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_INTEGER );
      assertTrue( r.getInteger() == 101 );
      assertTrue( r.getNumChildren() == 0 );
      string units = r.getUnits();
      assertTrue((  "e" == units ));
      r = null;
    }

    public void test_SBML_parseL3Formula_easunitparen()
    {
      ASTNode r = "(1.01e)".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_REAL );
      assertTrue( r.getReal() == 1.01 );
      assertTrue( r.getNumChildren() == 0 );
      string units = r.getUnits();
      assertTrue((  "e" == units ));
      r = null;
    }

    public void test_SBML_parseL3Formula_ergunit()
    {
      ASTNode r = "101erg".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_INTEGER );
      assertTrue( r.getInteger() == 101 );
      assertTrue( r.getNumChildren() == 0 );
      string units = r.getUnits();
      assertTrue((  "erg" == units ));
      r = null;
    }

    public void test_SBML_parseL3Formula_l3v2_functions()
    {
      ASTNode r = "rateOf(x)".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_FUNCTION_RATE_OF );
      assertTrue( r.getNumChildren() == 1 );
      r = null;
      r = "max(x,y,z)".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_FUNCTION_MAX );
      assertTrue( r.getNumChildren() == 3 );
      r = null;
      r = "min(x)".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_FUNCTION_MIN );
      assertTrue( r.getNumChildren() == 1 );
      r = null;
      r = "implies(x,y)".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_LOGICAL_IMPLIES );
      assertTrue( r.getNumChildren() == 2 );
      r = null;
      r = "rem(a,b)".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_FUNCTION_REM );
      assertTrue( r.getNumChildren() == 2 );
      r = null;
      r = "quotient(x,y)".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_FUNCTION_QUOTIENT );
      assertTrue( r.getNumChildren() == 2 );
      r = null;
    }

    public void test_SBML_parseL3Formula_l3v2_functions_generic()
    {
      L3ParserSettings l3ps;
      l3ps.setParseL3v2Functions(L3P_PARSE_L3V2_FUNCTIONS_AS_GENERIC);
      ASTNode r = "rateOf(x)".parseL3FormulaWithSettings(l3ps);
      assertTrue( r.getType() == libsbml.AST_FUNCTION );
      assertTrue( r.getNumChildren() == 1 );
      r = null;
      r = "max(x,y,z)".parseL3FormulaWithSettings(l3ps);
      assertTrue( r.getType() == libsbml.AST_FUNCTION );
      assertTrue( r.getNumChildren() == 3 );
      r = null;
      r = "min(x)".parseL3FormulaWithSettings(l3ps);
      assertTrue( r.getType() == libsbml.AST_FUNCTION );
      assertTrue( r.getNumChildren() == 1 );
      r = null;
      r = "implies(x,y)".parseL3FormulaWithSettings(l3ps);
      assertTrue( r.getType() == libsbml.AST_FUNCTION );
      assertTrue( r.getNumChildren() == 2 );
      r = null;
      r = "rem(a,b)".parseL3FormulaWithSettings(l3ps);
      assertTrue( r.getType() == libsbml.AST_FUNCTION );
      assertTrue( r.getNumChildren() == 2 );
      r = null;
      r = "quotient(x,y)".parseL3FormulaWithSettings(l3ps);
      assertTrue( r.getType() == libsbml.AST_FUNCTION );
      assertTrue( r.getNumChildren() == 2 );
      r = null;
    }

    public void test_SBML_parseL3Formula_l3v2functions()
    {
      ASTNode r = "max(x,y)".parseL3Formula();
      assertTrue( r != null );
      ASTNode c;
      assertTrue( r.getType() == libsbml.AST_FUNCTION_MAX );
      assertTrue( r.getNumChildren() == 2 );
      c = r.getChild(0);
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "x" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      c = r.getChild(1);
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "y" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_l3v2functions2()
    {
      L3ParserSettings l3ps;
      l3ps.setParseL3v2Functions(L3P_PARSE_L3V2_FUNCTIONS_AS_GENERIC);
      ASTNode r = "max(x,y)".parseL3FormulaWithSettings(l3ps);
      ASTNode c;
      assertTrue( r != null );
      assertTrue( r.getType() == libsbml.AST_FUNCTION );
      assertTrue((  "max" == r.getName() ));
      assertTrue( r.getNumChildren() == 2 );
      c = r.getChild(0);
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "x" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      c = r.getChild(1);
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "y" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_l3v2functions3()
    {
      L3ParserSettings l3ps;
      l3ps.setParseL3v2Functions(L3P_PARSE_L3V2_FUNCTIONS_DIRECTLY);
      ASTNode r = "max(x,y)".parseL3FormulaWithSettings(l3ps);
      assertTrue( r != null );
      ASTNode c;
      assertTrue( r.getType() == libsbml.AST_FUNCTION_MAX );
      assertTrue( r.getNumChildren() == 2 );
      c = r.getChild(0);
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "x" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      c = r.getChild(1);
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "y" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_lambda1()
    {
      ASTNode r = "lambda(3.3)".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_LAMBDA );
      assertTrue( r.getNumChildren() == 1 );
      ASTNode c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_REAL );
      assertTrue( c.getReal() == 3.3 );
      assertTrue( c.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_lambda2()
    {
      ASTNode r = "lambda(x,x^3)".parseL3Formula();
      ASTNode c;
      assertTrue( r.getType() == libsbml.AST_LAMBDA );
      assertTrue( r.getNumChildren() == 2 );
      c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "x" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      c = r.getRightChild();
      assertTrue( c.getType() == libsbml.AST_POWER );
      assertTrue( c.getNumChildren() == 2 );
      c = c.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "x" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      c = r.getRightChild().getRightChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 3 );
      assertTrue( c.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_lambda3()
    {
      ASTNode r = "lambda(x, y, x+y)".parseL3Formula();
      ASTNode c;
      assertTrue( r.getType() == libsbml.AST_LAMBDA );
      assertTrue( r.getNumChildren() == 3 );
      c = r.getChild(0);
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "x" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      c = r.getChild(1);
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "y" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      c = r.getChild(2);
      assertTrue( c.getType() == libsbml.AST_PLUS );
      assertTrue( c.getNumChildren() == 2 );
      c = c.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "x" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      c = r.getChild(2).getRightChild();
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "y" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_lambda4()
    {
      ASTNode r = "lambda(x,NaN)".parseL3Formula();
      ASTNode c;
      assertTrue( r.getType() == libsbml.AST_LAMBDA );
      assertTrue( r.getNumChildren() == 2 );
      c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "x" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      c = r.getRightChild();
      assertTrue( c.getType() == libsbml.AST_REAL );
      assertTrue( util_isNaN == 1 );
      assertTrue( c.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_lambdaerr()
    {
      ASTNode r = "lambda()".parseL3Formula();
      assertTrue( r == null );
      string error = .getLastParseL3Error();
      assertTrue((  "Error when parsing input 'lambda()' at position 8:  The function 'lambda' takes at least one argument, but none were found." == error ));
    }

    public void test_SBML_parseL3Formula_logic1()
    {
      ASTNode r = "1 && 2 == 3".parseL3Formula();
      ASTNode c;
      assertTrue( r.getType() == libsbml.AST_LOGICAL_AND );
      assertTrue((  "and" == r.getName() ));
      assertTrue( r.getNumChildren() == 2 );
      c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 1 );
      assertTrue( c.getNumChildren() == 0 );
      c = r.getRightChild();
      assertTrue( c.getType() == libsbml.AST_RELATIONAL_EQ );
      assertTrue((  "eq" == c.getName() ));
      assertTrue( c.getNumChildren() == 2 );
      c = c.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 2 );
      assertTrue( c.getNumChildren() == 0 );
      c = r.getRightChild().getRightChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 3 );
      assertTrue( c.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_logic2()
    {
      ASTNode r = "(1 && 2) == 3".parseL3Formula();
      ASTNode c;
      assertTrue( r.getType() == libsbml.AST_RELATIONAL_EQ );
      assertTrue((  "eq" == r.getName() ));
      assertTrue( r.getNumChildren() == 2 );
      c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_LOGICAL_AND );
      assertTrue((  "and" == c.getName() ));
      assertTrue( c.getNumChildren() == 2 );
      c = r.getRightChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 3 );
      assertTrue( c.getNumChildren() == 0 );
      c = r.getLeftChild().getLeftChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 1 );
      assertTrue( c.getNumChildren() == 0 );
      c = r.getLeftChild().getRightChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 2 );
      assertTrue( c.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_longdecimal()
    {
      ASTNode r = "0.00166112956810631".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_REAL );
      assertTrue( r.getReal() == 0.00166112956810631 );
      assertTrue( r.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_longdecimalerg()
    {
      ASTNode r = "0.00166112956810631erg".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_REAL );
      assertTrue( r.getReal() == 0.00166112956810631 );
      assertTrue( r.getNumChildren() == 0 );
      string units = r.getUnits();
      assertTrue((  "erg" == units ));
      r = null;
    }

    public void test_SBML_parseL3Formula_longint()
    {
      ASTNode r = "166112956810631".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_REAL );
      assertTrue( r.getReal() == 166112956810631.0 );
      assertTrue( r.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_longinterg()
    {
      ASTNode r = "166112956810631erg".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_REAL );
      assertTrue( r.getReal() == 166112956810631.0 );
      assertTrue( r.getNumChildren() == 0 );
      string units = r.getUnits();
      assertTrue((  "erg" == units ));
      r = null;
    }

    public void test_SBML_parseL3Formula_longnumberparen()
    {
      ASTNode r = "(0.00166112956810631)".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_REAL );
      assertTrue( r.getReal() == 0.00166112956810631 );
      assertTrue( r.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_longnumberparenerg()
    {
      ASTNode r = "(0.00166112956810631erg)".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_REAL );
      assertTrue( r.getReal() == 0.00166112956810631 );
      assertTrue( r.getNumChildren() == 0 );
      string units = r.getUnits();
      assertTrue((  "erg" == units ));
      r = null;
    }

    public void test_SBML_parseL3Formula_modelPresent1()
    {
      Model model = new  Model(3,1);
      Parameter p = model.createParameter();
      p.setId( "infinity");
      ASTNode r = "infinity".parseL3FormulaWithModel(model);
      assertTrue( r.getType() == libsbml.AST_NAME );
      assertTrue((  "infinity" == r.getName() ));
      assertTrue( r.getNumChildren() == 0 );
      r = null;
      model = null;
    }

    public void test_SBML_parseL3Formula_modelPresent2()
    {
      Model model = new  Model(3,1);
      Species p = model.createSpecies();
      p.setId( "true");
      ASTNode r = "true".parseL3FormulaWithModel(model);
      assertTrue( r.getType() == libsbml.AST_NAME );
      assertTrue((  "true" == r.getName() ));
      assertTrue( r.getNumChildren() == 0 );
      r = null;
      model = null;
    }

    public void test_SBML_parseL3Formula_modelPresent3()
    {
      Model model = new  Model(3,1);
      Compartment p = model.createCompartment();
      p.setId( "NaN");
      ASTNode r = "NaN".parseL3FormulaWithModel(model);
      assertTrue( r.getType() == libsbml.AST_NAME );
      assertTrue((  "NaN" == r.getName() ));
      assertTrue( r.getNumChildren() == 0 );
      r = null;
      model = null;
    }

    public void test_SBML_parseL3Formula_modelPresent4()
    {
      Model model = new  Model(3,1);
      Reaction p = model.createReaction();
      p.setId( "pi");
      ASTNode r = "pi".parseL3FormulaWithModel(model);
      assertTrue( r.getType() == libsbml.AST_NAME );
      assertTrue((  "pi" == r.getName() ));
      assertTrue( r.getNumChildren() == 0 );
      r = null;
      model = null;
    }

    public void test_SBML_parseL3Formula_modelPresent5()
    {
      Model model = new  Model(3,1);
      Reaction p = model.createReaction();
      SpeciesReference sr = p.createProduct();
      sr.setId( "avogadro");
      ASTNode r = "avogadro".parseL3FormulaWithModel(model);
      assertTrue( r.getType() == libsbml.AST_NAME );
      assertTrue((  "avogadro" == r.getName() ));
      assertTrue( r.getNumChildren() == 0 );
      r = null;
      model = null;
    }

    public void test_SBML_parseL3Formula_modelPresent6()
    {
      Model model = new  Model(3,1);
      Reaction p = model.createReaction();
      SpeciesReference sr = p.createProduct();
      sr.setId( "AVOGADRO");
      ASTNode r = "avogadro".parseL3FormulaWithModel(model);
      assertTrue( r.getType() == libsbml.AST_NAME_AVOGADRO );
      assertTrue((  "avogadro" == r.getName() ));
      assertTrue( r.getNumChildren() == 0 );
      r = null;
      model = null;
    }

    public void test_SBML_parseL3Formula_modelPresent7()
    {
      Model model = new  Model(3,1);
      FunctionDefinition p = model.createFunctionDefinition();
      p.setId( "sin");
      ASTNode r = "sin(x, y)".parseL3FormulaWithModel(model);
      assertTrue( r.getType() == libsbml.AST_FUNCTION );
      assertTrue((  "sin" == r.getName() ));
      assertTrue( r.getNumChildren() == 2 );
      r = null;
      model = null;
    }

    public void test_SBML_parseL3Formula_modulo()
    {
      ASTNode r = "x % y".parseL3Formula();
      assertTrue( r != null );
      string s = libsbml.formulaToString(r);
      assertTrue((  "piecewise(x - y * ceil(x / y), xor(lt(x, 0), lt(y, 0)), x - y * floor(x / y))" == s ));
      r = null;
    }

    public void test_SBML_parseL3Formula_modulo2()
    {
      L3ParserSettings l3ps;
      l3ps.setParseModuloL3v2(L3P_MODULO_IS_REM);
      ASTNode r = "x % y".parseL3FormulaWithSettings(l3ps);
      assertTrue( r != null );
      string s = libsbml.formulaToString(r);
      assertTrue((  "rem(x, y)" == s ));
      r = null;
    }

    public void test_SBML_parseL3Formula_modulo3()
    {
      L3ParserSettings l3ps;
      l3ps.setParseModuloL3v2(L3P_MODULO_IS_PIECEWISE);
      ASTNode r = "x % y".parseL3FormulaWithSettings(l3ps);
      assertTrue( r != null );
      string s = libsbml.formulaToString(r);
      assertTrue((  "piecewise(x - y * ceil(x / y), xor(lt(x, 0), lt(y, 0)), x - y * floor(x / y))" == s ));
      r = null;
    }

    public void test_SBML_parseL3Formula_named_lambda_arguments1()
    {
      ASTNode r = "lambda(time, time+2)".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_LAMBDA );
      assertTrue( r.getNumChildren() == 2 );
      ASTNode c = r.getChild(0);
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "time" == c.getName() ));
      assertTrue( c.getDefinitionURLString() ==  "" );
      c = r.getChild(1);
      assertTrue( c.getType() == libsbml.AST_PLUS );
      ASTNode c2 = c.getChild(0);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "time" == c2.getName() ));
      assertTrue( c2.getDefinitionURLString() ==  "" );
      c2 = c.getChild(1);
      assertTrue( c2.getType() == libsbml.AST_INTEGER );
      assertTrue( c2.getValue() == 2 );
      r = null;
    }

    public void test_SBML_parseL3Formula_named_lambda_arguments2()
    {
      ASTNode r = "lambda(time, avogadro, time+avogadro)".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_LAMBDA );
      assertTrue( r.getNumChildren() == 3 );
      ASTNode c = r.getChild(0);
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "time" == c.getName() ));
      assertTrue( c.getDefinitionURLString() ==  "" );
      c = r.getChild(1);
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "avogadro" == c.getName() ));
      assertTrue( c.getDefinitionURLString() ==  "" );
      c = r.getChild(2);
      assertTrue( c.getType() == libsbml.AST_PLUS );
      ASTNode c2 = c.getChild(0);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "time" == c2.getName() ));
      assertTrue( c2.getDefinitionURLString() ==  "" );
      c2 = c.getChild(1);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "avogadro" == c2.getName() ));
      assertTrue( c2.getDefinitionURLString() ==  "" );
      r = null;
    }

    public void test_SBML_parseL3Formula_named_lambda_arguments3()
    {
      ASTNode r = "lambda(true, false, true+false)".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_LAMBDA );
      assertTrue( r.getNumChildren() == 3 );
      ASTNode c = r.getChild(0);
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "true" == c.getName() ));
      assertTrue( c.getDefinitionURLString() ==  "" );
      c = r.getChild(1);
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "false" == c.getName() ));
      assertTrue( c.getDefinitionURLString() ==  "" );
      c = r.getChild(2);
      assertTrue( c.getType() == libsbml.AST_PLUS );
      ASTNode c2 = c.getChild(0);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "true" == c2.getName() ));
      assertTrue( c2.getDefinitionURLString() ==  "" );
      c2 = c.getChild(1);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "false" == c2.getName() ));
      assertTrue( c2.getDefinitionURLString() ==  "" );
      r = null;
    }

    public void test_SBML_parseL3Formula_named_lambda_arguments4()
    {
      ASTNode r = "lambda(pi, exponentiale, pi+exponentiale)".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_LAMBDA );
      assertTrue( r.getNumChildren() == 3 );
      ASTNode c = r.getChild(0);
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "pi" == c.getName() ));
      assertTrue( c.getDefinitionURLString() ==  "" );
      c = r.getChild(1);
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "exponentiale" == c.getName() ));
      assertTrue( c.getDefinitionURLString() ==  "" );
      c = r.getChild(2);
      assertTrue( c.getType() == libsbml.AST_PLUS );
      ASTNode c2 = c.getChild(0);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "pi" == c2.getName() ));
      assertTrue( c2.getDefinitionURLString() ==  "" );
      c2 = c.getChild(1);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "exponentiale" == c2.getName() ));
      assertTrue( c2.getDefinitionURLString() ==  "" );
      r = null;
    }

    public void test_SBML_parseL3Formula_named_lambda_arguments5()
    {
      ASTNode r = "lambda(time, avogadro, true, false, pi, exponentiale, time+avogadro+true+false+pi+exponentiale)".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_LAMBDA );
      assertTrue( r.getNumChildren() == 7 );
      ASTNode c = r.getChild(0);
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "time" == c.getName() ));
      assertTrue( c.getDefinitionURLString() ==  "" );
      c = r.getChild(1);
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "avogadro" == c.getName() ));
      assertTrue( c.getDefinitionURLString() ==  "" );
      c = r.getChild(2);
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "true" == c.getName() ));
      assertTrue( c.getDefinitionURLString() ==  "" );
      c = r.getChild(3);
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "false" == c.getName() ));
      assertTrue( c.getDefinitionURLString() ==  "" );
      c = r.getChild(4);
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "pi" == c.getName() ));
      assertTrue( c.getDefinitionURLString() ==  "" );
      c = r.getChild(5);
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "exponentiale" == c.getName() ));
      assertTrue( c.getDefinitionURLString() ==  "" );
      c = r.getChild(6);
      assertTrue( c.getType() == libsbml.AST_PLUS );
      assertTrue( c.getNumChildren() == 6 );
      ASTNode c2 = c.getChild(0);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "time" == c2.getName() ));
      assertTrue( c2.getDefinitionURLString() ==  "" );
      c2 = c.getChild(1);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "avogadro" == c2.getName() ));
      assertTrue( c2.getDefinitionURLString() ==  "" );
      c2 = c.getChild(2);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "true" == c2.getName() ));
      assertTrue( c2.getDefinitionURLString() ==  "" );
      c2 = c.getChild(3);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "false" == c2.getName() ));
      assertTrue( c2.getDefinitionURLString() ==  "" );
      c2 = c.getChild(4);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "pi" == c2.getName() ));
      assertTrue( c2.getDefinitionURLString() ==  "" );
      c2 = c.getChild(5);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "exponentiale" == c2.getName() ));
      assertTrue( c2.getDefinitionURLString() ==  "" );
      r = null;
    }

    public void test_SBML_parseL3Formula_named_lambda_arguments6()
    {
      ASTNode r = "lambda(time, time+pi)".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_LAMBDA );
      assertTrue( r.getNumChildren() == 2 );
      ASTNode c = r.getChild(0);
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "time" == c.getName() ));
      assertTrue( c.getDefinitionURLString() ==  "" );
      c = r.getChild(1);
      assertTrue( c.getType() == libsbml.AST_PLUS );
      ASTNode c2 = c.getChild(0);
      assertTrue( c2.getType() == libsbml.AST_NAME );
      assertTrue((  "time" == c2.getName() ));
      assertTrue( c2.getDefinitionURLString() ==  "" );
      c2 = c.getChild(1);
      assertTrue( c2.getType() == libsbml.AST_CONSTANT_PI );
      r = null;
    }

    public void test_SBML_parseL3Formula_named_lambda_arguments7()
    {
      ASTNode r = "lambda(time+avogadro+true+false+pi+exponentiale)".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_LAMBDA );
      assertTrue( r.getNumChildren() == 1 );
      ASTNode c = r.getChild(0);
      assertTrue( c.getType() == libsbml.AST_PLUS );
      assertTrue( c.getNumChildren() == 6 );
      ASTNode c2 = c.getChild(0);
      assertTrue( c2.getType() == libsbml.AST_NAME_TIME );
      c2 = c.getChild(1);
      assertTrue( c2.getType() == libsbml.AST_NAME_AVOGADRO );
      c2 = c.getChild(2);
      assertTrue( c2.getType() == libsbml.AST_CONSTANT_TRUE );
      c2 = c.getChild(3);
      assertTrue( c2.getType() == libsbml.AST_CONSTANT_FALSE );
      c2 = c.getChild(4);
      assertTrue( c2.getType() == libsbml.AST_CONSTANT_PI );
      c2 = c.getChild(5);
      assertTrue( c2.getType() == libsbml.AST_CONSTANT_E );
      r = null;
    }

    public void test_SBML_parseL3Formula_negInf()
    {
      ASTNode r = "-inf".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_MINUS );
      assertTrue( r.getCharacter() == '-' );
      assertTrue( r.getNumChildren() == 1 );
      ASTNode c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_REAL );
      assertTrue( util_isInf(c.getReal()) == true );
      assertTrue( c.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_negZero()
    {
      ASTNode r = "-0.0".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_MINUS );
      assertTrue( r.getCharacter() == '-' );
      assertTrue( r.getNumChildren() == 1 );
      ASTNode c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_REAL );
      assertTrue( util_isNegZero == 0 );
      assertTrue( c.getReal() == 0 );
      assertTrue( c.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_oddMathML1()
    {
      ASTNode r = "sqrt(3)".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_FUNCTION_ROOT );
      assertTrue( r.getNumChildren() == 2 );
      ASTNode c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 2 );
      assertTrue( c.getNumChildren() == 0 );
      c = r.getRightChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 3 );
      assertTrue( c.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_oddMathML2()
    {
      ASTNode r = "sqr(3)".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_FUNCTION_POWER );
      assertTrue( r.getNumChildren() == 2 );
      ASTNode c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 3 );
      assertTrue( c.getNumChildren() == 0 );
      c = r.getRightChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 2 );
      assertTrue( c.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_oddMathML3()
    {
      ASTNode r = "log10(3)".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_FUNCTION_LOG );
      assertTrue( r.getNumChildren() == 2 );
      ASTNode c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 10 );
      assertTrue( c.getNumChildren() == 0 );
      c = r.getRightChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 3 );
      assertTrue( c.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_oddMathML4()
    {
      ASTNode r = "log(4.4, 3)".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_FUNCTION_LOG );
      assertTrue( r.getNumChildren() == 2 );
      ASTNode c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_REAL );
      assertTrue( c.getReal() == 4.4 );
      assertTrue( c.getNumChildren() == 0 );
      c = r.getRightChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 3 );
      assertTrue( c.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_oddMathML5()
    {
      ASTNode r = "root(1.1, 3)".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_FUNCTION_ROOT );
      assertTrue( r.getNumChildren() == 2 );
      ASTNode c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_REAL );
      assertTrue( c.getReal() == 1.1 );
      assertTrue( c.getNumChildren() == 0 );
      c = r.getRightChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 3 );
      assertTrue( c.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_parselogsettings()
    {
      ASTNode r = "log(4.4)".parseL3Formula();
      ASTNode c;
      string error;
      assertTrue( r.getType() == libsbml.AST_FUNCTION_LOG );
      assertTrue( r.getNumChildren() == 2 );
      c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 10 );
      assertTrue( c.getNumChildren() == 0 );
      c = r.getRightChild();
      assertTrue( c.getType() == libsbml.AST_REAL );
      assertTrue( c.getReal() == 4.4 );
      assertTrue( c.getNumChildren() == 0 );
      r = null;
      L3ParserSettings settings;
      settings.setParseLog(L3P_PARSE_LOG_AS_LN);
      r = "log(4.4)".parseL3FormulaWithSettings(settings);
      assertTrue( r.getType() == libsbml.AST_FUNCTION_LN );
      assertTrue( r.getNumChildren() == 1 );
      c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_REAL );
      assertTrue( c.getReal() == 4.4 );
      assertTrue( c.getNumChildren() == 0 );
      r = null;
      settings.setParseLog(L3P_PARSE_LOG_AS_LOG10);
      r = "log(4.4)".parseL3FormulaWithSettings(settings);
      assertTrue( r.getType() == libsbml.AST_FUNCTION_LOG );
      assertTrue( r.getNumChildren() == 2 );
      c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 10 );
      assertTrue( c.getNumChildren() == 0 );
      c = r.getRightChild();
      assertTrue( c.getType() == libsbml.AST_REAL );
      assertTrue( c.getReal() == 4.4 );
      assertTrue( c.getNumChildren() == 0 );
      r = null;
      settings.setParseLog(L3P_PARSE_LOG_AS_ERROR);
      r = "log(4.4)".parseL3FormulaWithSettings(settings);
      error = .getLastParseL3Error();
      assertTrue( r == null );
      assertTrue((  "Error when parsing input 'log(4.4)' at position 8:  Writing a function as 'log(x)' was legal in the L1 parser, but translated as the natural log, not the base-10 log.  This construct is disallowed entirely as being ambiguous, and you are encouraged instead to use 'ln(x)', 'log10(x)', or 'log(base, x)'." == error ));
    }

    public void test_SBML_parseL3Formula_power()
    {
      ASTNode r = "pow(1.1, 3)".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_POWER );
      assertTrue( r.getNumChildren() == 2 );
      ASTNode c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_REAL );
      assertTrue( c.getReal() == 1.1 );
      assertTrue( c.getNumChildren() == 0 );
      c = r.getRightChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 3 );
      assertTrue( c.getNumChildren() == 0 );
      r = null;
      r = "Power(1.1, 3)".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_POWER );
      assertTrue( r.getNumChildren() == 2 );
      c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_REAL );
      assertTrue( c.getReal() == 1.1 );
      assertTrue( c.getNumChildren() == 0 );
      c = r.getRightChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 3 );
      assertTrue( c.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_precedence()
    {
      ASTNode root = "a && b == !(c - d * e^-f) ".parseL3Formula();
      ASTNode left;
      ASTNode right;
      assertTrue( root.getType() == libsbml.AST_LOGICAL_AND );
      assertTrue((  "and" == root.getName() ));
      assertTrue( root.getNumChildren() == 2 );
      left = root.getLeftChild();
      assertTrue( left.getType() == libsbml.AST_NAME );
      assertTrue((  "a" == left.getName() ));
      assertTrue( left.getNumChildren() == 0 );
      right = root.getRightChild();
      assertTrue( right.getType() == libsbml.AST_RELATIONAL_EQ );
      assertTrue((  "eq" == right.getName() ));
      assertTrue( right.getNumChildren() == 2 );
      left = right.getLeftChild();
      assertTrue( left.getType() == libsbml.AST_NAME );
      assertTrue((  "b" == left.getName() ));
      assertTrue( left.getNumChildren() == 0 );
      right = right.getRightChild();
      assertTrue( right.getType() == libsbml.AST_LOGICAL_NOT );
      assertTrue((  "not" == right.getName() ));
      assertTrue( right.getNumChildren() == 1 );
      right = right.getLeftChild();
      assertTrue( right.getType() == libsbml.AST_MINUS );
      assertTrue( right.getCharacter() == '-' );
      assertTrue( right.getNumChildren() == 2 );
      left = right.getLeftChild();
      assertTrue( left.getType() == libsbml.AST_NAME );
      assertTrue((  "c" == left.getName() ));
      assertTrue( left.getNumChildren() == 0 );
      right = right.getRightChild();
      assertTrue( right.getType() == libsbml.AST_TIMES );
      assertTrue( right.getCharacter() == '*' );
      assertTrue( right.getNumChildren() == 2 );
      left = right.getLeftChild();
      assertTrue( left.getType() == libsbml.AST_NAME );
      assertTrue((  "d" == left.getName() ));
      assertTrue( left.getNumChildren() == 0 );
      right = right.getRightChild();
      assertTrue( right.getType() == libsbml.AST_POWER );
      assertTrue( right.getCharacter() == '^' );
      assertTrue( right.getNumChildren() == 2 );
      left = right.getLeftChild();
      assertTrue( left.getType() == libsbml.AST_NAME );
      assertTrue((  "e" == left.getName() ));
      assertTrue( left.getNumChildren() == 0 );
      right = right.getRightChild();
      assertTrue( right.getType() == libsbml.AST_MINUS );
      assertTrue( right.getCharacter() == '-' );
      assertTrue( right.getNumChildren() == 1 );
      left = right.getLeftChild();
      assertTrue( left.getType() == libsbml.AST_NAME );
      assertTrue((  "f" == left.getName() ));
      assertTrue( left.getNumChildren() == 0 );
      root = null;
    }

    public void test_SBML_parseL3Formula_precedence1()
    {
      ASTNode r = "-2^4".parseL3Formula();
      ASTNode c;
      assertTrue( r.getType() == libsbml.AST_MINUS );
      assertTrue( r.getCharacter() == '-' );
      assertTrue( r.getNumChildren() == 1 );
      c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_POWER );
      assertTrue( c.getCharacter() == '^' );
      assertTrue( c.getNumChildren() == 2 );
      c = c.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 2 );
      assertTrue( c.getNumChildren() == 0 );
      c = r.getLeftChild().getRightChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 4 );
      assertTrue( c.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_precedence2()
    {
      ASTNode r = "!a+b".parseL3Formula();
      ASTNode c;
      assertTrue( r.getType() == libsbml.AST_PLUS );
      assertTrue( r.getCharacter() == '+' );
      assertTrue( r.getNumChildren() == 2 );
      c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_LOGICAL_NOT );
      assertTrue( c.getNumChildren() == 1 );
      c = c.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "a" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      c = r.getRightChild();
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "b" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_rational1()
    {
      ASTNode r = "(3/4)".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_RATIONAL );
      assertTrue( r.getNumerator() == 3 );
      assertTrue( r.getDenominator() == 4 );
      assertTrue( r.getReal() == 0.75 );
      assertTrue( r.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_rational2()
    {
      ASTNode r = "(3/4) mL".parseL3Formula();
      string units = r.getUnits();
      assertTrue( r.getType() == libsbml.AST_RATIONAL );
      assertTrue( r.getNumerator() == 3 );
      assertTrue( r.getDenominator() == 4 );
      assertTrue( r.getReal() == 0.75 );
      assertTrue((  "mL" == units ));
      assertTrue( r.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_rational3()
    {
      ASTNode r = "3/4".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_DIVIDE );
      assertTrue( r.getCharacter() == '/' );
      assertTrue( r.getNumChildren() == 2 );
      ASTNode c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 3 );
      assertTrue( c.getNumChildren() == 0 );
      c = r.getRightChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 4 );
      assertTrue( c.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_rational4()
    {
      ASTNode r = "(3/x)".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_DIVIDE );
      assertTrue( r.getCharacter() == '/' );
      assertTrue( r.getNumChildren() == 2 );
      ASTNode c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 3 );
      assertTrue( c.getNumChildren() == 0 );
      c = r.getRightChild();
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "x" == c.getName() ));
      assertTrue( c.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_rational5()
    {
      ASTNode r = "(3/4.4)".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_DIVIDE );
      assertTrue( r.getCharacter() == '/' );
      assertTrue( r.getNumChildren() == 2 );
      ASTNode c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 3 );
      assertTrue( c.getNumChildren() == 0 );
      c = r.getRightChild();
      assertTrue( c.getType() == libsbml.AST_REAL );
      assertTrue( c.getReal() == 4.4 );
      assertTrue( c.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_rational6()
    {
      ASTNode r = "3/4 ml".parseL3Formula();
      string units;
      assertTrue( r.getType() == libsbml.AST_DIVIDE );
      assertTrue( r.getCharacter() == '/' );
      assertTrue( r.getNumChildren() == 2 );
      ASTNode c = r.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 3 );
      assertTrue( c.getNumChildren() == 0 );
      c = r.getRightChild();
      units = c.getUnits();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 4 );
      assertTrue((  "ml" == units ));
      assertTrue( c.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_rational7()
    {
      ASTNode r = "(3/4.4) ml".parseL3Formula();
      string error;
      assertTrue( r == null );
      error = .getLastParseL3Error();
      assertTrue((  "Error when parsing input '(3/4.4) ml' at position 10:  syntax error, unexpected element name" == error ));
    }

    public void test_SBML_parseL3Formula_sqrterr()
    {
      ASTNode r = "sqrt(x,y)".parseL3Formula();
      assertTrue( r == null );
      string error = .getLastParseL3Error();
      assertTrue((  "Error when parsing input 'sqrt(x,y)' at position 9:  The function 'sqrt' takes exactly one argument." == error ));
    }

    public void test_SBML_parseL3Formula_unaryPlus()
    {
      ASTNode r = "+++4".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_INTEGER );
      assertTrue( r.getInteger() == 4 );
      assertTrue( r.getNumChildren() == 0 );
      r = null;
      r = "+++(3/8)".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_RATIONAL );
      assertTrue( r.getNumerator() == 3 );
      assertTrue( r.getDenominator() == 8 );
      assertTrue( r.getNumChildren() == 0 );
      r = null;
      r = "+++(+(3/8))".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_RATIONAL );
      assertTrue( r.getNumerator() == 3 );
      assertTrue( r.getDenominator() == 8 );
      assertTrue( r.getNumChildren() == 0 );
      r = null;
      r = "+++4.4".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_REAL );
      assertTrue( r.getReal() == 4.4 );
      assertTrue( r.getNumChildren() == 0 );
      r = null;
      r = "+++4e-3".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_REAL_E );
      assertTrue( r.getMantissa() == 4 );
      assertTrue( r.getExponent() == -3 );
      assertTrue( r.getNumChildren() == 0 );
      r = null;
      r = "+++.4".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_REAL );
      assertTrue( r.getReal() == .4 );
      assertTrue( r.getNumChildren() == 0 );
      r = null;
      r = "3+++4".parseL3Formula();
      assertTrue( r.getType() == libsbml.AST_PLUS );
      ASTNode c = r.getChild(0);
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 3 );
      assertTrue( c.getNumChildren() == 0 );
      c = r.getChild(1);
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 4 );
      assertTrue( c.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_unitssettings()
    {
      ASTNode r = "4 mL".parseL3Formula();
      string error;
      string units;
      assertTrue( r.getType() == libsbml.AST_INTEGER );
      assertTrue( r.getInteger() == 4 );
      units = r.getUnits();
      assertTrue((  "mL" == units ));
      assertTrue( r.getNumChildren() == 0 );
      r = null;
      L3ParserSettings settings;
      settings.setParseUnits(L3P_NO_UNITS);
      r = "4 mL".parseL3FormulaWithSettings(settings);
      error = .getLastParseL3Error();
      assertTrue( r == null );
      assertTrue((  "Error when parsing input '4 mL' at position 4:  The ability to associate units with numbers has been disabled." == error ));
      settings.setParseUnits(L3P_PARSE_UNITS);
      r = "4 mL".parseL3FormulaWithSettings(settings);
      assertTrue( r.getType() == libsbml.AST_INTEGER );
      assertTrue( r.getInteger() == 4 );
      units = r.getUnits();
      assertTrue((  "mL" == units ));
      assertTrue( r.getNumChildren() == 0 );
      r = null;
    }

    public void test_SBML_parseL3Formula_wrongnum()
    {
      ASTNode r = "1.2.4".parseL3Formula();
      assertTrue( r == null );
      string error = .getLastParseL3Error();
      assertTrue((  "Error when parsing input '1.2.4' at position 5:  syntax error, unexpected number" == error ));
    }

    public void test_SBML_parseL3Formula_wrongnum2()
    {
      ASTNode r = "1.2.".parseL3Formula();
      assertTrue( r == null );
      string error = .getLastParseL3Error();
      assertTrue((  "Error when parsing input '1.2.' at position 4:  syntax error, unexpected $undefined" == error ));
    }

  }
}
