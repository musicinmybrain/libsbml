///  @file    TestL3FormulaFormatter.cs
///  @brief   FormulaFormatter unit tests
///  @author  Frank Bergmann (Csharp conversion)
///  @author  Akiya Jouraku (Csharp conversion)
///  @author  Lucian Smith, from Ben Bornstein 
///  
///  ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
/// 
///  DO NOT EDIT THIS FILE.
/// 
///  This file was generated automatically by converting the file located at
///  src/sbml/test/TestL3FormulaFormatter.c
///  using the conversion program dev/utilities/translateTests/translateTests.pl.
///  Any changes made here will be lost the next time the file is regenerated.
/// 
///  -----------------------------------------------------------------------------
///  This file is part of libSBML.  Please visit http://sbml.org for more
///  information about SBML, and the latest version of libSBML.
/// 
///  Copyright 2005-2010 California Institute of Technology.
///  Copyright 2002-2005 California Institute of Technology and
///                      Japan Science and Technology Corporation.
///  
///  This library is free software; you can redistribute it and/or modify it
///  under the terms of the GNU Lesser General Public License as published by
///  the Free Software Foundation.  A copy of the license agreement is provided
///  in the file named "LICENSE.txt" included with this software distribution
///  and also available online as http://sbml.org/software/libsbml/license.html
///  -----------------------------------------------------------------------------


namespace LibSBMLCSTest.math {

  using libsbmlcs;

  using System;

  using System.IO;

  public class TestL3FormulaFormatter {
    public class AssertionError : System.Exception 
    {
      public AssertionError() : base()
      {
        
      }
    }


    static void assertTrue(bool condition)
    {
      if (condition == true)
      {
        return;
      }
      throw new AssertionError();
    }

    static void assertEquals(object a, object b)
    {
      if ( (a == null) && (b == null) )
      {
        return;
      }
      else if ( (a == null) || (b == null) )
      {
        throw new AssertionError();
      }
      else if (a.Equals(b))
      {
        return;
      }
  
      throw new AssertionError();
    }

    static void assertNotEquals(object a, object b)
    {
      if ( (a == null) && (b == null) )
      {
        throw new AssertionError();
      }
      else if ( (a == null) || (b == null) )
      {
        return;
      }
      else if (a.Equals(b))
      {
        throw new AssertionError();
      }
    }

    static void assertEquals(bool a, bool b)
    {
      if ( a == b )
      {
        return;
      }
      throw new AssertionError();
    }

    static void assertNotEquals(bool a, bool b)
    {
      if ( a != b )
      {
        return;
      }
      throw new AssertionError();
    }

    static void assertEquals(int a, int b)
    {
      if ( a == b )
      {
        return;
      }
      throw new AssertionError();
    }

    static void assertNotEquals(int a, int b)
    {
      if ( a != b )
      {
        return;
      }
      throw new AssertionError();
    }


    public void test_L3FormulaFormatter_accessWithNULL()
    {
      null.format(null,null);
      null.formatFunction(null,null);
      null.formatOperator(null);
      null.visit(null,null,null);
      null.visitFunction(null,null,null);
      null.visitLog10(null,null,null);
      null.visitOther(null,null,null);
      null.visitSqrt(null,null,null);
      null.visitUMinus(null,null,null);
      assertTrue( null.isFunction(null) == 0 );
      assertTrue( null.isGrouped(null,null) == 0 );
      string s = null.formulaToL3String();
      assertTrue( s == null );
    }

    public void test_L3FormulaFormatter_collapseMinus()
    {
      string s;
      ASTNode n = new  ASTNode();
      ASTNode c = new  ASTNode();
      ASTNode c2 = new  ASTNode();
      ASTNode c3 = new  ASTNode();
      ASTNode c4 = new  ASTNode();
      L3ParserSettings l3ps = new  L3ParserSettings();
      n.setType(libsbml.AST_MINUS);
      c.setType(libsbml.AST_MINUS);
      n.addChild(c);
      c2.setType(libsbml.AST_MINUS);
      c.addChild(c2);
      c3.setType(libsbml.AST_MINUS);
      c2.addChild(c3);
      c4.setName( "x");
      c3.addChild(c4);
      s = n.formulaToL3StringWithSettings(l3ps);
      assertTrue((  "----x" == s ));
      l3ps.setParseCollapseMinus(0);
      s = n.formulaToL3StringWithSettings(l3ps);
      assertTrue((  "----x" == s ));
      l3ps.setParseCollapseMinus(1);
      s = n.formulaToL3StringWithSettings(l3ps);
      assertTrue((  "x" == s ));
      n = null;
      l3ps = null;
    }

    public void test_L3FormulaFormatter_isFunction()
    {
      ASTNode n = new  ASTNode();
      ASTNode c = new  ASTNode();
      n.setType(libsbml.AST_NAME);
      assertTrue( n.isFunction(null) == 0 );
      n.setType(libsbml.AST_CONSTANT_PI);
      assertTrue( n.isFunction(null) == 0 );
      n.setType(libsbml.AST_LAMBDA);
      assertTrue( n.isFunction(null) == 1 );
      n.setType(libsbml.AST_FUNCTION);
      assertTrue( n.isFunction(null) == 1 );
      n.setType(libsbml.AST_LOGICAL_AND);
      assertTrue( n.isFunction(null) == 1 );
      n.setType(libsbml.AST_RELATIONAL_EQ);
      assertTrue( n.isFunction(null) == 1 );
      n.setType(libsbml.AST_PLUS);
      assertTrue( n.isFunction(null) == 1 );
      n.addChild(c);
      n.setType(libsbml.AST_LOGICAL_AND);
      assertTrue( n.isFunction(null) == 1 );
      n.setType(libsbml.AST_RELATIONAL_EQ);
      assertTrue( n.isFunction(null) == 1 );
      n.setType(libsbml.AST_PLUS);
      assertTrue( n.isFunction(null) == 1 );
      c = new  ASTNode();
      n.addChild(c);
      n.setType(libsbml.AST_LOGICAL_AND);
      assertTrue( n.isFunction(null) == 0 );
      n.setType(libsbml.AST_RELATIONAL_EQ);
      assertTrue( n.isFunction(null) == 0 );
      n.setType(libsbml.AST_PLUS);
      assertTrue( n.isFunction(null) == 0 );
      n = null;
    }

    public void test_L3FormulaFormatter_isGrouped()
    {
      ASTNode p = new  ASTNode();
      ASTNode c;
      assertTrue( null.isGrouped(p,null) == 0 );
      p = null;
      p = "1 + 2 * 3".parseL3Formula();
      c = p.getLeftChild();
      assertTrue( p.isGrouped(c,null) == 0 );
      c = p.getRightChild();
      assertTrue( p.isGrouped(c,null) == 0 );
      p = null;
      p = "(1 + 2) * 3".parseL3Formula();
      c = p.getLeftChild();
      assertTrue( p.isGrouped(c,null) == 1 );
      c = p.getRightChild();
      assertTrue( p.isGrouped(c,null) == 0 );
      p = null;
      p = "1 + (2 * 3)".parseL3Formula();
      c = p.getLeftChild();
      assertTrue( p.isGrouped(c,null) == 0 );
      c = p.getRightChild();
      assertTrue( p.isGrouped(c,null) == 0 );
      p = null;
      p = "foo(1 + 2, 2 * 3)".parseL3Formula();
      c = p.getLeftChild();
      assertTrue( p.isGrouped(c,null) == 0 );
      c = p.getRightChild();
      assertTrue( p.isGrouped(c,null) == 0 );
      p = null;
      p = "(a / b) * c".parseL3Formula();
      c = p.getLeftChild();
      assertTrue( p.isGrouped(c,null) == 1 );
      c = p.getRightChild();
      assertTrue( p.isGrouped(c,null) == 0 );
      p = null;
      p = "a / (b * c)".parseL3Formula();
      c = p.getLeftChild();
      assertTrue( p.isGrouped(c,null) == 0 );
      c = p.getRightChild();
      assertTrue( p.isGrouped(c,null) == 1 );
      p = null;
      p = "a - (b - c)".parseL3Formula();
      c = p.getLeftChild();
      assertTrue( p.isGrouped(c,null) == 0 );
      c = p.getRightChild();
      assertTrue( p.isGrouped(c,null) == 1 );
      p = null;
      p = "a - b - c".parseL3Formula();
      c = p.getLeftChild();
      assertTrue( p.isGrouped(c,null) == 0 );
      c = p.getRightChild();
      assertTrue( p.isGrouped(c,null) == 0 );
      p = null;
      p = "a + (b + c)".parseL3Formula();
      c = p.getLeftChild();
      assertTrue( p.isGrouped(c,null) == 0 );
      c = p.getRightChild();
      assertTrue( p.isGrouped(c,null) == 1 );
      p = null;
      p = "a + b + c".parseL3Formula();
      c = p.getLeftChild();
      assertTrue( p.isGrouped(c,null) == 0 );
      c = p.getRightChild();
      assertTrue( p.isGrouped(c,null) == 0 );
      p = null;
      p = "a * (b * c)".parseL3Formula();
      c = p.getLeftChild();
      assertTrue( p.isGrouped(c,null) == 0 );
      c = p.getRightChild();
      assertTrue( p.isGrouped(c,null) == 1 );
      p = null;
      p = "a * b * c".parseL3Formula();
      c = p.getLeftChild();
      assertTrue( p.isGrouped(c,null) == 0 );
      c = p.getRightChild();
      assertTrue( p.isGrouped(c,null) == 0 );
      p = null;
      p = "a / (b / c)".parseL3Formula();
      c = p.getLeftChild();
      assertTrue( p.isGrouped(c,null) == 0 );
      c = p.getRightChild();
      assertTrue( p.isGrouped(c,null) == 1 );
      p = null;
      p = "a / b / c".parseL3Formula();
      c = p.getLeftChild();
      assertTrue( p.isGrouped(c,null) == 0 );
      c = p.getRightChild();
      assertTrue( p.isGrouped(c,null) == 0 );
      p = null;
    }

    public void test_L3FormulaFormatter_multiAnd()
    {
      string s;
      ASTNode n = new  ASTNode();
      ASTNode c = new  ASTNode();
      n.setType(libsbml.AST_LOGICAL_AND);
      s = n.formulaToL3String();
      assertTrue((  "and()" == s ));
      c.setName( "x");
      n.addChild(c);
      s = n.formulaToL3String();
      assertTrue((  "and(x)" == s ));
      c = new  ASTNode();
      c.setName( "y");
      n.addChild(c);
      s = n.formulaToL3String();
      assertTrue((  "x && y" == s ));
      c = new  ASTNode();
      c.setName( "z");
      n.addChild(c);
      s = n.formulaToL3String();
      assertTrue((  "x && y && z" == s ));
      n = null;
    }

    public void test_L3FormulaFormatter_multiDivide()
    {
      string s;
      ASTNode n = new  ASTNode();
      ASTNode c = new  ASTNode();
      n.setType(libsbml.AST_DIVIDE);
      s = n.formulaToL3String();
      assertTrue((  "divide()" == s ));
      c.setName( "x");
      n.addChild(c);
      s = n.formulaToL3String();
      assertTrue((  "divide(x)" == s ));
      c = new  ASTNode();
      c.setName( "y");
      n.addChild(c);
      s = n.formulaToL3String();
      assertTrue((  "x / y" == s ));
      c = new  ASTNode();
      c.setName( "z");
      n.addChild(c);
      s = n.formulaToL3String();
      assertTrue((  "divide(x, y, z)" == s ));
      n = null;
    }

    public void test_L3FormulaFormatter_multiEq()
    {
      string s;
      ASTNode n = new  ASTNode();
      ASTNode c = new  ASTNode();
      n.setType(libsbml.AST_RELATIONAL_EQ);
      s = n.formulaToL3String();
      assertTrue((  "eq()" == s ));
      c.setName( "x");
      n.addChild(c);
      s = n.formulaToL3String();
      assertTrue((  "eq(x)" == s ));
      c = new  ASTNode();
      c.setName( "y");
      n.addChild(c);
      s = n.formulaToL3String();
      assertTrue((  "x == y" == s ));
      c = new  ASTNode();
      c.setName( "z");
      n.addChild(c);
      s = n.formulaToL3String();
      assertTrue((  "x == y == z" == s ));
      n = null;
    }

    public void test_L3FormulaFormatter_multiGT()
    {
      string s;
      ASTNode n = new  ASTNode();
      ASTNode c = new  ASTNode();
      n.setType(libsbml.AST_RELATIONAL_GT);
      s = n.formulaToL3String();
      assertTrue((  "gt()" == s ));
      c.setName( "x");
      n.addChild(c);
      s = n.formulaToL3String();
      assertTrue((  "gt(x)" == s ));
      c = new  ASTNode();
      c.setName( "y");
      n.addChild(c);
      s = n.formulaToL3String();
      assertTrue((  "x > y" == s ));
      c = new  ASTNode();
      c.setName( "z");
      n.addChild(c);
      s = n.formulaToL3String();
      assertTrue((  "x > y > z" == s ));
      n = null;
    }

    public void test_L3FormulaFormatter_multiNEq()
    {
      string s;
      ASTNode n = new  ASTNode();
      ASTNode c = new  ASTNode();
      n.setType(libsbml.AST_RELATIONAL_NEQ);
      s = n.formulaToL3String();
      assertTrue((  "neq()" == s ));
      c.setName( "x");
      n.addChild(c);
      s = n.formulaToL3String();
      assertTrue((  "neq(x)" == s ));
      c = new  ASTNode();
      c.setName( "y");
      n.addChild(c);
      s = n.formulaToL3String();
      assertTrue((  "x != y" == s ));
      c = new  ASTNode();
      c.setName( "z");
      n.addChild(c);
      s = n.formulaToL3String();
      assertTrue((  "neq(x, y, z)" == s ));
      n = null;
    }

    public void test_L3FormulaFormatter_multiOr()
    {
      string s;
      ASTNode n = new  ASTNode();
      ASTNode c = new  ASTNode();
      n.setType(libsbml.AST_LOGICAL_OR);
      s = n.formulaToL3String();
      assertTrue((  "or()" == s ));
      c.setName( "x");
      n.addChild(c);
      s = n.formulaToL3String();
      assertTrue((  "or(x)" == s ));
      c = new  ASTNode();
      c.setName( "y");
      n.addChild(c);
      s = n.formulaToL3String();
      assertTrue((  "x || y" == s ));
      c = new  ASTNode();
      c.setName( "z");
      n.addChild(c);
      s = n.formulaToL3String();
      assertTrue((  "x || y || z" == s ));
      n = null;
    }

    public void test_L3FormulaFormatter_multiPlus()
    {
      string s;
      ASTNode n = new  ASTNode();
      ASTNode c = new  ASTNode();
      n.setType(libsbml.AST_PLUS);
      s = n.formulaToL3String();
      assertTrue((  "plus()" == s ));
      c.setName( "x");
      n.addChild(c);
      s = n.formulaToL3String();
      assertTrue((  "plus(x)" == s ));
      c = new  ASTNode();
      c.setName( "y");
      n.addChild(c);
      s = n.formulaToL3String();
      assertTrue((  "x + y" == s ));
      c = new  ASTNode();
      c.setName( "z");
      n.addChild(c);
      s = n.formulaToL3String();
      assertTrue((  "x + y + z" == s ));
      n = null;
    }

    public void test_L3FormulaFormatter_multiPlusTimes()
    {
      string s;
      ASTNode n = new  ASTNode();
      ASTNode c = new  ASTNode();
      n.setType(libsbml.AST_PLUS);
      c.setName( "x");
      n.addChild(c);
      c = new  ASTNode();
      c.setName( "y");
      n.addChild(c);
      c = new  ASTNode();
      c.setName( "z");
      n.addChild(c);
      s = n.formulaToL3String();
      assertTrue((  "x + y + z" == s ));
      n.setType(libsbml.AST_TIMES);
      s = n.formulaToL3String();
      assertTrue((  "x * y * z" == s ));
      n = null;
    }

    public void test_L3FormulaFormatter_parseUnits()
    {
      string s;
      ASTNode n = new  ASTNode();
      L3ParserSettings l3ps = new  L3ParserSettings();
      n.setValue(1.1);
      n.setUnits( "mL");
      s = n.formulaToL3StringWithSettings(l3ps);
      assertTrue((  "1.1 mL" == s ));
      l3ps.setParseUnits(0);
      s = n.formulaToL3StringWithSettings(l3ps);
      assertTrue((  "1.1" == s ));
      l3ps.setParseUnits(1);
      s = n.formulaToL3StringWithSettings(l3ps);
      assertTrue((  "1.1 mL" == s ));
      n = null;
      l3ps = null;
    }

    public void test_L3FormulaFormatter_semantics()
    {
      string s;
      ASTNode n = new  ASTNode();
      ASTNode c = new  ASTNode();
      n.setType(libsbml.AST_LOGICAL_OR);
      c.setName( "x");
      n.addChild(c);
      c = new  ASTNode();
      c.setName( "y");
      n.addChild(c);
      s = n.formulaToL3String();
      assertTrue((  "x || y" == s ));
      XMLNode xml = XMLNode.convertStringToXMLNode("<annotation> a </annotation>",null);
      n.addSemanticsAnnotation(xml);
      s = n.formulaToL3String();
      assertTrue((  "x || y" == s ));
      n = null;
    }

    public void test_SBML_formulaToL3String()
    {
      const char *formulae[] ={"1""2.1""2.101e-10""foo""1 + foo""1 + 2""1 + 2 * 3""(1 - 2) * 3""1 + -2 / 3""1 + -2e-100 / 3""1 - -foo / 3""2 * foo^bar + 3.1""foo()""foo(1)""foo(1, bar)""foo(1, bar, 2^-3)""(a / b) * c""a / (b * c)""1 + 2 + 3""a * (b * c)""a + (b + c)""a * b * c""a + b + c""x % y""(1 + x) % (3 / y)""(x^2) % -y""x && (y == z)""(x && y) == z""(a && b) || c""a && (b || c)""a && b && c""a || b || c""-x^y""(-x)^y""x^-y""!(x^2)""(!x)^2""x^!2""1 ml""(3/4) uM""INF""NaN""avogadro""time""pi""true""false""(x > y) + (p == q)""(x > y > z) + (p == d == q)""(x || y) > (p && q)""or(x) > and(p)""or() > and()""(x * y)^2""(x * y * z)^2""times(x)^2""times()^2"""  
    }
      ASTNode n;
      string s;
      int i;
      s = n.formulaToL3String();
      assertTrue(( formulae[i] == s ));
      n = null;
    }
  }

    public void test_SBML_formulaToL3String_L1toL3()
    {
      ASTNode n;
      string s;
      n = "acos(x)".parseL3Formula();
      s = n.formulaToL3String();
      assertTrue((  "acos(x)" == s ));
      n = null;
      n = "asin(x)".parseL3Formula();
      s = n.formulaToL3String();
      assertTrue((  "asin(x)" == s ));
      n = null;
      n = "atan(x)".parseL3Formula();
      s = n.formulaToL3String();
      assertTrue((  "atan(x)" == s ));
      n = null;
      n = "ceil(x)".parseL3Formula();
      s = n.formulaToL3String();
      assertTrue((  "ceil(x)" == s ));
      n = null;
      n = "log(x)".parseL3Formula();
      s = n.formulaToL3String();
      assertTrue((  "log10(x)" == s ));
      n = null;
      n = libsbml.parseFormula("log(x)");
      s = n.formulaToL3String();
      assertTrue((  "ln(x)" == s ));
      n = null;
      n = "log10(x)".parseL3Formula();
      s = n.formulaToL3String();
      assertTrue((  "log10(x)" == s ));
      n = null;
      n = "pow(x, y)".parseL3Formula();
      s = n.formulaToL3String();
      assertTrue((  "x^y" == s ));
      n = null;
      n = "sqr(x)".parseL3Formula();
      s = n.formulaToL3String();
      assertTrue((  "x^2" == s ));
      n = null;
      n = "sqrt(x)".parseL3Formula();
      s = n.formulaToL3String();
      assertTrue((  "sqrt(x)" == s ));
      n = null;
      n = "x + (y + z)".parseL3Formula();
      s = n.formulaToL3String();
      assertTrue((  "x + (y + z)" == s ));
      n = null;
      n = "(x + y) + z".parseL3Formula();
      s = n.formulaToL3String();
      assertTrue((  "x + y + z" == s ));
      n = null;
    }

    public void test_SBML_formulaToL3String_L2toL3()
    {
      ASTNode n;
      string s;
      n = "arccos(x)".parseL3Formula();
      s = n.formulaToL3String();
      assertTrue((  "acos(x)" == s ));
      n = null;
      n = "arcsin(x)".parseL3Formula();
      s = n.formulaToL3String();
      assertTrue((  "asin(x)" == s ));
      n = null;
      n = "arctan(x)".parseL3Formula();
      s = n.formulaToL3String();
      assertTrue((  "atan(x)" == s ));
      n = null;
      n = "ceiling(x)".parseL3Formula();
      s = n.formulaToL3String();
      assertTrue((  "ceil(x)" == s ));
      n = null;
      n = "ln(x)".parseL3Formula();
      s = n.formulaToL3String();
      assertTrue((  "ln(x)" == s ));
      n = null;
      n = "log(10, x)".parseL3Formula();
      s = n.formulaToL3String();
      assertTrue((  "log10(x)" == s ));
      n = null;
      n = "power(x, y)".parseL3Formula();
      s = n.formulaToL3String();
      assertTrue((  "x^y" == s ));
      n = null;
      n = "power(x, 2)".parseL3Formula();
      s = n.formulaToL3String();
      assertTrue((  "x^2" == s ));
      n = null;
      n = "root(2, x)".parseL3Formula();
      s = n.formulaToL3String();
      assertTrue((  "sqrt(x)" == s ));
      n = null;
    }

    public void test_SBML_formulaToL3String_L3v2()
    {
      ASTNode n;
      string s;
      n = "rateOf(x)".parseL3Formula();
      s = n.formulaToL3String();
      assertTrue((  "rateOf(x)" == s ));
      n = null;
      n = "rem(x,y)".parseL3Formula();
      s = n.formulaToL3String();
      assertTrue((  "rem(x, y)" == s ));
      n = null;
      n = "quotient(1,2)".parseL3Formula();
      s = n.formulaToL3String();
      assertTrue((  "quotient(1, 2)" == s ));
      n = null;
      n = "max(a,b,5,8.4)".parseL3Formula();
      s = n.formulaToL3String();
      assertTrue((  "max(a, b, 5, 8.4)" == s ));
      n = null;
      n = "min(x)".parseL3Formula();
      s = n.formulaToL3String();
      assertTrue((  "min(x)" == s ));
      n = null;
    }

  }
}
