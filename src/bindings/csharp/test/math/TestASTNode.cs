///  @file    TestASTNode.cs
///  @brief   ASTNode unit tests
///  @author  Frank Bergmann (Csharp conversion)
///  @author  Akiya Jouraku (Csharp conversion)
///  @author  Ben Bornstein 
///  
///  ====== WARNING ===== WARNING ===== WARNING ===== WARNING ===== WARNING ======
/// 
///  DO NOT EDIT THIS FILE.
/// 
///  This file was generated automatically by converting the file located at
///  src/sbml/test/TestASTNode.c
///  using the conversion program dev/utilities/translateTests/translateTests.pl.
///  Any changes made here will be lost the next time the file is regenerated.
/// 
///  -----------------------------------------------------------------------------
///  This file is part of libSBML.  Please visit http://sbml.org for more
///  information about SBML, and the latest version of libSBML.
/// 
///  Copyright 2005-2010 California Institute of Technology.
///  Copyright 2002-2005 California Institute of Technology and
///                      Japan Science and Technology Corporation.
///  
///  This library is free software; you can redistribute it and/or modify it
///  under the terms of the GNU Lesser General Public License as published by
///  the Free Software Foundation.  A copy of the license agreement is provided
///  in the file named "LICENSE.txt" included with this software distribution
///  and also available online as http://sbml.org/software/libsbml/license.html
///  -----------------------------------------------------------------------------


namespace LibSBMLCSTest.math {

  using libsbmlcs;

  using System;

  using System.IO;

  public class TestASTNode {
    public class AssertionError : System.Exception 
    {
      public AssertionError() : base()
      {
        
      }
    }


    static void assertTrue(bool condition)
    {
      if (condition == true)
      {
        return;
      }
      throw new AssertionError();
    }

    static void assertEquals(object a, object b)
    {
      if ( (a == null) && (b == null) )
      {
        return;
      }
      else if ( (a == null) || (b == null) )
      {
        throw new AssertionError();
      }
      else if (a.Equals(b))
      {
        return;
      }
  
      throw new AssertionError();
    }

    static void assertNotEquals(object a, object b)
    {
      if ( (a == null) && (b == null) )
      {
        throw new AssertionError();
      }
      else if ( (a == null) || (b == null) )
      {
        return;
      }
      else if (a.Equals(b))
      {
        throw new AssertionError();
      }
    }

    static void assertEquals(bool a, bool b)
    {
      if ( a == b )
      {
        return;
      }
      throw new AssertionError();
    }

    static void assertNotEquals(bool a, bool b)
    {
      if ( a != b )
      {
        return;
      }
      throw new AssertionError();
    }

    static void assertEquals(int a, int b)
    {
      if ( a == b )
      {
        return;
      }
      throw new AssertionError();
    }

    static void assertNotEquals(int a, int b)
    {
      if ( a != b )
      {
        return;
      }
      throw new AssertionError();
    }


  private const double DBL_EPSILON =  2.2204460492503131e-016;

    public void test_ASTNode_accessWithNULL()
    {
      assertTrue( null.addChild(null) == libsbml.LIBSBML_INVALID_OBJECT );
      assertTrue( null.addSemanticsAnnotation(null) == libsbml.LIBSBML_INVALID_OBJECT );
      assertTrue( null.canonicalize() == 0 );
      assertTrue( new  ASTNode(null) == null );
      assertTrue( null.deepCopy() == null );
      null.fillListOfNodes(null,null);
      assertTrue( null.freeName() == libsbml.LIBSBML_INVALID_OBJECT );
      assertTrue( null.getCharacter() == CHAR_MAX );
      assertTrue( null.getChild(0) == null );
      assertTrue( null.getDenominator() == LONG_MAX );
      assertTrue( null.getExponent() == LONG_MAX );
      assertTrue( null.getInteger() == LONG_MAX );
      assertTrue( null.getLeftChild() == null );
      assertTrue( null.getListOfNodes(null) == null );
      assertEquals( true, util_isNaN );
      assertTrue( null.getName() == null );
      assertTrue( null.getNumChildren() == 0 );
      assertTrue( null.getNumerator() == LONG_MAX );
      assertTrue( null.getNumSemanticsAnnotations() == 0 );
      assertTrue( null.getParentSBMLObject() == null );
      assertTrue( null.getPrecedence() == 6 );
      assertEquals( true, util_isNaN );
      assertTrue( null.getRightChild() == null );
      assertTrue( null.getSemanticsAnnotation(0) == null );
      assertTrue( null.getType() == libsbml.AST_UNKNOWN );
      assertTrue( null.getUnits() == "" );
      assertTrue( null.getUserData() == null );
      assertTrue( null.hasCorrectNumberArguments() == 0 );
      assertTrue( null.hasUnits() == 0 );
      assertTrue( null.insertChild(0,null) == libsbml.LIBSBML_INVALID_OBJECT );
      assertTrue( null.isBoolean() == 0 );
      assertTrue( null.returnsBoolean() == 0 );
      assertTrue( null.isConstant() == 0 );
      assertTrue( null.isFunction() == 0 );
      assertTrue( null.isInfinity() == 0 );
      assertTrue( null.isInteger() == 0 );
      assertTrue( null.isLambda() == 0 );
      assertTrue( null.isLog10() == false );
      assertTrue( null.isLogical() == 0 );
      assertTrue( null.isName() == 0 );
      assertTrue( null.isNaN() == 0 );
      assertTrue( null.isNegInfinity() == 0 );
      assertTrue( null.isNumber() == 0 );
      assertTrue( null.isOperator() == 0 );
      assertTrue( null.isPiecewise() == 0 );
      assertTrue( null.isRational() == 0 );
      assertTrue( null.isReal() == 0 );
      assertTrue( null.isRelational() == 0 );
      assertTrue( null.isSetUnits() == false );
      assertTrue( null.isSqrt() == false );
      assertTrue( null.isUMinus() == false );
      assertTrue( null.isUPlus() == 0 );
      assertTrue( null.isUnknown() == 0 );
      assertTrue( null.isWellFormedASTNode() == 0 );
      assertTrue( null.prependChild(null) == libsbml.LIBSBML_INVALID_OBJECT );
      null.reduceToBinary();
      null.replaceArgument(null,null);
      assertTrue( null.removeChild(0) == libsbml.LIBSBML_INVALID_OBJECT );
      assertTrue( null.replaceChild(0,null) == libsbml.LIBSBML_INVALID_OBJECT );
      assertTrue( null.setCharacter(CHAR_MAX) == libsbml.LIBSBML_INVALID_OBJECT );
      assertTrue( null.setValue(0) == libsbml.LIBSBML_INVALID_OBJECT );
      assertTrue( null.setName(null) == libsbml.LIBSBML_INVALID_OBJECT );
      assertTrue( null.setValue(0,0) == libsbml.LIBSBML_INVALID_OBJECT );
      assertTrue( null.setValue(0.0) == libsbml.LIBSBML_INVALID_OBJECT );
      assertTrue( null.setValue(0.0,0) == libsbml.LIBSBML_INVALID_OBJECT );
      assertTrue( null.setType(libsbml.AST_UNKNOWN) == libsbml.LIBSBML_INVALID_OBJECT );
      assertTrue( null.setUnits(null) == libsbml.LIBSBML_INVALID_OBJECT );
      assertTrue( null.setUserData(null) == libsbml.LIBSBML_INVALID_OBJECT );
      assertTrue( null.swapChildren(null) == libsbml.LIBSBML_INVALID_OBJECT );
      assertTrue( null.unsetUnits() == libsbml.LIBSBML_INVALID_OBJECT );
    }

    public void test_ASTNode_addChild1()
    {
      ASTNode node = new  ASTNode();
      ASTNode c1 = new  ASTNode();
      ASTNode c2 = new  ASTNode();
      ASTNode c1_1 = new  ASTNode();
      int i = 0;
      node.setType(libsbml.AST_LOGICAL_AND);
      c1.setName( "a");
      c2.setName( "b");
      node.addChild(c1);
      node.addChild(c2);
      assertTrue( node.getNumChildren() == 2 );
      string math = libsbml.formulaToString(node);
      assertTrue((  "and(a, b)" == math ));
      c1_1.setName( "d");
      i = node.addChild(c1_1);
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertTrue( node.getNumChildren() == 3 );
      math = libsbml.formulaToString(node);
      assertTrue((  "and(a, b, d)" == math ));
      assertTrue((  "a" == node.getChild(0).getName() ));
      assertTrue((  "b" == node.getChild(1).getName() ));
      assertTrue((  "d" == node.getChild(2).getName() ));
      node = null;
    }

    public void test_ASTNode_addSemanticsAnnotation()
    {
      XMLNode ann = new XMLNode();
      ASTNode node = new  ASTNode();
      int i = 0;
      i = node.addSemanticsAnnotation(ann);
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertTrue( node.getNumSemanticsAnnotations() == 1 );
      i = node.addSemanticsAnnotation(null);
      assertTrue( i == libsbml.LIBSBML_OPERATION_FAILED );
      assertTrue( node.getNumSemanticsAnnotations() == 1 );
      node = null;
    }

    public void test_ASTNode_avogadro()
    {
      ASTNode n = new  ASTNode();
      n.setType(libsbml.AST_NAME_AVOGADRO);
      n.setName( "NA");
      assertTrue((  "NA" == n.getName() ));
      double val = n.getReal();
      assertTrue( val == 6.02214179e23 );
      assertTrue( n.isConstant() == 1 );
      n = null;
    }

    public void test_ASTNode_avogadro_bug()
    {
      ASTNode n = new  ASTNode();
      n.setName( "NA");
      n.setType(libsbml.AST_NAME_AVOGADRO);
      assertTrue((  "NA" == n.getName() ));
      double val = n.getReal();
      assertTrue( val == 6.02214179e23 );
      assertTrue( n.isConstant() == 1 );
      n = null;
    }

    public void test_ASTNode_canonicalizeConstants()
    {
      ASTNode n = new  ASTNode();
      n.setName( "ExponentialE");
      assertEquals( true, n.isName() );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_CONSTANT_E );
      n.setType(libsbml.AST_NAME);
      n.setName( "False");
      assertEquals( true, n.isName() );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_CONSTANT_FALSE );
      n.setType(libsbml.AST_NAME);
      n.setName( "Pi");
      assertEquals( true, n.isName() );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_CONSTANT_PI );
      n.setType(libsbml.AST_NAME);
      n.setName( "True");
      assertEquals( true, n.isName() );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_CONSTANT_TRUE );
      n.setType(libsbml.AST_NAME);
      n.setName( "Foo");
      assertEquals( true, n.isName() );
      n.canonicalize();
      assertEquals( true, n.isName() );
      n = null;
    }

    public void test_ASTNode_canonicalizeFunctions()
    {
      ASTNode n = new  ASTNode(libsbml.AST_FUNCTION);
      n.setName( "abs");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_FUNCTION_ABS );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "arccos");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_FUNCTION_ARCCOS );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "arccosh");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_FUNCTION_ARCCOSH );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "arccot");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_FUNCTION_ARCCOT );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "arccoth");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_FUNCTION_ARCCOTH );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "arccsc");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_FUNCTION_ARCCSC );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "arccsch");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_FUNCTION_ARCCSCH );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "arcsec");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_FUNCTION_ARCSEC );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "arcsech");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_FUNCTION_ARCSECH );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "arcsin");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_FUNCTION_ARCSIN );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "arcsinh");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_FUNCTION_ARCSINH );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "arctan");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_FUNCTION_ARCTAN );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "arctanh");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_FUNCTION_ARCTANH );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "ceiling");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_FUNCTION_CEILING );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "cos");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_FUNCTION_COS );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "cosh");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_FUNCTION_COSH );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "cot");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_FUNCTION_COT );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "coth");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_FUNCTION_COTH );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "csc");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_FUNCTION_CSC );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "csch");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_FUNCTION_CSCH );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "exp");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_FUNCTION_EXP );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "factorial");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_FUNCTION_FACTORIAL );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "floor");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_FUNCTION_FLOOR );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "lambda");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_LAMBDA );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "ln");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_FUNCTION_LN );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "log");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_FUNCTION_LOG );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "piecewise");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_FUNCTION_PIECEWISE );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "power");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_FUNCTION_POWER );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "root");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_FUNCTION_ROOT );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "sec");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_FUNCTION_SEC );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "sech");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_FUNCTION_SECH );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "sin");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_FUNCTION_SIN );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "sinh");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_FUNCTION_SINH );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "tan");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_FUNCTION_TAN );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "tanh");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_FUNCTION_TANH );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "Foo");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n = null;
    }

    public void test_ASTNode_canonicalizeFunctionsL1()
    {
      ASTNode n = new  ASTNode(libsbml.AST_FUNCTION);
      ASTNode c;
      n.setName( "acos");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_FUNCTION_ARCCOS );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "asin");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_FUNCTION_ARCSIN );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "atan");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_FUNCTION_ARCTAN );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "ceil");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_FUNCTION_CEILING );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "pow");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_FUNCTION_POWER );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION);
      n.setName( "log");
      c = new  ASTNode();
      c.setName( "x");
      n.addChild(c);
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      assertTrue( n.getNumChildren() == 1 );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_FUNCTION_LN );
      assertTrue( n.getNumChildren() == 1 );
      n.setType(libsbml.AST_FUNCTION);
      c = new  ASTNode();
      c.setName( "y");
      n.addChild(c);
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      assertTrue( n.getNumChildren() == 2 );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_FUNCTION_LOG );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION);
      n.setName( "log10");
      c = new  ASTNode();
      c.setName( "x");
      n.addChild(c);
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      assertTrue( n.getNumChildren() == 1 );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_FUNCTION_LOG );
      assertTrue( n.getNumChildren() == 2 );
      c = n.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 10 );
      c = n.getRightChild();
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "x" == c.getName() ));
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION);
      n.setName( "sqr");
      c = new  ASTNode();
      c.setName( "x");
      n.addChild(c);
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      assertTrue( n.getNumChildren() == 1 );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_FUNCTION_POWER );
      assertTrue( n.getNumChildren() == 2 );
      c = n.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "x" == c.getName() ));
      c = n.getRightChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 2 );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION);
      n.setName( "sqrt");
      c = new  ASTNode();
      c.setName( "x");
      n.addChild(c);
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      assertTrue( n.getNumChildren() == 1 );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_FUNCTION_ROOT );
      assertTrue( n.getNumChildren() == 2 );
      c = n.getLeftChild();
      assertTrue( c.getType() == libsbml.AST_INTEGER );
      assertTrue( c.getInteger() == 2 );
      c = n.getRightChild();
      assertTrue( c.getType() == libsbml.AST_NAME );
      assertTrue((  "x" == c.getName() ));
      n = null;
    }

    public void test_ASTNode_canonicalizeLogical()
    {
      ASTNode n = new  ASTNode(libsbml.AST_FUNCTION);
      n.setName( "and");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_LOGICAL_AND );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "not");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_LOGICAL_NOT );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "or");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_LOGICAL_OR );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "xor");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_LOGICAL_XOR );
      n.setType(libsbml.AST_FUNCTION);
      n = null;
    }

    public void test_ASTNode_canonicalizeRelational()
    {
      ASTNode n = new  ASTNode(libsbml.AST_FUNCTION);
      n.setName( "eq");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_RELATIONAL_EQ );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "geq");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_RELATIONAL_GEQ );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "gt");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_RELATIONAL_GT );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "leq");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_RELATIONAL_LEQ );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "lt");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_RELATIONAL_LT );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "neq");
      assertTrue( n.getType() == libsbml.AST_FUNCTION );
      n.canonicalize();
      assertTrue( n.getType() == libsbml.AST_RELATIONAL_NEQ );
      n.setType(libsbml.AST_FUNCTION);
      n = null;
    }

    public void test_ASTNode_children()
    {
      ASTNode parent = new  ASTNode();
      ASTNode left = new  ASTNode();
      ASTNode right = new  ASTNode();
      ASTNode right2 = new  ASTNode();
      parent.setType(libsbml.AST_PLUS);
      left.setValue(1);
      right.setValue(2);
      right2.setValue(3);
      parent.addChild(left);
      parent.addChild(right);
      assertTrue( parent.getNumChildren() == 2 );
      assertTrue( left.getNumChildren() == 0 );
      assertTrue( right.getNumChildren() == 0 );
      assertTrue( parent.getLeftChild() == left );
      assertTrue( parent.getRightChild() == right );
      assertTrue( parent.getChild(0) == left );
      assertTrue( parent.getChild(1) == right );
      assertTrue( parent.getChild(2) == null );
      parent.addChild(right2);
      assertTrue( parent.getNumChildren() == 3 );
      assertTrue( left.getNumChildren() == 0 );
      assertTrue( right.getNumChildren() == 0 );
      assertTrue( right2.getNumChildren() == 0 );
      assertTrue( parent.getLeftChild() == left );
      assertTrue( parent.getRightChild() == right2 );
      assertTrue( parent.getChild(0) == left );
      assertTrue( parent.getChild(1) == right );
      assertTrue( parent.getChild(2) == right2 );
      assertTrue( parent.getChild(3) == null );
      parent = null;
    }

    public void test_ASTNode_class()
    {
      int i;
      ASTNode n = new  ASTNode();
      i = n.setClass( "test");
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertTrue( n.isSetClass() == 1 );
      string nclass = n.getClass();
      assertTrue((  "test" == nclass ));
      i = n.unsetClass();
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertTrue( n.isSetClass() == 0 );
      nclass = n.getClass();
      assertTrue((  "" == nclass ));
      n = null;
    }

    public void test_ASTNode_create()
    {
      ASTNode n = new  ASTNode();
      EventAssignment ea = new  EventAssignment(2,4);
      assertTrue( n.getType() == libsbml.AST_UNKNOWN );
      assertTrue( n.getCharacter() == '\0' );
      assertTrue( n.getName() == null );
      assertTrue( n.getInteger() == 0 );
      assertTrue( n.getExponent() == 0 );
      assertTrue( n.getNumChildren() == 0 );
      assertTrue( n.getParentSBMLObject() == null );
      ea = null;
      n = null;
    }

    public void test_ASTNode_deepCopy_1()
    {
      ASTNode node = new  ASTNode();
      ASTNode child, copy;
      node.setCharacter( '+');
      node.addChild(new  ASTNode());
      node.addChild(new  ASTNode());
      node.getLeftChild().setValue(1);
      node.getRightChild().setValue(2);
      assertTrue( node.getType() == libsbml.AST_PLUS );
      assertTrue( node.getCharacter() == '+' );
      assertTrue( node.getNumChildren() == 2 );
      child = node.getLeftChild();
      assertTrue( child.getType() == libsbml.AST_INTEGER );
      assertTrue( child.getInteger() == 1 );
      assertTrue( child.getNumChildren() == 0 );
      child = node.getRightChild();
      assertTrue( child.getType() == libsbml.AST_INTEGER );
      assertTrue( child.getInteger() == 2 );
      assertTrue( child.getNumChildren() == 0 );
      copy = node.deepCopy();
      assertTrue( copy != node );
      assertTrue( copy.getType() == libsbml.AST_PLUS );
      assertTrue( copy.getCharacter() == '+' );
      assertTrue( copy.getNumChildren() == 2 );
      child = copy.getLeftChild();
      assertTrue( child != node.getLeftChild() );
      assertTrue( child.getType() == libsbml.AST_INTEGER );
      assertTrue( child.getInteger() == 1 );
      assertTrue( child.getNumChildren() == 0 );
      child = copy.getRightChild();
      assertTrue( child != node.getRightChild() );
      assertTrue( child.getType() == libsbml.AST_INTEGER );
      assertTrue( child.getInteger() == 2 );
      assertTrue( child.getNumChildren() == 0 );
      node = null;
      copy = null;
    }

    public void test_ASTNode_deepCopy_2()
    {
      ASTNode node = new  ASTNode();
      ASTNode copy;
      node.setName( "Foo");
      assertTrue( node.getType() == libsbml.AST_NAME );
      assertTrue((  "Foo" == node.getName() ));
      assertTrue( node.getNumChildren() == 0 );
      copy = node.deepCopy();
      assertTrue( copy != node );
      assertTrue( copy.getType() == libsbml.AST_NAME );
      assertTrue((  "Foo" == copy.getName() ));
      assertTrue( copy.getNumChildren() == 0 );
      assertTrue(( node.getName() == copy.getName() ));
      node = null;
      copy = null;
    }

    public void test_ASTNode_deepCopy_3()
    {
      ASTNode node = new  ASTNode(libsbml.AST_FUNCTION);
      ASTNode copy;
      node.setName( "Foo");
      assertTrue( node.getType() == libsbml.AST_FUNCTION );
      assertTrue((  "Foo" == node.getName() ));
      assertTrue( node.getNumChildren() == 0 );
      copy = node.deepCopy();
      assertTrue( copy != node );
      assertTrue( copy.getType() == libsbml.AST_FUNCTION );
      assertTrue((  "Foo" == copy.getName() ));
      assertTrue( copy.getNumChildren() == 0 );
      assertTrue(( node.getName() == copy.getName() ));
      node = null;
      copy = null;
    }

    public void test_ASTNode_deepCopy_4()
    {
      ASTNode node = new  ASTNode(libsbml.AST_FUNCTION_ABS);
      ASTNode copy;
      node.setName( "ABS");
      assertTrue( node.getType() == libsbml.AST_FUNCTION_ABS );
      assertTrue((  "ABS" == node.getName() ));
      assertTrue( node.getNumChildren() == 0 );
      copy = node.deepCopy();
      assertTrue( copy != node );
      assertTrue( copy.getType() == libsbml.AST_FUNCTION_ABS );
      assertTrue((  "ABS" == copy.getName() ));
      assertTrue( copy.getNumChildren() == 0 );
      assertTrue(( node.getName() == copy.getName() ));
      node = null;
      copy = null;
    }

    public void test_ASTNode_deepCopy_5()
    {
      ASTNode node = libsbml.parseFormula("a + b");
      ASTNode copy;
      string xmlstr = "<annotation encoding=\"infix\">\n" + "test\n" + "</annotation>";
      XMLNode ann = XMLNode.convertStringToXMLNode(xmlstr,null);
      node.addSemanticsAnnotation(ann);
      assertTrue( node.getNumSemanticsAnnotations() == 1 );
      copy = node.deepCopy();
      assertTrue( copy != node );
      assertTrue( copy.getNumSemanticsAnnotations() == 1 );
      node = null;
      copy = null;
    }

    public void test_ASTNode_freeName()
    {
      ASTNode node = new  ASTNode();
      int i = 0;
      i = node.setName( "a");
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      string math = libsbml.formulaToString(node);
      assertTrue((  "a" == math ));
      assertTrue((  "a" == node.getName() ));
      i = node.freeName();
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertTrue( node.getName() == null );
      i = node.freeName();
      assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE );
      assertTrue( node.getName() == null );
      node.setType(libsbml.AST_UNKNOWN);
      i = node.freeName();
      assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE );
      assertTrue( node.getName() == null );
      node = null;
    }

    public void test_ASTNode_free_NULL()
    {
    }

    public void test_ASTNode_getName()
    {
      ASTNode n = new  ASTNode();
      n.setName( "foo");
      assertTrue((  "foo" == n.getName() ));
      n.setType(libsbml.AST_NAME_TIME);
      assertTrue((  "foo" == n.getName() ));
      n.setName(null);
      assertTrue( n.getName() == null );
      assertEquals( true, util_isNaN );
      assertTrue( n.isWellFormedASTNode() == true );
      n.setType(libsbml.AST_CONSTANT_E);
      assertTrue((  "exponentiale" == n.getName() ));
      assertEquals( true, util_isEqual );
      assertTrue( n.isWellFormedASTNode() == true );
      n.setType(libsbml.AST_CONSTANT_FALSE);
      assertTrue((  "false" == n.getName() ));
      assertEquals( true, util_isEqual );
      assertTrue( n.isWellFormedASTNode() == true );
      n.setType(libsbml.AST_CONSTANT_PI);
      assertTrue((  "pi" == n.getName() ));
      assertEquals( true, util_isEqual );
      assertTrue( n.isWellFormedASTNode() == true );
      n.setType(libsbml.AST_CONSTANT_TRUE);
      assertTrue((  "true" == n.getName() ));
      assertEquals( true, util_isEqual );
      assertTrue( n.isWellFormedASTNode() == true );
      n.setType(libsbml.AST_LAMBDA);
      assertTrue((  "lambda" == n.getName() ));
      assertEquals( true, util_isNaN );
      assertTrue( n.isWellFormedASTNode() == false );
      n.setType(libsbml.AST_FUNCTION);
      n.setName( "f");
      assertTrue((  "f" == n.getName() ));
      assertEquals( true, util_isNaN );
      assertTrue( n.isWellFormedASTNode() == true );
      n.setType(libsbml.AST_FUNCTION_DELAY);
      assertTrue((  "f" == n.getName() ));
      assertEquals( true, util_isNaN );
      assertTrue( n.isWellFormedASTNode() == false );
      n.setName(null);
      assertTrue((  "delay" == n.getName() ));
      assertEquals( true, util_isNaN );
      n.setType(libsbml.AST_FUNCTION);
      assertTrue( n.getName() == null );
      assertEquals( true, util_isNaN );
      assertTrue( n.isWellFormedASTNode() == true );
      n.setType(libsbml.AST_FUNCTION_ABS);
      assertTrue((  "abs" == n.getName() ));
      assertEquals( true, util_isNaN );
      n.setType(libsbml.AST_FUNCTION_ARCCOS);
      assertTrue((  "arccos" == n.getName() ));
      assertEquals( true, util_isNaN );
      n.setType(libsbml.AST_FUNCTION_TAN);
      assertTrue((  "tan" == n.getName() ));
      assertEquals( true, util_isNaN );
      n.setType(libsbml.AST_FUNCTION_TANH);
      assertTrue((  "tanh" == n.getName() ));
      assertEquals( true, util_isNaN );
      n.setType(libsbml.AST_LOGICAL_AND);
      assertTrue((  "and" == n.getName() ));
      assertEquals( true, util_isNaN );
      n.setType(libsbml.AST_LOGICAL_NOT);
      assertTrue((  "not" == n.getName() ));
      assertEquals( true, util_isNaN );
      n.setType(libsbml.AST_LOGICAL_OR);
      assertTrue((  "or" == n.getName() ));
      assertEquals( true, util_isNaN );
      n.setType(libsbml.AST_LOGICAL_XOR);
      assertTrue((  "xor" == n.getName() ));
      assertEquals( true, util_isNaN );
      assertTrue( n.isWellFormedASTNode() == true );
      n.setType(libsbml.AST_RELATIONAL_EQ);
      assertTrue((  "eq" == n.getName() ));
      assertEquals( true, util_isNaN );
      n.setType(libsbml.AST_RELATIONAL_GEQ);
      assertTrue((  "geq" == n.getName() ));
      assertEquals( true, util_isNaN );
      n.setType(libsbml.AST_RELATIONAL_LT);
      assertTrue((  "lt" == n.getName() ));
      assertEquals( true, util_isNaN );
      n.setType(libsbml.AST_RELATIONAL_NEQ);
      assertTrue((  "neq" == n.getName() ));
      assertEquals( true, util_isNaN );
      n = null;
    }

    public void test_ASTNode_getPrecedence()
    {
      ASTNode n = new  ASTNode();
      n.setType(libsbml.AST_PLUS);
      assertTrue( n.getPrecedence() == 2 );
      n.setType(libsbml.AST_MINUS);
      assertTrue( n.getPrecedence() == 2 );
      n.setType(libsbml.AST_TIMES);
      assertTrue( n.getPrecedence() == 3 );
      n.setType(libsbml.AST_DIVIDE);
      assertTrue( n.getPrecedence() == 3 );
      n.setType(libsbml.AST_POWER);
      assertTrue( n.getPrecedence() == 4 );
      n.setType(libsbml.AST_MINUS);
      n.addChild(new  ASTNode(libsbml.AST_NAME));
      assertTrue( n.isUMinus() == true );
      assertTrue( n.getPrecedence() == 5 );
      n.setType(libsbml.AST_NAME);
      assertTrue( n.getPrecedence() == 6 );
      n.setType(libsbml.AST_FUNCTION);
      assertTrue( n.getPrecedence() == 6 );
      n = null;
    }

    public void test_ASTNode_getReal()
    {
      ASTNode n = new  ASTNode();
      n.setType(libsbml.AST_REAL);
      n.setValue(1.6);
      assertTrue( n.getReal() == 1.6 );
      n.setType(libsbml.AST_REAL_E);
      n.setValue(12.3,3);
      assertEquals( true, util_isEqual );
      n.setType(libsbml.AST_RATIONAL);
      n.setValue(1,2);
      assertTrue( n.getReal() == 0.5 );
      n = null;
    }

    public void test_ASTNode_hasTypeAndNumChildren()
    {
      ASTNode n = new  ASTNode();
      ASTNode c = new  ASTNode();
      n.setType(libsbml.AST_PLUS);
      assertEquals( true, n.hasTypeAndNumChildren(libsbml.AST_PLUS,0) );
      assertEquals( false, n.hasTypeAndNumChildren(libsbml.AST_PLUS,1) );
      assertEquals( false, n.hasTypeAndNumChildren(libsbml.AST_MINUS,0) );
      assertEquals( false, n.hasTypeAndNumChildren(libsbml.AST_UNKNOWN,1) );
      c.setName( "x");
      n.addChild(c);
      n.setType(libsbml.AST_FUNCTION_PIECEWISE);
      assertEquals( true, n.hasTypeAndNumChildren(libsbml.AST_FUNCTION_PIECEWISE,1) );
      assertEquals( false, n.hasTypeAndNumChildren(libsbml.AST_FUNCTION_PIECEWISE,0) );
      assertEquals( false, n.hasTypeAndNumChildren(libsbml.AST_LOGICAL_AND,1) );
      assertEquals( false, n.hasTypeAndNumChildren(libsbml.AST_DIVIDE,0) );
      c = new  ASTNode();
      c.setName( "y");
      n.addChild(c);
      n.setType(libsbml.AST_DIVIDE);
      assertEquals( true, n.hasTypeAndNumChildren(libsbml.AST_DIVIDE,2) );
      assertEquals( false, n.hasTypeAndNumChildren(libsbml.AST_DIVIDE,0) );
      assertEquals( false, n.hasTypeAndNumChildren(libsbml.AST_CONSTANT_E,2) );
      assertEquals( false, n.hasTypeAndNumChildren(libsbml.AST_RELATIONAL_EQ,0) );
      n = null;
    }

    public void test_ASTNode_hasUnits()
    {
      ASTNode n = new  ASTNode();
      ASTNode c = new  ASTNode();
      n.setValue(1);
      assertTrue( n.hasUnits() == 0 );
      n.setUnits( "litre");
      assertTrue( n.hasUnits() == 1 );
      n = null;
      n = new  ASTNode();
      n.setType(libsbml.AST_PLUS);
      c.setValue(2);
      n.addChild(c);
      assertTrue( n.hasUnits() == 0 );
      c = new  ASTNode();
      c.setValue(3);
      c.setUnits( "mole");
      n.addChild(c);
      assertTrue( n.hasUnits() == 1 );
      n = null;
    }

    public void test_ASTNode_id()
    {
      int i;
      ASTNode n = new  ASTNode();
      i = n.setId( "test");
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertTrue( n.isSetId() == true );
      string id = n.getId();
      assertTrue((  "test" == id ));
      i = n.unsetId();
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertTrue( n.isSetId() == false );
      id = n.getId();
      assertTrue((  "" == id ));
      n = null;
    }

    public void test_ASTNode_insertChild()
    {
      ASTNode node = new  ASTNode();
      ASTNode c1 = new  ASTNode();
      ASTNode c2 = new  ASTNode();
      ASTNode c3 = new  ASTNode();
      ASTNode newc = new  ASTNode();
      ASTNode newc1 = new  ASTNode();
      int i = 0;
      node.setType(libsbml.AST_LOGICAL_AND);
      c1.setName( "a");
      c2.setName( "b");
      c3.setName( "c");
      node.addChild(c1);
      node.addChild(c2);
      node.addChild(c3);
      assertTrue( node.getNumChildren() == 3 );
      string math = libsbml.formulaToString(node);
      assertTrue((  "and(a, b, c)" == math ));
      newc.setName( "d");
      newc1.setName( "e");
      i = node.insertChild(1,newc);
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertTrue( node.getNumChildren() == 4 );
      math = libsbml.formulaToString(node);
      assertTrue((  "and(a, d, b, c)" == math ));
      i = node.insertChild(5,newc);
      assertTrue( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE );
      assertTrue( node.getNumChildren() == 4 );
      math = libsbml.formulaToString(node);
      assertTrue((  "and(a, d, b, c)" == math ));
      i = node.insertChild(2,newc1);
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertTrue( node.getNumChildren() == 5 );
      math = libsbml.formulaToString(node);
      assertTrue((  "and(a, d, e, b, c)" == math ));
      node = null;
    }

    public void test_ASTNode_isAvogadro()
    {
      ASTNode n;
      n = new  ASTNode(libsbml.AST_PLUS);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_MINUS);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_TIMES);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_DIVIDE);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_POWER);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_INTEGER);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_REAL);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_REAL_E);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_RATIONAL);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_NAME);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_NAME_AVOGADRO);
      assertEquals( true, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_NAME_TIME);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_CONSTANT_E);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_CONSTANT_FALSE);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_CONSTANT_PI);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_CONSTANT_TRUE);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_LAMBDA);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_ABS);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_ARCCOS);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_ARCCOSH);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_ARCCOT);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_ARCCOTH);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_ARCCSC);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_ARCCSCH);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_ARCSEC);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_ARCSECH);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_ARCSIN);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_ARCSINH);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_ARCTAN);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_ARCTANH);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_CEILING);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_COS);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_COSH);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_COT);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_COTH);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_CSC);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_CSCH);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_DELAY);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_EXP);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_FACTORIAL);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_FLOOR);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_LN);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_LOG);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_PIECEWISE);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_POWER);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_ROOT);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_SEC);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_SECH);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_SIN);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_SINH);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_TAN);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_TANH);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_LOGICAL_AND);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_LOGICAL_NOT);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_LOGICAL_OR);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_LOGICAL_XOR);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_RELATIONAL_EQ);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_RELATIONAL_GEQ);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_RELATIONAL_GT);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_RELATIONAL_LEQ);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_RELATIONAL_LT);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_RELATIONAL_NEQ);
      assertEquals( false, n.isAvogadro() );
      n = null;
      n = new  ASTNode(libsbml.AST_UNKNOWN);
      assertEquals( false, n.isAvogadro() );
      n = null;
    }

    public void test_ASTNode_isBoolean()
    {
      ASTNode n;
      n = new  ASTNode(libsbml.AST_PLUS);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_MINUS);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_TIMES);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_DIVIDE);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_POWER);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_INTEGER);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_REAL);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_REAL_E);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_RATIONAL);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_NAME);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_NAME_AVOGADRO);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_NAME_TIME);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_CONSTANT_E);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_CONSTANT_FALSE);
      assertEquals( true, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_CONSTANT_PI);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_CONSTANT_TRUE);
      assertEquals( true, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_LAMBDA);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_ABS);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_ARCCOS);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_ARCCOSH);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_ARCCOT);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_ARCCOTH);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_ARCCSC);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_ARCCSCH);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_ARCSEC);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_ARCSECH);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_ARCSIN);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_ARCSINH);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_ARCTAN);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_ARCTANH);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_CEILING);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_COS);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_COSH);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_COT);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_COTH);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_CSC);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_CSCH);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_DELAY);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_EXP);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_FACTORIAL);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_FLOOR);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_LN);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_LOG);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_PIECEWISE);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_POWER);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_ROOT);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_SEC);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_SECH);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_SIN);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_SINH);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_TAN);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_FUNCTION_TANH);
      assertEquals( false, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_LOGICAL_AND);
      assertEquals( true, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_LOGICAL_NOT);
      assertEquals( true, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_LOGICAL_OR);
      assertEquals( true, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_LOGICAL_XOR);
      assertEquals( true, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_RELATIONAL_EQ);
      assertEquals( true, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_RELATIONAL_GEQ);
      assertEquals( true, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_RELATIONAL_GT);
      assertEquals( true, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_RELATIONAL_LEQ);
      assertEquals( true, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_RELATIONAL_LT);
      assertEquals( true, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_RELATIONAL_NEQ);
      assertEquals( true, n.isBoolean() );
      n = null;
      n = new  ASTNode(libsbml.AST_UNKNOWN);
      assertEquals( false, n.isBoolean() );
      n = null;
    }

    public void test_ASTNode_isLog10()
    {
      ASTNode n = new  ASTNode();
      ASTNode c;
      n.setType(libsbml.AST_FUNCTION);
      assertTrue( n.isLog10() == false );
      n.setType(libsbml.AST_FUNCTION_LOG);
      assertTrue( n.isLog10() == false );
      assertTrue( n.isWellFormedASTNode() == false );
      c = new  ASTNode();
      n.addChild(c);
      c.setValue(10);
      assertTrue( n.isLog10() == false );
      n.addChild(new  ASTNode());
      assertTrue( n.isLog10() == true );
      assertTrue( n.isWellFormedASTNode() == true );
      c.setValue(2);
      assertTrue( n.isLog10() == false );
      assertTrue( n.isWellFormedASTNode() == true );
      n = null;
    }

    public void test_ASTNode_isSqrt()
    {
      ASTNode n = new  ASTNode();
      ASTNode c;
      n.setType(libsbml.AST_FUNCTION);
      assertTrue( n.isSqrt() == false );
      n.setType(libsbml.AST_FUNCTION_ROOT);
      assertTrue( n.isSqrt() == false );
      c = new  ASTNode();
      n.addChild(c);
      c.setValue(2);
      assertTrue( n.isSqrt() == false );
      n.addChild(new  ASTNode());
      assertTrue( n.isSqrt() == true );
      assertTrue( n.isWellFormedASTNode() == true );
      c.setValue(3);
      assertTrue( n.isSqrt() == false );
      n = null;
    }

    public void test_ASTNode_isUMinus()
    {
      ASTNode n = new  ASTNode();
      n.setType(libsbml.AST_MINUS);
      assertTrue( n.isUMinus() == false );
      n.addChild(new  ASTNode(libsbml.AST_NAME));
      assertTrue( n.isUMinus() == true );
      assertTrue( n.isWellFormedASTNode() == true );
      n = null;
    }

    public void test_ASTNode_isUPlus()
    {
      ASTNode n = new  ASTNode();
      n.setType(libsbml.AST_PLUS);
      assertTrue( n.isUPlus() == 0 );
      n.addChild(new  ASTNode(libsbml.AST_NAME));
      assertTrue( n.isUPlus() == 1 );
      assertTrue( n.isWellFormedASTNode() == true );
      n = null;
    }

    public void test_ASTNode_no_children()
    {
      ASTNode node = new  ASTNode();
      assertTrue( node.getNumChildren() == 0 );
      assertTrue( node.getLeftChild() == null );
      assertTrue( node.getRightChild() == null );
      assertTrue( node.getChild(0) == null );
      node = null;
    }

    public void test_ASTNode_one_child()
    {
      ASTNode node = new  ASTNode();
      ASTNode child = new  ASTNode();
      node.addChild(child);
      assertTrue( node.getNumChildren() == 1 );
      assertTrue( node.getLeftChild() == child );
      assertTrue( node.getRightChild() == null );
      assertTrue( node.getChild(0) == child );
      assertTrue( node.getChild(1) == null );
      node = null;
    }

    public void test_ASTNode_prependChild1()
    {
      ASTNode node = new  ASTNode();
      ASTNode c1 = new  ASTNode();
      ASTNode c2 = new  ASTNode();
      ASTNode c1_1 = new  ASTNode();
      int i = 0;
      node.setType(libsbml.AST_LOGICAL_AND);
      c1.setName( "a");
      c2.setName( "b");
      node.addChild(c1);
      node.addChild(c2);
      assertTrue( node.getNumChildren() == 2 );
      string math = libsbml.formulaToString(node);
      assertTrue((  "and(a, b)" == math ));
      c1_1.setName( "d");
      i = node.prependChild(c1_1);
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertTrue( node.getNumChildren() == 3 );
      math = libsbml.formulaToString(node);
      assertTrue((  "and(d, a, b)" == math ));
      assertTrue((  "d" == node.getChild(0).getName() ));
      assertTrue((  "a" == node.getChild(1).getName() ));
      assertTrue((  "b" == node.getChild(2).getName() ));
      node = null;
    }

    public void test_ASTNode_reduceToBinary()
    {
      ASTNode n = new  ASTNode();
      n.setType(libsbml.AST_PLUS);
      ASTNode c1 = new  ASTNode();
      c1.setValue(2);
      ASTNode c2 = new  ASTNode();
      c2.setValue(2);
      ASTNode c3 = new  ASTNode();
      c3.setValue(2);
      n.addChild(c1);
      n.addChild(c2);
      n.addChild(c3);
      assertTrue( n.getNumChildren() == 3 );
      n.reduceToBinary();
      assertTrue( n.getNumChildren() == 2 );
      ASTNode child = n.getChild(0);
      assertTrue( child.getNumChildren() == 2 );
      child = n.getChild(1);
      assertTrue( child.getNumChildren() == 0 );
      n = null;
    }

    public void test_ASTNode_removeChild()
    {
      ASTNode node = new  ASTNode();
      ASTNode c1 = new  ASTNode();
      ASTNode c2 = new  ASTNode();
      int i = 0;
      node.setType(libsbml.AST_PLUS);
      c1.setName( "foo");
      c2.setName( "foo2");
      node.addChild(c1);
      node.addChild(c2);
      assertTrue( node.getNumChildren() == 2 );
      i = node.removeChild(0);
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertTrue( node.getNumChildren() == 1 );
      i = node.removeChild(1);
      assertTrue( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE );
      assertTrue( node.getNumChildren() == 1 );
      i = node.removeChild(0);
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertTrue( node.getNumChildren() == 0 );
      node = null;
      c1 = null;
      c2 = null;
    }

    public void test_ASTNode_replaceArgument1()
    {
      ASTNode node = libsbml.parseFormula("x*y");
      ASTNode user = new  ASTNode(libsbml.AST_FUNCTION);
      user.setName( "f");
      ASTNode c1 = new  ASTNode();
      ASTNode c2 = new  ASTNode();
      string bvar =  "x";
      c1.setName( "x");
      c2.setName( "y");
      user.addChild(c1);
      user.addChild(c2);
      string math = libsbml.formulaToString(user);
      assertTrue((  "f(x, y)" == math ));
      node.replaceArgument(bvar,user);
      math = libsbml.formulaToString(node);
      assertTrue((  "f(x, y) * y" == math ));
      node = null;
      user = null;
    }

    public void test_ASTNode_replaceArgument2()
    {
      ASTNode node = libsbml.parseFormula("x*y");
      ASTNode user = new  ASTNode(libsbml.AST_NAME_TIME);
      user.setName( "f");
      string bvar =  "x";
      node.replaceArgument(bvar,user);
      string math = libsbml.formulaToString(node);
      assertTrue((  "f * y" == math ));
      ASTNode child = node.getChild(0);
      assertTrue( child.getType() == libsbml.AST_NAME_TIME );
      node = null;
      user = null;
    }

    public void test_ASTNode_replaceArgument3()
    {
      ASTNode node = libsbml.parseFormula("piecewise(x, gt(x, y), x)");
      ASTNode repl1 = libsbml.parseFormula("a/b");
      ASTNode repl2 = libsbml.parseFormula("2");
      string bvar =  "x";
      node.replaceArgument(bvar,repl2);
      string math = libsbml.formulaToString(node);
      assertTrue((  "piecewise(2, gt(2, y), 2)" == math ));
      node.replaceArgument( "y",repl1);
      math = libsbml.formulaToString(node);
      assertTrue((  "piecewise(2, gt(2, a / b), 2)" == math ));
      node = null;
      repl1 = null;
      repl2 = null;
    }

    public void test_ASTNode_replaceArgument4()
    {
      ASTNode node = libsbml.parseFormula("piecewise(x, gt(x, y), y)");
      ASTNode repl1 = libsbml.parseFormula("a/b");
      ASTNode repl2 = libsbml.parseFormula("2");
      string bvar =  "x";
      node.replaceArgument(bvar,repl2);
      string math = libsbml.formulaToString(node);
      assertTrue((  "piecewise(2, gt(2, y), y)" == math ));
      node.replaceArgument( "y",repl1);
      math = libsbml.formulaToString(node);
      assertTrue((  "piecewise(2, gt(2, a / b), a / b)" == math ));
      node = null;
      repl1 = null;
      repl2 = null;
    }

    public void test_ASTNode_replaceArgument5()
    {
      ASTNode node = libsbml.parseFormula("piecewise(y, gt(x, y), x)");
      ASTNode repl1 = libsbml.parseFormula("a/b");
      ASTNode repl2 = libsbml.parseFormula("2");
      string bvar =  "x";
      node.replaceArgument(bvar,repl2);
      string math = libsbml.formulaToString(node);
      assertTrue((  "piecewise(y, gt(2, y), 2)" == math ));
      node.replaceArgument( "y",repl1);
      math = libsbml.formulaToString(node);
      assertTrue((  "piecewise(a / b, gt(2, a / b), 2)" == math ));
      node = null;
      repl1 = null;
      repl2 = null;
    }

    public void test_ASTNode_replaceChild()
    {
      ASTNode node = new  ASTNode();
      ASTNode c1 = new  ASTNode();
      ASTNode c2 = new  ASTNode();
      ASTNode c3 = new  ASTNode();
      ASTNode c4 = new  ASTNode();
      ASTNode c5 = new  ASTNode();
      int i = 0;
      node.setType(libsbml.AST_LOGICAL_AND);
      c1.setName( "a");
      c2.setName( "b");
      c3.setName( "c");
      c4.setName( "d");
      c5.setName( "e");
      node.addChild(c1);
      node.addChild(c2);
      node.addChild(c3);
      assertTrue( node.getNumChildren() == 3 );
      string math = libsbml.formulaToString(node);
      assertTrue((  "and(a, b, c)" == math ));
      i = node.replaceChild(0,c4);
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertTrue( node.getNumChildren() == 3 );
      math = libsbml.formulaToString(node);
      assertTrue((  "and(d, b, c)" == math ));
      i = node.replaceChild(3,c4);
      assertTrue( i == libsbml.LIBSBML_INDEX_EXCEEDS_SIZE );
      assertTrue( node.getNumChildren() == 3 );
      math = libsbml.formulaToString(node);
      assertTrue((  "and(d, b, c)" == math ));
      i = node.replaceChild(1,c5);
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertTrue( node.getNumChildren() == 3 );
      math = libsbml.formulaToString(node);
      assertTrue((  "and(d, e, c)" == math ));
      node = null;
      c1 = null;
      c2 = null;
    }

    public void test_ASTNode_returnsBoolean()
    {
      ASTNode math;
      ASTNode n = libsbml.parseFormula("geq(a,b)");
      assertTrue( n.returnsBoolean() == 1 );
      n = null;
      n = libsbml.parseFormula("times(a,b)");
      assertTrue( n.returnsBoolean() == 0 );
      n = null;
      n = libsbml.parseFormula("piecewise(true, geq(X, T), false)");
      assertTrue( n.returnsBoolean() == 1 );
      n = null;
      n = libsbml.parseFormula("piecewise(true, geq(X, T), 5)");
      assertTrue( n.returnsBoolean() == 0 );
      n = null;
      n = libsbml.parseFormula("func1(X)");
      assertTrue( n.returnsBoolean() == 0 );
      SBMLDocument doc = new  SBMLDocument(3,1);
      Model model = doc.createModel();
      Constraint c = model.createConstraint();
      c.setMath(n);
      math = c.getMath();
      assertTrue( math.returnsBoolean() == 0 );
      FunctionDefinition fd = model.createFunctionDefinition();
      fd.setId( "func1");
      assertTrue( math.returnsBoolean() == 0 );
      ASTNode m = libsbml.parseFormula("lambda(x, true)");
      fd.setMath(m);
      m = null;
      assertTrue( math.returnsBoolean() == 1 );
      m = libsbml.parseFormula("lambda(x, 6)");
      fd.setMath(m);
      m = null;
      assertTrue( math.returnsBoolean() == 0 );
      n = null;
      doc = null;
    }

    public void test_ASTNode_setCharacter()
    {
      ASTNode node = new  ASTNode();
      node.setName( "foo");
      assertTrue( node.getType() == libsbml.AST_NAME );
      assertTrue( node.getCharacter() == '\0' );
      assertTrue((  "foo" == node.getName() ));
      assertTrue( node.getInteger() == 0 );
      assertTrue( node.getReal() == 0 );
      assertTrue( node.getExponent() == 0 );
      assertTrue( node.getDenominator() == 1 );
      node.setCharacter( '+');
      assertTrue( node.getType() == libsbml.AST_PLUS );
      assertTrue( node.getCharacter() == '+' );
      assertTrue( node.getName() == null );
      assertTrue( node.getInteger() == 0 );
      assertTrue( node.getReal() == 0 );
      assertTrue( node.getExponent() == 0 );
      assertTrue( node.getDenominator() == 1 );
      node.setCharacter( '-');
      assertTrue( node.getType() == libsbml.AST_MINUS );
      assertTrue( node.getCharacter() == '-' );
      assertTrue( node.getName() == null );
      assertTrue( node.getInteger() == 0 );
      assertTrue( node.getReal() == 0 );
      assertTrue( node.getExponent() == 0 );
      assertTrue( node.getDenominator() == 1 );
      node.setCharacter( '*');
      assertTrue( node.getType() == libsbml.AST_TIMES );
      assertTrue( node.getCharacter() == '*' );
      assertTrue( node.getName() == null );
      assertTrue( node.getInteger() == 0 );
      assertTrue( node.getReal() == 0 );
      assertTrue( node.getExponent() == 0 );
      assertTrue( node.getDenominator() == 1 );
      node.setCharacter( '/');
      assertTrue( node.getType() == libsbml.AST_DIVIDE );
      assertTrue( node.getCharacter() == '/' );
      assertTrue( node.getName() == null );
      assertTrue( node.getInteger() == 0 );
      assertTrue( node.getReal() == 0 );
      assertTrue( node.getExponent() == 0 );
      assertTrue( node.getDenominator() == 1 );
      node.setCharacter( '^');
      assertTrue( node.getType() == libsbml.AST_POWER );
      assertTrue( node.getCharacter() == '^' );
      assertTrue( node.getName() == null );
      assertTrue( node.getInteger() == 0 );
      assertTrue( node.getReal() == 0 );
      assertTrue( node.getExponent() == 0 );
      assertTrue( node.getDenominator() == 1 );
      node.setCharacter( '$');
      assertTrue( node.getType() == libsbml.AST_UNKNOWN );
      assertTrue( node.getCharacter() == '$' );
      assertTrue( node.getName() == null );
      assertTrue( node.getInteger() == 0 );
      assertTrue( node.getReal() == 0 );
      assertTrue( node.getExponent() == 0 );
      assertTrue( node.getDenominator() == 1 );
      node = null;
    }

    public void test_ASTNode_setInteger()
    {
      ASTNode node = new  ASTNode();
      node.setName( "foo");
      assertTrue( node.getType() == libsbml.AST_NAME );
      assertTrue((  "foo" == node.getName() ));
      assertTrue( node.getCharacter() == '\0' );
      assertTrue( node.getInteger() == 0 );
      assertTrue( node.getReal() == 0 );
      assertTrue( node.getExponent() == 0 );
      assertTrue( node.getDenominator() == 1 );
      node.setValue(3.2);
      assertTrue( node.getType() == libsbml.AST_REAL );
      assertTrue( node.getInteger() == 0 );
      assertTrue( node.getName() == null );
      assertTrue( node.getCharacter() == '\0' );
      assertTrue( node.getReal() == 3.2 );
      assertTrue( node.getExponent() == 0 );
      assertTrue( node.getDenominator() == 1 );
      node.setValue(321);
      assertTrue( node.getType() == libsbml.AST_INTEGER );
      assertTrue( node.getInteger() == 321 );
      assertTrue( node.getName() == null );
      assertTrue( node.getCharacter() == '\0' );
      assertTrue( node.getReal() == 0 );
      assertTrue( node.getExponent() == 0 );
      assertTrue( node.getDenominator() == 1 );
      node = null;
    }

    public void test_ASTNode_setName_1()
    {
      string name =  "foo";
      ASTNode node = new  ASTNode();
      assertTrue( node.getType() == libsbml.AST_UNKNOWN );
      node.setName(name);
      assertTrue( node.getType() == libsbml.AST_NAME );
      assertTrue(( name == node.getName() ));
      assertTrue( node.getCharacter() == '\0' );
      assertTrue( node.getInteger() == 0 );
      assertTrue( node.getReal() == 0 );
      assertTrue( node.getExponent() == 0 );
      assertTrue( node.getDenominator() == 1 );
      if (node.getName() == name);
      {
      }
      node.setName(null);
      assertTrue( node.getType() == libsbml.AST_NAME );
      if (node.getName() != null);
      {
      }
      node.setType(libsbml.AST_FUNCTION_COS);
      assertTrue( node.getType() == libsbml.AST_FUNCTION_COS );
      assertTrue((  "cos" == node.getName() ));
      assertTrue( node.getCharacter() == '\0' );
      assertTrue( node.getInteger() == 0 );
      assertTrue( node.getReal() == 0 );
      assertTrue( node.getExponent() == 0 );
      assertTrue( node.getDenominator() == 1 );
      node.setType(libsbml.AST_PLUS);
      node.setName(name);
      assertTrue( node.getType() == libsbml.AST_NAME );
      assertTrue(( name == node.getName() ));
      assertTrue( node.getCharacter() == '+' );
      assertTrue( node.getInteger() == 0 );
      assertTrue( node.getReal() == 0 );
      assertTrue( node.getExponent() == 0 );
      assertTrue( node.getDenominator() == 1 );
      node = null;
    }

    public void test_ASTNode_setName_2()
    {
      string name =  "foo";
      ASTNode node = new  ASTNode();
      node.setId( "s");
      assertTrue( node.getType() == libsbml.AST_UNKNOWN );
      node.setName(name);
      assertTrue( node.getType() == libsbml.AST_NAME );
      string id = node.getId();
      assertTrue( (  "s" != id ) == false );
      assertTrue( ( name != node.getName() ) == false );
      node = null;
    }

    public void test_ASTNode_setName_3()
    {
      string name =  "foo";
      ASTNode node = new  ASTNode(libsbml.AST_PLUS);
      node.setId( "s");
      node.setName(name);
      assertTrue( node.getType() == libsbml.AST_NAME );
      string id = node.getId();
      assertTrue( (  "s" != id ) == false );
      assertTrue( ( name != node.getName() ) == false );
      node = null;
    }

    public void test_ASTNode_setName_4()
    {
      string name =  "foo";
      ASTNode node = new  ASTNode(libsbml.AST_INTEGER);
      node.setId( "s");
      node.setName(name);
      assertTrue( node.getType() == libsbml.AST_NAME );
      string id = node.getId();
      assertTrue( (  "s" != id ) == false );
      assertTrue( ( name != node.getName() ) == false );
      node = null;
    }

    public void test_ASTNode_setName_5()
    {
      string name =  "foo";
      ASTNode node = new  ASTNode(libsbml.AST_INTEGER);
      node.setId( "s");
      node.setUnits( "mole");
      node.setName(name);
      assertTrue( node.getType() == libsbml.AST_NAME );
      string id = node.getId();
      string units = node.getUnits();
      assertTrue( (  "s" != id ) == false );
      assertTrue( ( name != node.getName() ) == false );
      assertTrue( (  "" != units ) == false );
      node = null;
    }

    public void test_ASTNode_setName_override()
    {
      ASTNode node = new  ASTNode(libsbml.AST_FUNCTION_SIN);
      assertTrue((  "sin" == node.getName() ));
      assertTrue( node.getType() == libsbml.AST_FUNCTION_SIN );
      node.setName( "MySinFunc");
      assertTrue((  "MySinFunc" == node.getName() ));
      assertTrue( node.getType() == libsbml.AST_FUNCTION_SIN );
      node.setName(null);
      assertTrue((  "sin" == node.getName() ));
      assertTrue( node.getType() == libsbml.AST_FUNCTION_SIN );
      node = null;
    }

    public void test_ASTNode_setReal()
    {
      ASTNode node = new  ASTNode();
      node.setName( "foo");
      assertTrue( node.getType() == libsbml.AST_NAME );
      node.setValue(32.1);
      assertTrue( node.getType() == libsbml.AST_REAL );
      assertTrue( node.getInteger() == 0 );
      assertTrue( node.getName() == null );
      assertTrue( node.getCharacter() == '\0' );
      assertTrue( node.getReal() == 32.1 );
      assertTrue( node.getExponent() == 0 );
      assertTrue( node.getDenominator() == 1 );
      assertTrue( node.getMantissa() == 32.1 );
      node.setValue(45,90);
      assertTrue( node.getType() == libsbml.AST_RATIONAL );
      assertTrue( node.getInteger() == 45 );
      assertTrue( node.getName() == null );
      assertTrue( node.getCharacter() == '\0' );
      assertTrue( node.getReal() == 0.5 );
      assertTrue( node.getExponent() == 0 );
      assertTrue( node.getDenominator() == 90 );
      assertTrue( node.getMantissa() == 0 );
      node.setValue(32.0,4);
      assertTrue( node.getType() == libsbml.AST_REAL_E );
      assertTrue( node.getInteger() == 0 );
      assertTrue( node.getName() == null );
      assertTrue( node.getCharacter() == '\0' );
      assertTrue( node.getReal() == 320000 );
      assertTrue( node.getExponent() == 4 );
      assertTrue( node.getDenominator() == 1 );
      assertTrue( node.getMantissa() == 32 );
      node = null;
    }

    public void test_ASTNode_setType_1()
    {
      ASTNode node = new  ASTNode();
      node.setName( "foo");
      assertTrue( node.getType() == libsbml.AST_NAME );
      node.setType(libsbml.AST_FUNCTION);
      assertTrue( node.getType() == libsbml.AST_FUNCTION );
      assertTrue((  "foo" == node.getName() ));
      node.setType(libsbml.AST_NAME);
      assertTrue( node.getType() == libsbml.AST_NAME );
      assertTrue((  "foo" == node.getName() ));
      node.setType(libsbml.AST_INTEGER);
      assertTrue( node.getType() == libsbml.AST_INTEGER );
      node.setType(libsbml.AST_REAL);
      assertTrue( node.getType() == libsbml.AST_REAL );
      node.setType(libsbml.AST_UNKNOWN);
      assertTrue( node.getType() == libsbml.AST_UNKNOWN );
      node.setType(libsbml.AST_PLUS);
      assertTrue( node.getType() == libsbml.AST_PLUS );
      assertTrue( node.getCharacter() == '+' );
      node.setType(libsbml.AST_MINUS);
      assertTrue( node.getType() == libsbml.AST_MINUS );
      assertTrue( node.getCharacter() == '-' );
      node.setType(libsbml.AST_TIMES);
      assertTrue( node.getType() == libsbml.AST_TIMES );
      assertTrue( node.getCharacter() == '*' );
      node.setType(libsbml.AST_DIVIDE);
      assertTrue( node.getType() == libsbml.AST_DIVIDE );
      assertTrue( node.getCharacter() == '/' );
      node.setType(libsbml.AST_POWER);
      assertTrue( node.getType() == libsbml.AST_POWER );
      assertTrue( node.getCharacter() == '^' );
      node = null;
    }

    public void test_ASTNode_setType_10()
    {
      ASTNode node = new  ASTNode(libsbml.AST_REAL_E);
      Model m = new  Model(3,1);
      node.setId( "s");
      node.setUnits( "mole");
      node.setValue(2.3,1);
      node.setParentSBMLObject((m));
      assertTrue( node.getType() == libsbml.AST_REAL_E );
      assertTrue( node.getInteger() == 0 );
      assertEquals( true, util_isEqual );
      assertTrue( node.getExponent() == 1 );
      assertTrue( node.getDenominator() == 1 );
      assertTrue( node.getNumerator() == 0 );
      assertEquals( true, util_isEqual );
      string id = node.getId();
      string units = node.getUnits();
      assertTrue( (  "s" != id ) == false );
      assertTrue( (  "mole" != units ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      node.setType(libsbml.AST_PLUS);
      assertTrue( node.getType() == libsbml.AST_PLUS );
      assertTrue( node.getInteger() == 0 );
      assertTrue( node.getMantissa() == 0 );
      assertTrue( node.getExponent() == 0 );
      assertTrue( node.getDenominator() == 1 );
      assertTrue( node.getNumerator() == 0 );
      assertEquals( true, util_isEqual );
      id = node.getId();
      units = node.getUnits();
      assertTrue( (  "s" != id ) == false );
      assertTrue( (  "" != units ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      node = null;
      m = null;
    }

    public void test_ASTNode_setType_11()
    {
      ASTNode node = new  ASTNode(libsbml.AST_REAL);
      Model m = new  Model(3,1);
      node.setId( "s");
      node.setUnits( "mole");
      node.setValue(2.3);
      node.setParentSBMLObject((m));
      assertTrue( node.getType() == libsbml.AST_REAL );
      assertTrue( node.getInteger() == 0 );
      assertEquals( true, util_isEqual );
      assertTrue( node.getExponent() == 0 );
      assertTrue( node.getDenominator() == 1 );
      assertTrue( node.getNumerator() == 0 );
      assertEquals( true, util_isEqual );
      string id = node.getId();
      string units = node.getUnits();
      assertTrue( (  "s" != id ) == false );
      assertTrue( (  "mole" != units ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      node.setType(libsbml.AST_FUNCTION_COS);
      assertTrue( node.getType() == libsbml.AST_FUNCTION_COS );
      assertTrue( node.getInteger() == 0 );
      assertTrue( node.getMantissa() == 0 );
      assertTrue( node.getExponent() == 0 );
      assertTrue( node.getDenominator() == 1 );
      assertTrue( node.getNumerator() == 0 );
      assertEquals( true, util_isEqual );
      id = node.getId();
      units = node.getUnits();
      assertTrue( (  "s" != id ) == false );
      assertTrue( (  "" != units ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      node = null;
      m = null;
    }

    public void test_ASTNode_setType_12()
    {
      ASTNode node = new  ASTNode(libsbml.AST_INTEGER);
      Model m = new  Model(3,1);
      node.setId( "s");
      node.setUnits( "mole");
      node.setValue(2);
      node.setParentSBMLObject((m));
      assertTrue( node.getType() == libsbml.AST_INTEGER );
      assertTrue( node.getInteger() == 2 );
      assertEquals( true, util_isEqual );
      assertTrue( node.getExponent() == 0 );
      assertTrue( node.getDenominator() == 1 );
      assertTrue( node.getNumerator() == 2 );
      assertEquals( true, util_isEqual );
      string id = node.getId();
      string units = node.getUnits();
      assertTrue( (  "s" != id ) == false );
      assertTrue( (  "mole" != units ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      node.setType(libsbml.AST_DIVIDE);
      assertTrue( node.getType() == libsbml.AST_DIVIDE );
      assertTrue( node.getInteger() == 0 );
      assertTrue( node.getMantissa() == 0 );
      assertTrue( node.getExponent() == 0 );
      assertTrue( node.getDenominator() == 1 );
      assertTrue( node.getNumerator() == 0 );
      assertEquals( true, util_isEqual );
      id = node.getId();
      units = node.getUnits();
      assertTrue( (  "s" != id ) == false );
      assertTrue( (  "" != units ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      node = null;
      m = null;
    }

    public void test_ASTNode_setType_13()
    {
      ASTNode node = new  ASTNode(libsbml.AST_NAME);
      Model m = new  Model(3,1);
      node.setId( "s");
      node.setParentSBMLObject((m));
      node.setDefinitionURLString( "my_url");
      node.setName( "t");
      assertTrue( node.getType() == libsbml.AST_NAME );
      string id = node.getId();
      assertTrue( (  "s" != id ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      assertTrue( node.isName() == 1 );
      assertTrue( (  "t" != node.getName() ) == false );
      string url = node.getDefinitionURLString();
      assertTrue( (  "my_url" != url ) == false );
      node.setType(libsbml.AST_FUNCTION);
      assertTrue( node.getType() == libsbml.AST_FUNCTION );
      id = node.getId();
      assertTrue( (  "s" != id ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      assertTrue( node.isName() == 0 );
      assertTrue( (  "t" != node.getName() ) == false );
      url = node.getDefinitionURLString();
      assertTrue( (  "my_url" != url ) == false );
      node = null;
      m = null;
    }

    public void test_ASTNode_setType_14()
    {
      ASTNode node = new  ASTNode(libsbml.AST_NAME_TIME);
      Model m = new  Model(3,1);
      node.setId( "s");
      node.setName( "t");
      node.setParentSBMLObject((m));
      assertTrue( node.getType() == libsbml.AST_NAME_TIME );
      string id = node.getId();
      assertTrue( (  "s" != id ) == false );
      assertTrue( (  "t" != node.getName() ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      assertTrue( node.isName() == 1 );
      assertTrue( node.getReal() == 0 );
      string url = node.getDefinitionURLString();
      assertTrue( (                        "http://www.sbml.org/sbml/symbols/time" != url ) == false );
      node.setType(libsbml.AST_LAMBDA);
      assertTrue( node.getType() == libsbml.AST_LAMBDA );
      id = node.getId();
      assertTrue( (  "s" != id ) == false );
      assertTrue( (  "t" != node.getName() ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      assertTrue( node.isName() == 0 );
      assertTrue( node.getReal() == 0 );
      url = node.getDefinitionURLString();
      assertTrue( (                        "" != url ) == false );
      node = null;
      m = null;
    }

    public void test_ASTNode_setType_15()
    {
      ASTNode node = new  ASTNode(libsbml.AST_NAME_TIME);
      Model m = new  Model(3,1);
      node.setId( "s");
      node.setName( "t");
      node.setParentSBMLObject((m));
      assertTrue( node.getType() == libsbml.AST_NAME_TIME );
      string id = node.getId();
      assertTrue( (  "s" != id ) == false );
      assertTrue( (  "t" != node.getName() ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      assertTrue( node.isName() == 1 );
      assertTrue( node.getReal() == 0 );
      string url = node.getDefinitionURLString();
      assertTrue( (                        "http://www.sbml.org/sbml/symbols/time" != url ) == false );
      node.setType(libsbml.AST_FUNCTION_PIECEWISE);
      assertTrue( node.getType() == libsbml.AST_FUNCTION_PIECEWISE );
      id = node.getId();
      assertTrue( (  "s" != id ) == false );
      assertTrue( (  "t" != node.getName() ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      assertTrue( node.isName() == 0 );
      assertTrue( node.getReal() == 0 );
      url = node.getDefinitionURLString();
      assertTrue( (                        "" != url ) == false );
      node = null;
      m = null;
    }

    public void test_ASTNode_setType_16()
    {
      ASTNode node = new  ASTNode(libsbml.AST_NAME_TIME);
      Model m = new  Model(3,1);
      node.setId( "s");
      node.setName( "t");
      node.setParentSBMLObject((m));
      assertTrue( node.getType() == libsbml.AST_NAME_TIME );
      string id = node.getId();
      assertTrue( (  "s" != id ) == false );
      assertTrue( (  "t" != node.getName() ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      assertTrue( node.isName() == 1 );
      assertTrue( node.getReal() == 0 );
      string url = node.getDefinitionURLString();
      assertTrue( (                        "http://www.sbml.org/sbml/symbols/time" != url ) == false );
      node.setType(libsbml.AST_FUNCTION_DELAY);
      assertTrue( node.getType() == libsbml.AST_FUNCTION_DELAY );
      id = node.getId();
      assertTrue( (  "s" != id ) == false );
      assertTrue( (  "t" != node.getName() ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      assertTrue( node.isName() == 0 );
      assertTrue( node.getReal() == 0 );
      url = node.getDefinitionURLString();
      assertTrue( (                        "http://www.sbml.org/sbml/symbols/delay" != url ) == false );
      node = null;
      m = null;
    }

    public void test_ASTNode_setType_17()
    {
      ASTNode node = new  ASTNode(libsbml.AST_INTEGER);
      Model m = new  Model(3,1);
      node.setId( "s");
      node.setUnits( "mole");
      node.setValue(2);
      node.setParentSBMLObject((m));
      assertTrue( node.getType() == libsbml.AST_INTEGER );
      assertTrue( node.getInteger() == 2 );
      assertEquals( true, util_isEqual );
      assertTrue( node.getExponent() == 0 );
      assertTrue( node.getDenominator() == 1 );
      assertTrue( node.getNumerator() == 2 );
      assertEquals( true, util_isEqual );
      string id = node.getId();
      string units = node.getUnits();
      assertTrue( (  "s" != id ) == false );
      assertTrue( (  "mole" != units ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      string url = node.getDefinitionURLString();
      assertTrue( (                        "" != url ) == false );
      node.setType(libsbml.AST_FUNCTION_DELAY);
      assertTrue( node.getType() == libsbml.AST_FUNCTION_DELAY );
      assertTrue( node.getInteger() == 0 );
      assertTrue( node.getMantissa() == 0 );
      assertTrue( node.getExponent() == 0 );
      assertTrue( node.getDenominator() == 1 );
      assertTrue( node.getNumerator() == 0 );
      assertEquals( true, util_isEqual );
      id = node.getId();
      units = node.getUnits();
      assertTrue( (  "s" != id ) == false );
      assertTrue( (  "" != units ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      url = node.getDefinitionURLString();
      assertTrue( (                        "http://www.sbml.org/sbml/symbols/delay" != url ) == false );
      node = null;
      m = null;
    }

    public void test_ASTNode_setType_18()
    {
      ASTNode node = new  ASTNode(libsbml.AST_PLUS);
      Model m = new  Model(3,1);
      node.setId( "s");
      node.setParentSBMLObject((m));
      assertTrue( node.getType() == libsbml.AST_PLUS );
      assertTrue( node.getInteger() == 0 );
      assertTrue( node.getMantissa() == 0 );
      assertTrue( node.getExponent() == 0 );
      assertTrue( node.getDenominator() == 1 );
      assertTrue( node.getNumerator() == 0 );
      assertEquals( true, util_isEqual );
      string id = node.getId();
      string units = node.getUnits();
      assertTrue( (  "s" != id ) == false );
      assertTrue( (  "" != units ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      node.setType(libsbml.AST_INTEGER);
      assertTrue( node.getType() == libsbml.AST_INTEGER );
      assertTrue( node.getInteger() == 0 );
      assertTrue( node.getMantissa() == 0 );
      assertTrue( node.getExponent() == 0 );
      assertTrue( node.getDenominator() == 1 );
      assertTrue( node.getNumerator() == 0 );
      assertEquals( true, util_isEqual );
      id = node.getId();
      units = node.getUnits();
      assertTrue( (  "s" != id ) == false );
      assertTrue( (  "" != units ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      node = null;
      m = null;
    }

    public void test_ASTNode_setType_19()
    {
      ASTNode node = new  ASTNode(libsbml.AST_FUNCTION_COS);
      Model m = new  Model(3,1);
      node.setId( "s");
      node.setParentSBMLObject((m));
      assertTrue( node.getType() == libsbml.AST_FUNCTION_COS );
      assertTrue( node.getInteger() == 0 );
      assertTrue( node.getMantissa() == 0 );
      assertTrue( node.getExponent() == 0 );
      assertTrue( node.getDenominator() == 1 );
      assertTrue( node.getNumerator() == 0 );
      assertEquals( true, util_isEqual );
      string id = node.getId();
      string units = node.getUnits();
      assertTrue( (  "s" != id ) == false );
      assertTrue( (  "" != units ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      node.setType(libsbml.AST_RATIONAL);
      assertTrue( node.getType() == libsbml.AST_RATIONAL );
      assertTrue( node.getInteger() == 0 );
      assertTrue( node.getMantissa() == 0 );
      assertTrue( node.getExponent() == 0 );
      assertTrue( node.getDenominator() == 1 );
      assertTrue( node.getNumerator() == 0 );
      assertEquals( true, util_isEqual );
      id = node.getId();
      units = node.getUnits();
      assertTrue( (  "s" != id ) == false );
      assertTrue( (  "" != units ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      node = null;
      m = null;
    }

    public void test_ASTNode_setType_2()
    {
      ASTNode node = new  ASTNode(libsbml.AST_INTEGER);
      Model m = new  Model(3,1);
      node.setId( "s");
      node.setUnits( "mole");
      node.setValue(1);
      node.setParentSBMLObject((m));
      assertTrue( node.getType() == libsbml.AST_INTEGER );
      assertTrue( node.getInteger() == 1 );
      string id = node.getId();
      string units = node.getUnits();
      assertTrue( (  "s" != id ) == false );
      assertTrue( (  "mole" != units ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      node.setType(libsbml.AST_REAL);
      assertTrue( node.getType() == libsbml.AST_REAL );
      assertTrue( node.getInteger() == 0 );
      id = node.getId();
      units = node.getUnits();
      assertTrue( (  "s" != id ) == false );
      assertTrue( (  "mole" != units ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      node = null;
      m = null;
    }

    public void test_ASTNode_setType_20()
    {
      ASTNode node = new  ASTNode(libsbml.AST_DIVIDE);
      Model m = new  Model(3,1);
      node.setId( "s");
      node.setParentSBMLObject((m));
      assertTrue( node.getType() == libsbml.AST_DIVIDE );
      assertTrue( node.getInteger() == 0 );
      assertTrue( node.getMantissa() == 0 );
      assertTrue( node.getExponent() == 0 );
      assertTrue( node.getDenominator() == 1 );
      assertTrue( node.getNumerator() == 0 );
      assertEquals( true, util_isEqual );
      string id = node.getId();
      string units = node.getUnits();
      assertTrue( (  "s" != id ) == false );
      assertTrue( (  "" != units ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      node.setType(libsbml.AST_REAL_E);
      assertTrue( node.getType() == libsbml.AST_REAL_E );
      assertTrue( node.getInteger() == 0 );
      assertTrue( node.getMantissa() == 0 );
      assertTrue( node.getExponent() == 0 );
      assertTrue( node.getDenominator() == 1 );
      assertTrue( node.getNumerator() == 0 );
      assertEquals( true, util_isEqual );
      id = node.getId();
      units = node.getUnits();
      assertTrue( (  "s" != id ) == false );
      assertTrue( (  "" != units ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      node = null;
      m = null;
    }

    public void test_ASTNode_setType_21()
    {
      ASTNode node = new  ASTNode(libsbml.AST_FUNCTION);
      Model m = new  Model(3,1);
      node.setId( "s");
      node.setParentSBMLObject((m));
      assertTrue( node.getType() == libsbml.AST_FUNCTION );
      assertTrue( node.getInteger() == 0 );
      assertTrue( node.getMantissa() == 0 );
      assertTrue( node.getExponent() == 0 );
      assertTrue( node.getDenominator() == 1 );
      assertTrue( node.getNumerator() == 0 );
      assertEquals( true, util_isEqual );
      string id = node.getId();
      string units = node.getUnits();
      assertTrue( (  "s" != id ) == false );
      assertTrue( (  "" != units ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      node.setType(libsbml.AST_REAL);
      assertTrue( node.getType() == libsbml.AST_REAL );
      assertTrue( node.getInteger() == 0 );
      assertTrue( node.getMantissa() == 0 );
      assertTrue( node.getExponent() == 0 );
      assertTrue( node.getDenominator() == 1 );
      assertTrue( node.getNumerator() == 0 );
      assertEquals( true, util_isEqual );
      id = node.getId();
      units = node.getUnits();
      assertTrue( (  "s" != id ) == false );
      assertTrue( (  "" != units ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      node = null;
      m = null;
    }

    public void test_ASTNode_setType_22()
    {
      ASTNode node = new  ASTNode(libsbml.AST_PLUS);
      Model m = new  Model(3,1);
      node.setId( "s");
      node.setParentSBMLObject((m));
      assertTrue( node.getType() == libsbml.AST_PLUS );
      assertTrue( node.getInteger() == 0 );
      assertTrue( node.getMantissa() == 0 );
      assertTrue( node.getExponent() == 0 );
      assertTrue( node.getDenominator() == 1 );
      assertTrue( node.getNumerator() == 0 );
      assertEquals( true, util_isEqual );
      string id = node.getId();
      string units = node.getUnits();
      assertTrue( (  "s" != id ) == false );
      assertTrue( (  "" != units ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      assertTrue( node.getName() == null );
      assertTrue( node.isName() == 0 );
      node.setType(libsbml.AST_NAME);
      assertTrue( node.getType() == libsbml.AST_NAME );
      assertTrue( node.getInteger() == 0 );
      assertTrue( node.getMantissa() == 0 );
      assertTrue( node.getExponent() == 0 );
      assertTrue( node.getDenominator() == 1 );
      assertTrue( node.getNumerator() == 0 );
      assertEquals( true, util_isEqual );
      id = node.getId();
      units = node.getUnits();
      assertTrue( (  "s" != id ) == false );
      assertTrue( (  "" != units ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      assertTrue( node.getName() == null );
      assertTrue( node.isName() == 1 );
      node = null;
      m = null;
    }

    public void test_ASTNode_setType_23()
    {
      ASTNode node = new  ASTNode(libsbml.AST_PLUS);
      Model m = new  Model(3,1);
      node.setId( "s");
      node.setParentSBMLObject((m));
      assertTrue( node.getType() == libsbml.AST_PLUS );
      assertTrue( node.getInteger() == 0 );
      assertTrue( node.getMantissa() == 0 );
      assertTrue( node.getExponent() == 0 );
      assertTrue( node.getDenominator() == 1 );
      assertTrue( node.getNumerator() == 0 );
      assertEquals( true, util_isEqual );
      string id = node.getId();
      string units = node.getUnits();
      assertTrue( (  "s" != id ) == false );
      assertTrue( (  "" != units ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      assertTrue( node.isConstant() == 0 );
      node.setType(libsbml.AST_CONSTANT_E);
      assertTrue( node.getType() == libsbml.AST_CONSTANT_E );
      assertTrue( node.getInteger() == 0 );
      assertTrue( node.getMantissa() == 0 );
      assertTrue( node.getExponent() == 0 );
      assertTrue( node.getDenominator() == 1 );
      assertTrue( node.getNumerator() == 0 );
      assertEquals( true, util_isEqual );
      id = node.getId();
      units = node.getUnits();
      assertTrue( (  "s" != id ) == false );
      assertTrue( (  "" != units ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      assertTrue( node.isConstant() == 1 );
      node = null;
      m = null;
    }

    public void test_ASTNode_setType_24()
    {
      ASTNode node = new  ASTNode(libsbml.AST_PLUS);
      Model m = new  Model(3,1);
      node.setId( "s");
      node.setParentSBMLObject((m));
      assertTrue( node.getType() == libsbml.AST_PLUS );
      assertTrue( node.getInteger() == 0 );
      assertTrue( node.getMantissa() == 0 );
      assertTrue( node.getExponent() == 0 );
      assertTrue( node.getDenominator() == 1 );
      assertTrue( node.getNumerator() == 0 );
      assertEquals( true, util_isEqual );
      string id = node.getId();
      string units = node.getUnits();
      assertTrue( (  "s" != id ) == false );
      assertTrue( (  "" != units ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      assertTrue( node.getName() == null );
      assertTrue( node.isName() == 0 );
      string url = node.getDefinitionURLString();
      assertTrue( (  "" != url ) == false );
      assertTrue( node.isConstant() == 0 );
      node.setType(libsbml.AST_NAME_AVOGADRO);
      assertTrue( node.getType() == libsbml.AST_NAME_AVOGADRO );
      assertTrue( node.getInteger() == 0 );
      assertEquals( true, util_isEqual );
      assertTrue( node.getExponent() == 0 );
      assertTrue( node.getDenominator() == 1 );
      assertTrue( node.getNumerator() == 0 );
      assertEquals( true, util_isEqual );
      id = node.getId();
      units = node.getUnits();
      assertTrue( (  "s" != id ) == false );
      assertTrue( (  "" != units ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      assertTrue( (  "avogadro" != node.getName() ) == false );
      assertTrue( node.isName() == 1 );
      url = node.getDefinitionURLString();
      assertTrue( (      "http://www.sbml.org/sbml/symbols/avogadro" != url ) == false );
      assertTrue( node.isConstant() == 1 );
      node = null;
      m = null;
    }

    public void test_ASTNode_setType_25()
    {
      ASTNode node = new  ASTNode(libsbml.AST_PLUS);
      Model m = new  Model(3,1);
      node.setId( "s");
      node.setParentSBMLObject((m));
      assertTrue( node.getType() == libsbml.AST_PLUS );
      assertTrue( node.getInteger() == 0 );
      assertTrue( node.getMantissa() == 0 );
      assertTrue( node.getExponent() == 0 );
      assertTrue( node.getDenominator() == 1 );
      assertTrue( node.getNumerator() == 0 );
      assertEquals( true, util_isEqual );
      string id = node.getId();
      string units = node.getUnits();
      assertTrue( (  "s" != id ) == false );
      assertTrue( (  "" != units ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      assertTrue( node.getName() == null );
      assertTrue( node.isName() == 0 );
      string url = node.getDefinitionURLString();
      assertTrue( (  "" != url ) == false );
      assertTrue( node.isConstant() == 0 );
      node.setType(libsbml.AST_NAME_TIME);
      assertTrue( node.getType() == libsbml.AST_NAME_TIME );
      assertTrue( node.getInteger() == 0 );
      assertEquals( true, util_isEqual );
      assertTrue( node.getExponent() == 0 );
      assertTrue( node.getDenominator() == 1 );
      assertTrue( node.getNumerator() == 0 );
      assertEquals( true, util_isEqual );
      id = node.getId();
      units = node.getUnits();
      assertTrue( (  "s" != id ) == false );
      assertTrue( (  "" != units ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      assertTrue( node.getName() == null );
      assertTrue( node.isName() == 1 );
      url = node.getDefinitionURLString();
      assertTrue( (      "http://www.sbml.org/sbml/symbols/time" != url ) == false );
      assertTrue( node.isConstant() == 0 );
      node = null;
      m = null;
    }

    public void test_ASTNode_setType_26()
    {
      ASTNode node = new  ASTNode(libsbml.AST_FUNCTION_DELAY);
      Model m = new  Model(3,1);
      node.setId( "s");
      node.setParentSBMLObject((m));
      assertTrue( node.getType() == libsbml.AST_FUNCTION_DELAY );
      assertTrue( node.getInteger() == 0 );
      assertTrue( node.getMantissa() == 0 );
      assertTrue( node.getExponent() == 0 );
      assertTrue( node.getDenominator() == 1 );
      assertTrue( node.getNumerator() == 0 );
      assertEquals( true, util_isEqual );
      string id = node.getId();
      string units = node.getUnits();
      assertTrue( (  "s" != id ) == false );
      assertTrue( (  "" != units ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      assertTrue( (  "delay" != node.getName() ) == false );
      assertTrue( node.isName() == 0 );
      string url = node.getDefinitionURLString();
      assertTrue( (      "http://www.sbml.org/sbml/symbols/delay" != url ) == false );
      node.setType(libsbml.AST_NAME_TIME);
      assertTrue( node.getType() == libsbml.AST_NAME_TIME );
      assertTrue( node.getInteger() == 0 );
      assertEquals( true, util_isEqual );
      assertTrue( node.getExponent() == 0 );
      assertTrue( node.getDenominator() == 1 );
      assertTrue( node.getNumerator() == 0 );
      assertEquals( true, util_isEqual );
      id = node.getId();
      units = node.getUnits();
      assertTrue( (  "s" != id ) == false );
      assertTrue( (  "" != units ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      assertTrue( node.getName() == null );
      assertTrue( node.isName() == 1 );
      url = node.getDefinitionURLString();
      assertTrue( (      "http://www.sbml.org/sbml/symbols/time" != url ) == false );
      node = null;
      m = null;
    }

    public void test_ASTNode_setType_27()
    {
      Model m = new  Model(3,1);
      ASTNode node = new  ASTNode(libsbml.AST_PLUS);
      node.setId( "s");
      node.setParentSBMLObject((m));
      ASTNode c1 = new  ASTNode(libsbml.AST_NAME);
      c1.setId( "c1");
      c1.setName( "child");
      node.addChild(c1);
      ASTNode c2 = new  ASTNode(libsbml.AST_REAL);
      c2.setParentSBMLObject((m));
      c2.setValue(3.2);
      node.addChild(c2);
      assertTrue( node.getType() == libsbml.AST_PLUS );
      assertTrue( node.getNumChildren() == 2 );
      string id = node.getId();
      assertTrue( (  "s" != id ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      ASTNode child = node.getChild(0);
      assertTrue( child.getType() == libsbml.AST_NAME );
      assertTrue( child.getNumChildren() == 0 );
      id = child.getId();
      assertTrue( (  "c1" != id ) == false );
      assertTrue( child.getParentSBMLObject() == null );
      assertTrue( (  "child" != child.getName() ) == false );
      child = node.getChild(1);
      assertTrue( child.getType() == libsbml.AST_REAL );
      assertTrue( child.getNumChildren() == 0 );
      id = child.getId();
      assertTrue( (  "" != id ) == false );
      assertTrue( child.getParentSBMLObject() == (m) );
      assertEquals( true, util_isEqual );
      node.setType(libsbml.AST_FUNCTION_COS);
      assertTrue( node.getType() == libsbml.AST_FUNCTION_COS );
      assertTrue( node.getNumChildren() == 2 );
      id = node.getId();
      assertTrue( (  "s" != id ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      child = node.getChild(0);
      assertTrue( child.getType() == libsbml.AST_NAME );
      assertTrue( child.getNumChildren() == 0 );
      id = child.getId();
      assertTrue( (  "c1" != id ) == false );
      assertTrue( child.getParentSBMLObject() == null );
      assertTrue( (  "child" != child.getName() ) == false );
      child = node.getChild(1);
      assertTrue( child.getType() == libsbml.AST_REAL );
      assertTrue( child.getNumChildren() == 0 );
      id = child.getId();
      assertTrue( (  "" != id ) == false );
      assertTrue( child.getParentSBMLObject() == (m) );
      assertEquals( true, util_isEqual );
      node = null;
      m = null;
    }

    public void test_ASTNode_setType_28()
    {
      Model m = new  Model(3,1);
      ASTNode node = new  ASTNode(libsbml.AST_DIVIDE);
      node.setId( "s");
      node.setParentSBMLObject((m));
      ASTNode c1 = new  ASTNode(libsbml.AST_NAME);
      c1.setId( "c1");
      c1.setName( "child");
      node.addChild(c1);
      ASTNode c2 = new  ASTNode(libsbml.AST_REAL);
      c2.setParentSBMLObject((m));
      c2.setValue(3.2);
      node.addChild(c2);
      assertTrue( node.getType() == libsbml.AST_DIVIDE );
      assertTrue( node.getNumChildren() == 2 );
      string id = node.getId();
      assertTrue( (  "s" != id ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      ASTNode child = node.getChild(0);
      assertTrue( child.getType() == libsbml.AST_NAME );
      assertTrue( child.getNumChildren() == 0 );
      id = child.getId();
      assertTrue( (  "c1" != id ) == false );
      assertTrue( child.getParentSBMLObject() == null );
      assertTrue( (  "child" != child.getName() ) == false );
      child = node.getChild(1);
      assertTrue( child.getType() == libsbml.AST_REAL );
      assertTrue( child.getNumChildren() == 0 );
      id = child.getId();
      assertTrue( (  "" != id ) == false );
      assertTrue( child.getParentSBMLObject() == (m) );
      assertEquals( true, util_isEqual );
      node.setType(libsbml.AST_RELATIONAL_NEQ);
      assertTrue( node.getType() == libsbml.AST_RELATIONAL_NEQ );
      assertTrue( node.getNumChildren() == 2 );
      id = node.getId();
      assertTrue( (  "s" != id ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      child = node.getChild(0);
      assertTrue( child.getType() == libsbml.AST_NAME );
      assertTrue( child.getNumChildren() == 0 );
      id = child.getId();
      assertTrue( (  "c1" != id ) == false );
      assertTrue( child.getParentSBMLObject() == null );
      assertTrue( (  "child" != child.getName() ) == false );
      child = node.getChild(1);
      assertTrue( child.getType() == libsbml.AST_REAL );
      assertTrue( child.getNumChildren() == 0 );
      id = child.getId();
      assertTrue( (  "" != id ) == false );
      assertTrue( child.getParentSBMLObject() == (m) );
      assertEquals( true, util_isEqual );
      node = null;
      m = null;
    }

    public void test_ASTNode_setType_29()
    {
      Model m = new  Model(3,1);
      ASTNode node = new  ASTNode(libsbml.AST_DIVIDE);
      node.setId( "s");
      node.setParentSBMLObject((m));
      ASTNode c1 = new  ASTNode(libsbml.AST_NAME);
      c1.setId( "c1");
      c1.setName( "child");
      node.addChild(c1);
      ASTNode c2 = new  ASTNode(libsbml.AST_REAL);
      c2.setParentSBMLObject((m));
      c2.setValue(3.2);
      node.addChild(c2);
      assertTrue( node.getType() == libsbml.AST_DIVIDE );
      assertTrue( node.getNumChildren() == 2 );
      string id = node.getId();
      assertTrue( (  "s" != id ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      ASTNode child = node.getChild(0);
      assertTrue( child.getType() == libsbml.AST_NAME );
      assertTrue( child.getNumChildren() == 0 );
      id = child.getId();
      assertTrue( (  "c1" != id ) == false );
      assertTrue( child.getParentSBMLObject() == null );
      assertTrue( (  "child" != child.getName() ) == false );
      child = node.getChild(1);
      assertTrue( child.getType() == libsbml.AST_REAL );
      assertTrue( child.getNumChildren() == 0 );
      id = child.getId();
      assertTrue( (  "" != id ) == false );
      assertTrue( child.getParentSBMLObject() == (m) );
      assertEquals( true, util_isEqual );
      node.setType(libsbml.AST_LOGICAL_OR);
      assertTrue( node.getType() == libsbml.AST_LOGICAL_OR );
      assertTrue( node.getNumChildren() == 2 );
      id = node.getId();
      assertTrue( (  "s" != id ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      child = node.getChild(0);
      assertTrue( child.getType() == libsbml.AST_NAME );
      assertTrue( child.getNumChildren() == 0 );
      id = child.getId();
      assertTrue( (  "c1" != id ) == false );
      assertTrue( child.getParentSBMLObject() == null );
      assertTrue( (  "child" != child.getName() ) == false );
      child = node.getChild(1);
      assertTrue( child.getType() == libsbml.AST_REAL );
      assertTrue( child.getNumChildren() == 0 );
      id = child.getId();
      assertTrue( (  "" != id ) == false );
      assertTrue( child.getParentSBMLObject() == (m) );
      assertEquals( true, util_isEqual );
      node = null;
      m = null;
    }

    public void test_ASTNode_setType_3()
    {
      ASTNode node = new  ASTNode(libsbml.AST_REAL_E);
      Model m = new  Model(3,1);
      node.setId( "s");
      node.setUnits( "mole");
      node.setValue(2.3,1);
      node.setParentSBMLObject((m));
      assertTrue( node.getType() == libsbml.AST_REAL_E );
      assertTrue( node.getInteger() == 0 );
      assertEquals( true, util_isEqual );
      assertTrue( node.getExponent() == 1 );
      assertTrue( node.getDenominator() == 1 );
      assertTrue( node.getNumerator() == 0 );
      assertEquals( true, util_isEqual );
      string id = node.getId();
      string units = node.getUnits();
      assertTrue( (  "s" != id ) == false );
      assertTrue( (  "mole" != units ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      node.setType(libsbml.AST_RATIONAL);
      assertTrue( node.getType() == libsbml.AST_RATIONAL );
      assertTrue( node.getInteger() == 0 );
      assertTrue( node.getMantissa() == 0 );
      assertTrue( node.getExponent() == 0 );
      assertTrue( node.getDenominator() == 1 );
      assertTrue( node.getNumerator() == 0 );
      assertTrue( node.getReal() == 0 );
      id = node.getId();
      units = node.getUnits();
      assertTrue( (  "s" != id ) == false );
      assertTrue( (  "mole" != units ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      node = null;
      m = null;
    }

    public void test_ASTNode_setType_30()
    {
      Model m = new  Model(3,1);
      ASTNode node = new  ASTNode(libsbml.AST_DIVIDE);
      node.setId( "s");
      node.setParentSBMLObject((m));
      ASTNode c1 = new  ASTNode(libsbml.AST_NAME);
      c1.setId( "c1");
      c1.setName( "child");
      node.addChild(c1);
      ASTNode c2 = new  ASTNode(libsbml.AST_REAL);
      c2.setParentSBMLObject((m));
      c2.setValue(3.2);
      node.addChild(c2);
      assertTrue( node.getType() == libsbml.AST_DIVIDE );
      assertTrue( node.getNumChildren() == 2 );
      string id = node.getId();
      assertTrue( (  "s" != id ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      ASTNode child = node.getChild(0);
      assertTrue( child.getType() == libsbml.AST_NAME );
      assertTrue( child.getNumChildren() == 0 );
      id = child.getId();
      assertTrue( (  "c1" != id ) == false );
      assertTrue( child.getParentSBMLObject() == null );
      assertTrue( (  "child" != child.getName() ) == false );
      child = node.getChild(1);
      assertTrue( child.getType() == libsbml.AST_REAL );
      assertTrue( child.getNumChildren() == 0 );
      id = child.getId();
      assertTrue( (  "" != id ) == false );
      assertTrue( child.getParentSBMLObject() == (m) );
      assertEquals( true, util_isEqual );
      node.setType(libsbml.AST_FUNCTION);
      assertTrue( node.getType() == libsbml.AST_FUNCTION );
      assertTrue( node.getNumChildren() == 2 );
      id = node.getId();
      assertTrue( (  "s" != id ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      child = node.getChild(0);
      assertTrue( child.getType() == libsbml.AST_NAME );
      assertTrue( child.getNumChildren() == 0 );
      id = child.getId();
      assertTrue( (  "c1" != id ) == false );
      assertTrue( child.getParentSBMLObject() == null );
      assertTrue( (  "child" != child.getName() ) == false );
      child = node.getChild(1);
      assertTrue( child.getType() == libsbml.AST_REAL );
      assertTrue( child.getNumChildren() == 0 );
      id = child.getId();
      assertTrue( (  "" != id ) == false );
      assertTrue( child.getParentSBMLObject() == (m) );
      assertEquals( true, util_isEqual );
      node = null;
      m = null;
    }

    public void test_ASTNode_setType_31()
    {
      Model m = new  Model(3,1);
      ASTNode node = new  ASTNode(libsbml.AST_FUNCTION_DELAY);
      node.setId( "s");
      node.setParentSBMLObject((m));
      ASTNode c1 = new  ASTNode(libsbml.AST_NAME);
      c1.setId( "c1");
      c1.setName( "child");
      node.addChild(c1);
      ASTNode c2 = new  ASTNode(libsbml.AST_REAL);
      c2.setParentSBMLObject((m));
      c2.setValue(3.2);
      node.addChild(c2);
      assertTrue( node.getType() == libsbml.AST_FUNCTION_DELAY );
      assertTrue( node.getNumChildren() == 2 );
      string id = node.getId();
      assertTrue( (  "s" != id ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      assertTrue( (  "delay" != node.getName() ) == false );
      string url = node.getDefinitionURLString();
      assertTrue( (      "http://www.sbml.org/sbml/symbols/delay" != url ) == false );
      ASTNode child = node.getChild(0);
      assertTrue( child.getType() == libsbml.AST_NAME );
      assertTrue( child.getNumChildren() == 0 );
      id = child.getId();
      assertTrue( (  "c1" != id ) == false );
      assertTrue( child.getParentSBMLObject() == null );
      assertTrue( (  "child" != child.getName() ) == false );
      child = node.getChild(1);
      assertTrue( child.getType() == libsbml.AST_REAL );
      assertTrue( child.getNumChildren() == 0 );
      id = child.getId();
      assertTrue( (  "" != id ) == false );
      assertTrue( child.getParentSBMLObject() == (m) );
      assertEquals( true, util_isEqual );
      node.setType(libsbml.AST_FUNCTION);
      assertTrue( node.getType() == libsbml.AST_FUNCTION );
      assertTrue( node.getNumChildren() == 2 );
      id = node.getId();
      assertTrue( (  "s" != id ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      assertTrue( node.getName() == null );
      url = node.getDefinitionURLString();
      assertTrue( (      "http://www.sbml.org/sbml/symbols/delay" != url ) == false );
      child = node.getChild(0);
      assertTrue( child.getType() == libsbml.AST_NAME );
      assertTrue( child.getNumChildren() == 0 );
      id = child.getId();
      assertTrue( (  "c1" != id ) == false );
      assertTrue( child.getParentSBMLObject() == null );
      assertTrue( (  "child" != child.getName() ) == false );
      child = node.getChild(1);
      assertTrue( child.getType() == libsbml.AST_REAL );
      assertTrue( child.getNumChildren() == 0 );
      id = child.getId();
      assertTrue( (  "" != id ) == false );
      assertTrue( child.getParentSBMLObject() == (m) );
      assertEquals( true, util_isEqual );
      node = null;
      m = null;
    }

    public void test_ASTNode_setType_32()
    {
      Model m = new  Model(3,1);
      ASTNode node = new  ASTNode(libsbml.AST_DIVIDE);
      node.setId( "s");
      node.setParentSBMLObject((m));
      ASTNode c1 = new  ASTNode(libsbml.AST_NAME);
      c1.setId( "c1");
      c1.setName( "child");
      node.addChild(c1);
      ASTNode c2 = new  ASTNode(libsbml.AST_REAL);
      c2.setParentSBMLObject((m));
      c2.setValue(3.2);
      node.addChild(c2);
      assertTrue( node.getType() == libsbml.AST_DIVIDE );
      assertTrue( node.getNumChildren() == 2 );
      string id = node.getId();
      assertTrue( (  "s" != id ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      ASTNode child = node.getChild(0);
      assertTrue( child.getType() == libsbml.AST_NAME );
      assertTrue( child.getNumChildren() == 0 );
      id = child.getId();
      assertTrue( (  "c1" != id ) == false );
      assertTrue( child.getParentSBMLObject() == null );
      assertTrue( (  "child" != child.getName() ) == false );
      child = node.getChild(1);
      assertTrue( child.getType() == libsbml.AST_REAL );
      assertTrue( child.getNumChildren() == 0 );
      id = child.getId();
      assertTrue( (  "" != id ) == false );
      assertTrue( child.getParentSBMLObject() == (m) );
      assertEquals( true, util_isEqual );
      node.setType(libsbml.AST_LAMBDA);
      assertTrue( node.getType() == libsbml.AST_LAMBDA );
      assertTrue( node.getNumChildren() == 2 );
      id = node.getId();
      assertTrue( (  "s" != id ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      child = node.getChild(0);
      assertTrue( child.getType() == libsbml.AST_NAME );
      assertTrue( child.getNumChildren() == 0 );
      id = child.getId();
      assertTrue( (  "c1" != id ) == false );
      assertTrue( child.getParentSBMLObject() == null );
      assertTrue( (  "child" != child.getName() ) == false );
      child = node.getChild(1);
      assertTrue( child.getType() == libsbml.AST_REAL );
      assertTrue( child.getNumChildren() == 0 );
      id = child.getId();
      assertTrue( (  "" != id ) == false );
      assertTrue( child.getParentSBMLObject() == (m) );
      assertEquals( true, util_isEqual );
      node = null;
      m = null;
    }

    public void test_ASTNode_setType_33()
    {
      Model m = new  Model(3,1);
      ASTNode node = new  ASTNode(libsbml.AST_DIVIDE);
      node.setId( "s");
      node.setParentSBMLObject((m));
      ASTNode c1 = new  ASTNode(libsbml.AST_NAME);
      c1.setId( "c1");
      c1.setName( "child");
      node.addChild(c1);
      ASTNode c2 = new  ASTNode(libsbml.AST_REAL);
      c2.setParentSBMLObject((m));
      c2.setValue(3.2);
      node.addChild(c2);
      assertTrue( node.getType() == libsbml.AST_DIVIDE );
      assertTrue( node.getNumChildren() == 2 );
      string id = node.getId();
      assertTrue( (  "s" != id ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      ASTNode child = node.getChild(0);
      assertTrue( child.getType() == libsbml.AST_NAME );
      assertTrue( child.getNumChildren() == 0 );
      id = child.getId();
      assertTrue( (  "c1" != id ) == false );
      assertTrue( child.getParentSBMLObject() == null );
      assertTrue( (  "child" != child.getName() ) == false );
      child = node.getChild(1);
      assertTrue( child.getType() == libsbml.AST_REAL );
      assertTrue( child.getNumChildren() == 0 );
      id = child.getId();
      assertTrue( (  "" != id ) == false );
      assertTrue( child.getParentSBMLObject() == (m) );
      assertEquals( true, util_isEqual );
      node.setType(libsbml.AST_FUNCTION_PIECEWISE);
      assertTrue( node.getType() == libsbml.AST_FUNCTION_PIECEWISE );
      assertTrue( node.getNumChildren() == 2 );
      id = node.getId();
      assertTrue( (  "s" != id ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      child = node.getChild(0);
      assertTrue( child.getType() == libsbml.AST_NAME );
      assertTrue( child.getNumChildren() == 0 );
      id = child.getId();
      assertTrue( (  "c1" != id ) == false );
      assertTrue( child.getParentSBMLObject() == null );
      assertTrue( (  "child" != child.getName() ) == false );
      child = node.getChild(1);
      assertTrue( child.getType() == libsbml.AST_REAL );
      assertTrue( child.getNumChildren() == 0 );
      id = child.getId();
      assertTrue( (  "" != id ) == false );
      assertTrue( child.getParentSBMLObject() == (m) );
      assertEquals( true, util_isEqual );
      node = null;
      m = null;
    }

    public void test_ASTNode_setType_34()
    {
      Model m = new  Model(3,1);
      ASTNode node = new  ASTNode(libsbml.AST_FUNCTION);
      node.setId( "s");
      node.setParentSBMLObject((m));
      node.setName( "my_func");
      node.setDefinitionURLString( "my_url");
      ASTNode c1 = new  ASTNode(libsbml.AST_NAME);
      c1.setId( "c1");
      c1.setName( "child");
      node.addChild(c1);
      ASTNode c2 = new  ASTNode(libsbml.AST_REAL);
      c2.setParentSBMLObject((m));
      c2.setValue(3.2);
      node.addChild(c2);
      assertTrue( node.getType() == libsbml.AST_FUNCTION );
      assertTrue( node.getNumChildren() == 2 );
      string id = node.getId();
      assertTrue( (  "s" != id ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      assertTrue( (  "my_func" != node.getName() ) == false );
      string url = node.getDefinitionURLString();
      assertTrue( (      "my_url" != url ) == false );
      ASTNode child = node.getChild(0);
      assertTrue( child.getType() == libsbml.AST_NAME );
      assertTrue( child.getNumChildren() == 0 );
      id = child.getId();
      assertTrue( (  "c1" != id ) == false );
      assertTrue( child.getParentSBMLObject() == null );
      assertTrue( (  "child" != child.getName() ) == false );
      child = node.getChild(1);
      assertTrue( child.getType() == libsbml.AST_REAL );
      assertTrue( child.getNumChildren() == 0 );
      id = child.getId();
      assertTrue( (  "" != id ) == false );
      assertTrue( child.getParentSBMLObject() == (m) );
      assertEquals( true, util_isEqual );
      node.setType(libsbml.AST_FUNCTION_DELAY);
      assertTrue( node.getType() == libsbml.AST_FUNCTION_DELAY );
      assertTrue( node.getNumChildren() == 2 );
      id = node.getId();
      assertTrue( (  "s" != id ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      assertTrue( (  "my_func" != node.getName() ) == false );
      url = node.getDefinitionURLString();
      assertTrue( (      "http://www.sbml.org/sbml/symbols/delay" != url ) == false );
      child = node.getChild(0);
      assertTrue( child.getType() == libsbml.AST_NAME );
      assertTrue( child.getNumChildren() == 0 );
      id = child.getId();
      assertTrue( (  "c1" != id ) == false );
      assertTrue( child.getParentSBMLObject() == null );
      assertTrue( (  "child" != child.getName() ) == false );
      child = node.getChild(1);
      assertTrue( child.getType() == libsbml.AST_REAL );
      assertTrue( child.getNumChildren() == 0 );
      id = child.getId();
      assertTrue( (  "" != id ) == false );
      assertTrue( child.getParentSBMLObject() == (m) );
      assertEquals( true, util_isEqual );
      node = null;
      m = null;
    }

    public void test_ASTNode_setType_35()
    {
      Model m = new  Model(3,1);
      ASTNode node = new  ASTNode(libsbml.AST_FUNCTION);
      node.setId( "s");
      node.setParentSBMLObject((m));
      node.setName( "my_func");
      node.setDefinitionURLString( "my_url");
      ASTNode c1 = new  ASTNode(libsbml.AST_NAME);
      c1.setId( "c1");
      c1.setName( "child");
      node.addChild(c1);
      ASTNode c2 = new  ASTNode(libsbml.AST_REAL);
      c2.setParentSBMLObject((m));
      c2.setValue(3.2);
      node.addChild(c2);
      assertTrue( node.getType() == libsbml.AST_FUNCTION );
      assertTrue( node.getNumChildren() == 2 );
      string id = node.getId();
      assertTrue( (  "s" != id ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      assertTrue( (  "my_func" != node.getName() ) == false );
      string url = node.getDefinitionURLString();
      assertTrue( (      "my_url" != url ) == false );
      ASTNode child = node.getChild(0);
      assertTrue( child.getType() == libsbml.AST_NAME );
      assertTrue( child.getNumChildren() == 0 );
      id = child.getId();
      assertTrue( (  "c1" != id ) == false );
      assertTrue( child.getParentSBMLObject() == null );
      assertTrue( (  "child" != child.getName() ) == false );
      child = node.getChild(1);
      assertTrue( child.getType() == libsbml.AST_REAL );
      assertTrue( child.getNumChildren() == 0 );
      id = child.getId();
      assertTrue( (  "" != id ) == false );
      assertTrue( child.getParentSBMLObject() == (m) );
      assertEquals( true, util_isEqual );
      node.setType(libsbml.AST_LAMBDA);
      assertTrue( node.getType() == libsbml.AST_LAMBDA );
      assertTrue( node.getNumChildren() == 2 );
      id = node.getId();
      assertTrue( (  "s" != id ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      assertTrue( (  "my_func" != node.getName() ) == false );
      url = node.getDefinitionURLString();
      assertTrue( (  "" != url ) == false );
      child = node.getChild(0);
      assertTrue( child.getType() == libsbml.AST_NAME );
      assertTrue( child.getNumChildren() == 0 );
      id = child.getId();
      assertTrue( (  "c1" != id ) == false );
      assertTrue( child.getParentSBMLObject() == null );
      assertTrue( (  "child" != child.getName() ) == false );
      child = node.getChild(1);
      assertTrue( child.getType() == libsbml.AST_REAL );
      assertTrue( child.getNumChildren() == 0 );
      id = child.getId();
      assertTrue( (  "" != id ) == false );
      assertTrue( child.getParentSBMLObject() == (m) );
      assertEquals( true, util_isEqual );
      node = null;
      m = null;
    }

    public void test_ASTNode_setType_36()
    {
      Model m = new  Model(3,2);
      ASTNode node = new  ASTNode(libsbml.AST_DIVIDE);
      node.setId( "s");
      node.setParentSBMLObject((m));
      ASTNode c1 = new  ASTNode(libsbml.AST_NAME);
      c1.setId( "c1");
      c1.setName( "child");
      node.addChild(c1);
      ASTNode c2 = new  ASTNode(libsbml.AST_REAL);
      c2.setParentSBMLObject((m));
      c2.setValue(3.2);
      node.addChild(c2);
      assertTrue( node.getType() == libsbml.AST_DIVIDE );
      assertTrue( node.getNumChildren() == 2 );
      string id = node.getId();
      assertTrue( (  "s" != id ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      ASTNode child = node.getChild(0);
      assertTrue( child.getType() == libsbml.AST_NAME );
      assertTrue( child.getNumChildren() == 0 );
      id = child.getId();
      assertTrue( (  "c1" != id ) == false );
      assertTrue( child.getParentSBMLObject() == null );
      assertTrue( (  "child" != child.getName() ) == false );
      child = node.getChild(1);
      assertTrue( child.getType() == libsbml.AST_REAL );
      assertTrue( child.getNumChildren() == 0 );
      id = child.getId();
      assertTrue( (  "" != id ) == false );
      assertTrue( child.getParentSBMLObject() == (m) );
      assertEquals( true, util_isEqual );
      node.setType(libsbml.AST_FUNCTION_MAX);
      assertTrue( node.getType() == libsbml.AST_FUNCTION_MAX );
      assertTrue( node.getNumChildren() == 2 );
      id = node.getId();
      assertTrue( (  "s" != id ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      child = node.getChild(0);
      assertTrue( child.getType() == libsbml.AST_NAME );
      assertTrue( child.getNumChildren() == 0 );
      id = child.getId();
      assertTrue( (  "c1" != id ) == false );
      assertTrue( child.getParentSBMLObject() == null );
      assertTrue( (  "child" != child.getName() ) == false );
      child = node.getChild(1);
      assertTrue( child.getType() == libsbml.AST_REAL );
      assertTrue( child.getNumChildren() == 0 );
      id = child.getId();
      assertTrue( (  "" != id ) == false );
      assertTrue( child.getParentSBMLObject() == (m) );
      assertEquals( true, util_isEqual );
      node = null;
      m = null;
    }

    public void test_ASTNode_setType_4()
    {
      ASTNode node = new  ASTNode(libsbml.AST_NAME_TIME);
      Model m = new  Model(3,1);
      node.setId( "s");
      node.setName( "t");
      node.setParentSBMLObject((m));
      assertTrue( node.getType() == libsbml.AST_NAME_TIME );
      string id = node.getId();
      assertTrue( (  "s" != id ) == false );
      assertTrue( (  "t" != node.getName() ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      assertTrue( node.isConstant() == 0 );
      assertTrue( node.isName() == 1 );
      assertTrue( node.getReal() == 0 );
      string url = node.getDefinitionURLString();
      assertTrue( (                        "http://www.sbml.org/sbml/symbols/time" != url ) == false );
      node.setType(libsbml.AST_NAME_AVOGADRO);
      assertTrue( node.getType() == libsbml.AST_NAME_AVOGADRO );
      assertEquals( true, util_isEqual );
      id = node.getId();
      assertTrue( (  "s" != id ) == false );
      assertTrue( (  "t" != node.getName() ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      assertTrue( node.isConstant() == 1 );
      assertTrue( node.isName() == 1 );
      url = node.getDefinitionURLString();
      assertTrue( (                        "http://www.sbml.org/sbml/symbols/avogadro" != url ) == false );
      node = null;
      m = null;
    }

    public void test_ASTNode_setType_5()
    {
      ASTNode node = new  ASTNode(libsbml.AST_CONSTANT_PI);
      Model m = new  Model(3,1);
      node.setId( "s");
      node.setParentSBMLObject((m));
      assertTrue( node.getType() == libsbml.AST_CONSTANT_PI );
      string id = node.getId();
      assertTrue( (  "s" != id ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      assertTrue( node.isConstant() == 1 );
      assertTrue( node.getInteger() == 0 );
      node.setType(libsbml.AST_INTEGER);
      assertTrue( node.getType() == libsbml.AST_INTEGER );
      assertTrue( node.getInteger() == 0 );
      id = node.getId();
      assertTrue( (  "s" != id ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      assertTrue( node.isConstant() == 0 );
      node = null;
      m = null;
    }

    public void test_ASTNode_setType_6()
    {
      ASTNode node = new  ASTNode(libsbml.AST_NAME);
      Model m = new  Model(3,1);
      node.setId( "s");
      node.setParentSBMLObject((m));
      node.setDefinitionURLString( "my_url");
      node.setName( "t");
      assertTrue( node.getType() == libsbml.AST_NAME );
      string id = node.getId();
      assertTrue( (  "s" != id ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      assertTrue( node.isName() == 1 );
      assertTrue( (  "t" != node.getName() ) == false );
      string url = node.getDefinitionURLString();
      assertTrue( (  "my_url" != url ) == false );
      node.setType(libsbml.AST_INTEGER);
      assertTrue( node.getType() == libsbml.AST_INTEGER );
      assertTrue( node.getInteger() == 0 );
      id = node.getId();
      assertTrue( (  "s" != id ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      assertTrue( node.isName() == 0 );
      assertTrue( node.getName() == null );
      url = node.getDefinitionURLString();
      assertTrue( (  "" != url ) == false );
      node = null;
      m = null;
    }

    public void test_ASTNode_setType_7()
    {
      ASTNode node = new  ASTNode(libsbml.AST_NAME_TIME);
      Model m = new  Model(3,1);
      node.setId( "s");
      node.setName( "t");
      node.setParentSBMLObject((m));
      assertTrue( node.getType() == libsbml.AST_NAME_TIME );
      string id = node.getId();
      assertTrue( (  "s" != id ) == false );
      assertTrue( (  "t" != node.getName() ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      assertTrue( node.isName() == 1 );
      assertTrue( node.getReal() == 0 );
      string url = node.getDefinitionURLString();
      assertTrue( (                        "http://www.sbml.org/sbml/symbols/time" != url ) == false );
      node.setType(libsbml.AST_REAL);
      assertTrue( node.getType() == libsbml.AST_REAL );
      id = node.getId();
      assertTrue( (  "s" != id ) == false );
      assertTrue( node.getName() == null );
      assertTrue( node.getParentSBMLObject() == (m) );
      assertTrue( node.isName() == 0 );
      assertTrue( node.getReal() == 0 );
      url = node.getDefinitionURLString();
      assertTrue( (                        "" != url ) == false );
      node = null;
      m = null;
    }

    public void test_ASTNode_setType_8()
    {
      ASTNode node = new  ASTNode(libsbml.AST_REAL_E);
      Model m = new  Model(3,1);
      node.setId( "s");
      node.setUnits( "mole");
      node.setValue(2.3,1);
      node.setParentSBMLObject((m));
      assertTrue( node.getType() == libsbml.AST_REAL_E );
      assertTrue( node.getInteger() == 0 );
      assertEquals( true, util_isEqual );
      assertTrue( node.getExponent() == 1 );
      assertTrue( node.getDenominator() == 1 );
      assertTrue( node.getNumerator() == 0 );
      assertEquals( true, util_isEqual );
      string id = node.getId();
      string units = node.getUnits();
      assertTrue( (  "s" != id ) == false );
      assertTrue( (  "mole" != units ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      string url = node.getDefinitionURLString();
      assertTrue( (                        "" != url ) == false );
      node.setType(libsbml.AST_NAME_AVOGADRO);
      assertTrue( node.getType() == libsbml.AST_NAME_AVOGADRO );
      assertTrue( node.getInteger() == 0 );
      assertEquals( true, util_isEqual );
      assertTrue( node.getExponent() == 0 );
      assertTrue( node.getDenominator() == 1 );
      assertTrue( node.getNumerator() == 0 );
      assertEquals( true, util_isEqual );
      id = node.getId();
      units = node.getUnits();
      assertTrue( (  "s" != id ) == false );
      assertTrue( (  "" != units ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      url = node.getDefinitionURLString();
      assertTrue( (                        "http://www.sbml.org/sbml/symbols/avogadro" != url ) == false );
      node = null;
      m = null;
    }

    public void test_ASTNode_setType_9()
    {
      ASTNode node = new  ASTNode(libsbml.AST_REAL_E);
      Model m = new  Model(3,1);
      node.setId( "s");
      node.setUnits( "mole");
      node.setValue(2.3,1);
      node.setParentSBMLObject((m));
      assertTrue( node.getType() == libsbml.AST_REAL_E );
      assertTrue( node.getInteger() == 0 );
      assertEquals( true, util_isEqual );
      assertTrue( node.getExponent() == 1 );
      assertTrue( node.getDenominator() == 1 );
      assertTrue( node.getNumerator() == 0 );
      assertEquals( true, util_isEqual );
      string id = node.getId();
      string units = node.getUnits();
      assertTrue( (  "s" != id ) == false );
      assertTrue( (  "mole" != units ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      node.setType(libsbml.AST_NAME);
      assertTrue( node.getType() == libsbml.AST_NAME );
      assertTrue( node.getInteger() == 0 );
      assertTrue( node.getMantissa() == 0 );
      assertTrue( node.getExponent() == 0 );
      assertTrue( node.getDenominator() == 1 );
      assertTrue( node.getNumerator() == 0 );
      assertEquals( true, util_isEqual );
      id = node.getId();
      units = node.getUnits();
      assertTrue( (  "s" != id ) == false );
      assertTrue( (  "" != units ) == false );
      assertTrue( node.getParentSBMLObject() == (m) );
      node = null;
      m = null;
    }

    public void test_ASTNode_style()
    {
      int i;
      ASTNode n = new  ASTNode();
      i = n.setStyle( "test");
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertTrue( n.isSetStyle() == 1 );
      string style = n.getStyle();
      assertTrue((  "test" == style ));
      i = n.unsetStyle();
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertTrue( n.isSetStyle() == 0 );
      style = n.getStyle();
      assertTrue((  "" == style ));
      n = null;
    }

    public void test_ASTNode_swapChildren()
    {
      ASTNode node = new  ASTNode();
      ASTNode c1 = new  ASTNode();
      ASTNode c2 = new  ASTNode();
      ASTNode node_1 = new  ASTNode();
      ASTNode c1_1 = new  ASTNode();
      ASTNode c2_1 = new  ASTNode();
      int i = 0;
      node.setType(libsbml.AST_LOGICAL_AND);
      c1.setName( "a");
      c2.setName( "b");
      node.addChild(c1);
      node.addChild(c2);
      assertTrue( node.getNumChildren() == 2 );
      string math = libsbml.formulaToString(node);
      assertTrue((  "and(a, b)" == math ));
      node_1.setType(libsbml.AST_LOGICAL_AND);
      c1_1.setName( "d");
      c2_1.setName( "f");
      node_1.addChild(c1_1);
      node_1.addChild(c2_1);
      assertTrue( node_1.getNumChildren() == 2 );
      math = libsbml.formulaToString(node_1);
      assertTrue((  "and(d, f)" == math ));
      i = node.swapChildren(node_1);
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertTrue( node.getNumChildren() == 2 );
      math = libsbml.formulaToString(node);
      assertTrue((  "and(d, f)" == math ));
      assertTrue( node_1.getNumChildren() == 2 );
      math = libsbml.formulaToString(node_1);
      assertTrue((  "and(a, b)" == math ));
      node_1 = null;
      node = null;
    }

    public void test_ASTNode_units()
    {
      ASTNode n = new  ASTNode();
      n.setType(libsbml.AST_REAL);
      n.setValue(1.6);
      int i = n.setUnits( "mole");
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertTrue( n.isSetUnits() == true );
      string units = n.getUnits();
      assertTrue((  "mole" == units ));
      i = n.unsetUnits();
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertTrue( n.isSetUnits() == false );
      units = n.getUnits();
      assertTrue((  "" == units ));
      i = n.setUnits( "1mole");
      assertTrue( i == libsbml.LIBSBML_INVALID_ATTRIBUTE_VALUE );
      assertTrue( n.isSetUnits() == false );
      n.setType(libsbml.AST_FUNCTION);
      i = n.setUnits( "mole");
      assertTrue( i == libsbml.LIBSBML_UNEXPECTED_ATTRIBUTE );
      assertTrue( n.isSetUnits() == false );
      units = n.getUnits();
      assertTrue((  "" == units ));
      n = null;
    }

    public void test_ASTNode_userData_1()
    {
      ASTNode n = new  ASTNode();
      Model m = new  Model(3,1);
      assertTrue( n.getUserData() == null );
      assertTrue( n.isSetUserData() == 0 );
      int i = n.setUserData((m));
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertTrue( n.getUserData() != null );
      assertTrue( n.getUserData() == m );
      assertTrue( n.isSetUserData() == 1 );
      i = n.setUserData(null);
      assertTrue( i == libsbml.LIBSBML_OPERATION_SUCCESS );
      assertTrue( n.getUserData() == null );
      assertTrue( n.isSetUserData() == 0 );
      n = null;
      m = null;
    }

  }
}
